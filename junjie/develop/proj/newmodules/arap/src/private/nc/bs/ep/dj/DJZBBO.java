package nc.bs.ep.dj;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import nc.bs.arap.action.DoPayTerm;
import nc.bs.arap.action.pubactions.AfterAddAct;
import nc.bs.arap.action.pubactions.AfterEditInf;
import nc.bs.arap.action.pubactions.AfterTempEditInf;
import nc.bs.arap.action.pubactions.BeforeAddAct;
import nc.bs.arap.action.pubactions.BeforeEditInf;
import nc.bs.arap.action.pubactions.BeforeTempEditInf;
import nc.bs.arap.action.pubactions.GetSingleDjbh;
import nc.bs.arap.action.pubactions.LoanControllerAction;
import nc.bs.arap.action.validate.CheckAccountAndCurrency;
import nc.bs.arap.action.validate.CheckBbhlMoreThanZero;
import nc.bs.arap.action.validate.CheckIsTempSaveAction;
import nc.bs.arap.action.validate.CheckMngaccAndBankacc;
import nc.bs.arap.action.validate.CheckXTedBillCanBeModifyAction;
import nc.bs.arap.action.validate.CombineCheckVOAction;
import nc.bs.arap.callouter.FipCallFacade;
import nc.bs.arap.global.ArapExtInfRunBO;
import nc.bs.arap.global.ArapInvokeSettlement;
import nc.bs.arap.global.CurrencyControlBO;
import nc.bs.arap.outer.IArapPrePayPlugin;
import nc.bs.arap.util.SqlUtils;
import nc.bs.arap.verify.SystemProfile;
import nc.bs.bd.b47.PaytermDMO;
import nc.bs.framework.common.InvocationInfoProxy;
import nc.bs.framework.common.NCLocator;
import nc.bs.logging.Log;
import nc.impl.arap.proxy.IProxyCommon;
import nc.impl.arap.proxy.Proxy;
import nc.impl.arap.proxy.ProxyBill;
import nc.itf.fi.pub.Currency;
import nc.itf.fi.pub.KeyLock;
import nc.itf.fi.pub.SysInit;
import nc.vo.arap.engine.FlowEngine;
import nc.vo.arap.exception.ExceptionHandler;
import nc.vo.arap.global.ArapCommonTool;
import nc.vo.arap.global.ArapDjCalculator;
import nc.vo.arap.global.BusiTransVO;
import nc.vo.arap.global.DjCheckParamVO;
import nc.vo.arap.global.DjVOTreater;
import nc.vo.arap.global.DjVOTreaterAid;
import nc.vo.arap.global.DjVoTreaterYs;
import nc.vo.arap.global.ResMessage;
import nc.vo.arap.pub.ArapConstant;
import nc.vo.arap.verifynew.BusinessShowException;
import nc.vo.bd.b47.PaytermHeaderVO;
import nc.vo.bd.b47.PaytermItemVO;
import nc.vo.bd.b47.PaytermVO;
import nc.vo.bd.b47.PaytermchItemVO;
import nc.vo.cmpbill.outer.BugetAlarmBusinessException;
import nc.vo.dap.out.DapMsgVO;
import nc.vo.ep.dj.ArapBillMapVO;
import nc.vo.ep.dj.DJFBVO;
import nc.vo.ep.dj.DJZBHeaderVO;
import nc.vo.ep.dj.DJZBItemVO;
import nc.vo.ep.dj.DJZBVO;
import nc.vo.ep.dj.DJZBVOConsts;
import nc.vo.ep.dj.DJZBVOTreator;
import nc.vo.ep.dj.DefdefVO;
import nc.vo.ep.dj.DjCondVO;
import nc.vo.ep.dj.DjfkxybVO;
import nc.vo.ep.dj.IFTSReceiverVO;
import nc.vo.ml.NCLangRes4VoTransl;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.pu.RelationsCalVO;

/**
 * DJZB的BO类
 *
 * 创建日期：(2001-5-31)
 *
 * @author：
 */
public class DJZBBO {
	public static Long t1 = 0L;
	private DJZBDAO dmo = new DJZBDAO();
	private ArapInvokeSettlement invokeSettle=new ArapInvokeSettlement();
	/** 收付款协议BO */

	/**
	 * DJZBBO 构造子注解。
	 */
	public DJZBBO() {
		super();
	}

	
	private void saveValidate(DJZBVO djzbvo) throws BusinessException{
		CheckBbhlMoreThanZero BbhlMoreThanZero = new CheckBbhlMoreThanZero();
		BbhlMoreThanZero.BbhlMoreThanZero(djzbvo);
		CheckMngaccAndBankacc checkMngaccAndBankacc=new CheckMngaccAndBankacc();
		checkMngaccAndBankacc.checkMngaccAndBankacc(djzbvo);
		CheckXTedBillCanBeModifyAction checkXTedBillCanBeModifyAction=new CheckXTedBillCanBeModifyAction();
		checkXTedBillCanBeModifyAction.checkXtedBillCanBeModifyAction(djzbvo);
		CombineCheckVOAction combineCheckVOAction=new CombineCheckVOAction();
		combineCheckVOAction.combineCheckVO(djzbvo, null);
		CheckIsTempSaveAction checkIsTempSaveAction=new CheckIsTempSaveAction();
		checkIsTempSaveAction.isTempSave(djzbvo, null);
	}
	/**
	 * 取单据号 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
	public DJZBVO afterDelInf(nc.vo.arap.global.BusiTransVO[] busitransvos, DJZBVO dJZB) throws BusinessException {

		if (busitransvos != null) {
			for (int i = 0; i < busitransvos.length; i++) {
				try {
					((nc.bs.arap.outer.ArapPubDelInterface) busitransvos[i].getInfClass()).afterDelAct(dJZB);
				} catch (Exception e) {
					Log.getInstance(this.getClass()).error(e.getMessage(), e);
					Log.getInstance(this.getClass()).info(
							busitransvos[i].getSystemname() + busitransvos[i].getNote() + "\n" + e);
					String strerr = busitransvos[i].getUsesystemname() + busitransvos[i].getNote() + "\n"
							+ e.getMessage();
					throw new BusinessShowException(strerr);
				}
			}
		}
		return dJZB;
	}

	/**
	 * 批审核单据 创建日期：(2001-9-3 17:31:51)
	 *
	 * @return java.lang.String[]
	 * @param djs
	 *            nc.vo.ep.dj.DJZBVO[] 2、账户余额控制： ü
	 *            包含账户的收款单、付款单、收款结算单、付款结算单、划账结算单、对外收款结算单、对外付款结算单
	 *            在审核点维护账户档案的当前余额字段且进行账户赤字控制。 如果没有与单据币种相同的账户则审核失败 N
	 *            账户余额≤账户赤字额度时为合法. N 账户余额>账户赤字额度时取账户档案的账户赤字控制方式： J
	 *            控制方式为提示信息时，则出提示信息，仍可审核。 J 控制方式为限制操作时，则出提示信息且不能进行审核。 J
	 *            控制方式为授权管理时，判断当前登录人是否是账户赤字授权控制人，是则出提示信息且能够审核；否则出提示信息且不能审核。
	 *
	 * 账户当前余额 借方-,贷方+
	 * res.intvalue=9999说明需要授权,res.intvalue=1通过授权,res.intvalue=2说明审核成功 作者 ：陈飞
	 */
	public nc.vo.arap.global.ResMessage[] auditABills2(nc.vo.ep.dj.DJZBVO[] djs) throws BusinessException {

		if (djs == null || djs.length < 1)
			return null;
		nc.vo.arap.global.ResMessage[] res = new nc.vo.arap.global.ResMessage[djs.length];
		nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
		nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("shenhe", ((DJZBHeaderVO) djs[0]
				.getParentVO()).getPzglh());
		DJZBHeaderVO head = null;
		DJZBHeaderVO[] heads = null;
		nc.vo.ep.dj.DJZBVO[] dj_2 = new nc.vo.ep.dj.DJZBVO[djs.length], dj_temp = null;
		Vector<CircularlyAccessibleValueObject> v = new Vector<CircularlyAccessibleValueObject>();
		for (int i = 0, j = 0; i < djs.length; i++) {
			if (djs[i].getChildrenVO() == null)
				v.addElement(djs[i].getParentVO());
			else {
				dj_2[j] = djs[i];
				j++;
			}

		}
		try {
			if (v.size() > 0) {
				heads = new DJZBHeaderVO[v.size()];
           try{
               v.copyInto(heads);
               DJZBDAO dmo = new DJZBDAO();
               dj_temp = dmo .getDjVObyHeaderVos(heads);
               System.arraycopy(dj_temp, 0, dj_2, dj_2.length-v.size(), v.size());
              }catch(Exception e)
                {
            	throw ExceptionHandler.handleException(this.getClass(), e);
                }
         }

        ArapDjBsCheckerBO djchecker = new ArapDjBsCheckerBO();
        try{//批量补充单据信息，减少查询次数
            djchecker.supplementAllInfos(dj_2);
        }catch(Exception e){

            throw ExceptionHandler.handleException(this.getClass(),e);
        }
			try {
				res = djchecker.checkApproveBills(dj_2);
			} catch (Exception e) {
            throw ExceptionHandler.handleException(this.getClass(), e);
			}
			for (int i = 0; i < dj_2.length; i++) {
				head = (DJZBHeaderVO) dj_2[i].getParentVO();

				try {
					lockDJ(head.getVouchid());
					if (res[i] == null) {

						res[i] = ProxyBill.getInstance().getIArapBillPrivate().auditABills_RequiresNew(dj_2[i], busitransvos);
					}
					// applaybillbo.remove();
                if (res[i].isSuccess)
                    res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000511")/*@res "审核单据成功，单据编号："*/ + head.getDjbh() + res[i].strMessage;
                else
                    res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000512")/*@res "审核单据失败，单据编号："*/ + head.getDjbh() + res[i].strMessage;

				} catch (Exception e) {
            	ExceptionHandler.consume(e);
					if (res[i] == null)
						res[i] = new nc.vo.arap.global.ResMessage();
					res[i].isSuccess = false;
					res[i].strMessage = e.getMessage();
                res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000513")/*@res "审核单据失败，单据号："*/ + head.getDjbh() + res[i].strMessage;
					// + "\n"
					// + e.getMessage();

				}
				res[i].listIndex = head.listIndex;// dj_2[i].listIndex;
				res[i].vouchid = head.getVouchid();// dj_2[i].vouchid;

			}
		} catch (Exception e) {
			Log.getInstance(this.getClass()).error(e.getMessage(), e);
			throw new BusinessShowException(e.getMessage(), e);

		}
		/* 清除后台补充的单据表体行数据，减少网络流量。 */
		// by songtao 此处存在数据类型转换异常，请仔细检查！！！ 2006-09-28
		// try{
		// if(v!=null){
		// for(int i=0;i<v.size();i++){
		// ((DJZBVO)v.elementAt(i)).setChildrenVO(null);
		// }
		// }
		// }catch(Exception e){
		// Log.getInstance(this.getClass()).error(e.getMessage(),e);
		// throw new BusinessException(e.getMessage(),e);
		// }
    ExceptionHandler.debug("批审核返回...");
		return res;
	}

	/**
	 * 取单据号 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
private DJZBVO afterTempDelInf(
    nc.vo.arap.global.BusiTransVO[] busitransvos,
    DJZBVO dJZB)
    throws BusinessException {

    if (busitransvos != null) {
        for (int i = 0; i < busitransvos.length; i++) {
            try {
                ((nc.bs.arap.outer.ArapPubDelTemporarilyInterface) busitransvos[i]
                        .getInfClass())
                        .afterDelTemporarilyAct(
                     dJZB);
            } catch(ClassNotFoundException e)
			{
            	ExceptionHandler.consume(e);
			}
            catch (Exception e) {
            	ExceptionHandler.consume(e);
				String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
				throw  	ExceptionHandler.createException(strerr,e);

            }
        }
    }
    return dJZB;
}
private DJZBVO beforeTempDelInf(
    nc.vo.arap.global.BusiTransVO[] busitransvos,
    DJZBVO dJZB)
    throws BusinessException {

    if (busitransvos != null) {
        for (int i = 0; i < busitransvos.length; i++) {
            try {
                ((nc.bs.arap.outer.ArapPubDelTemporarilyInterface) busitransvos[i]
                        .getInfClass())
                        .beforeDelTemporarilyAct(
                     dJZB);
            } catch(ClassNotFoundException e)
			{
            	ExceptionHandler.consume(e);
			}
            catch (Exception e) {
            	ExceptionHandler.consume(e);
				String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
				throw  	ExceptionHandler.createException(strerr,e);

            }
        }
    }
    return dJZB;
}
/**
 * 取单据号
 * 作者：陈飞
 * @version 最后修改日期
 * @see 需要参见的其它类
 * @return nc.vo.ep.dj.DJZBHeaderVO[]
 */
private DJZBVO beforeTempAddInf(
    nc.vo.arap.global.BusiTransVO[] busitransvos,
    DJZBVO dJZB)
    throws BusinessException {

    if (busitransvos != null) {
        for (int i = 0; i < busitransvos.length; i++) {
            try {
                ((nc.bs.arap.outer.ArapPubAddTemporarilyInterface) busitransvos[i]
                        .getInfClass())
                        .beforeAddTemporarilyAct(
                     dJZB);
            } catch(ClassNotFoundException e)
			{
            	ExceptionHandler.consume(e);
			}
            catch (Exception e) {
            	ExceptionHandler.consume(e);
				String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
				throw  	ExceptionHandler.createException(strerr,e);

            }
        }
    }
    return dJZB;
}
private DJZBVO afterTempAddInf(
	    nc.vo.arap.global.BusiTransVO[] busitransvos,
	    DJZBVO dJZB)
	    throws BusinessException {

	    if (busitransvos != null) {
	        for (int i = 0; i < busitransvos.length; i++) {
	            try {
	                ((nc.bs.arap.outer.ArapPubAddTemporarilyInterface) busitransvos[i]
	                        .getInfClass())
	                        .afterAddTemporarilyAct(
	                     dJZB);
	            } catch(ClassNotFoundException e)
				{
	            	ExceptionHandler.consume(e);
				}
	            catch (Exception e) {
	            	ExceptionHandler.consume(e);
					String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
					throw  	ExceptionHandler.createException(strerr,e);

	            }
	        }
	    }
	    return dJZB;
	}

	/**
	 * 取单据号 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
public DJZBVO beforeDelInf(
    nc.vo.arap.global.BusiTransVO[] busitransvos,
    DJZBVO dJZB)
    throws BusinessException {

    if (busitransvos != null) {
        for (int i = 0; i < busitransvos.length; i++) {
            try {
                ((nc.bs.arap.outer.ArapPubDelInterface) busitransvos[i]
                        .getInfClass())
                        .beforeDelAct(
                    dJZB);
            } catch(ClassNotFoundException e)
			{
            	ExceptionHandler.consume(e);
			}
            catch (Exception e) {
            	ExceptionHandler.consume(e);
				String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
				throw  	ExceptionHandler.createException(strerr,e);

            }
        }
    }
    return dJZB;
}

	/**
	 * 取消关闭事项审批单
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String cancel_CloseDj_SS(DJZBVO vo) throws BusinessException {
		String ts = null;
		try {
			vo.m_isClose = true;
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			lockDJ(head.getVouchid());

			DJZBDAO dmo = new DJZBDAO();

			DJZBItemVO[] items = vo.getChildrenVO() == null ? null : (DJZBItemVO[]) vo.getChildrenVO();

			if (items == null) {

				items = dmo.findItemsForHeader_SS(head.getPrimaryKey());

				vo.setChildrenVO(items);
			}
			ApplayBillBO aBo = new ApplayBillBO();
			aBo.isDistributes(vo);
			head.setTs(new nc.vo.pub.lang.UFDateTime(dmo.getTsByPrimaryKey(head.getVouchid(), "arap_item")));
			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("add", head.getPzglh());
			new BeforeAddAct().beforeAddInf(busitransvos, vo);
        ExceptionHandler.debug("外接口新增单据前动作前所用时间:" + (System.currentTimeMillis() - t1));
			long t2 = System.currentTimeMillis();
			new AfterAddAct().afterAddInf(busitransvos, vo);
        ExceptionHandler.debug("外接口新增单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

			dmo.cancel_Close_SS(vo);
			ts = ((DJZBHeaderVO) vo.getParentVO()).getts().toString();// dmo.getTsByPrimaryKey(head.getVouchid(),
			// tablename);

			// clear the closer and closedate fields in child table
			for (int i = 0; i < items.length; i++) {
				items[i].setClosedate(null);
				items[i].setCloser(null);
				dmo.cancel_Close_SSItem(items[i]);
			}
			vo.m_isClose = false;
		} catch (Exception e) {

  	    vo.m_isClose = false;

        throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return ts;
	}

	/**
	 * author:wangqiang create time: 2004-08-06 function : unclose part of the
	 * items of a proceeding bill
	 *
	 * @param vo:only
	 *            the items to be opened are contained in this vo note that not
	 *            always all items are contained in the vo
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String cancel_CloseDj_SSItem(DJZBVO vo, boolean bBillOpenNeeded) throws BusinessException {
		String ts = null;
		try {
			vo.m_isClose = true;
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			DJZBDAO dmo = new DJZBDAO();
			lockDJ(head.getVouchid());

			DJZBItemVO[] items = (DJZBItemVO[]) vo.getChildrenVO();

			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();

			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("add", head.getPzglh());
			new BeforeAddAct().beforeAddInf(busitransvos, vo);
        ExceptionHandler.debug("外接口新增单据前动作前所用时间:" + (System.currentTimeMillis() - t1));

			long t2 = System.currentTimeMillis();
			new AfterAddAct().afterAddInf(busitransvos, vo);
        ExceptionHandler.debug("外接口新增单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

			if (bBillOpenNeeded) {
				dmo.cancel_Close_SS(vo);
				ts = ((DJZBHeaderVO) vo.getParentVO()).getts().toString();
			} else {
				ts = dmo.distributeDjzb_Item(head.getVouchid(), head.getts().toString(), head.getDjdl());
			}
			for (int i = 0; i < items.length; i++) {
				items[i].setClosedate(null);
				items[i].setCloser(null);
				dmo.cancel_Close_SSItem(items[i]);
			}
			vo.m_isClose = false;
		} catch (Exception e) {

        vo.m_isClose = false;
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBO::cancel_CloseDj_SSItem(vo) Exception!", e);
        throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return ts;
	}



	/**
	 * 关闭事项审批单
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	/**
	 * modification outline 1.create a new DJZBVO,say,voForYuSuan;and set the
	 * headVO of the original DJZBVO to voForYuSuan 2.filter out the DJZBItemVOs
	 * which is still open,and set them to voForYuSuan as Children VOs 3.call
	 * the interface with YuSuan,the only difference with the old code is pass
	 * voForYuSuan to the interface, but not old "vo" 4.update the "closer" and
	 * "closedate" column of the arap_item_b table should considerate carefully
	 * about the occasion of excuting above operation not necessarily the last
	 * step
	 */
	public String closeDj_SS(DJZBVO vo) throws BusinessException {
		DJZBVO djzbvoWithOpenItem = null;
		try {
			vo.m_isClose = true;
			DJZBDAO dmo = new DJZBDAO();
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			lockDJ(head.getVouchid());

			// if(!KeyLock.lockKey(head.getVouchid(), head.getEnduser(), null)){
			// throw new
			// BusinessException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000016"));
			// }
			DJZBItemVO[] items = vo.getChildrenVO() == null ? null : (DJZBItemVO[]) vo.getChildrenVO();

			if (items == null) {
				items = dmo.findItemsForHeader_SS(head.getPrimaryKey());
				vo.setChildrenVO(items);
			}
			// call the assistant method,to create a new vo contains only the
			// open items,wangqiang
			// note:method below also set the "close" and "closedate" field of
			// the itemvo according to the headerVO
			djzbvoWithOpenItem = this.filterSSDJZBVOWithOpenItem(vo);
			djzbvoWithOpenItem.m_isClose = true;
			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("del", head.getPzglh());

			beforeDelInf(busitransvos, djzbvoWithOpenItem);

        ExceptionHandler.debug("外接口删除单据前动作前所用时间:" + (System.currentTimeMillis() - t1));
			long t2 = System.currentTimeMillis();
			ApplayBillBO aBo = new ApplayBillBO();
			aBo.isDistributes(djzbvoWithOpenItem);
			head.setTs(new nc.vo.pub.lang.UFDateTime(dmo.getTsByPrimaryKey(head.getVouchid(), "arap_item")));

			afterDelInf(busitransvos, djzbvoWithOpenItem);
        ExceptionHandler.debug("外接口删除单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

			dmo.close_SS(djzbvoWithOpenItem);
			// close all the open item
			DJZBItemVO[] openItems = (DJZBItemVO[]) djzbvoWithOpenItem.getChildrenVO();
			dmo.close_SSItem(openItems);
			vo.m_isClose = false;
			djzbvoWithOpenItem.m_isClose = false;
			return head.getts().toString();
		} catch (Exception e) {
        vo.m_isClose = false;
        if (djzbvoWithOpenItem != null)
            djzbvoWithOpenItem.m_isClose = false;
        throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}

//	public DJZBVO[] queryDJZBVOBySSPk(String sspk) throws BusinessException {
//		DJZBDAO dmo = new DJZBDAO();
//		String[] pks;
//		try {
//			pks = dmo.getDjPksBySSPk(sspk);
//		} catch (DbException e) {
//		// TODO Auto-generated catch block
//		throw ExceptionHandler.handleException(this.getClass(), e);
//		}
//		if (null == pks || pks.length == 0)
//			return null;
//		return this.findByPrimaryKeys(pks);
//	}

	/**
	 * author:wangqiang create time: 2004-08-06 function : close part of the
	 * items of the proceeding bill close the whole bill,if necessary
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param vo:
	 *            djzbvo that hold all the items to close
	 * @param bCloseBill :
	 *            whether the whole bill need to be close
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String closeDj_SSItem(DJZBVO vo, boolean bCloseBill) throws BusinessException {
		String ts = null;
		try {
			vo.m_isClose = true;
			DJZBDAO dmo = new DJZBDAO();
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			// item vos array could not be null
			DJZBItemVO[] items = (DJZBItemVO[]) vo.getChildrenVO();
			lockDJ(head.getVouchid());

			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("del", head.getPzglh());
			// pass the new djzb vo that only contains the open items,instead
			// the old vo,wangqiang
			beforeDelInf(busitransvos, vo);

        ExceptionHandler.debug("外接口删除单据前动作前所用时间:" + (System.currentTimeMillis() - t1));

			long t2 = System.currentTimeMillis();

			afterDelInf(busitransvos, vo);
        ExceptionHandler.debug("外接口删除单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

			// close all the open item(items selected by user in fact)
			dmo.close_SSItem(items);
			// if bCloseBill==true,then all the items have been closed
			// ,therefore the whole bill should be also closed
			if (bCloseBill == true) {
				dmo.close_SS(vo);
				ts = ((DJZBHeaderVO) vo.getParentVO()).getts().toString();
			} else {
				ts = dmo.distributeDjzb_Item(head.getVouchid(), head.getts().toString(), head.getDjdl());
			}
			vo.m_isClose = false;
		} catch (Exception e) {
        vo.m_isClose = false;
        throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return ts;
	}


	public void deleteDjByPk(String[] ids) throws BusinessException {

		DJZBDAO dmo = new DJZBDAO();
		if (null == ids)
			return;
		for (String id : ids) {
			lockDJ(id);
		}

		dmo.deleteDjByPks(ids);
		Proxy.getIPFxxEJBService().deleteIDvsPKsByDocPKs(ids);
	}

	public DJZBVO updateDj(DJZBVO vo) throws BusinessException {
		return this.editDj(vo);
	}

	/**
	 * 根据主键在数据库中删除一个VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO deleteDj(DJZBVO vo) throws BusinessException {
		
//		校验
		befDelCheckVo(vo);

			DJZBDAO dmo = new DJZBDAO();
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			lockDJ(head.getVouchid());
			List<String> fbpks = new ArrayList<String>();
			DJZBItemVO[] items = null;
			//得到单据的来源单据pk lumzh 2012-08-20
			List<String> ddlxpks=new ArrayList<String>();
			try {
				AdjustBillInf info = new AdjustBillInf();
				UFBoolean flag = info.getAdjustbill_Delete(vo);
				if(null != flag && !flag.booleanValue()){
					throw ExceptionHandler.createException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-v55-000042")/*@res "单据已经生成调整单不允许删除，操作失败！"*/);
				}
			} catch (Exception e1) {
				throw ExceptionHandler.handleException(this.getClass(), e1);
			}
//			head.setDjzt(DJZBVOConsts.m_intDJStatus_Unconfirmed);
			if (vo.getChildrenVO() != null)

				items = (DJZBItemVO[]) vo.getChildrenVO();
			else {
				try {

					if (head.getPzglh().intValue() == 3 || head.getDjdl().equals("ss"))
						items = dmo.findItemsForHeader_SS(head.getPrimaryKey());
					else
						items = dmo.findItemsForHeader(head.getPrimaryKey());
				} catch (Exception e) {
            	throw ExceptionHandler.handleException(this.getClass(), e);
				}
				vo.setChildrenVO(items);
			}
			for (DJZBItemVO item : items) {
				if (null != item.getDdhh() && item.getDdhh().length() > 0)
					fbpks.add(item.getDdhh());
				if(null !=items[0].getDdlx() && items[0].getDdlx().length()>0){
					ddlxpks.add(items[0].getDdlx());
				}
			}
			// 并发控制
			ApplayBillBO aBo = new ApplayBillBO();
			aBo.isDistributes(vo);
        try{
        	vo.setParam_Ext_Save();
        }catch(Exception e)
        {
        	throw ExceptionHandler.handleException(this.getClass(), e);
        }
			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = null;
     try{
			if (((DJZBHeaderVO) vo.getParentVO()).getDjzt().intValue() != DJZBVOConsts.m_intDJStatus_Unconfirmed) {
				busitransvos = extbo.initBusiTrans("del", head.getPzglh());
				// if(!ZGFLAG.equals(head.getZgyf())){
				beforeDelInf(busitransvos, vo);
				// }
			}
         ExceptionHandler.debug("外接口删除单据前动作前所用时间:" + (System.currentTimeMillis() - t1));
       }catch(Exception e)
       {
    	   throw ExceptionHandler.handleException(this.getClass(), e);
       }
		if (head.getDjdl().equals("ss")) {
	           try{
	        	   dmo.delete_SS(vo);
	           }catch(Exception e)
	           {
	        	   throw ExceptionHandler.handleException(this.getClass(), e);
	           }
		} else {
        	 try{
				if (head.getQcbz() != null && head.getQcbz().booleanValue()) {
	            	NCLocator.getInstance().lookup(nc.itf.arap.balance.IArapBalanceUpdate.class).updateForBillUnEff(new DJZBVO[]{vo});
					if (head.getSxbz().intValue() == DJZBVOConsts.m_intSXBZ_VALID) {
						aBo.sendMessage_del(vo);
					}
				}
				if (((DJZBHeaderVO) vo.getParentVO()).getDjzt().intValue() != DJZBVOConsts.m_intDJStatus_Unconfirmed) {
					// 事项审批单据余额维护
					if ("0".equals(head.getSsflag())) {

						lock_item_bill(items, head.getLrr(), 1);
						Proxy.getIItemConfigPrivatee().unShenHe((DJZBVO) vo.clone(), false);
					}
					// 删除协同单据
					this.deleteXTBill(head.getVouchid());
					 dmo.updateXtFlag(fbpks, null);
					//lumzh 2012-08-20 回写运输单是否已暂估的状态。
					dmo.updateDmFlag(ddlxpks,head.getZgyf());
					for (int i = 0; i < items.length; i++) {
						if (items[i].getTbbh() != null && items[i].getTbbh().trim().length() > 0) {
	                    throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000358")/*@res "单据已经生成托收单,不能删除"*/);
						}
					}
					coopeerateUpdateOriginBillByRedBill(vo, true);
				}
				if(null != head.getSpecflag() && head.getSpecflag() == 1){
					dmo.updateSourceBillIsReded(items[0].getDdlx());
				}
				dmo.delete(vo);
				Proxy.getIWorkflowMachine().deleteCheckFlow(head.getDjlxbm(), head.getVouchid(), head.getShr(), true);
				if (((DJZBHeaderVO) vo.getParentVO()).getDjzt().intValue() == DJZBVOConsts.m_intDJStatus_Unconfirmed) {
					int djzt=head.getDjzt();
					head.setDjzt(null);
					invokeSettle.invokeCmp(vo,head.getDjrq());
					head.setDjzt(djzt);
					return vo;
				}
          }catch(Exception e)
          {
        	  throw ExceptionHandler.handleException(this.getClass(), e);
          }
		}
			long t2 = System.currentTimeMillis();
			if (((DJZBHeaderVO) vo.getParentVO()).getDjzt().intValue() != DJZBVOConsts.m_intDJStatus_Unconfirmed) {
				afterDelInf(busitransvos, vo);
			}
			int djzt=head.getDjzt();
			head.setDjzt(null);
			invokeSettle.invokeCmp(vo,head.getDjrq());
			head.setDjzt(djzt);
			ExceptionHandler.debug("外接口删除单据动作后所用时间:" + (System.currentTimeMillis() - t2));
			Proxy.getIPFxxEJBService().deleteIDvsPKByDocPK(head.getVouchid());
			returnBillCode(vo, false);
		return vo;
	}

	public DJZBHeaderVO[] queryHead(String key) throws BusinessException {
		DJZBDAO dmo;
		try {
			dmo = new DJZBDAO();
			return dmo.queryHead(key);
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	public DjVOTreater getM_treater(DJZBVO djzbvo) {
		String strDjdl = ((DJZBHeaderVO) djzbvo.getParentVO()).getDjdl();
		Log.getInstance(this.getClass()).debug(
		"******set pzglh*****" + ((DJZBHeaderVO) djzbvo.getParentVO()).getPzglh());
		DjVOTreater m_treater = null;
		if ("ys".equals(strDjdl) || "yf".equals(strDjdl) || "sk".equals(strDjdl) || "fk".equals(strDjdl)) {
			if (!(m_treater instanceof DjVoTreaterYs))
				m_treater = new DjVoTreaterYs(djzbvo, (IProxyCommon)ProxyBill.getInstance());
		}
		
		if (m_treater == null)
			m_treater = new DjVoTreaterYs(djzbvo, (IProxyCommon)ProxyBill.getInstance());
		return m_treater;
	}
	
	private void befDelCheckVo(nc.vo.ep.dj.DJZBVO djzbvo) throws BusinessException {
		DJZBHeaderVO head=(DJZBHeaderVO)djzbvo.getParentVO();
		if (head.getQcbz()!=null&&head.getQcbz().booleanValue()) {
		Object val = ((IProxyCommon)ProxyBill.getInstance()).getAttrValue(
		new Object[] { "ARAP_ISQCCLOSE",
		head.getDwbm(),
		head.getLybz() });
		if (null != val && "Y".equalsIgnoreCase(val.toString().trim())) {
		Log.getInstance(this.getClass()).debug(
				NCLangRes4VoTransl.getNCLangRes().getStrByID("2008",
		"UPP2008-000099"));
		throw new BusinessShowException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("businessbill","UPPbusinessbill-000210")/*@res "期初已经关闭不允许删除"*/);
		}
		}
		DjCheckParamVO paramvo=new DjCheckParamVO();
		paramvo.setCurUser(InvocationInfoProxy.getInstance().getUserCode());
		ResMessage resmessage = this.getM_treater(djzbvo)
		.befDelCheckVo(djzbvo,paramvo);
		if (!resmessage.isSuccess) {
		throw new BusinessException(resmessage.strMessage);
		}
	}
	
	/**
	 * 根据主键在数据库中删除一个VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO deleteTempDj(DJZBVO vo) throws BusinessException {
		try {
//			校验
			befDelCheckVo(vo);
			
			DJZBDAO dmo = new DJZBDAO();
			DJZBHeaderVO head = (DJZBHeaderVO) (vo.getParentVO());
			lockDJ(head.getVouchid());
			DJZBItemVO[] items = null;
			if (vo.getChildrenVO() != null)
				items = (DJZBItemVO[]) vo.getChildrenVO();
			else {
				// 查询单据表体
				try {
					items = dmo.findItemsForHeader(head.getPrimaryKey());
				} catch (Exception e) {
            	throw ExceptionHandler.handleException(this.getClass(), e);
				}
				vo.setChildrenVO(items);
			}
			// List<String> fbpks=new ArrayList<String>();
			// for(DJZBItemVO item:items){
			// if(null!=item.getDdhh()&&item.getDdhh().length()>0)
			// fbpks.add(item.getDdhh());
			// }
			// 并发控制
			ApplayBillBO aBo = new ApplayBillBO();
			aBo.isDistributes(vo);
			// 外接口新增单据前动作
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = null;
			busitransvos = extbo.initBusiTrans("deltemp", head.getPzglh());
			this.beforeTempDelInf(busitransvos, vo);
			dmo.delete(vo);
			// dmo.updateXtFlag(fbpks, null);

			// aBo.unLockBill(vo);
			// returnBillCode(vo,false);
			this.afterTempDelInf(busitransvos, vo);
			int djzt=head.getDjzt();
			head.setDjzt(null);
			invokeSettle.invokeCmp(vo,head.getDjrq());
			head.setDjzt(djzt);
		} catch (Exception e) {
//    	ExceptionHandler.handleException(this.getClass(), e);
//        throw ExceptionHandler.createException("DJZBBO::deleteTempDj(DJZBPK) Exception!", e);
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return vo;
	}

	/**
	 * : 主要算法： 注意： 创建日期：(2001-11-16 14:49:26)
	 *
	 * @param id
	 *            java.lang.String
	 */
	public void deleteOutBill(String[] ids, String cOperator) throws BusinessException {
		for (int i = 0; i < ids.length; i++) {
			deleteOutBill(ids[i]);
		}

	}

	/**
	 * 根据where片断删除外系统单据
	 */
	public void deleteOutBillbyWhere(String whereString) throws BusinessException {


			DJZBVO dj = new DJZBVO();
			DJZBDAO djzb = new DJZBDAO();
		DJZBHeaderVO[] headers;
		try{
		 headers = djzb.queryHead(whereString);
		}catch(Exception e)
		{
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
			if (headers == null || headers.length == 0) {
				String sql=whereString;
				djzb.checkDataRemove(sql);
			} else {

					for (int i = 0; i < headers.length; i++) {
						headers[i].m_isOtherOpration = true;
			      try{

			    	  if(headers[i].getDjzt().intValue()>1){
							//应该提示：收付单据已经审核，不能删除
							throw ExceptionHandler.createException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-v55-000043")/*@res "存在已审核的下游单据,"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000516")/*@res "，"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000517"))/*@res "不能删除!"*/;
						}else if((headers[i].getDjzt().intValue()==1||DJZBVOConsts.m_intDJStatus_TempSaved==headers[i].getDjzt().intValue()) && headers[i].getLybz().intValue()==9){
						    throw ExceptionHandler.createException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-v55-000044")/*@res "存在已保存的下游单据,"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000516")/*@res "，"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000517"))/*@res "不能删除!"*/;
						}else if(headers[i].getSpzt()!= null && headers[i].getSpzt().equalsIgnoreCase(DJZBVOConsts.m_strStatusVerifying)){
							throw ExceptionHandler.createException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-v55-000045")/*@res "存在审批中的下游单据,"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000516")/*@res "，"*/+NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000517"))/*@res "不能删除!"*/;
						}
						// ARAPDjBSUtil.supplementSSFlag(headers[i]);
						dj = new DJZBVO();
						dj.setParentVO(headers[i]);
						dj.setChildrenVO(djzb.findItemsForHeader(headers[i].getVouchid()));
			      }catch(Exception e)
			      {
			    	  throw ExceptionHandler.handleException(this.getClass(), e);
			      }
						try {
							// if(((DJZBHeaderVO)djzbvo.getParentVO()).getLybz().intValue()!=0){
							dj.setParam_Ext_Save();
							// }
						} catch (Exception e) {
//				        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//				        throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.saveDj(DJZBVO) setParam_Ext_Save:"+e);
				    	throw ExceptionHandler.handleException(this.getClass(), e);
						}
						nc.bs.pub.pf.PfUtilBO pfbo = new nc.bs.pub.pf.PfUtilBO();
						try {
							pfbo.processAction("DELETE", headers[i].getDjlxbm(), headers[i].getDjrq().toString(), null, dj, null);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							throw ExceptionHandler.handleException(this.getClass(), e);
						}

						// 删除消息
						// pfb.deleteCheckFlow(headers[i].getDjlxbm(),headers[i].getVouchid(),null);
					}
				}
			}

/**
 * :
 * 主要算法：
 * 注意：
 * 创建日期：(2001-11-16 14:49:26)
 * @param id java.lang.String
 */
	public void deleteXtBill(String[] ids) throws BusinessException {
		if(null==ids||ids.length==0)return ;
		String whereString;
		try {
			whereString = "   where  exists (select vouchid from arap_djfb  where  zb.vouchid = arap_djfb.vouchid and arap_djfb.dr=0 and " +
			 SqlUtils.getInStr("arap_djfb.ddhh", ids)+
						" ) and  zb.lybz=9 and zb.dr=0 ";
			deleteOutBillbyWhere(whereString);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw ExceptionHandler.handleException(this.getClass(), e);
		}


}


	/**
	 * : 主要算法： 注意： 创建日期：(2001-11-16 14:49:26)
	 *
	 * @param id
	 *            java.lang.String
	 */
	public void deleteOutBillandfb(String id, String fboid) throws BusinessException {

        ExceptionHandler.debug("ddlx is :" +id);
		String whereString = "  ,arap_djfb where  zb.vouchid = arap_djfb.vouchid and arap_djfb.ddlx = '" + id.trim()
				+ "' and arap_djfb.ddhh = '" + fboid.trim() + "' and arap_djfb.dr=0  and zb.dr=0";
		deleteOutBillbyWhere(whereString);
	}

	/**
	 * 删除自由项 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djfbitemvo
	 *            nc.vo.ep.dj.DJFBItemVO
	 */
	public String deleteZyx(DJFBVO djfbvo) throws BusinessException {
		try {
			DJFBDAO dmo = new DJFBDAO();
			/** 只删辅表，不删主表 */
			dmo.delete(djfbvo);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBO::delete(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return "";
	}

//	private boolean isSFKUpdated(DJZBItemVO item) {
//		List<String> lst = new ArrayList<String>();
//		String[] attrs = item.getM_strChangedAtts();
//		if (null == attrs)
//			return true;
//		for (int i = 0, size = attrs.length; i < size; i++)
//			lst.add(attrs[i]);
//		if (lst.contains("sfkxyh"))
//			return true;
//		else if (null != item.getIsSFKXYChanged()
//				&& item.getIsSFKXYChanged().booleanValue()
//				&& (lst.contains("effectdate") || lst.contains("bbhl") || lst.contains("fbhl")
//						|| lst.contains("jfybje") || lst.contains("dfybje") || lst.contains("jfshl") || lst
//						.contains("dfshl"))) {
//			return true;
//		}
//		return false;
//	}

	/**
	 * 单据修改保存 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public DJZBVO editDj(DJZBVO slimDJZBVO) throws BusinessException {
//		Object nn=nc.bs.framework.server.util.NewObjectService.newInstance("scmpub","nc.bs.scm.upgrade.Upgrade");
//		System.out.println("test:"+nn.toString());
//		return (DJZBVO) new FlowEngine().startService("EditDj_pri", slimDJZBVO);
			/****************************************************************************
			 * 恢复参数“slimDJZBVO”，参考DJZBVO.revertDJZBVO.
			 * added by wangyan in 2005-7-20
			 ****************************************************************************/
			DJZBVO djzbvo = slimDJZBVO;
			DJZBVO oldDZJBVO=djzbvo.getm_OldVO();
			if(DJZBHeaderVO.SLIMED .equalsIgnoreCase(((DJZBHeaderVO)slimDJZBVO.getParentVO()).getIsSlim())){
				try {
					if (null == slimDJZBVO || null == slimDJZBVO.getParentVO() || null == slimDJZBVO.getParentVO().getPrimaryKey()) {
//						throw new BusinessShowException(	"nc.bs.ep.dj.DJZBBO.editDj(DJZBVO) editDj:");
						throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.editDj(DJZBVO) editDj:");
					}
						oldDZJBVO = findByPrimaryKey(slimDJZBVO.getParentVO() .getPrimaryKey());
				} catch (Exception e) {
//					Log.getInstance(this.getClass()).error(e.getMessage(),e);
//					throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.editDj(DJZBVO) editDj:" + e);
					throw ExceptionHandler.handleException(this.getClass(), e);
				}
				if(null==oldDZJBVO)
				{
					throw ExceptionHandler.createException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("2006030102","UPP2006030102-000503")/*@res "并发异常,数据已经被更新"*/);
				}
				
				resetCurrDigiForOldVo(oldDZJBVO);
				
				DJZBVOTreator.revertDJZBVO(oldDZJBVO,slimDJZBVO) ;
				djzbvo.setm_OldVO(oldDZJBVO);
				saveValidate(slimDJZBVO);
				
				((DJZBHeaderVO)oldDZJBVO.getParentVO()).setTs(((DJZBHeaderVO) djzbvo.getParentVO()).getts());
//				slimDJZBVO = (DJZBVO) djzbvo.clone();

				/******************revert end***********************************************/
			}
			DjVOTreaterAid.befSaveUpdateBillBodys(djzbvo);
			DJZBItemVO[] items=(DJZBItemVO[] )djzbvo.getChildrenVO();
			DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();
			if(head.getQcbz()==null)
				head.setQcbz(UFBoolean.FALSE);
			 List<String >fbpks=new ArrayList<String >();
			 List<DJZBItemVO >  xtitems=new ArrayList<DJZBItemVO >();
			 java.util.List< String> ddhhs=new ArrayList<String>();
			for(int i=0,size=items.length;i<size;i++){
				if(!DJZBVOConsts.XTConfirmed.equals(items[i].getDjxtflag())){
					if(null!=items[i].getFb_oid())
						fbpks.add(items[i].getFb_oid());
					if(items[i].getStatus()!=VOStatus.DELETED){
						xtitems.add(items[i]);
					}
				}
				items[i].setBilldate(((DJZBHeaderVO)djzbvo.getParentVO()).getDjrq());
				if(items[i].getStatus()!=VOStatus.DELETED&&DJZBVOConsts.FromXT.equals(head.getLybz())&&items[i].getDdhh()!=null)
					ddhhs.add(items[i].getDdhh());
			}
			if(fbpks.size()==0){
				throw ExceptionHandler.createException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("2006","UPT2006-v51-000017"));
			}
			DJZBDAO dmo = new DJZBDAO();
			if(ddhhs.size()>0){
				dmo.updateXtFlag(ddhhs, 1);
			}
			if (head.getDjdl().equals("ys") || head.getDjdl().equals("sk")) {
		        for (int i = 0; i < items.length; i++) {
		            if (items[i] != null && items[i].getWldx().intValue() == 0)
		                if (items[i].getOrdercusmandoc() == null
		                    || items[i].getOrdercusmandoc().trim().length() < 1)
		                    items[i].setOrdercusmandoc(items[i].getHbbm());
		        }
		    }
			LoanControllerAction lcr=new LoanControllerAction();
			ResMessage res=lcr.checkBefSave(djzbvo);
			if(!res.isSuccess){
				throw ExceptionHandler.createException(res.SysErrMsg);
			}
		    try {
//		    	oldDZJBVO.setParam_Ext_Save();
		        djzbvo.setParam_Ext_Save();
		        DjVOTreaterAid.supplementXTFlag(djzbvo);
		    } catch (Exception e) {
//		        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		        throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.editDj(DJZBVO) setParam_Ext_Save:"+e);
		    	throw ExceptionHandler.handleException(this.getClass(), e);

		    }
			if(djzbvo.m_isQr){
//				 djzbvo.m_Resmessage=res;
		    	return cooperate_affirm(djzbvo);
			}
		    try {
		        //调用其他bo

		        lockDJ(head.getVouchid());
		        //暂存单据变保存
		        if(head.getDjzt().intValue()==DJZBVOConsts.m_intDJStatus_TempSaved){
		            head.setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_Saved));
					coopeerateUpdateOriginBillByRedBill(djzbvo,false);
		            return this.saveFromTemporaryDj(djzbvo);
		        }
//		         DJZBItemVO[] items = null;
		        if (djzbvo.getChildrenVO() != null)
		            items = (DJZBItemVO[]) djzbvo.getChildrenVO();
		        String tablename = "arap_djzb";
		        ////协同单据重新设置单据号
		        //if (head.getLybz().intValue() == 9)
		        //{
		            //head.setDjbh(getDjbh(djzbvo));
		            //k=2;
		        //}



		        //并发控制　
		        ApplayBillBO aBo = new ApplayBillBO();
		        aBo.isDistributes(djzbvo);
		        if (head.getQcbz() != null && head.getQcbz().booleanValue()){
		        	aBo.sendMessage_del(oldDZJBVO);
		        }

		        //外接口修改单据前动作
		        long t1 = System.currentTimeMillis();
		        nc.bs.arap.global.ArapExtInfRunBO extbo =
		            new nc.bs.arap.global.ArapExtInfRunBO();
		        nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("edit",head.getPzglh());

		        new BeforeEditInf().beforeEditInf(busitransvos, djzbvo);
		        ExceptionHandler.debug("外接口修改单据前动作前所用时间:" + (System.currentTimeMillis() - t1));
//		        if (head.getQcbz() != null && head.getQcbz().booleanValue()){
//		       	 if(head.getSxbz().intValue()==DJZBVOConsts.m_intSXBZ_VALID){
//		            	//only when the bill is already valid previously,should we send delete msg to Finance Platform
//		                aBo. sendMessage_del(djzbvo,UFBoolean.FALSE);
//		            }
//		       }

		        if (head.getDjdl().equals("ss")) {
		            tablename = "arap_item";
		            djzbvo = dmo.update_SS(djzbvo);
		        } else {
				     coopeerateUpdateOriginBillByRedBill(djzbvo,false);
		        	 djzbvo = dmo.update(doPayterm(djzbvo));
		        	 invokeSettle.invokeCmp(djzbvo, head.getDjrq());
		            // contract(djzbvo);
//
//		            //修改全成本相关信息
//		            editCost(djzbvo);

		            if (head.getQcbz() != null && head.getQcbz().booleanValue()){
//		            	aBo.sendMessage(djzbvo);
		            	NCLocator.getInstance().lookup(nc.itf.arap.balance.IArapBalanceUpdate.class).updateForBillUnEff(new DJZBVO[]{djzbvo.getm_OldVO()});
		            	NCLocator.getInstance().lookup(nc.itf.arap.balance.IArapBalanceUpdate.class).updateForBill(new DJZBVO[]{djzbvo});
		            }
		            else if(head.getSsflag().equals("0")){ /************************************以下开始事项审批控制*/
		                lock_item_bill(items, head.getLrr(), 1);
		                //itemconfigbo.checkApprove((DJZBVO)djzbvo.clone(),"保存修改");
		                Proxy.getIItemConfigPrivatee().unShenHe((DJZBVO)oldDZJBVO.clone(),true);
		                DJZBVO tempvo =(DJZBVO)djzbvo.clone();
		                DJZBItemVO[] tempitems = (DJZBItemVO[])djzbvo.getChildrenVO();
		                ArrayList<DJZBItemVO> al = new ArrayList<DJZBItemVO>();
		                for(int i=0;i<tempitems.length;i++){
		                    if(tempitems[i].getStatus()==VOStatus.DELETED){
		                        continue;
		                    }
		                    al.add(tempitems[i]);
		                }
		                if(al.size()>0){
		                    tempitems = new DJZBItemVO[al.size()];
		                    tempitems= (DJZBItemVO[])al.toArray(tempitems);
		                    tempvo.setChildrenVO(tempitems);
		                }
		                Proxy.getIItemConfigPrivatee().ShenHeSave(tempvo);
//		                freeLock_item_bill(items, head.getLrr(), -1);
		                /********************************************以上事项审批控制**/

		            }
		            if (head.getQcbz() != null && head.getQcbz().booleanValue());
		            else if (head.getXtflag() != null && head.getXtflag().equals("保存")) { /*-=notranslate=-*/
		                nc.bs.arap.billcooperation.BillCooperateBO billcooperatebo = new nc.bs.arap.billcooperation.BillCooperateBO();
		            	//删除协同单据
		            	deleteXtBill(fbpks.toArray(new String[]{}));

		                //生成新的协同单据
		                DJZBVO vo=(DJZBVO)djzbvo.clone();
		                vo.setChildrenVO((DJZBItemVO[])xtitems.toArray(new DJZBItemVO[]{}));
		                billcooperatebo.doCooperate(vo);

		            }
		        }

		        head.setTs(
		            new nc.vo.pub.lang.UFDateTime(
		                dmo.getTsByPrimaryKey(head.getVouchid(), tablename)));
		        djzbvo.setParentVO(head);

		        //外接口修改单据后动作
		        long t2 = System.currentTimeMillis();

		        new AfterEditInf().afterEditInf(busitransvos, djzbvo);
		        ExceptionHandler.debug("外接口修改单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

		        String ts = dmo.getTsByPrimaryKey(head.getVouchid(), tablename);
		        if (ts != null)
		            head.setTs(new nc.vo.pub.lang.UFDateTime(ts));
		        //同步ts
		        djzbvo.setParentVO(head);
//		        aBo.unLockBill(djzbvo);
		        if(head.getSpzt() !=null)
		        {
			        if(head.getSpzt().equals(DJZBVOConsts.m_strStatusVerifying))
			        	djzbvo.setCheckState(nc.vo.pub.pf.IPfRetCheckInfo.GOINGON);
		        }
		    } catch (Exception e) {
//			      if (k == 2)
//		            try {
//		                returnBillCode(djzbvo);
//		            } catch (Exception e2) {
//		                Logger.error(e2.getMessage(), e2);
//		            }
		        throw ExceptionHandler.handleException(this.getClass(), e);

		    }
			if(djzbvo.m_Resmessage.intValue==ResMessage.$BUGET_ALARM)
			     throw new BugetAlarmBusinessException(djzbvo.m_Resmessage.strMessage);
//		    DJZBVOTreator.slimDJVOByCompare(slimDJZBVO,djzbvo);
		    djzbvo.m_Resmessage.strMessage+=res.strMessage;
		    ((DJZBHeaderVO)djzbvo.getParentVO()).IsSlim=null;
		    return djzbvo;
	}

	public DJZBVO cooperate_affirm(DJZBVO dJZB) throws BusinessException {



        DJZBHeaderVO head = (DJZBHeaderVO) dJZB.getParentVO();
        DJZBItemVO[] items = null;
        items = (DJZBItemVO[]) dJZB.getChildrenVO();
//        if (head.getHzbz() != null && head.getHzbz().trim().length() > 0) {
//            head.setLybz(new Integer(0));
//        }
        java.util.List< String> ddhhs=new ArrayList<String>();


        //外接口新增单据前动作
        long t1 = System.currentTimeMillis();
        nc.bs.arap.global.ArapExtInfRunBO extbo =
            new nc.bs.arap.global.ArapExtInfRunBO();
        nc.vo.arap.global.BusiTransVO[] busitransvos =
            extbo.initBusiTrans("add", head.getPzglh());
        new BeforeAddAct().beforeAddInf(busitransvos, dJZB);
        ExceptionHandler.debug("外接口新增单据前动作前所用时间:" + (System.currentTimeMillis() - t1));

        //调用其他bo
        DJZBDAO dmo = new DJZBDAO();

        String strDJBH = new GetSingleDjbh().getDjbh(dJZB);
        head.setDjbh(strDJBH); //设置单据编号

        for (int i = 0; i < items.length; i++) {
            items[i].setDjbh(strDJBH);
        }
     try{
        dJZB = dmo.update(doPayterm(dJZB));
        }catch(Exception e)
        {
        	throw ExceptionHandler.handleException(this.getClass(), e);
        }
        invokeSettle.invokeCmp(dJZB, head.getDjrq());
        items = (DJZBItemVO[]) dJZB.getChildrenVO();
        if(head.getLybz()==DJZBVOConsts.FromXT){
	          List<String>fbpks=new ArrayList<String>();
		      try{
		        for (int i = 0; i < items.length; i++) {
		        		fbpks.add(items[i].getDdhh());
		        		if(DJZBVOConsts.FromXT.equals(head.getLybz())&&items[i].getDdhh()!=null)
		        			ddhhs.add(items[i].getDdhh());
		        		  if (head.getDjdl().equals("ys") || head.getDjdl().equals("sk")) {
		            if (items[i] != null && items[i].getWldx().intValue() == 0)
		                if (items[i].getOrdercusmandoc() == null
		                    || items[i].getOrdercusmandoc().trim().length() < 1)
		                    items[i].setOrdercusmandoc(items[i].getHbbm());
		            }
		         }
		        dmo.updateXtFlag(fbpks, DJZBVOConsts.XTConfirmed);
		      }catch(Exception e)
		      {
		    	  throw ExceptionHandler.handleException(this.getClass(), e);
		      }
        }
      try {
        if ((head.getQcbz() != null && head.getQcbz().booleanValue()));
        else {
            /************************************以下开始事项审批控制*/
            if (!"ss".equals(head.getDjdl())&& "0".equals(head.getSsflag())) {

                lock_item_bill(items, head.getLrr(), 1);
                //itemconfigbo.checkApprove((DJZBVO) dJZB.clone(),"保存");
                Proxy.getIItemConfigPrivatee().ShenHeSave((DJZBVO) dJZB.clone());
//                lock_item_bill(items, head.getLrr(), 1);

            }

            // insertContract(vo);

            /****************** 协同单据***********************/
            if (head.getXtflag() != null && head.getXtflag().equals("保存")) { /*-=notranslate=-*/

                //生成新的协同单据
                nc.bs.arap.billcooperation.BillCooperateBO billcooperatebo =
                    new nc.bs.arap.billcooperation.BillCooperateBO();
                billcooperatebo.doCooperate(dJZB);

            }
            /****************** 协同单据*******************/

        }
        //

        //外接口新增单据后动作
        long t2 = System.currentTimeMillis();

        new AfterAddAct().afterAddInf(busitransvos, dJZB);
        ExceptionHandler.debug("外接口新增单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

        String sts = dmo.getTsByPrimaryKey(head.getVouchid(), "arap_djzb");
        if (sts.trim().length() < 3) {
        } else {
            head.setTs(new nc.vo.pub.lang.UFDateTime(sts));
        }

        //
        return dJZB;
    } catch (Exception e) {

    	throw ExceptionHandler.handleException(this.getClass(), e);
    }

}
	public void deleteOutBill(String id) throws BusinessException {

		DJZBDAO djzb = new DJZBDAO();
		djzb.checkDataRemove("select vouchid from arap_dataremove mv1   where  exists (select vouchid from arap_dataremove mv2  where  mv1.vouchid = mv2.vouchid and ddlx = '"+id+"' and dr=0 ) and  dr=0");
		
		String whereString = "   where  exists (select vouchid from arap_djfb  where  zb.vouchid = arap_djfb.vouchid and arap_djfb.ddlx = '"
				+ id.trim()

				+ "' and arap_djfb.dr=0 ) and  zb.dr=0 ";
		deleteOutBillbyWhere(whereString);

	}
	 /* : 主要算法： 注意： 创建日期：(2001-11-16 14:49:26)
	 *
	 * @param id
	 *            java.lang.String
	 */
	public void deleteOutFbs( String[] fboids) throws BusinessException {

		String whereString;
		try {
			whereString = "  ,arap_djfb where  zb.vouchid = arap_djfb.vouchid  and  "
				+ SqlUtils.getInStr(" arap_djfb.ddhh ", fboids, false) + " and arap_djfb.dr=0  and zb.dr=0";
			deleteOutBillbyWhere(whereString);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}
	public void deleteOutFbs( String[] fboids,String pk_corp) throws BusinessException {

		String whereString;
		try {
			whereString = "  ,arap_djfb where  zb.vouchid = arap_djfb.vouchid  and  arap_djfb.dwbm='"+pk_corp+"' and "
				+ SqlUtils.getInStr(" arap_djfb.ddhh ", fboids, false) + " and arap_djfb.dr=0  and zb.dr=0";
			deleteOutBillbyWhere(whereString);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}
	public void deleteXTBill(String id) throws BusinessException {


		ExceptionHandler.debug("ddlx is :" +id);
			String whereString = "   where  exists (select vouchid from arap_djfb  where  zb.vouchid = arap_djfb.vouchid and arap_djfb.ddlx = '"
					+ id.trim()

					+ "' and arap_djfb.dr=0 ) and zb.lybz=9 and  zb.dr=0 ";
			deleteOutBillbyWhere(whereString);

		}
	/**
	 * 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djfbitemvo
	 *            nc.vo.ep.dj.DJFBItemVO
	 */
	public String editZyx(DJFBVO djfbvo) throws BusinessException {
		try {
			DJFBDAO dmo = new DJFBDAO();
			/** 只删辅表，不删主表 */
			// dmo.update(djfbvo);
			dmo.updateZYX(djfbvo);
		} catch (Exception e) {
		throw ExceptionHandler.handleException(this.getClass(), e);

		}
		return "";
	}

	/**
	 *
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public boolean exist_ss(String pk_corp, String[] ywybm, String billCode, String vouchid) throws BusinessException {

		boolean b = false;
		try {
			DJZBDAO dmo = new DJZBDAO();
			b = dmo.exist_ss(pk_corp, ywybm, billCode, vouchid);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::exist_ss(pk_corp,ywybm,billCode) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return b;
	}

	/**
	 * 通过主键获得单据审批状态
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public boolean existByBm(String bm, String pk_corp) throws BusinessException {

		boolean b = false;
		try {
			DJZBDAO dmo = new DJZBDAO();
			b = dmo.existByBm(bm, pk_corp);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getSPZT(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return b;
	}

	/**
	 * 事项审批单是否被单据引用
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public boolean existByKey(String key) throws BusinessException {

		boolean b = false;
		try {
			DJZBDAO dmo = new DJZBDAO();
			b = dmo.existByKey(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::existByKey(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return b;
	}

	/**
	 * author:wangqiang create time: 2004-08-05 function : filter all the close
	 * items from the old DJZBVO,and create a new one wit the remains(HeaderVO
	 * and itemVOs still open)
	 */
	private DJZBVO filterSSDJZBVOWithOpenItem(DJZBVO oldDJZBVO) {
		// the vo that will be returned
		DJZBVO newDJZBVO = new DJZBVO();
		DJZBHeaderVO headerVO = (DJZBHeaderVO) oldDJZBVO.getParentVO();
		Vector<DJZBItemVO> vOpenItem = new Vector<DJZBItemVO>();
		// get all the item vos
		DJZBItemVO[] allItemVOs = (DJZBItemVO[]) oldDJZBVO.getChildrenVO();
		// functionary of the close operation
		String pkFunctionary = headerVO.getZdr();
		// date of close
		nc.vo.pub.lang.UFDate dateClose = headerVO.getZdrq();
		for (int i = 0; i < allItemVOs.length; i++) {
			boolean isClosed = this.ssItemIsClosed(allItemVOs[i]);
			// if item is not closed , then add it to vOpenItem
			if (isClosed == false) {
				// set the closer and closedate field according to header vo
				allItemVOs[i].setCloser(pkFunctionary);
				allItemVOs[i].setClosedate(dateClose);
				vOpenItem.addElement(allItemVOs[i]);
			}
		}
		// variable below will hold all the open items in the original djzbvo
		DJZBItemVO[] openItemVOs = new DJZBItemVO[vOpenItem.size()];
		vOpenItem.copyInto(openItemVOs);
		// set the header of the new djzb vo
		newDJZBVO.setParentVO(headerVO);
		// set the children of the new djzb vo with all the open items which
		// have been filtered above
		newDJZBVO.setChildrenVO(openItemVOs);
		return newDJZBVO;
	}

	/**
	 * 通过银行托收单主键获得VO对象数组。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO[] findByPk_bankrecive(String key) throws BusinessException {

		DJZBVO[] dJZBs = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZBs = dmo.findByPk_bankrecive(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPk_bankrecive(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBs;
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO findByPrimaryKey(String key) throws BusinessException {

		DJZBVO dJZB = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZB = dmo.findByPrimaryKey(key);
		} catch (Exception e) {
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZB;
	}

	public DJZBVO[] findByPrimaryKeys(String[] keys) throws BusinessException {

		DJZBVO[] dJZB = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZB = dmo.findByPrimaryKeys(keys);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZB;
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO findByPrimaryKey_SS(String key) throws BusinessException {

		DJZBVO dJZB = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZB = dmo.findByPrimaryKey_SS(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey_SS(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZB;
	}

	public DJZBVO[] findByPrimaryKeys_SS(Vector key) throws BusinessException {

		DJZBVO[] dJZB = null;

		String[] keys = new String[key.size()];
		key.copyInto(keys);

		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZB = dmo.findDjByPrimaryKeys_SS(keys);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey_SS(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZB;
	}

	/**
	 * 查询已审核且原币余额大于零的收款单
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。 作者：陈飞
	 */
	public DJZBVO[] findDj_sell() throws BusinessException {

		DJZBVO[] dJZBs = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZBs = dmo.findDj_sell();
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findDj_sell( ) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBs;
	}

	/**
	 * 获得手工审批流档案
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。 作者：阿飞
	 */
	public DJZBItemVO[] findfengcunByKey(DJZBItemVO[] items) throws BusinessException {

		try {
			DJZBDAO dmo = new DJZBDAO();
			for (int i = 0; i < items.length; i++) {
				items[i] = dmo.findfengcunByKey(items[i]);

			}

		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBean::findfengcunByKey(items) Exception!", e);
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return items;
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBHeaderVO findHeaderByPrimaryKey(String key) throws BusinessException {

		DJZBHeaderVO djzbheadervo = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			djzbheadervo = dmo.findHeaderByPrimaryKey(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findHeaderByPrimaryKey(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return djzbheadervo;
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBHeaderVO findHeaderByPrimaryKey_SS(String key) throws BusinessException {

		DJZBHeaderVO djzbheadervo = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			djzbheadervo = dmo.findHeaderByPrimaryKey_SS(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findHeaderByPrimaryKey(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return djzbheadervo;
	}

	/**
	 * 查询单 查询整张单据
	 *
	 * 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DjzbVO[]
	 *
	 */
	public DJZBVO[] findItem_ByHead(DJZBHeaderVO[] heads) throws BusinessException {
		DJZBVO[] vos = null;
		try {

			DJZBDAO dmo = new DJZBDAO();
			vos = dmo.getDjVObyHeaderVos(heads);
		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBean::findItem_ByHead(heads) Exception!", e);
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return vos;
	}
	public DJZBVO[] findItemDel_ByHead(DJZBHeaderVO[] heads) throws BusinessException {
		DJZBVO[] vos = null;
		try {

			DJZBDAO dmo = new DJZBDAO();
			vos = dmo.getDjVObyHeaderVos_del(heads);
		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBean::findItem_ByHead(heads) Exception!", e);
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return vos;
	}
	// /**
	// * 此处插入方法描述。
	// * 创建日期：(2004-3-2 16:12:48)
	// * @author：chenf
	// * @return boolean
	// when update czflag<0
	// * @param vo nc.vo.ep.dj.DJZBVO
	// */
	// public boolean freeLock_item_bill(DJZBItemVO[] items, String user, int
	// czflag)
	// throws BusinessException {
	//
	// if (items == null || items.length < 1)
	// return true;
	//
	// int leng = items.length;
	// String[] djpks = null;
	//
	//
	// Vector<String> v = new Vector<String>();
	//
	// for (int i = 0; i < leng; i++) {
	//
	// try {
	// String djpk = items[i].getItem_bill_pk();
	//
	// if (djpk != null && djpk.trim().length() > 0) {
	// if (!v.isEmpty() && v.indexOf(djpk) >= 0);
	// else
	// v.addElement(djpk);
	// }
	// if (czflag < 0) {
	// djpk = items[i].getItem_bill_pk();
	// if (djpk != null && djpk.trim().length() > 0) {
	// if (!v.isEmpty() && v.indexOf(djpk) >= 0);
	// else
	// v.addElement(djpk);
	// }
	// }
	//
	// } catch (Exception e) {
	//
	// Log.getInstance(this.getClass()).error(e.getMessage(),e);
	// throw new
	// BusinessShowException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000523")/*@res
	// "freeLock_item_bill加锁失败"*/, e);
	// }
	//
	// }
	// if (v.size() > 0) {
	// djpks = new String[v.size()];
	// v.copyInto(djpks);
	// }
	// try {
	// if (djpks != null && djpks.length > 0)
	// {
	// // KeyLock a=new KeyLock();
	// KeyLock.freeKeyArray(djpks, user, null);
	// }
	//
	// } catch (Exception e) {
	// Log.getInstance(this.getClass()).error(e.getMessage(),e);
	// throw new
	// BusinessShowException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000523")/*@res
	// "freeLock_item_bill加锁失败"*/, e);
	// }
	//
	// return true;
	// }
	// /**
	// * 作者：陈飞
	// * @version 最后修改日期
	// * @see 需要参见的其它类
	// * @return nc.bs.arap.parterm.Payterm
	// */
	// private nc.bs.ep.dj.ApplayBill getApplayBillBO() throws Exception {
	//
	// nc.bs.ep.dj.ApplayBillHome applaybillhome =
	// (nc.bs.ep.dj.ApplayBillHome) this.getBeanHome(
	// nc.bs.ep.dj.ApplayBillHome.class,
	// "nc.bs.ep.dj.ApplayBillBO");
	// nc.bs.ep.dj.ApplayBill m_applaybill = applaybillhome.create();
	//
	// return m_applaybill;
	// }
	/**
	 * 根据收款人地区代码取收款人地区名称 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
	public String getAreaNameByCode(String area_Code) throws BusinessException {

		String area_Name = "";
		try {
			DJZBDAO dmo = new DJZBDAO();
			area_Name = dmo.getAreaNameByCode(area_Code);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getAreaNameByCode( ) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return area_Name;
	}

	/**
	 * 取对账信息 作者：陈飞 checkflag 用来表示是否对帐 >0表示已对帐，"0"表示未对帐 已对账的单据不能反审核，请作程序的相应调整
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
	public Integer getCheckflag(String vouchid) throws BusinessException {

		Integer checkflag = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			checkflag = dmo.getCheckflag(vouchid);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getCheckflag( ) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return checkflag;
	}

	/**
	 * 通过主键查询单据是否已经处理过
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public Integer getClbzByPkey(String key) throws BusinessException {

		Integer clbz = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			clbz = dmo.getClbzByPkey(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getClbzByPkey(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return clbz;
	}

	/**
	 * 查询单据数量 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return Integer
	 */
	public Integer getCountByDjbh(String djbh, String pk_corp) throws BusinessException {

		Integer count = null;
		try {

			DJZBDAO dmo = new DJZBDAO();
			count = dmo.getCountByDjbh(djbh, pk_corp);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getCountByDjbh(djbh,pk_corp) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return count;
	}

	/**
	 * 通过收支项目id返回对应公开要素定义数组
	 *
	 *
	 * 创建日期：(2001-4-26)
	 *
	 * @return Vector {nc.vo.ep.DefdefVO}
	 * @param unitCode
	 *            int
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public Vector getFreePropertys(String m_szxmid) throws BusinessException {

		Vector<DefdefVO> v = new Vector<DefdefVO>();
		try {
			DJZBDAO dmo = new DJZBDAO();
			String[] frees = dmo.getFreePropertys(m_szxmid);
			if (frees == null)
				return null;
			DefdefDMO defdmo = new DefdefDMO();
			DefdefVO tempvo = null;
			for (int i = 0; i < 10; i++) {
				if (frees[i] == null)
					continue;
				tempvo = new DefdefVO();

				try {

					tempvo = defdmo.findByPrimaryKey(frees[i]);

					// 收支项目
					tempvo.setpk_costsubj(m_szxmid);

					// 自由项顺序号
					tempvo.setm_freesxh(new Integer(i + 1));

					v.addElement(tempvo);

				} catch (Exception e) {
				 ExceptionHandler.consume(e);
					continue;
				}
			}
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("TESTBean::getFreePropertys(String m_szxmid) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return v;
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String getOfficialprintuser(String key) throws BusinessException {

		String Officialprintuser = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			Officialprintuser = dmo.getOfficialprintuser(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getOfficialprintuser(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return Officialprintuser;
	}

	/**
	 * 通过主键获得单据审批状态
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String getSPZTByPk(String tablename, String key) throws BusinessException {

		String zyx20 = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			zyx20 = dmo.getSPZTByPk(tablename, key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getSPZT(key) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return zyx20;
	}

	/**
	 * 通过主键获得单据审批状态
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public String getTsByPrimaryKey(String key, String tableName) throws BusinessException {

		String ts = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			ts = dmo.getTsByPrimaryKey(key, tableName);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getTsByPrimaryKey(key,tableName) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return ts;
	}

	//
	// public List getXtMsgBypk(String vouchid) throws RemoteException
	// {
	// DJZBDAO dmo;
	// try {
	// dmo = new DJZBDAO();
	// return dmo.getXtMsgBypk(vouchid);
	// } catch ( Exception e) {
	// Log.getInstance(this.getClass()).error(e.getMessage(),e);
	// throw new RemoteException(e.getMessage(),e);
	// }
	// }
	public DJZBVO[] getXtVOsByPk(String vouchid) throws BusinessException {
		DJZBDAO dmo;
		List<DJZBVO> retLst = new ArrayList<DJZBVO>();
		try {
			dmo = new DJZBDAO();
			List lst = dmo.getXtMsgBypk(vouchid);
			for (int i = 0, size = lst.size(); i < size; i++)
				retLst.add(findByPrimaryKey(((String[]) lst.get(i))[1]));
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return retLst.toArray(new DJZBVO[] {});
	}

	/**
	 * 根据来源单据pk取已经确认的协同单据数 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return Integer
	 */
	public Integer getXTCountBYpk(String vouchid) throws BusinessException {

		Integer count = null;
		try {

			DJZBDAO dmo = new DJZBDAO();
			count = dmo.getXTCountBYpk(vouchid);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::getXTCountBYpk(vouchid) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return count;
	}
	private UFDouble getDRate(nc.vo.pub.lang.UFDouble je, UFDouble r1) {
		if(je == null) je = new nc.vo.pub.lang.UFDouble(0.0);
		return je.multiply( r1).div(new UFDouble( 100.0d));
	}
	private boolean isSFKUpdated(DJZBItemVO item)
	{
		if(VOStatus.DELETED ==item.getStatus()||
				VOStatus.UNCHANGED==item.getStatus())
			return false;
		List<String> lst=new ArrayList<String>();
		String[] attrs=item.getM_strChangedAtts();
		if(null==attrs)return true;
		for(int i=0,size=attrs.length;i<size;i++)
			lst.add(attrs[i]);
		if(lst.contains("sfkxyh"))
			return true;
		else if(null!=item.getIsSFKXYChanged()&&item.getIsSFKXYChanged().booleanValue()
				&&(lst.contains("effectdate")||lst.contains("bbhl")||lst.contains("fbhl")
				||lst.contains("jfybje")||lst.contains("dfybje")||lst.contains("jfshl")
				||lst.contains("dfshl")))
		{
			return true;
		}
		return false;
	}

	private nc.vo.pub.lang.UFDate getdate(nc.vo.pub.lang.UFDate date , Integer sdc , int iCount) {
		int d1 = date.getDay();
		int m1 = date.getMonth();
		int y1 = date.getYear();
		int d2 =  sdc.intValue();
		if(d1> d2 && iCount==0){
			iCount +=1;
		}
		//
		if((m1+iCount)>12){
		    y1 = y1+(m1+iCount)/12;
		}
		m1 = (m1+iCount)%12;
		if(m1==0){
		    m1=12;
		}
		if(UFDate.getDaysMonth(y1,m1)<d2){
		    d2 = UFDate.getDaysMonth(y1,m1);
		}

		return new nc.vo.pub.lang.UFDate(y1+"-"+m1+"-"+d2);
	}
	/**
	 * 按收付款协议拆分辅表
	 * 创建日期：(2001-8-28 8:38:37)
	 * @return nc.vo.ep.dj.DJZBVO
	 */
	public  DJZBVO doPayterm(DJZBVO vo) throws BusinessException {
		
		SystemProfile.getInstance().log("doPayterm start");
		
		if (vo == null||vo.getChildrenVO()==null)
			return vo;
		try {
			//
			String sFkxyh = "";
			//
			//DjfkxybVO[] djfkxy = null;
			List<DjfkxybVO> ls = null;
			//djfkxy = new DjfkxybVO();
			//主表
			DJZBHeaderVO head = (DJZBHeaderVO) vo.getParentVO();
			//公司、辅币，原币 币种
//			SysInitDMO sysdmo = new SysInitDMO();
			String FCurr = Currency.getFracCurrPK( head.getDwbm() );
			String LCurr = Currency.getLocalCurrPK(head.getDwbm() );
			Integer shlDig = SysInit.getParaInt(head.getDwbm(),"BD501");
			if (FCurr != null && FCurr.indexOf("null") >= 0)
				FCurr = null;
			if (LCurr != null && LCurr.indexOf("null") >= 0)
				LCurr = null;
			//辅表
			DJZBItemVO[] items = (DJZBItemVO[]) vo.getChildrenVO();
			//
			String currOid = "";
			CurrencyControlBO bzCon =
				new CurrencyControlBO();
			//

			int iCount = items.length;
			DjfkxybVO djfkxy = null; 
			Map<String,PaytermVO> table=new HashMap<String, PaytermVO>();
			for (int i = 0; i < iCount; i++) {
				if(!isSFKUpdated(items[i]))
					continue;
				sFkxyh = items[i].getSfkxyh();
				//
				currOid = items[i].getBzbm();
				bzCon.setCurrencyType(currOid);
			//
				if (sFkxyh == null || sFkxyh.trim().length() == 0) {
					//是否判断单据类型？？？
					//无收付款协议，一条纪录，还款日为单据审核日
					//djfkxy = new DjfkxybVO[1];
					ls = new ArrayList<DjfkxybVO>();
					djfkxy = new DjfkxybVO();

					djfkxy.setXydqr(
							items[i].getQxrq() == null ? head.getDjrq() : items[i].getQxrq());
					djfkxy.setBbye(bzCon.getFormat(LCurr, items[i].getBbye()));
					if (items[i].getFbye() == null)
						djfkxy.setFbye(new nc.vo.pub.lang.UFDouble(0));
					else
						djfkxy.setFbye(bzCon.getFormat(FCurr, items[i].getFbye()));
					djfkxy.setYbye(bzCon.getFormat(currOid, items[i].getYbye()));

					djfkxy.setDfbbje(bzCon.getFormat(LCurr, items[i].getDfbbje()));
					djfkxy.setDffbje(bzCon.getFormat(FCurr, items[i].getDffbje()));
					djfkxy.setDfybje(bzCon.getFormat(currOid, items[i].getDfybje()));

					djfkxy.setDfshl(items[i].getDfshl()==null? ArapConstant.DOUBLE_ZERO:items[i].getDfshl().setScale(shlDig.intValue(),4));

					if (items[i].getJfbbje() == null)
						djfkxy.setJfbbje(ArapConstant.DOUBLE_ZERO);
					else
						djfkxy.setJfbbje(bzCon.getFormat(LCurr, items[i].getJfbbje()));
					djfkxy.setJffbje(bzCon.getFormat(FCurr, items[i].getJffbje()));
					djfkxy.setJfybje(bzCon.getFormat(currOid, items[i].getJfybje()));

					djfkxy.setJfshl(items[i].getJfshl()==null? ArapConstant.DOUBLE_ZERO:items[i].getJfshl().setScale(shlDig.intValue(),4));
					djfkxy.setShlye(items[i].getShlye()==null? ArapConstant.DOUBLE_ZERO:items[i].getShlye().setScale(shlDig.intValue(),4));
					ls.add(djfkxy);

				} else {
					//qdq edit
					PaytermDMO paydmo = new PaytermDMO();
					sFkxyh = sFkxyh.trim();
					PaytermVO payVO =null;
					if(table.containsKey(sFkxyh)){
						payVO=table.get(sFkxyh);
					}else{
						payVO = paydmo.findByPrimaryKey(sFkxyh);
					}
					
					//getPayterm().remove();
					PaytermHeaderVO payHead =
						(PaytermHeaderVO) payVO.getParentVO();
					PaytermItemVO[] payItems =
						(PaytermItemVO[]) payVO.getChildrenVO();
					//
					int iFixaddDate = (payHead.getFixadddate()==null?0:payHead.getFixadddate().intValue());
					int iNum = payItems.length;
					ls = new ArrayList<DjfkxybVO>();
					//分路上的金额
					UFDouble Itemyb = items[i].getYbye();
					UFDouble Itemfb = items[i].getFbye();
					UFDouble Itembb = items[i].getBbye();
					UFDouble Itemshl = items[i].getShlye();
					//
					UFDouble ItemDfyb = items[i].getDfybje();
					UFDouble ItemDffb = items[i].getDffbje();
					UFDouble ItemDfbb = items[i].getDfbbje();
					UFDouble ItemDfshl = items[i].getDfshl();
					//
					UFDouble ItemJfyb = items[i].getJfybje();
					UFDouble ItemJffb = items[i].getJffbje();
					UFDouble ItemJfbb = items[i].getJfbbje();
					UFDouble ItemJfshl = items[i].getJfshl();
					//

					for (int k = 0; k < iNum; k++) {
						UFDouble rate = payItems[k].getAccrate() ;
						//

						//
						if (ArapCommonTool.isZero(rate))
							continue;
						PaytermchItemVO[] vZk = payItems[k].getPtrateVOs();

						djfkxy = new DjfkxybVO();
						//固定结账日
						if (payHead.getFixedflag().booleanValue()) {
							if (k == iNum - 1) {
								//最后一条用特殊处理
								djfkxy.setBbye(bzCon.getFormat(LCurr, Itembb));
								djfkxy.setFbye(bzCon.getFormat(FCurr, Itemfb));
								djfkxy.setYbye(bzCon.getFormat(currOid, Itemyb));
								djfkxy.setShlye(Itemshl==null?ArapConstant.DOUBLE_ZERO:Itemshl.setScale(shlDig.intValue(),4));


								djfkxy.setDfbbje(bzCon.getFormat(LCurr, ItemDfbb));
								djfkxy.setDffbje(bzCon.getFormat(FCurr, ItemDffb));
								djfkxy.setDfybje(bzCon.getFormat(currOid, ItemDfyb));
								djfkxy.setDfshl(ItemDfshl==null?ArapConstant.DOUBLE_ZERO:ItemDfshl.setScale(shlDig.intValue(),4));

								djfkxy.setJfbbje(bzCon.getFormat(LCurr, ItemJfbb));
								djfkxy.setJffbje(bzCon.getFormat(FCurr, ItemJffb));
								djfkxy.setJfybje(bzCon.getFormat(currOid, ItemJfyb));
								djfkxy.setJfshl(ItemJfshl==null?ArapConstant.DOUBLE_ZERO:ItemJfshl.setScale(shlDig.intValue(),4));
							} else {
								//
								djfkxy.setBbye(bzCon.getFormat(LCurr, getDRate(items[i].getBbye(), rate)));
								djfkxy.setFbye(bzCon.getFormat(FCurr, getDRate(items[i].getFbye(), rate)));
								djfkxy.setYbye(bzCon.getFormat(currOid, getDRate(items[i].getYbye(), rate)));
								djfkxy.setShlye(items[i].getShlye()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getShlye(),rate).setScale(shlDig.intValue(),4));

								djfkxy.setDfbbje(
									bzCon.getFormat(LCurr, getDRate(items[i].getDfbbje(), rate)));
								djfkxy.setDffbje(
									bzCon.getFormat(FCurr, getDRate(items[i].getDffbje(), rate)));
								djfkxy.setDfybje(
									bzCon.getFormat(currOid, getDRate(items[i].getDfybje(), rate)));

								djfkxy.setDfshl(items[i].getDfshl()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getDfshl(),rate).setScale(shlDig.intValue(),4));

								djfkxy.setJfbbje(
									bzCon.getFormat(LCurr, getDRate(items[i].getJfbbje(), rate)));
								djfkxy.setJffbje(
									bzCon.getFormat(FCurr, getDRate(items[i].getJffbje(), rate)));
								djfkxy.setJfybje(
									bzCon.getFormat(currOid, getDRate(items[i].getJfybje(), rate)));
								djfkxy.setJfshl(items[i].getJfshl()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getJfshl(),rate).setScale(shlDig.intValue(),4));
							}
							//
							//djfkxy.setXydqr(getdate(head.getEffectdate() == null ? head.getDjrq() : head.getEffectdate(), payHead.getCheckdate(), k));
							 /**
							  * @todo 修改收付款协议算法:当收付款协议为固定结算日时,根据协议上的选项是“当月生效”
							  * 还是“下月生效”，如果设置为当月生效,则按原算法,从启效日期的当月开始算第一个结算日;
							  * 如查设置为"下月生效",则第一个结算日从启效日期的下月开始算.以后各期依此类推
							  */
							int date=0;
							if(payHead.getEffectoption()!=null&&payHead.getEffectoption().intValue()==1)
								date=1;
							djfkxy.setXydqr(getdate(items[i].getQxrq() == null ? head.getDjrq() : items[i].getQxrq(), payHead.getCheckdate(), k+date).getDateAfter(iFixaddDate));
//							djfkxy.setDfshl(items[i].getDfshl());
//							djfkxy.setJfshl(items[i].getJfshl());
//							djfkxy.setShlye(items[i].getShlye());

							djfkxy.setFkxyb_oid(payItems[k].getPrimaryKey());

						} else {
							if (k == iNum - 1) {
								//最后一条用特殊处理
								djfkxy.setBbye(bzCon.getFormat(LCurr, Itembb));
								djfkxy.setFbye(bzCon.getFormat(FCurr, Itemfb));
								djfkxy.setYbye(bzCon.getFormat(currOid, Itemyb));

								djfkxy.setDfbbje(bzCon.getFormat(LCurr, ItemDfbb));
								djfkxy.setDffbje(bzCon.getFormat(FCurr, ItemDffb));
								djfkxy.setDfybje(bzCon.getFormat(currOid, ItemDfyb));

								djfkxy.setJfbbje(bzCon.getFormat(LCurr, ItemJfbb));
								djfkxy.setJffbje(bzCon.getFormat(FCurr, ItemJffb));
								djfkxy.setJfybje(bzCon.getFormat(currOid, ItemJfyb));
								djfkxy.setShlye(Itemshl==null?ArapConstant.DOUBLE_ZERO:Itemshl.setScale(shlDig.intValue(),4));
								djfkxy.setDfshl(ItemDfshl==null?ArapConstant.DOUBLE_ZERO:ItemDfshl.setScale(shlDig.intValue(),4));
								djfkxy.setJfshl(ItemJfshl==null?ArapConstant.DOUBLE_ZERO:ItemJfshl.setScale(shlDig.intValue(),4));
							} else {
								//
								djfkxy.setBbye(bzCon.getFormat(LCurr, getDRate(items[i].getBbye(), rate)));
								djfkxy.setFbye(bzCon.getFormat(FCurr, getDRate(items[i].getFbye(), rate)));
								djfkxy.setYbye(bzCon.getFormat(currOid, getDRate(items[i].getYbye(), rate)));

								djfkxy.setDfbbje(
									bzCon.getFormat(LCurr, getDRate(items[i].getDfbbje(), rate)));
								djfkxy.setDffbje(
									bzCon.getFormat(FCurr, getDRate(items[i].getDffbje(), rate)));
								djfkxy.setDfybje(
									bzCon.getFormat(currOid, getDRate(items[i].getDfybje(), rate)));
								djfkxy.setJfbbje(
									bzCon.getFormat(LCurr, getDRate(items[i].getJfbbje(), rate)));
								djfkxy.setJffbje(
									bzCon.getFormat(FCurr, getDRate(items[i].getJffbje(), rate)));
								djfkxy.setJfybje(
									bzCon.getFormat(currOid, getDRate(items[i].getJfybje(), rate)));
								djfkxy.setShlye(items[i].getShlye()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getShlye(),rate).setScale(shlDig.intValue(),4));
								djfkxy.setDfshl(items[i].getDfshl()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getDfshl(),rate).setScale(shlDig.intValue(),4));
								djfkxy.setJfshl(items[i].getJfshl()==null?ArapConstant.DOUBLE_ZERO:getDRate(items[i].getJfshl(),rate).setScale(shlDig.intValue(),4));


							}
							//
							int iDateInter = payItems[k].getAcclimited().intValue();
							djfkxy.setXydqr((items[i].getQxrq() == null ? head.getDjrq() : items[i].getQxrq()).getDateAfter(iDateInter));
//							djfkxy.setJfshl(items[i].getJfshl());
//							djfkxy.setDfshl(items[i].getDfshl());
//							djfkxy.setShlye(items[i].getShlye());

							djfkxy.setSfkxyfb_oid(payItems[k].getPrimaryKey());
							//少最大折扣日。。。
							/**update by st 2002-04-16*/
							nc.vo.bd.b47.PaytermchItemVO zk = null;
							if (vZk != null && vZk.length!= 0) {
								zk = (PaytermchItemVO) vZk[vZk.length-1];
								djfkxy.setLastzkl(zk.getRtntate());
								djfkxy.setLastzkrq((items[i].getQxrq() == null ? head.getDjrq() : items[i].getQxrq()).getDateAfter(zk.getRdata().intValue()));
							}
							/**end of update*/
						}
						//}
						//修改金额
						Itemyb = Itemyb.sub(djfkxy.getYbye());
						Itemfb = Itemfb.sub(djfkxy.getFbye());
						Itembb = Itembb.sub(djfkxy.getBbye());
						Itemshl = Itemshl.sub(djfkxy.getShlye());
						//
						ItemDfyb = ItemDfyb.sub(djfkxy.getDfybje());
						ItemDffb = ItemDffb.sub(djfkxy.getDffbje());
						ItemDfbb = ItemDfbb.sub(djfkxy.getDfbbje());
						ItemDfshl=ItemDfshl.sub(djfkxy.getDfshl());
						//
						ItemJfyb = ItemJfyb.sub(djfkxy.getJfybje());
						ItemJffb = ItemJffb.sub(djfkxy.getJffbje());
						ItemJfbb = ItemJfbb.sub(djfkxy.getJfbbje());
						ItemJfshl=ItemJfshl.sub(djfkxy.getJfshl());
						ls.add(djfkxy);
					}

				}
				items[i].fkxyvos = ls.toArray(new DjfkxybVO[ls.size()]);
				//items[i].fkxyvos = djfkxy;

			}
		} catch (Exception e) {
//			Log.getInstance(this.getClass()).error(e.getMessage(),e);
//			throw ExceptionHandler.createException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("2006030102","UPP2006030102-000521")/*@res "收付款协议拆分出错"*/, e);
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
		
		SystemProfile.getInstance().log("doPayterm end");
		
		return vo;
	}

	/**
	 * 向数据库中插入一个VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param dJZB
	 *            nc.vo.ep.dj.DJZBVO
	 * @return java.lang.String 所插入VO对象的主键字符串。
	 * @throws BusinessException
	 *  service.xml : insertDJZBVO_pri ;flowid="fi_arap_background_public#background_mysystem_insertdjzbvo"
	 */
	public DJZBVO insert(DJZBVO dJZB) throws BusinessException {
		if (DJZBVOConsts.m_intDJStatus_TempSaved == ((DJZBHeaderVO) dJZB.getParentVO()).getDjzt().intValue()) {
			((DJZBHeaderVO) dJZB.getParentVO()).setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_Saved));
			return insertOneDj(dJZB, false);
		} else
			return insertOneDj(dJZB, true);
	}

	private DJZBVO insertOneDj(DJZBVO dJZB, boolean isNew) throws BusinessException {
		DjVOTreaterAid.befSaveUpdateBillBodys(dJZB);
		LoanControllerAction lcr = new LoanControllerAction();
		ResMessage res = lcr.checkBefSave(dJZB);
		
		SystemProfile.getInstance().log("checkBefSave");

		if (!res.isSuccess) {
		throw ExceptionHandler.createException(res.SysErrMsg);
		}
		try {
			DJZBHeaderVO head = (DJZBHeaderVO) dJZB.getParentVO();
			DJZBItemVO[] items = null;
			items = (DJZBItemVO[]) dJZB.getChildrenVO();
//			if (head.getHzbz() != null && head.getHzbz().trim().length() > 0) {
//				if (null != head.getPzglh()) {
//					head.setLybz(head.getPzglh());
//				} else {
//					Logger.error("error: head.getPzglh()==null");
//					return null;
//				}
//
//			}
			if (head.getDjdl().equals("ys") || head.getDjdl().equals("sk")) {

				for (int i = 0; i < items.length; i++) {
					if (items[i] != null && items[i].getWldx().intValue() == 0)
						if (items[i].getOrdercusmandoc() == null || items[i].getOrdercusmandoc().trim().length() < 1)
							items[i].setOrdercusmandoc(items[i].getHbbm());
				}
			}

			if (head.getLybz().intValue() != 9) {
				if ((head.getHzbz() == null || "-1".equals(head.getHzbz() )) && head.getDjbh() != null && head.getDjbh().trim().length() > 0)
					;
				else {
					head.setDjbh(new GetSingleDjbh().getDjbh(dJZB)); // 设置单据编号

				}
			}

			// 外接口新增单据前动作
			long t1 = System.currentTimeMillis();
			nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
			nc.vo.arap.global.BusiTransVO[] busitransvos = null;
			busitransvos = extbo.initBusiTrans("add", head.getPzglh());
			// if ((head.getQcbz() == null ||
			// head.getQcbz().booleanValue()==false)){
			// if(!ZGFLAG.equals(head.getZgyf())){
			new BeforeAddAct().beforeAddInf(busitransvos, dJZB);
			// }
			// }
            ExceptionHandler.debug("add外接口新增单据前动作前所用时间:" + (System.currentTimeMillis() - t1));

            SystemProfile.getInstance().log("arapbillsave insert start");
            
			// 调用其他boupdateForBillUnEff
			DJZBDAO dmo = new DJZBDAO();
			DJZBVO vo = null;
			// 保存单据，自由项。
			if (isNew)
				vo = dmo.insert(dJZB);
			else{
				coopeerateUpdateOriginBillByRedBill(dJZB,false);
				vo = dmo.update(dJZB);
			}
			
			SystemProfile.getInstance().log("arapbillsave insert end ");
			
			invokeSettle.invokeCmp(vo, head.getDjrq());
			
			SystemProfile.getInstance().log("arapbillsave invokeCmp end ");
			
			if ((head.getQcbz() != null && head.getQcbz().booleanValue())/* ||ZGFLAG.equals(head.getZgyf()) */)
				NCLocator.getInstance().lookup(nc.itf.arap.balance.IArapBalanceUpdate.class).updateForBill(new DJZBVO[]{vo});
			else {
				/** **********************************以下开始事项审批控制 */
				if (!head.getDjdl().equals("ss") && "0".equals(head.getSsflag())) {
					lock_item_bill(items, head.getLrr(), 1);
					// itemconfigbo.checkApprove((DJZBVO) vo.clone(), "保存");
					Proxy.getIItemConfigPrivatee().ShenHeSave(vo);
					lock_item_bill(items, head.getLrr(), 1);
					
					SystemProfile.getInstance().log("arapbillsave sxsp end ");
					
				}
				// insertContract(vo);

				/** **************** 协同单据********************** */
				if (head.getXtflag() != null && head.getXtflag().equals("保存")) { /*-=notranslate=-*/

					// 生成新的协同单据
					nc.bs.arap.billcooperation.BillCooperateBO billcooperatebo = new nc.bs.arap.billcooperation.BillCooperateBO();
					billcooperatebo.doCooperate(dJZB);

					SystemProfile.getInstance().log("arapbillsave xt end ");
				}

			}
			//

			// 外接口新增单据后动作
			long t2 = System.currentTimeMillis();
			// if ((head.getQcbz() == null ||
			// head.getQcbz().booleanValue()==false)){
			// if(!ZGFLAG.equals(head.getZgyf())){
			new AfterAddAct().afterAddInf(busitransvos, dJZB);

			// }
			// }
           ExceptionHandler.debug("add外接口新增单据前动作后所用时间:" + (System.currentTimeMillis() - t2));

			String sts = dmo.getTsByPrimaryKey(head.getVouchid(), "arap_djzb");
			if (sts.trim().length() < 3) {
			} else {
				head.setTs(new nc.vo.pub.lang.UFDateTime(sts));
			}
			vo.m_Resmessage.strMessage = vo.m_Resmessage.strMessage + res.strMessage;
			vo.setCmpMap(null);
			//
			return vo;
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	/**
	 * 向数据库中插入一个VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param dJZB
	 *            nc.vo.ep.dj.DJZBVO
	 * @return java.lang.String 所插入VO对象的主键字符串。
	 * @exception BusinessException
	 *                异常说明。
	 */
	public DJZBVO insert_Cooperate(DJZBVO dJZB) throws BusinessException {

		try {
			DJZBHeaderVO head = (DJZBHeaderVO) dJZB.getParentVO();
			DJZBItemVO[] items = null;
			items = (DJZBItemVO[]) dJZB.getChildrenVO();
//			if (head.getHzbz() != null && head.getHzbz().trim().length() > 0) {
//				head.setLybz(head.getPzglh());
//			}
			if (head.getDjdl().equals("ys") || head.getDjdl().equals("sk")) {

				for (int i = 0; i < items.length; i++) {
					if (items[i] != null && items[i].getWldx().intValue() == 0)
						if (items[i].getOrdercusmandoc() == null || items[i].getOrdercusmandoc().trim().length() < 1)
							items[i].setOrdercusmandoc(items[i].getHbbm());
				}
			}

			// DJZBItemVO[] items = (DJZBItemVO[]) dJZB.getChildrenVO();
			if (!DJZBVOConsts.NINE.equals(head.getLybz())) {// 9---代表单据来源：协同单据

				if (head.getDjbh() != null && head.getDjbh().trim().length() > 0)
					;
				else {
					head.setDjbh(new GetSingleDjbh().getDjbh(dJZB)); // 设置单据编号
				}
			}

			// 调用其他bo
			DJZBDAO dmo = new DJZBDAO();
			// 保存单据，自由项。

			DJZBVO vo = dmo.insert(dJZB);
			invokeSettle.invokeCmp(vo, head.getDjrq());
			return vo;
		} catch (Exception e) {

//    Log.getInstance(this.getClass()).error(e.getMessage(),e);
//
//    throw ExceptionHandler.createException("DJZBBO::insert_Cooperate(dJZB) Exception!", e);
	throw ExceptionHandler.handleException(this.getClass(), e);
		}

	}


	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @return nc.vo.ep.dj.DJZBVO
	 * @param key
	 *            String
	 * @exception BusinessException
	 *                异常说明。
	 */
	public boolean isFa(String pk_corp) throws BusinessException {
		try {
			// nc.bs.sm.createcorp.CreatecorpBO fabo = new
			// nc.bs.sm.createcorp.CreatecorpBO();
			Object[] retobj = Proxy.getICreateCorpQueryService().queryEnabledPeriod(pk_corp, "FA");
			if (retobj == null || ((String[]) retobj)[0] == null)
				return false;
			else
				return true;
		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBean::isFa(pk_corp) Exception!", e);
    	throw ExceptionHandler.handleException(this.getClass(), e);
		}

	}

	/**
	 * 此处插入方法描述。 创建日期：(2004-3-2 16:12:48)
	 *
	 * @author：chenf
	 * @return boolean when update czflag<0
	 * @param vo
	 *            nc.vo.ep.dj.DJZBVO
	 * @deprecated new LockBillItem().lock_item_bill(DJZBItemVO[] items, String
	 *             user, int czflag)
	 */
	public boolean lock_item_bill(DJZBItemVO[] items, String user, int czflag) throws BusinessException {

		if (items == null || items.length < 1)
			return true;

		int leng = items.length;
		String[] djpks = null;

		Vector<String> v = new Vector<String>();

		for (int i = 0; i < leng; i++) {

			try {
				String djpk = items[i].getItem_bill_pk();

				if (djpk != null && djpk.trim().length() > 0) {
					if (!v.isEmpty() && v.indexOf(djpk) >= 0)
						;
					else
						v.addElement(djpk);
				}
				if (czflag < 0) {
					djpk = items[i].getItem_bill_pk();
					if (djpk != null && djpk.trim().length() > 0) {
						if (!v.isEmpty() && v.indexOf(djpk) >= 0)
							;
						else
							v.addElement(djpk);
					}
				}

			} catch (Exception e) {
        	ExceptionHandler.handleException(this.getClass(), e);
//        	ExceptionHandler.consume(e);
//            throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000527")/*@res "lock_item_bill加锁失败"*/,e);
			}

		}
		if (v.size() > 0) {
			djpks = new String[v.size()];
			v.copyInto(djpks);
		}
		try {
			if (djpks != null && djpks.length > 0) {
				// Update By Top 2004-5-14
				ApplayBillDMO appdmo = new ApplayBillDMO();
				appdmo.updateForLockByPks("arap_item", djpks);
				// KeyLock lock = new KeyLock();
				for (String djpk : djpks)
					KeyLock.dynamicLock(djpk);
			}

		} catch (Exception e) {
    	ExceptionHandler.handleException(this.getClass(), e);
//    	ExceptionHandler.consume(e);
//        throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000527")/*@res "lock_item_bill加锁失败"*/,e);
		}

		return true;
	}

	/**
	 * 单据正式打印 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public boolean officialPrint(DJZBHeaderVO head) throws BusinessException {

		boolean b = false;
		try {
			lockDJ(head.getVouchid());
			DJZBDAO dmo = new DJZBDAO();
			b = dmo.officialPrint(head);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBO::officialPrint(DJZBVO) Exception!", e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return b;
	}

	/**
	 * 单据表体挂起或取消挂起 作者：阿飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public String pausetransact(String key, String pausetransact) throws BusinessException {
    String strTS = null;

		try {

			DJZBDAO dmo = new DJZBDAO();
			lockDJ(key);
			strTS = dmo.pausetransact(key, pausetransact);

		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException(
//			"DJZBBO::pausetransact(key,pausetransact) Exception!",
//			e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return strTS;
	}

	/**
	 * 查询单据(包括 表头,表体) 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
	public DJZBVO[] queryDjAll_Hz(DjCondVO djcon) throws BusinessException {
		DJZBVO[] djzbvos = null;

		try {
			// String key = djcon.getSqlWhere();

			DJZBDAO dmo = new DJZBDAO();
			djzbvos = dmo.queryDjAll_Hz(djcon);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::queryDjAll(djcon) Exception!",e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return djzbvos;
	}

	/**
	 * 查询单据 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBHeaderVO[]
	 */
	public DJZBHeaderVO[] queryDjLbbyTS(DjCondVO djcon) throws BusinessException {
		DJZBHeaderVO[] head = null;
		try {
			String key = djcon.getSqlWhere();
			DJZBDAO dmo = new DJZBDAO();
			head = dmo.queryHeadbyTS(key);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey(DJZBPK) Exception!",e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return head;
	}

	/**
	 * 查询列表表体 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBItemVO[]
	 * @param djzboid
	 *            java.lang.String
	 */
	public DJZBItemVO[] queryDjzbitems(String djzboid) throws BusinessException {
		DJZBItemVO[] dJZBitem = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZBitem = dmo.findItemsForHeader(djzboid);
		} catch (Exception e) {
		throw	ExceptionHandler.handleException(this.getClass(), e);

		}
		return dJZBitem;
	}

	/**
	 * 查询列表表体 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBItemVO[]
	 * @param djzboid
	 *            java.lang.String
	 */
	public DJZBItemVO[] queryDjzbitemsDelIncluded(String djzboid) throws BusinessException {
		if (djzboid == null || djzboid.length() == 0) {
			return null;
		}
		DJZBItemVO[] dJZBitem = null;
		try {

			Vector v = dmo.findItemsByCondition(" where vouchid='" + djzboid + "'");
			if (v.size() > 0) {
				dJZBitem = new DJZBItemVO[v.size()];
				v.copyInto(dJZBitem);
			}
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::queryDjzbitemsDelIncluded(DJZBPK) Exception!",e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBitem;
	}

	/**
	 * 查询列表表体 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBItemVO[]
	 * @param djzboid
	 *            java.lang.String
	 */
	public DJZBItemVO[] queryDjzbitems_SS(String djzboid) throws BusinessException {
		DJZBItemVO[] dJZBitem = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZBitem = dmo.findItemsForHeader_SS(djzboid);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey(DJZBPK) Exception!",e);
		throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBitem;
	}

	/**
	 * 查询列表表体 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJZBItemVO[]
	 * @param djzboid
	 *            java.lang.String
	 */
	public DJZBItemVO[] queryDjzbitems_SS4(String djzboid) throws BusinessException {
		DJZBItemVO[] dJZBitem = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			dJZBitem = dmo.findItemsForHeader_SS4(djzboid);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBitem;
	}

	/**
	 * 联查自由项 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return nc.vo.ep.dj.DJFBVO
	 * @param djfboid
	 *            java.lang.String
	 */
	public DJFBVO queryZyx(String djfboid) throws BusinessException {
		DJFBVO dJZBitem = null;
		try {
			DJFBDAO dmo = new DJFBDAO();
			dJZBitem = dmo.findByPrimaryKey(djfboid);
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBean::findByPrimaryKey(DJZBPK) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return dJZBitem;
	}

	/**
	 * 此处插入方法说明。 退单据号 创建日期：(2001-10-18 9:42:57)
	 *
	 * @author：陈飞
	 * @return java.lang.String
	 *
	 * nc.bs.pub.billcodemanage.BillcodeRuleBO. getBillCode(String billTypeCode
	 * ,String pkcorp , String customBillCode , BillCodeObjValueVO vo)；
	 *
	 * 参数：billTypeCode --单据类型主键，必须提供。 pkcorp --公司主键，如果是集团，该参数设置为null，
	 * 如果是子公司，设置为该子公司的公司主键值。 customBillCode--手工提供的单据号，如果没有提供手工单据号，此参数设置为null。
	 * 如果提供了手工单据号，系统会检查它是否唯一，如果唯一，将把它作为 单据号返回，如果不唯一，将抛出ValidationException例外。 vo
	 * --此vo保存了用于单据号编码中各个对象的取值，对于某一种单据类型 的每一个对象，程序员都需要应用 vo.
	 * setAttributeValue(String[] name, Object[] value) 或 vo.
	 * setAttributeValue(String name, Object value)方法为vo设置各个对象的
	 * 属性值。name为对象名称，value为具体对象的主键值
	 *
	 * 例如，假如销售订单总共有两个对象：部门，业务员。而对于一个具体的 销售订单，他的两个对象的主键值分别为"001" ，"111"，那么程序员
	 * 就需要编写如下代码： BillCodeObjValueVO vo=new BillCodeObjValueVO();
	 * vo.setAttributeValue("部门","001")； vo.setAttributeValue("业务员","111"); 或者
	 * BillCodeObjValueVO vo=new BillCodeObjValueVO(); String
	 * []names={"部门","业务员"}; String []values={"001","111"};
	 * vo.setAttributeValue(names,values); 返回值：该方法将返回一个唯一的单据号，如果获取单据号失败，该方法将抛出
	 * nc.vo.pub.ValidationException例外，例外保存了失败的原因，可用e.getMessage()获得。
	 *
	 */
	public void returnBillCode(DJZBVO djzbvo) throws BusinessException {
		returnBillCode(djzbvo, true);
	}

	/**
	 * 单据新增保存 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public ArrayList<Object> save(DJZBVO djzbvo) throws BusinessException, nc.vo.pub.BusinessException {
	
		DjVOTreaterAid.convertDJZBVO(djzbvo);
		ArrayList<Object> al = new ArrayList<Object>();
//		DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();
		
		DJZBVO dj = null;

		if (djzbvo.m_isQr)
			dj = editDj(djzbvo);
		else {

			dj = saveDj(djzbvo);// insert(doPayterm(djzbvo));
		}
		if (djzbvo.m_Resmessage.intValue == ResMessage.$BUGET_ALARM)
			throw new BugetAlarmBusinessException(
					djzbvo.m_Resmessage.strMessage);
		String key = ((DJZBHeaderVO) (dj.getParentVO())).getPrimaryKey();
		al.add(0, key);
		al.add(1, dj);
		return al;
	}

	/**
	 * 单据新增保存(供应链用） 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public ArrayList saveAPBillForSettle(DJZBVO[] djzbvos) throws BusinessException, nc.vo.pub.BusinessException {
		if (djzbvos == null || djzbvos.length == 0)
			return null;
		ArrayList<ArrayList> al = new ArrayList<ArrayList>();
		for (int i = 0; i < djzbvos.length; i++) {
    	for(DJZBItemVO item:(DJZBItemVO[])djzbvos[i].getChildrenVO())
        	item.setStatus(VOStatus.NEW);
			ArrayList reAr = save(djzbvos[i]);
			al.add(i, reAr);
		}

		return al;
	}

//	/**
//	 * 单据新增保存 作者：邱冬强
//	 *
//	 * @version 最后修改日期
//	 * @see 需要参见的其它类
//	 * @return java.lang.String
//	 * @param djzbvo
//	 *            nc.vo.ep.dj.DJZBVO
//	 */
//	public DJZBVO saveDj(DJZBVO djzbvo) throws BusinessException {
//    try {
//    	DJZBItemVO[] items=(DJZBItemVO[] )djzbvo.getChildrenVO();
//    	for(int i=0,size=items.length;i<size;i++){
//    		items[i].setBilldate(((DJZBHeaderVO)djzbvo.getParentVO()).getDjrq());
//    		if( DJZBVOConsts.m_intDJStatus_TempSaved!=((DJZBHeaderVO)djzbvo.getParentVO()).getDjzt())
//    			items[i].setStatus(VOStatus.NEW);
//    		if(null==items[i].getQxrq()||items[i].getQxrq().toString().length()==0){
//    			items[i].setQxrq(((DJZBHeaderVO)djzbvo.getParentVO()).getEffectdate());
//
//    		}
//    	}
//		return (DJZBVO) new FlowEngine().startService("SaveOneNewDj_pri", djzbvo);
//    } catch (Exception e) {
//    	throw ExceptionHandler.handleException(this.getClass(), e);
//    }
//   }

	public DJZBVO saveDj(DJZBVO djzbvo) throws BusinessException {
		SystemProfile.getInstance().log("saveStart");
		//保存前校验
		saveValidate(djzbvo);
		
		SystemProfile.getInstance().log("saveValidate");
	    try {
	    	DJZBHeaderVO head=(DJZBHeaderVO)djzbvo.getParentVO();
	    	if(null==head.getHzbz())head.setHzbz("-1");
	    	DJZBItemVO[] items=(DJZBItemVO[] )djzbvo.getChildrenVO();
	    	for(int i=0,size=items.length;i<size;i++){
	    		items[i].setBilldate(((DJZBHeaderVO)djzbvo.getParentVO()).getDjrq());
	    		if( DJZBVOConsts.m_intDJStatus_TempSaved!=((DJZBHeaderVO)djzbvo.getParentVO()).getDjzt())
	    			items[i].setStatus(VOStatus.NEW);
	    		if(null==items[i].getQxrq()||items[i].getQxrq().toString().length()==0){
	    			items[i].setQxrq(((DJZBHeaderVO)djzbvo.getParentVO()).getEffectdate());
	    		}
	    		if(null==items[i].getDwbm()){
	    			items[i].setDwbm(head.getDwbm());
	    		}
	    		if(null==items[i].getYwbm()){
	    			items[i].setYwbm(head.getYwbm());
	    		}
	    	}
	        //if(((DJZBHeaderVO)djzbvo.getParentVO()).getLybz().intValue()!=0){
	            djzbvo.setParam_Ext_Save();
	            DjVOTreaterAid.supplementXTFlag(djzbvo);
	        //}
	    } catch (Exception e) {
	    	throw ExceptionHandler.handleException(this.getClass(), e);

	    }
	    return insert(doPayterm(djzbvo));
	}

	/**
	 * 保存协同单据 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public DJZBVO saveDj_Cooperate(DJZBVO djzbvo) throws BusinessException {
    for(DJZBItemVO item:(DJZBItemVO[])djzbvo.getChildrenVO())
    	item.setStatus(VOStatus.NEW);
		return insert_Cooperate(new DoPayTerm().doPayterm(djzbvo));
	}

	/**
	 * 坏账发生,收回时保存单据 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO 注:如果本年坏账已经计提再修改期末余额,坏账发生期末余额-hzye
	 *            坏账收回则期末余额+hzye
	 */
	public DJZBVO saveDj_Hz(DJZBVO djzbvo) throws BusinessException {
	 for(DJZBItemVO item:(DJZBItemVO[])djzbvo.getChildrenVO())
	    	item.setStatus(VOStatus.NEW);

		return (DJZBVO) new FlowEngine().startService("insertDJZBVO_pri", new DoPayTerm().doPayterm(djzbvo));
//		return insert(new DoPayTerm().doPayterm(djzbvo));
	}



	/**
	 * 单独自由项新增保存 作者：邱冬强
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djfbitemvo
	 *            nc.vo.ep.dj.DJFBItemVO
	 */
	public DJFBVO saveZyx(DJFBVO djfbvo) throws BusinessException {
		try {
			DJFBDAO dmo = new DJFBDAO();
			DJZBItemVO item = (DJZBItemVO) djfbvo.getParentVO();
			dmo.deleteItemsForHeader(item.getFb_oid());
			DJFBVO key = dmo.insert(djfbvo);
			//

			return key;
		} catch (Exception e) {
//		Log.getInstance(this.getClass()).error(e.getMessage(),e);
//		throw ExceptionHandler.createException("DJZBBO::insert(DJZBVO) Exception!",e);
		throw ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	/**
	 * 生成托收单时回填单据
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param dJZB
	 *            nc.vo.ep.dj.DJZBVO
	 * @exception BusinessException
	 *                异常说明。 fboid单据表体pk集合,pk_bankrecive托收单pk集合
	 */
	public void setBankRecivePk(String[] fboid, String pk_bankrecive, String[] tss) throws BusinessException {

		try {
			DJZBDAO dmo = new DJZBDAO();
			for (int i = 0; i < fboid.length; i++) {
				dmo.setBankRecivePk(fboid[i], pk_bankrecive, tss[i]);

			}

		} catch (Exception e) {
			Log.getInstance(this.getClass()).error(e.getMessage(), e);
//    throw ExceptionHandler.createException("DJZBBO::update(DJZBVO) Exception!", e);
	 throw	ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	/**
	 * 为销售管理的订单处理的收款单据打上或取消特殊标志
	 *
	 * 创建日期：(2001-5-31)
	 *
	 * @param
	 * @exception BusinessException
	 *                异常说明。 fb_oid付表主键 ,取消标志时othersysflag=null
	 *                打上标志时为系统明如：othersysflag='销售管理',
	 *                取消标志时pausetransact=false,打上标志时pausetransat=true 作者:陈飞
	 */
	public void setOtherSysFlag(String fb_oid, String othersysflag, nc.vo.pub.lang.UFBoolean pausetransact)
			throws BusinessException {

		try {

			DJZBDAO dmo = new DJZBDAO();

			dmo.setOtherSysFlag(fb_oid, othersysflag, pausetransact);
		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("DJZBBO::setOtherSysFlag(fb_oid,othersysflag,pausetransact) Exception!", e);
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	/**
	 * author:wangqiang create time: 2004-08-05 function: check whether the ss
	 * bill item is already closed
	 */
	private boolean ssItemIsClosed(DJZBItemVO itemVO) {
		// functionary for the close operation
		String strCloser = itemVO.getCloser();
		// date for close
		if (strCloser == null || strCloser.trim().length() == 0)
			return false;
		// judge whether the item is already closed according functionary alone
		// temporarily
		return true;
	}

	/**
	 * 反审核单据 创建日期：(2001-9-3 17:31:51)
	 *
	 * @return java.lang.String[]
	 * @param djs
	 *            nc.vo.ep.dj.DJZBVO[]
	 *
	 *
	 *
	 */
	public nc.vo.arap.global.ResMessage[] unAuditABills2(nc.vo.ep.dj.DJZBVO[] djs) throws BusinessException {
		if (djs == null || djs.length < 1)
			return null;
		nc.vo.arap.global.ResMessage[] res = new nc.vo.arap.global.ResMessage[djs.length];
		// nc.bs.mw.itf.NCFlag.bSqlOutput = true;
		nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
		nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("unshenhe", ((DJZBHeaderVO) djs[0]
				.getParentVO()).getPzglh());

		DJZBHeaderVO head = null;
		// ApplayBill abo = null;
		DJZBHeaderVO[] heads = null;
		nc.vo.ep.dj.DJZBVO[] dj_2 = new nc.vo.ep.dj.DJZBVO[djs.length], dj_temp = null;
		Vector<CircularlyAccessibleValueObject> v = new Vector<CircularlyAccessibleValueObject>();
		for (int i = 0, j = 0; i < djs.length; i++) {
			if (djs[i].getChildrenVO() == null)
				v.addElement(djs[i].getParentVO());
			else {
				dj_2[j] = djs[i];
				j++;
			}

		}
		try {
			if (v.size() > 0) {
				heads = new DJZBHeaderVO[v.size()];
				v.copyInto(heads);
				DJZBDAO dmo = new DJZBDAO();
				dj_temp = dmo.getDjVObyHeaderVos(heads);
				System.arraycopy(dj_temp, 0, dj_2, dj_2.length - v.size(), v.size());
			}
			// Add by Songtao 批量检查单据是否可以反审核
			try {
				ArapDjBsCheckerBO checkBo = new ArapDjBsCheckerBO();
				res = checkBo.checkUnApproveBills(dj_2);
			} catch (Exception e) {
        	throw	ExceptionHandler.handleException(this.getClass(), e);
			}
			for (int i = 0; i < dj_2.length; i++) {
				head = (DJZBHeaderVO) dj_2[i].getParentVO();
				// Update by Songtao 2005-03-23 for bath Check 判断已经不合法的数据不再次送去执行
				if (res[i] == null) {
					try {
						lockDJ(head.getVouchid());
						res[i] = ProxyBill.getInstance().getIArapBillPrivate().unAuditABill_RequiresNew(dj_2[i], busitransvos);
						if (res[i].isSuccess)
							res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102",
									"UPP2006030102-000532")/*
															 * @res
															 * "反审核单据成功，单据号： "
															 */
									+ head.getDjbh() + "\n" + res[i].strMessage;
						else
							res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102",
									"UPP2006030102-000533")/*
															 * @res
															 * "反审核单据失败，单据号： "
															 */
									+ head.getDjbh() + "\n" + res[i].strMessage;

					} catch (Exception e) {
	            	ExceptionHandler.consume(e);
						if (res[i] == null)
							res[i] = new nc.vo.arap.global.ResMessage();
						res[i].isSuccess = false;

						res[i].strMessage = e.getMessage();
						res[i].strMessage = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102",
								"UPP2006030102-000533")/* @res "反审核单据失败，单据号： " */
								+ head.getDjbh() + "\n" + res[i].strMessage;

					}
				}// End Update
				res[i].listIndex = head.listIndex;// dj_2[i].listIndex;
				res[i].vouchid = head.getVouchid();// dj_2[i].vouchid;

			}

		} catch (Exception e) {
//    	Log.getInstance(this.getClass()).error(e.getMessage(),e);
//        throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.unAuditABills2", e);
    	throw	ExceptionHandler.handleException(this.getClass(), e);

		}
		// by songtao 存在类型转换异常 请仔细检查！！！2006-09-28
		// /*清除后台补充的单据表体行数据，减少网络流量。*/
		// try{
		// if(v!=null){
		// for(int i=0;i<v.size();i++){
		// ((DJZBVO)v.elementAt(i)).setChildrenVO(null);
		// }
		// }
		// }catch(Exception e){
		// Log.getInstance(this.getClass()).error(e.getMessage(),e);
		// throw new BusinessException(e.getMessage(),e);
		// }
    ExceptionHandler.debug("批反审核返回...");
		return res;
	}


	/**
	 * 网上转账时设置 转账状态
	 *
	 * 创建日期：(2001-5-31)
	 * @param dJZB nc.vo.ep.dj.DJZBVO
	 * @exception BusinessException 异常说明。
	 */
	public void wszz(DJZBVO[] dJZB) throws BusinessException {

		try {
			DJZBDAO dmo = new DJZBDAO();
			dmo.wszz(dJZB);
		}
		catch (Exception e) {
//			Log.getInstance(this.getClass()).error(e.getMessage(),e);
//			throw ExceptionHandler.createException("DJZBBO::wszz(DJZBVO) Exception!",e);
			throw	ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	/**
	 * 单据打上预收付标志 作者：陈飞
	 *
	 * @version 最后修改日期
	 * @see 需要参见的其它类
	 * @return java.lang.String
	 * @param djzbvo
	 *            nc.vo.ep.dj.DJZBVO
	 */
	public nc.vo.arap.global.ResMessage ysfDj(DJZBVO djzbvo) throws BusinessException, nc.vo.pub.BusinessException {

		DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();
		String vouchid = head.getPrimaryKey();
		lockDJ(head.getVouchid());
		nc.vo.arap.global.ResMessage res = new nc.vo.arap.global.ResMessage();
		try {
			head.setPrepay(new nc.vo.pub.lang.UFBoolean(true));
			BusiTransVO[] busitransvos = null;
			ArapExtInfRunBO extbo = new ArapExtInfRunBO();
			// if ((head.getQcbz() == null ||
			// head.getQcbz().booleanValue()==false)){
			busitransvos = extbo.initBusiTrans("prepay", head.getPzglh());
			if (busitransvos != null) {
				for (int i = 0; i < busitransvos.length; i++) {
					try {
						((IArapPrePayPlugin) busitransvos[i].getInfClass()).beforePrepayAct(djzbvo);
					} catch (Exception e) {
                    	String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
                    	ExceptionHandler.error(strerr);
                        throw ExceptionHandler.createException(strerr,e) ;

					}
				}
			}

			DJZBDAO dmo = new DJZBDAO();
			dmo.ysfDj(vouchid);
			if (busitransvos != null) {
				for (int i = 0; i < busitransvos.length; i++) {
					try {
						((IArapPrePayPlugin) busitransvos[i].getInfClass()).afterPrepayAct(djzbvo);
					} catch (Exception e) {

                    	ExceptionHandler.error(
                            busitransvos[i].getSystemname() + busitransvos[i].getNote() + "\n" + e.getMessage());

                        String strerr=busitransvos[i].getUsesystemname() + busitransvos[i].getNote()+"\n"+e.getMessage();
                        throw ExceptionHandler.createException(strerr,e);

					}
				}
			}
			ArapDjBsCheckerBO bocheck = new ArapDjBsCheckerBO();
			// 补充地区分类,“是否主辅币核算”
			try {
				bocheck.supplementAllInfos(new DJZBVO[] { djzbvo });
			} catch (Exception e) {
    		    throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000545")/*@res "数据库访问失败！"*/);
			}
			if (head.getSxbz().intValue() == DJZBVOConsts.m_intSXBZ_VALID) {
				// ///**会计平台*/
				// 初始化平台VO
				DapMsgVO PfStateVO = DjbsStatTool.getDapmsgVOforPrePay(djzbvo);
				// 处理类型为审核
				PfStateVO.setMsgType(DapMsgVO.ADDMSG);
				// 传消息给会计平台
            ExceptionHandler.debug(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000534")/*@res "..................向平台传数据...................."*/);

				FipCallFacade fcf = new FipCallFacade();
				fcf.sendMessage(PfStateVO, djzbvo);
				// dp.remove();
			}
			res.m_Ts = dmo.getTsByPrimaryKey(head.getVouchid(), "arap_djzb");
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(),e);
		}
		return res;
	}

	/**
	 * 此处插入方法说明。 退单据号 创建日期：(2001-10-18 9:42:57)
	 *
	 * @author：陈飞
	 * @return java.lang.String
	 *
	 * nc.bs.pub.billcodemanage.BillcodeRuleBO. getBillCode(String billTypeCode
	 * ,String pkcorp , String customBillCode , BillCodeObjValueVO vo)；
	 *
	 * 参数：billTypeCode --单据类型主键，必须提供。 pkcorp --公司主键，如果是集团，该参数设置为null，
	 * 如果是子公司，设置为该子公司的公司主键值。 customBillCode--手工提供的单据号，如果没有提供手工单据号，此参数设置为null。
	 * 如果提供了手工单据号，系统会检查它是否唯一，如果唯一，将把它作为 单据号返回，如果不唯一，将抛出ValidationException例外。 vo
	 * --此vo保存了用于单据号编码中各个对象的取值，对于某一种单据类型 的每一个对象，程序员都需要应用 vo.
	 * setAttributeValue(String[] name, Object[] value) 或 vo.
	 * setAttributeValue(String name, Object value)方法为vo设置各个对象的
	 * 属性值。name为对象名称，value为具体对象的主键值
	 *
	 * 例如，假如销售订单总共有两个对象：部门，业务员。而对于一个具体的 销售订单，他的两个对象的主键值分别为"001" ，"111"，那么程序员
	 * 就需要编写如下代码： BillCodeObjValueVO vo=new BillCodeObjValueVO();
	 * vo.setAttributeValue("部门","001")； vo.setAttributeValue("业务员","111"); 或者
	 * BillCodeObjValueVO vo=new BillCodeObjValueVO(); String
	 * []names={"部门","业务员"}; String []values={"001","111"};
	 * vo.setAttributeValue(names,values); 返回值：该方法将返回一个唯一的单据号，如果获取单据号失败，该方法将抛出
	 * nc.vo.pub.ValidationException例外，例外保存了失败的原因，可用e.getMessage()获得。
	 *
	 */
	public void returnBillCode(DJZBVO djzbvo, boolean isNewTrans) throws BusinessException {

		DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();

		DJZBItemVO[] items = djzbvo.getChildrenVO() == null ? null : (DJZBItemVO[]) djzbvo.getChildrenVO();

		// 查询单据表体
		if (items == null) {
			DJZBDAO djdmo;
			try {
				djdmo = new DJZBDAO();
        }catch(Exception e)
        {
        	throw	ExceptionHandler.handleException(this.getClass(), e);
			}

			try {

				if (head.getPzglh().intValue() == 3 || head.getDjdl().equals("ss"))
					items = djdmo.findItemsForHeader_SS(head.getPrimaryKey());
				else
					items = djdmo.findItemsForHeader(head.getPrimaryKey());
			} catch (Exception e) {
        	ExceptionHandler.handleException(this.getClass(), e);
			}
			djzbvo.setChildrenVO(items);
		}

		nc.vo.pub.billcodemanage.BillCodeObjValueVO vo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();
		vo.setAttributeValue(NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0000404")/*
																											 * @res
																											 * "公司"
																											 */, head.getDwbm());
		vo.setAttributeValue(NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0001589")/*
																											 * @res
																											 * "客户"
																											 */, items == null ? null : items[0].getHbbm());
		vo.setAttributeValue(NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0000275")/*
																											 * @res
																											 * "供应商"
																											 */, items == null ? null : items[0].getHbbm());
		vo.setAttributeValue(NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0004064")/*
																											 * @res
																											 * "部门"
																											 */, items == null ? null : items[0].getDeptid());
		vo
				.setAttributeValue(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102",
						"UPT2006030102-000013")/* @res "业务员" */, items == null ? null : items[0].getYwybm());

    ExceptionHandler.debug("单据类型编码:" + head.getDjlxbm() + " 单位:" + head.getDwbm());
		// nc.bs.pub.billcodemanage.BillcodeRuleBO codeRule = null;

		try {
			if (!isNewTrans) {
				Proxy.getIBillcodeRuleService().returnBillCodeOnDelete(head.getDwbm(), head.getDjlxbm(),
						head.getDjbh(), vo);
			} else {
				Proxy.getIBillcodeRuleService().returnBillCodeOnDelete(head.getDwbm(), head.getDjlxbm(),
						head.getDjbh(), vo);
			}

		} catch (Exception e) {
    	ExceptionHandler.handleException(this.getClass(), e);
//    	ExceptionHandler.consume(e);
//    	String strerr = NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-000529")/*@res "退单据号出错\n"*/ + e.getMessage();
////        E.m_Exception = e;
////        throw E;
//        ExceptionHandler.createException(strerr,e);

		}
		return;
	}


	public java.util.Vector filterDjHeaders_SS(Integer initPos,Integer count, DjCondVO djcond) throws BusinessException {
		if (null == initPos || null == count || initPos.intValue() < 0 || count.intValue() < 0)
			throw new IllegalArgumentException();
		Vector ret;
		try {
			DJZBDAO dmo = new DJZBDAO();
			ret = dmo.queryDjLb_SS(initPos, count, djcond);
		} catch (Exception e) {
			Log.getInstance(this.getClass()).error(e.getMessage(), e);
			throw new BusinessShowException(e.getMessage());
		}
		return ret;
	}

	/**
	 * @function 通用查询入口 供单据管理使用的查询
     * @author maji
     * @since v6.0
     *
     */
	@SuppressWarnings("unchecked")
	public java.util.Vector filterDj(Integer initPos,Integer count, nc.vo.ep.dj.DjCondVO djcond)
			throws BusinessException {

		if (null == initPos || null == count || initPos.intValue() < 0 || count.intValue() < 0)
			throw new BusinessShowException(new IllegalArgumentException());
		//Vector ret;
		Vector<DJZBVO> ret = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			//ret = dmo.queryDjLb(initPos, count, djcond);
			Vector headVector= dmo.queryDjLb(initPos, count, djcond);
			if(headVector != null){
				DJZBVO[] djzbvoList = findItem_ByHead((DJZBHeaderVO[]) headVector.toArray(new DJZBHeaderVO[headVector.size()]));
				if(djzbvoList != null && djzbvoList.length > 0){
					ret = new Vector<DJZBVO>(Arrays.asList(djzbvoList));
				}
			}

		} catch (Exception e) {
			Log.getInstance(this.getClass()).error(e.getMessage(), e);
			throw new BusinessShowException(e.getMessage());
		}
		return ret;
	}
	/**
	 *
	 * <p>
	 *   供查询节点使用的查询
	 * </p>
	 * <p>
	 *    使用前提
	 * </p>
	 * <p>
	 * <Strong>已知的BUG：</Strong>
	 * 	<ul>
	 * 		<li></li>
	 *  </ul>
	 * </p>
	 *
	 * <p>
	 * <strong>修改历史：</strong>
	 * 	<ul>
	 * 		<li><ul>
	 * 			<li><strong>修改人:</strong>rocking</li>
	 * 			<li><strong>修改日期：</strong>2005-12-19</li>
	 * 			<li><strong>修改内容：<strong></li>
	 * 			</ul>
	 * 		</li>
	 * 		<li>
	 * 		</li>
	 *  </ul>
	 * </p>
	 *
	 * @author rocking
	 * @version V5.0
	 * @since V3.1
	 * @param p0
	 * @param p1
	 * @param p2
	 * @return
	 * @throws BusinessException
	 */
	@SuppressWarnings("unchecked")
	public java.util.Vector filterDjHeadersQry(Integer initPos,Integer count, nc.vo.ep.dj.DjCondVO djcond) throws BusinessException
	{
		if (null == initPos || null == count || initPos.intValue() < 0
				|| count.intValue() < 0)
			throw new BusinessShowException(new IllegalArgumentException());
		Vector ret = null;
		try {
			DJZBDAO dmo = new DJZBDAO();
			Vector headVector = dmo.queryDjLbQ_djcond(initPos, count, djcond);
			if (headVector != null) {
				DJZBVO[] djzbvoList = null;
				if (!djcond.isJustQryDel) {
					djzbvoList = findItem_ByHead((DJZBHeaderVO[]) headVector.toArray(new DJZBHeaderVO[headVector.size()]));
				} else {
					djzbvoList = findItemDel_ByHead((DJZBHeaderVO[]) headVector.toArray(new DJZBHeaderVO[headVector.size()]));
				}
				if (djzbvoList != null && djzbvoList.length > 0) {
					ret = new Vector<DJZBVO>(Arrays.asList(djzbvoList));
				}
			}
		} catch (Exception e) {
			throw ExceptionHandler.handleException(this.getClass(), e);
		}
		return ret;
	}

	/**
	 * 委托收款书保存、收款成功、收款失败时，更新来源单据状态
	 *
	 * @author rocking
	 * @version V5.0
	 * @since V3.1
	 * @param billPk
	 * @param vo
	 * @throws BusinessException
	 */
	public void updateArapBillByFTSReceiver(IFTSReceiverVO vo) throws BusinessException {
		DJZBDAO dmo = null;
		DJZBVO zbvo = null;
		DJZBItemVO[] items = null;
		DJZBHeaderVO headvo = null;
		try {

			dmo = new DJZBDAO();
			zbvo = dmo.findByPrimaryKey(vo.getArapBillPk());
			zbvo.setm_OldVO((DJZBVO) zbvo.clone());
			headvo = (DJZBHeaderVO) zbvo.getParentVO();
         if(!IFTSReceiverVO.FTS_RECEIVE_SAVE.equals(vo.getActName()))
			lockDJ(headvo.getVouchid());
			items = (DJZBItemVO[]) zbvo.getChildrenVO();
			headvo = (DJZBHeaderVO) zbvo.getParentVO();
		} catch (Exception e) {
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		if (null == headvo)
        throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-000371")/*@res "源单据不存在！"*/);

		try {
			// 委托收款书已经保存 or
			if (IFTSReceiverVO.FTS_RECEIVE_SAVE.equals(vo.getActName())) {
	    	if(DJZBVOConsts.FTS_RECEIVER_GOING.equals(headvo.getZzzt())||DJZBVOConsts.FTS_RECEIVER_SUCCESS.equals(headvo.getZzzt())){
	        	throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPT2006-v51-000020"));
	        }
				headvo.setZzzt(DJZBVOConsts.FTS_RECEIVER_GOING);
				headvo.setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_TempSaved));
				headvo.setJszxzf(new Integer(DJZBVOConsts.m_intJSZXZF_BCenter));
				dmo.updateHeader(headvo);
				return;
			}
			KeyLock.dynamicLock(headvo.getPrimaryKey());
			// 委托收款成功
			if (IFTSReceiverVO.FTS_RECEIVE_SUCCESS.equals(vo.getActName())) {
				if (null == vo.getBodyMoney()) {
	        	ExceptionHandler.debug("收款金额无效 ");
                throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-001091") );
				}
				Map originMap = getMapByDJZBItemVOs(items);
	        UFDouble sum=ArapCommonTool.getZero();
				Iterator it = vo.getBodyMoney().keySet().iterator();
				while (it.hasNext()) {
					String fbpk = (String) it.next();
					UFDouble mny = (UFDouble) vo.getBodyMoney().get(fbpk);
					DJZBItemVO item = (DJZBItemVO) originMap.get(fbpk);
	            if(null==mny||ArapCommonTool.isLessZero(mny )){
	            	ExceptionHandler.debug("收款金额无效 ");
	                throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-001091") );
	            }
	            else if (ArapCommonTool.isZero(mny )){
						item.setStatus(VOStatus.DELETED);
						continue;
					} else {
						// 原币金额被修改
						if (!mny.equals(item.getDfybje())) {
							item.setDfybje(mny);
							// changeBodyByYbje(mny ,item,headvo);
							item = ArapDjCalculator.getInstance().calculateVO(item, "dfybje",
									headvo.getDjrq().toString(), headvo.getDjdl(),
									getPriorStrategy(headvo.getDwbm(), headvo.getDjdl(), headvo.getPzglh().intValue()));
						}
						item.setStatus(VOStatus.UPDATED);
						item.setChildrenVO(null);
	                sum=sum.add(mny);
					}
				}
	        if(ArapCommonTool.isZero(sum)){
					headvo.setZzzt(DJZBVOConsts.FTS_RECEIVER_FAILURE);
					dmo.updateHeader(headvo);
				} else {
					headvo.setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_TempSaved));
					headvo.setZzzt(DJZBVOConsts.FTS_RECEIVER_SUCCESS);
					headvo.setJszxzf(new Integer(DJZBVOConsts.m_intJSZXZF_BCenter));
					// zbvo.setChildren(( DJZBItemVO[])newItems.toArray(new
					// DJZBItemVO[]{}));
	            DjVOTreaterAid.sumBtoH(zbvo);
					try {
						nc.bs.pub.pf.PfUtilBO pfbo = new nc.bs.pub.pf.PfUtilBO();
						pfbo.processAction("SAVE", headvo.getDjlxbm(), headvo.getDjrq().toString(), null, zbvo, null);
					} catch (Exception e1) {
	            	throw	ExceptionHandler.handleException(this.getClass(), e1);
					}
				}
			}
			// 取消成功的委托收款
			else if (IFTSReceiverVO.FTS_RECEIVE_CANCELSUCCESS.equals(vo.getActName())) {
				if (!canChangeFTSReceiver(vo.getArapBillPk())) {
	        	ExceptionHandler.debug("接口动作名称无效");
	            throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006030102","UPP2006030102-001090") );
				} else {
					headvo.setZzzt(DJZBVOConsts.FTS_RECEIVER_GOING);
					headvo.setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_TempSaved));
					headvo.setJszxzf(new Integer(DJZBVOConsts.m_intJSZXZF_BCenter));
					updateDjStatusToUpdate(zbvo);
					this.editTempDj(zbvo, vo, new UFBoolean(true));
				}
			}
			// 委托收款失败
			else if (IFTSReceiverVO.FTS_RECEIVE_FAILURE.equals(vo.getActName())) {
				headvo.setZzzt(DJZBVOConsts.FTS_RECEIVER_FAILURE);
				headvo.setDjzt(new Integer(DJZBVOConsts.m_intDJStatus_TempSaved));

				dmo.updateHeader(headvo);
	    }
	    else
	    {
	    	ExceptionHandler.debug("接口动作名称无效");
	        throw ExceptionHandler.createException(NCLangRes4VoTransl.getNCLangRes().getStrByID("2006","UPP2006-000372")/*@res "接口动作名称无效"*/);
			}
		} catch (Exception e) {
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
	}

	public static int getSysFlag(int Syscode) {
		if (Syscode == ResMessage.$SysCode_XT_AR)
			Syscode = 0;
		else if (Syscode == ResMessage.$SysCode_XT_AP)
			Syscode = 1;
		else if (Syscode == ResMessage.$SysCode_XT_EP)
			Syscode = 2;
		return Syscode;
	}

	private int[] getPriorStrategy(String corp, String djdl, int syscode) throws BusinessException {
		syscode = getSysFlag(syscode);
		String key = "";
		if (syscode == 0) // 应收系统
		{
			key = "AR21";
		} else if (syscode == 1) // 应付系统
		{
			key = "AP21";
		} else {// 报账中心系统
			if ("ys".equalsIgnoreCase(djdl) || "sk".equalsIgnoreCase(djdl) || "sj".equalsIgnoreCase(djdl))
				key = "EC22";
			else if ("yf".equalsIgnoreCase(djdl) || "fk".equalsIgnoreCase(djdl) || "fj".equalsIgnoreCase(djdl))
				key = "EC23";
			else
				key = null;
		}
		String strategy = SysInit.getParaString(corp, key);
		if ("含税价格优先".equals(strategy)) { /*-=notranslate=-*/
			return new int[] { RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE };
		} else {
			return new int[] { RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE };
		}
	}



	/**
	 * 单据是否处于审核态
	 *
	 * @author rocking
	 * @version V5.0
	 * @since V3.1
	 * @param billpk
	 * @return
	 * @throws BusinessException
	 */
	public boolean canChangeFTSReceiver(String billpk) throws BusinessException {
		DJZBHeaderVO headvo;
		try {
			DJZBDAO dmo = new DJZBDAO();
			headvo = dmo.findHeaderByPrimaryKey(billpk);
		} catch (Exception e) {
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
		if (headvo.getShr() != null && headvo.getShr().length() > 0)
			return false;
		return true;
	}

	private Map getMapByDJZBItemVOs(DJZBItemVO[] items) {
		Map<String, DJZBItemVO> ret = new HashMap<String, DJZBItemVO>();
		for (int i = 0, size = items.length; i < size; i++)
			ret.put(items[i].getPrimaryKey(), items[i]);
		return ret;
	}
	/**
	 *
	 *暂存单据边变为保存单据
	 * @author rocking
	 * @version V5.0
	 * @since V3.1
	 * @param djzbvo
	 * @return
	 */
	public DJZBVO saveFromTemporaryDj(DJZBVO djzbvo) throws BusinessException {
	    try {
	    	DjVOTreaterAid.supplementXTFlag(djzbvo);
	    } catch (Exception e) {
//	    	Log.getInstance(this.getClass()).error(e.getMessage(),e);
//	        throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.saveFromTemporaryDj(DJZBVO) setParam_Ext_Save:"+e);
	    	throw ExceptionHandler.handleException(this.getClass(), e);

	    }
	    DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();
	    head.setFromTemporarily2Save(UFBoolean.TRUE);
	    //外接口新增单据前动作
	    long t1 = System.currentTimeMillis();
	    nc.bs.arap.global.ArapExtInfRunBO extbo =
	        new nc.bs.arap.global.ArapExtInfRunBO();
	    nc.vo.arap.global.BusiTransVO[] busitransvos = null;
	    //if ((head.getQcbz() == null || head.getQcbz().booleanValue()==false)){
	        busitransvos =extbo.initBusiTrans("edittemp",head.getPzglh());
	        new BeforeTempEditInf().beforeTempEditInf(busitransvos, djzbvo);
	    //}
	        ExceptionHandler.debug("edittemp外接口新增单据前动作前所用时间:" + (System.currentTimeMillis() - t1));

	    djzbvo=insertOneDj(doPayterm(djzbvo),false);
	    //外接口新增单据后动作
	    long t2 = System.currentTimeMillis();
	    //if ((head.getQcbz() == null || head.getQcbz().booleanValue()==false)){
	       new AfterTempEditInf().afterTempEditInf(busitransvos, djzbvo);
	    //}
	       ExceptionHandler.debug("edittemp外接口新增单据前动作后所用时间:" + (System.currentTimeMillis() - t2));
	    return djzbvo;
	}
	
	private void saveTempDjValidate(DJZBVO djzbvo) throws BusinessException{
		DJZBHeaderVO head=(DJZBHeaderVO)djzbvo.getParentVO();
		DJZBItemVO[] items=(DJZBItemVO[]) djzbvo.getChildrenVO();
//		收款结算单在委托收款之前应该校验银行账户币种是否同单据币种一致,注：结算处仅做本方的校验
		if ("sj".equalsIgnoreCase(head.getDjdl())&& head.getIsjszxzf().booleanValue()) {
			new CheckAccountAndCurrency().checkAccountAndCurrency(djzbvo); 
		}
		if (head.getIsjszxzf().booleanValue()) {
			CombineCheckVOAction action = new CombineCheckVOAction();
			action.combineCheckVO(djzbvo, null);
		}
		for(DJZBItemVO item :items){
			if(null !=item && null == item.getBilldate()){
				item.setBilldate(head.getDjrq());
			}
		}
	}
	
	public DJZBVO saveTempDj(DJZBVO djzbvo) throws BusinessException {
		
//		校验暂存的单据
		saveTempDjValidate(djzbvo);
		
		try {
			DJZBHeaderVO head=(DJZBHeaderVO)djzbvo.getParentVO();
			head.setDjzt(DJZBVOConsts.m_intDJStatus_TempSaved);
	    	if(null==head.getHzbz())head.setHzbz("-1");
			djzbvo.setParam_Ext_Save();
		} catch (Exception e) {
//        Log.getInstance(this.getClass()).error(e.getMessage(),e);;
//        throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.saveTempDj(DJZBVO) setParam_Ext_Save:"+e);
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}
    nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
    nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("addtemp",((DJZBHeaderVO)djzbvo.getParentVO()).getPzglh());
 	   this.beforeTempAddInf(busitransvos, djzbvo);
		DJZBVO dJZB = new DoPayTerm().doPayterm(djzbvo);
		try {
			DJZBHeaderVO head = (DJZBHeaderVO) dJZB.getParentVO();
			DJZBItemVO[] items = null;
			items = (DJZBItemVO[]) dJZB.getChildrenVO();
//			if (head.getHzbz() != null && head.getHzbz().trim().length() > 0) {
//				head.setLybz(head.getPzglh());
//			}
			head.setDjbh(new GetSingleDjbh().getDjbh(dJZB)); // 设置单据编号
			if (items != null && (head.getDjdl().equals("ys") || head.getDjdl().equals("sk"))) {
				for (int i = 0; i < items.length; i++) {
					if (items[i] != null && null != items[i].getWldx() && items[i].getWldx().intValue() == 0)
						if (items[i].getOrdercusmandoc() == null || items[i].getOrdercusmandoc().trim().length() < 1)
							items[i].setOrdercusmandoc(items[i].getHbbm());
				}
			}
			DJZBDAO dmo = new DJZBDAO();
			// 保存单据，自由项。
			DJZBVO vo = dmo.insert(dJZB);
        this.afterTempAddInf(busitransvos, djzbvo);
        if(DjVOTreaterAid.hasSettleInfo(head)){
			nc.itf.cmp.settlement.ISettlement settle=(nc.itf.cmp.settlement.ISettlement)
							NCLocator.getInstance().lookup(nc.itf.cmp.settlement.ISettlement.class.getName());
			Log.getInstance(this.getClass()).debug(" invoke ISettlement.procSettlement with billcode="+head.getDjbh());
			settle.procSettlement(nc.bs.arap.global.ArapSettlementAid.getCmpMsg(vo, head.getDjrq()), vo, vo.getSettlevo());
		}
			String sts = dmo.getTsByPrimaryKey(head.getVouchid(), "arap_djzb");
			if (sts.trim().length() < 3) {
			} else {
				head.setTs(new nc.vo.pub.lang.UFDateTime(sts));
			}
			return vo;
		} catch (Exception e) {
//            Log.getInstance(this.getClass()).error(e.getMessage(),e);;
//        throw ExceptionHandler.createException("DJZBBO::saveTempDj(dJZB) Exception!", e);
    	throw	ExceptionHandler.handleException(this.getClass(), e);
		}

	}

	public DJZBVO editTempDj(DJZBVO djzbvo, UFBoolean isFromSave) throws BusinessException {
		return editTempDj(djzbvo, null, isFromSave);
	}

	public DJZBVO editTempDj(DJZBVO slimDJZBVO, IFTSReceiverVO vo, UFBoolean isFromSave) throws BusinessException {
		/***********************************************************************
		 * 恢复参数“slimDJZBVO”，参考DJZBVO.revertDJZBVO. added by wangyan in 2005-7-20
		 **********************************************************************/

		DJZBVO djzbvo = slimDJZBVO;
		DJZBVO oldDZJBVO = slimDJZBVO.getm_OldVO();
		if (DJZBHeaderVO.SLIMED.equalsIgnoreCase(((DJZBHeaderVO) slimDJZBVO.getParentVO()).IsSlim)) {

			try {
				if (null == slimDJZBVO || null == slimDJZBVO.getParentVO()
						|| null == slimDJZBVO.getParentVO().getPrimaryKey()) {
				throw ExceptionHandler.createException(	"nc.bs.ep.dj.DJZBBO.editTempDj(DJZBVO) editTempDj:");
				}
				if ("ss".equals(((DJZBHeaderVO) slimDJZBVO.getParentVO()).getDjdl()))
					oldDZJBVO = this.findByPrimaryKey_SS(slimDJZBVO.getParentVO().getPrimaryKey());// 事项审批单据
				else
					oldDZJBVO = findByPrimaryKey(slimDJZBVO.getParentVO().getPrimaryKey());
			} catch (Exception e) {
//			Log.getInstance(this.getClass()).error(e.getMessage(),e);
//			throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.editTempDj(DJZBVO) editTempDj:" + e);
			throw ExceptionHandler.handleException(this.getClass(), e);
			}

			if (null == oldDZJBVO) {
			throw ExceptionHandler.createException("nc.bs.ep.dj.DJZBBO.editTempDj(DJZBVO) editTempDj:");
			} 
			DJZBVOTreator.revertDJZBVO(oldDZJBVO, slimDJZBVO);
		djzbvo = slimDJZBVO;
		slimDJZBVO = (DJZBVO) djzbvo.clone();
		djzbvo.setm_OldVO(oldDZJBVO);

		((DJZBHeaderVO)oldDZJBVO.getParentVO()).setTs(((DJZBHeaderVO) djzbvo.getParentVO()).getts());
		}
		if(oldDZJBVO==null){
			oldDZJBVO=(DJZBVO)djzbvo.clone();
			djzbvo.setm_OldVO(oldDZJBVO);
		}
		DJZBHeaderVO head = (DJZBHeaderVO) djzbvo.getParentVO();
		lockDJ(head.getVouchid());
		ApplayBillBO aBo = new ApplayBillBO();
		// 保存到暂存调用删除过程
		DJZBItemVO[] items = null;
		if (djzbvo.getChildrenVO() != null)
			items = (DJZBItemVO[]) djzbvo.getChildrenVO();
		// 外接口修改单据前动作
		long t1 = System.currentTimeMillis();
		nc.bs.arap.global.ArapExtInfRunBO extbo = new nc.bs.arap.global.ArapExtInfRunBO();
		nc.vo.arap.global.BusiTransVO[] busitransvos = extbo.initBusiTrans("edittemp", head.getPzglh());
		if (!isFromSave.booleanValue()) {
			new BeforeTempEditInf().beforeTempEditInf(busitransvos, djzbvo);

			Log.getInstance(this.getClass()).debug("edittemp外接口修改单据前动作前所用时间:" + (System.currentTimeMillis() - t1));
		} else {
			head.setFromSaveTotemporarily(UFBoolean.TRUE);
			((DJZBHeaderVO) oldDZJBVO.getParentVO()).setFromSaveTotemporarily(UFBoolean.TRUE);
		}

		String tablename = "arap_djzb";
		try {
			oldDZJBVO.setParam_Ext_Save();
    	DjVOTreaterAid.supplementXTFlag(oldDZJBVO);
			djzbvo.setParam_Ext_Save();
        DjVOTreaterAid.supplementXTFlag(djzbvo);
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(), e);

		}

		try {
			// 调用其他bo

			DJZBDAO dmo = new DJZBDAO();
			// 并发控制
			if (isFromSave.booleanValue()) {
				try {
					// djzbvo=aBo.befUnQr(oldDZJBVO);
					aBo.befUnQr(oldDZJBVO);
					
					aBo.afterUnQr(oldDZJBVO);
					
//					处理暂存到保存的billmap
					dealBillMapSaveToTemp(djzbvo, head, extbo,oldDZJBVO);
					
				} catch (Exception e) {
    	    	throw ExceptionHandler.handleException(this.getClass(), e);
				}
			}else{
				aBo.isDistributes(djzbvo);
			}
			
			// 取消委托收款后回写单据原始金额
			if (null != vo) {
				Map originMap = getMapByDJZBItemVOs(items);
				Iterator it = vo.getBodyMoney().keySet().iterator();
				while (it.hasNext()) {
					String fbpk = (String) it.next();
					UFDouble mny = (UFDouble) vo.getBodyMoney().get(fbpk);
					DJZBItemVO item = (DJZBItemVO) originMap.get(fbpk);
					// 原币金额被修改
					if (!mny.equals(item.getDfybje())) {
						item.setDfybje(mny);
	                item= ArapDjCalculator.getInstance().changeBodyByYbje( item,head);
					}
					item.setStatus(VOStatus.UPDATED);
					item.setChildrenVO(null);
				}
	        DjVOTreaterAid. sumBtoH(djzbvo);
			}
			// end
			coopeerateUpdateOriginBillByRedBill(djzbvo,false);
			djzbvo = dmo.update(new DoPayTerm().doPayterm(djzbvo));
			head.setTs(new nc.vo.pub.lang.UFDateTime(dmo.getTsByPrimaryKey(head.getVouchid(), tablename)));
			head.setFromSaveTotemporarily(UFBoolean.FALSE);
			djzbvo.setParentVO(head);

			if (!isFromSave.booleanValue()) {
				long t2 = System.currentTimeMillis();
				new AfterTempEditInf().afterTempEditInf(busitransvos, djzbvo);
	        ExceptionHandler.debug("edittemp外接口修改单据前动作后所用时间:" + (System.currentTimeMillis() - t2));
			}
			if(DjVOTreaterAid.hasSettleInfo(head)){
				nc.itf.cmp.settlement.ISettlement settle=(nc.itf.cmp.settlement.ISettlement)
								NCLocator.getInstance().lookup(nc.itf.cmp.settlement.ISettlement.class.getName());
				Log.getInstance(this.getClass()).debug(" invoke ISettlement.procSettlement with billcode="+head.getDjbh());
				settle.procSettlement(nc.bs.arap.global.ArapSettlementAid.getCmpMsg(djzbvo, head.getDjrq()), djzbvo, djzbvo.getSettlevo());
			}
			String ts = dmo.getTsByPrimaryKey(head.getVouchid(), tablename);
			if (ts != null)
				head.setTs(new nc.vo.pub.lang.UFDateTime(ts));
			// 同步ts
			djzbvo.setParentVO(head);
		} catch (Exception e) {
    	throw ExceptionHandler.handleException(this.getClass(), e);

		}
		// DJZBVOTreator.slimDJVOByCompare(slimDJZBVO,djzbvo);
		return djzbvo;
	}

	private void dealBillMapSaveToTemp(DJZBVO djzbvo, DJZBHeaderVO head, nc.bs.arap.global.ArapExtInfRunBO extbo, DJZBVO oldDZJBVO) throws BusinessException {
		DJZBItemVO[] newitems = djzbvo.items;
		DJZBItemVO[] olditems = oldDZJBVO.items;
		
		Map<String,List<ArapBillMapVO>> map=new HashMap<String, List<ArapBillMapVO>>();
		for(DJZBItemVO item:olditems){
			map.put(item.getPrimaryKey(), item.getBillmap());
		}
		for(DJZBItemVO item:newitems){
			item.setBillmap(map.get(item.getPrimaryKey()));
		}
		
		BusiTransVO[] addtemp = extbo.initBusiTrans("addtemp", head.getPzglh());
		beforeTempAddInf(addtemp, djzbvo);
		afterTempAddInf(addtemp, djzbvo);
	}

	private void updateDjStatusToUpdate(DJZBVO vo) {
		if (null == vo)
			return;
		DJZBItemVO[] items = (DJZBItemVO[]) vo.getChildrenVO();
		for (int i = 0, size = items.length; i < size; i++) {
			items[i].setStatus(VOStatus.UPDATED);
			items[i].setChildrenVO(null);
		}

	}

	public Map<String,DJZBVO[]> getDJByXXID(String key, String[] value,int ly) throws BusinessException {
	    try {
				return new DJZBDAO().getDJByXXID(key, value,ly);
			} catch (Exception e) {
			// TODO 自动生成 catch 块
			throw	ExceptionHandler.handleException(this.getClass(), e);
			}
		}
	/**
	 * @deprecated new LockDJAction().lockDJ(pk)*/
	public void lockDJ(String pk) throws BusinessException {
		String lock=null;
		try{
			lock=KeyLock.dynamicLock(pk );
		}catch(Exception e){
			ExceptionHandler.consume(e);
			throw ExceptionHandler.createException( nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"2006","UPP2006V52-000040" ), e);
//			ExceptionHandler.consume(e);
//			throw ExceptionHandler.createException (nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("2006","UPT2006-v51-000001",null,new String[]{""}),e);
		}
		if(lock!=null){

	   	 	throw ExceptionHandler.createException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("2006","UPT2006-v51-000001",null,new String[]{lock}));
	    }
	}
public Map<String,String> getTsByPrimaryKey(String[] key, String tableName) throws BusinessException{
	DJZBDAO dmo = new DJZBDAO();
	try {
		return dmo.getTsByPrimaryKeys(key, tableName);
	} catch ( Exception e) {
		throw	ExceptionHandler.handleException(this.getClass(), e);

	}
}
 
/****************************处理占用金额变化*********************************************************/
public void updateOccupationMny(Map<String, UFDouble> oppus) throws BusinessException {
	// TODO Auto-generated method stub
	try {
		Vector<DJZBItemVO> items= dmo.findItemsByPrimaryKeys(oppus.keySet().toArray(new String[]{}));
		Map<String,DJZBItemVO> itmap=new HashMap<String,DJZBItemVO>();
		List<String> lst=new ArrayList<String>();
		for(DJZBItemVO item:items){
			itmap.put(item.getVouchid(), item);
			lst.add(item.getFb_oid());
		}
		Vector<DJZBHeaderVO> heads=dmo.findHeaderByPrimaryKeys(lst.toArray(new String[]{}));
		for(DJZBHeaderVO head:heads){
			DJZBVO zbvo=new DJZBVO();
			zbvo.setParentVO(head);
			DJZBItemVO item=itmap.get(head.getVouchid());
			item=changeBodyYbje(item,oppus.get(item.getFb_oid()),head);
			zbvo.setChildrenVO(new DJZBItemVO[]{item});
			this.updateDj(zbvo);//循环调用为触发外部接口
		}
	} catch ( Exception e) {
		ExceptionHandler.handleException(e);
	}
}
private DJZBItemVO changeBodyYbje(DJZBItemVO item,UFDouble mny,DJZBHeaderVO headvo) throws BusinessException{
	String changeKey=null;
	if("ys".equals(headvo.getDjdl())||"fk".equals(headvo.getDjdl())){
		item.setJfybje(mny);
		 changeKey="jfybje";
	}else if("yf".equals(headvo.getDjdl())||"sk".equals(headvo.getDjdl())){
		item.setDfybje(mny);
		changeKey="dfybje";
	}
	if(null!=changeKey)
	item=ArapDjCalculator.getInstance().calculateVO(item,changeKey,
			headvo.getDjrq().toString(), headvo.getDjdl(),
			getPriorStrategy(headvo.getDwbm(), headvo.getDjdl(), headvo.getPzglh().intValue()));
	return item;
}

/****************************END*********************************************************/

public Map<String, List<DjfkxybVO>> getSfkxyvosByVouchids(String[] vouchids) throws BusinessException{
	DJZBVO[] vos = findByPrimaryKeys(vouchids);
	DJZBItemVO[] itemvos = null;
	Map<String, List<DjfkxybVO>> map = new HashMap<String, List<DjfkxybVO>>();
	if(null != vos && vos.length > 0){
		for(DJZBVO vo : vos){
			doPayterm(vo);
			itemvos = (DJZBItemVO[]) vo.getChildrenVO();
			if(null != itemvos && itemvos.length > 0){
				for(DJZBItemVO vo1 : itemvos){
					if(null != vo1.fkxyvos && vo1.fkxyvos.length > 0){
						map.put(vo1.getFb_oid().toString(), Arrays.asList(vo1.fkxyvos));
					}
				}
			}
		}
	}
	return map;	
}


private void coopeerateUpdateOriginBillByRedBill(DJZBVO djzbvo,boolean djDeleteFlag) throws BusinessException {
	
	DJZBHeaderVO head=(DJZBHeaderVO)djzbvo.getParentVO();
	DJZBItemVO[] items=(DJZBItemVO[])djzbvo.getChildrenVO();

	if(head.getSpecflag() != null && head.getSpecflag()==1){
		int originNum=0;
		int deleteNum=0;
		String vouchid=null;
		for (int i = 0; i < items.length; i++) {
			if (items[i].getDdlx()!=null&& !"".equals(items[i].getDdlx().trim())) {
				originNum++;
				vouchid=items[i].getDdlx();
			}
			if (items[i].getStatus()== VOStatus.DELETED) {
				deleteNum++;
			}
		}
		if (originNum!=0 && (originNum==deleteNum || djDeleteFlag)) {
			new DJZBDAO().updateSourceBillIsReded(vouchid);
		}
	}
}

private void resetCurrDigiForOldVo(DJZBVO djzbvo) throws BusinessException {
	try{
		if(djzbvo==null)
			return;
		int bbDigit = Currency.getCurrDigit(Currency.getLocalCurrPK(djzbvo.header.getDwbm()));
		Integer slDigit = SysInit.getParaInt(djzbvo.header.getDwbm(), "BD501");
		DJZBItemVO[] items = djzbvo.items;
		if(items!=null){
			for(DJZBItemVO item:items){
				int ybDigit = Currency.getCurrDigit(item.getBzbm());

				String[] ybJefield=new String[]{"bjdwhsdj","bjdwwsdj","dfybwsje","jfybwsje","jfybsj","jfybje","dfybje","dfybsj","ybye"};
				String[] bbJefield=new String[]{"dfbbwsje","wbfbbje","jfbbsj","jfbbje","dfbbje","dfbbsj","bbye"};
				String[] shlJefield=new String[]{"jfshl","dfshl","shlye"};
				String[] othField=new String[]{"bjdwsl"};

				
				for(String field:ybJefield){
					if(item.getAttributeValue(field)!=null){
						UFDouble value = (UFDouble) item.getAttributeValue(field);
						value=value.setScale(ybDigit, UFDouble.ROUND_HALF_UP);
						item.setAttributeValue(field, value);
					}
				}
				
				for(String field:bbJefield){
					if(item.getAttributeValue(field)!=null){
						UFDouble value = (UFDouble) item.getAttributeValue(field);
						value=value.setScale(bbDigit, UFDouble.ROUND_HALF_UP);
						item.setAttributeValue(field, value);
					}
				}
				
				for(String field:shlJefield){
					if(item.getAttributeValue(field)!=null){
						UFDouble value = (UFDouble) item.getAttributeValue(field);
						value=value.setScale(slDigit, UFDouble.ROUND_HALF_UP);
						item.setAttributeValue(field, value);
					}
				}
				
				for(String field:othField){
					if(item.getAttributeValue(field)!=null){
						UFDouble value = (UFDouble) item.getAttributeValue(field);
						value=value.setScale(2, UFDouble.ROUND_HALF_UP);
						item.setAttributeValue(field, value);
					}
				}
				
			}
		}
	}catch (Exception e) {
		 throw ExceptionHandler.handleException(this.getClass(), e);
	}
}

}