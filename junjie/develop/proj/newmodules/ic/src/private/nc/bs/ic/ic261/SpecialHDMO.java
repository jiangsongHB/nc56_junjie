/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.bs.ic.ic261;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;

import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.bs.ic.pub.ICCommonBusiImpl;
import nc.bs.ic.pub.bc.BarCodeDMO;
import nc.bs.ic.pub.bill.GeneralSqlString;
import nc.bs.ic.pub.bill.SpecialBillDMO;
import nc.bs.pub.SystemException;
import nc.bs.scm.pub.bill.SQLUtil;
import nc.impl.ic.ic004.StoreadminDMO;
import nc.jdbc.framework.processor.BeanListProcessor;
import nc.vo.ic.ic261.CheckMode;
import nc.vo.ic.pub.bc.SpecailBarCodeVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.SpecialBillItemVO;
import nc.vo.ic.pub.bill.SpecialBillVO;
import nc.vo.ic.pub.tools.KeyObject;
import nc.vo.ic.pub.tools.StringKeyJudge;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.pub.SCMEnv;

/**
 * SpecialH的DMO类。
 * 
 * 创建日期：(2001-5-16)
 * 
 * @author：zhongrq
 */
public class SpecialHDMO extends SpecialBillDMO  {
	/**
	 * SpecialHDMO 构造子注解。
	 * 
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public SpecialHDMO() throws javax.naming.NamingException, SystemException {
		super();
	}

	/**
	 * SpecialHDMO 构造子注解。
	 * 
	 * @param dbName
	 *            java.lang.String 在EJB Server中配置的数据库DataSource名称。
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public SpecialHDMO(String dbName) throws javax.naming.NamingException,
			SystemException {
		super(dbName);
	}

	private final String QRY_FIELDS = " cgeneralhid, cbiztype, cbilltypecode, vbillcode, dbilldate, cdispatcherid, cdptid, ccustomerid, cproviderid, pk_corp, daccountdate, cwarehouseid, cspaceid, cinventoryid, vfree1, vfree2, vfree3, vfree4, vfree5, vfree6, vfree7, vfree8, vfree9, vfree10, vbatchcode, dvalidate, castunitid,ninspacenum, ninspaceassistnum, noutspacenum, noutspaceassistnum ";

	private final UFDouble ZERO = new UFDouble(0.0);

	/**
	 * 创建者：仲瑞庆 功能：取消调整 参数： 返回： 例外： 日期：(2001-8-31 9:57:01) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param sSpecialBillPK
	 *            java.lang.String
	 * @exception java.sql.SQLException
	 *                异常说明。
	 * @exception nc.bs.pub.SystemException
	 *                异常说明。
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public void cancelSignSpecialBill(String sSpecialBillPK)
			throws 
			nc.vo.pub.BusinessException {
		 /**
         * update ic_special_h set cauditorid='' where cspecialhid=?
         */
        Connection con = null;
        PreparedStatement stmt = null;
        //ResultSet rs= null;

        StringBuffer sbSql = new StringBuffer();
        String sqlx = "select vadjuster from ic_special_h where cspecialhid='"+sSpecialBillPK+"' and vadjuster is not null";//单据已经调整,不能再弃审!
        
        try {
            sbSql.append("update ic_special_h set cauditorid=null , fbillflag="
                    + nc.vo.ic.pub.bill.BillStatus.CHECKINPUT
                    + " where cspecialhid='" + sSpecialBillPK + "'");

            con = getConnection();
            
            stmt = con.prepareStatement(sqlx);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                throw new BusinessException("单据已经调整,不能再弃审!");
            }
            stmt = con.prepareStatement(sbSql.toString());

            stmt.executeUpdate();

        }catch(Exception e){
          //库存组异常抛出规范
          throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
        }
        finally {
            try {
                if (stmt != null)
                    stmt.close();
            } catch (Exception e) {
            }
            try {
                if (con != null)
                    con.close();
            } catch (Exception e) {

            }
        }
        return;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-7-5 14:22:41)
	 * 
	 * @param vo
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * @exception java.rmi.RemoteException
	 *                异常说明。
	 */
	public void check(SpecialBillVO vo) throws nc.vo.pub.BusinessException
	 {
		//try {
		//// RebuildDMO dmo = new RebuildDMO();
		//if(vo.getHeaderVO().getStatus()==VOStatus.DELETED){
		//CheckDMO check0 = new CheckDMO();
		//check0.checkOperatorBusiness(vo);
		//}
		//else{
		//CheckDMO check0 = new CheckDMO();
		////CheckLocatorDMO check1=new CheckLocatorDMO();
		////CheckInvalidateDate check2 = new CheckInvalidateDate();
		////CheckInvQty check3=new CheckInvQty();
		//check0.checkOperatorBusiness(vo); //操作员权限
		//check0.checkWHManager(vo); //库管员权限
		//check0.checkInvidateDate(vo); //失效日期
		////check3.checkInvQty(vo); //负结存，辅计量
		////check1.checkLocator(vo); //货位
		//}

		//}
		//catch (nc.vo.pub.BusinessException be) {
		//throw be;

		//}catch (Exception e) {
		//// reportException(e);
		//throw e;
		//}

	}

	/**
	 * 检查单品损耗率 此处插入方法说明。 创建日期：(2001-7-5 14:22:41)
	 * 
	 * @param vo
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * @exception java.rmi.RemoteException
	 *                异常说明。
	 */
	public UFBoolean checkDiffRate(nc.vo.pub.AggregatedValueObject vo1)
			throws nc.vo.pub.BusinessException {
		//管理档案保管损耗率：keepwasterate
		//差异率：bgssl
		UFBoolean bRet = new UFBoolean(true);
		if (vo1 == null || !(vo1 instanceof SpecialBillVO))
			return bRet;

		SpecialBillVO vo = (SpecialBillVO) vo1;
		if (vo == null || vo.getChildrenVO() == null
				|| vo.getChildrenVO().length == 0)
			return bRet;

		String sBillPK = vo.getHeaderVO().getCspecialhid();
		if (sBillPK == null)
			return bRet;

		String sSuQry = "select cinventoryid from ic_special_b where cspecialhid='"
				+ sBillPK + "'";
		Hashtable htRate = queryInvKeeprate(sSuQry);

		SpecialBillItemVO[] voItems = vo.getItemVOs();
		UFDouble bgssl = null;
		UFDouble rate = null;
		String invid = null;
		UFDouble ZERO = new UFDouble(0.0);
		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i] == null)
				continue;

			invid = voItems[i].getCinventoryid();
			bgssl = voItems[i].getBgssl();
			if (bgssl == null || ZERO.compareTo(bgssl) == 0)
				continue;

			if (htRate.containsKey(invid)) {
				rate = (UFDouble) htRate.get(invid);
				if (rate.abs().compareTo(bgssl.abs()) < 0) {
					bRet = new UFBoolean(false);
					break;
					//serr=new
					// StringBuffer("存货："+voItems[i].getCinventorycode());
					//if(voItems[i].getVbatchcode()!=null)
					//serr.append("-批次:"+voItems[i].getVbatchcode());
					//if(voItems[i].getCastunitid()!=null)
					//serr.append("-辅单位:"+voItems[i].getCastunitname());
					//if(voItems[i].getVfree1()!=null)
					//serr.append("-自由项:"+voItems[i].getVfree0());
					//serr.append("
					// <"+bgssl.toString()+">,<"+rate.toString()+">");
					//alErr.add(serr);
				}
			}
		}
		//StringBuffer sMsg=null;
		//if(alErr.size()>0){
		//bRet=new Boolean(false);
		//sMsg=new StringBuffer("下列存货单品差异率大于保管损失率：\n");
		//for(int i=0;i<alErr.size();i++){
		//sMsg.append((String)alErr.get(i));
		//}
		//}

		return bRet;

	}





	/**
	 * 检查盘点单差异总金额 此处插入方法说明。 创建日期：(2001-7-5 14:22:41)
	 * 
	 * @param vo
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * @exception java.rmi.RemoteException
	 *                异常说明。
	 */
	public UFDouble getDiffMny(nc.vo.pub.AggregatedValueObject vo1)
			throws nc.vo.pub.BusinessException {
		//	差异数量：cysl
		//	调整单价：nprice
		//差异金额=cysl*nprice
		UFDouble mny = new UFDouble(0.0);

		if (vo1 == null || !(vo1 instanceof SpecialBillVO))
			return mny;

		SpecialBillVO vo = (SpecialBillVO) vo1;

		if (vo == null || vo.getChildrenVO() == null
				|| vo.getChildrenVO().length == 0)
			return mny;

		UFDouble num = null;
		UFDouble price = null;
		SpecialBillItemVO[] voItems = vo.getItemVOs();
		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i] == null)
				continue;
			num = voItems[i].getCysl();
			price = voItems[i].getNprice();
			if (num != null && price != null)
				mny = mny.add(num.multiply(price));
		}
		return mny.abs();
	}

	/**
	 * 功能：得到指定的个数ELEMENTS
	 * 
	 * 参数： 返回： 算法说明：
	 * 
	 * 创建日期：(2003-1-22 10:35:33) 作者：王乃军 修改日期 * 修改人 * 修改原因
	 * 
	 * @return java.util.ArrayList
	 * @param num
	 *            int
	 */
	private String getGroupByFields(String sAlias) {
		
		StringBuffer sbSelFields = new StringBuffer(200);
		
			sbSelFields.append(sAlias).append("cinventoryid,").append(sAlias)
					.append("castunitid,").append(sAlias).append("hsl,").append(sAlias).append("vbatchcode,")
					.append(sAlias).append("dvalidate,").append(sAlias).append(
						"vfree1, ").append(sAlias).append("vfree2, ").append(
						sAlias).append("vfree3, ").append(sAlias).append(
						"vfree4,").append(sAlias).append("vfree5, ").append(
						sAlias).append("vfree6, ").append(sAlias).append(
						"vfree7, ").append(sAlias).append("vfree8, ").append(
						sAlias).append("vfree9, ").append(sAlias).append(
						"vfree10");
		
		
		sbSelFields.append(",").append(sAlias).append("cspaceid ");
		sbSelFields.append(",").append(sAlias).append("cvendorid ");
		return sbSelFields.toString();
	}
	
	
	
private String getGroupByFields_MD(String sAlias) {
		
		StringBuffer sbSelFields = new StringBuffer(200);
		
			sbSelFields.append(sAlias).append("cinventoryid,")
			.append(sAlias).append("castunitid, ")
			.append(sAlias).append("hsl, ")
					.append(sAlias).append(
						"vdef1, ").append(sAlias).append("vdef2, ").append(
						sAlias).append("vdef3, ").append(sAlias).append(
						"vdef4 ,").append(sAlias).append(
						"vfree1");
		
		
		sbSelFields.append(",").append(sAlias).append("cspaceid ");
//		sbSelFields.append(",").append(sAlias).append("cvendorid ");
		return sbSelFields.toString();
	}


	/**
	 * 功能：得到指定的个数ELEMENTS
	 * 
	 * 参数： 返回： 算法说明：
	 * 
	 * 创建日期：(2003-1-22 10:35:33) 作者：王乃军 修改日期 * 修改人 * 修改原因
	 * 
	 * @return java.util.ArrayList
	 * @param num
	 *            int
	 */
	private String getInFields(String sAlias, boolean bWithSpace, boolean bHsl) {
				
		StringBuffer sbSelFields = new StringBuffer(200);
		if (!bHsl){
		sbSelFields.append(sAlias).append("cinventoryid||isnull(ltrim(rtrim(")
				.append(sAlias).append("castunitid)),'')||isnull(ltrim(rtrim(")
				.append(sAlias)
				.append("vbatchcode)),'')||isnull( ltrim(rtrim(")
				.append(sAlias).append("dvalidate)),'')||isnull( ltrim(rtrim(")
				.append(sAlias).append("vfree1)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree2)),'')||isnull( ltrim(rtrim(")
				.append(sAlias).append("vfree3)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree4)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree5)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree6)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree7)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree8)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree9)),'')||isnull(ltrim(rtrim(")
				.append(sAlias).append("vfree10)),'') ");
		}else{
			sbSelFields.append(sAlias).append("cinventoryid||isnull(ltrim(rtrim(")
			.append(sAlias).append("castunitid)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("hsl)),'')||isnull(ltrim(rtrim(")
			.append(sAlias)
			.append("vbatchcode)),'')||isnull( ltrim(rtrim(")
			.append(sAlias).append("dvalidate)),'')||isnull( ltrim(rtrim(")
			.append(sAlias).append("vfree1)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree2)),'')||isnull( ltrim(rtrim(")
			.append(sAlias).append("vfree3)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree4)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree5)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree6)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree7)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree8)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree9)),'')||isnull(ltrim(rtrim(")
			.append(sAlias).append("vfree10)),'') ");
		}
		if (bWithSpace)
			sbSelFields.append("||isnull(ltrim(rtrim(").append(sAlias).append(
					"cspaceid)),'') ");

		return sbSelFields.toString();
	}

	/**
	 * 功能：得到指定的个数ELEMENTS
	 * 
	 * 参数： 返回： 算法说明：
	 * 
	 * 创建日期：(2003-1-22 10:35:33) 作者：王乃军 修改日期 * 修改人 * 修改原因
	 * 
	 * @return java.util.ArrayList
	 * @param num
	 *            int
	 */
	private String getWhCpCond(String sAlias, String sWhID, String sCorpID) {
		StringBuffer sbSelFields = new StringBuffer(100);
		sbSelFields.append(sAlias).append("cwarehouseid='").append(sWhID)
				.append("' AND ").append(sAlias).append("pk_corp='").append(
						sCorpID).append("' ");
		return sbSelFields.toString();
	}

	/**
	 * 创建者：韩卫 功能：由queryCheckChooseInfo生成的SQL语句进行查询，并生成存货的ArrayList 参数： 返回： 例外：
	 * 日期：(2003-6-26 上午 9:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 */
	public ArrayList queryAccInfo(String sbSql1, String sbSql2,
			ArrayList arrylistInvID) throws BusinessException
 {
		if ((sbSql1 == null) || (sbSql1.length() == 0) || arrylistInvID == null
				|| arrylistInvID.size() == 0) {
			return null;
		}
		//int ONCE_COUNT = 2;
		//ArrayList alIn = getLoopArrayInID(arrylistInvID,0, ONCE_COUNT);
		//使用临时表
		StringBuffer sbIn = new StringBuffer(" IN ");
		sbIn.append(nc.bs.ic.pub.bill.GeneralSqlString.formSubSql(
				"lim.cinventoryid", arrylistInvID));
		Connection con = null;
		Statement stmt = null;
		ArrayList alResultData = new ArrayList(); //结果
		ResultSet rs = null;
		try {
			con = getConnection();
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			ResultSetMetaData meta = null;
			InvVO invvo = null;
			String sSql = null;
			stmt = con.createStatement();
			//for (int i = 0; i < alIn.size(); i++) {
			//sSql=sbSql1+alIn.get(i)+sbSql2;
			sSql = sbSql1 + sbIn.toString() + sbSql2;
			rs = stmt.executeQuery(sSql);
			//if (i == 0) {
			meta = rs.getMetaData();
			// }
			while (rs.next()) {
				invvo = new InvVO();
				gm.setData(rs, invvo, meta);
				alResultData.add(invvo);
			}
			//}
			return alResultData;
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
	}

	/**
	 * 创建者：仲瑞庆 功能：由queryCheckChooseInfo生成的SQL语句进行查询，并生成存货的ArrayList 参数： 返回： 例外：
	 * 日期：(2001-6-26 上午 9:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 */
	public ArrayList queryAccInfo(StringBuffer sbSql) throws 
			BusinessException {
		if ((sbSql == null) || (sbSql.length() == 0)) {
			return null;
		}
		InvVO invvo = null;

		Connection con = null;
		PreparedStatement stmt = null;
		ArrayList alResultData = new ArrayList(); //结果
		ResultSet rs = null;

		try {

			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());

			rs = stmt.executeQuery();

			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			ResultSetMetaData meta = rs.getMetaData();

			while (rs.next()) {
				invvo = new InvVO();
				gm.setData(rs, invvo, meta);
				alResultData.add(invvo);
			}
			return alResultData;

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}

	}

	
	/**
	 * 创建者：仲瑞庆 功能：生成盘点存货表对应的SQL语句 参数： 返回： 例外： 日期：(2001-6-26 上午 9:17)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String 2003-12-16 hanwei 无论是否货位统一使用v_ic_onhandnum6
	 *            查询
	 *  
	 *  修改人：刘家清 修改日期：2007-10-23上午10:37:42 修改原因：把业务逻辑中原先系统日期改为登录日期
	 */
	public ArrayList queryCheckChooseInfo(String CorpID, ArrayList alCheckChoose,String sUserID)
			throws BusinessException {
		  String sSum = " SUM(COALESCE (ninspacenum, 0.0) - COALESCE(noutspacenum, 0.0)) ";
		    
	        if (alCheckChoose == null || alCheckChoose.size() < 0)
	            return null;
	        
//	        boolean bHsl = ((Boolean) alCheckChoose.get(alCheckChoose.size() - 1))
//	                .booleanValue();    //是否将换算率作为取数维度

	        boolean bySpace = false; //按货位查询
	        if ((CorpID == null) || (CorpID.trim().length() == 0)) {
	            return null;
	        }
	        if ((alCheckChoose == null) || (alCheckChoose.size() == 0)
	                || (alCheckChoose.size() < 3)) {
	            return null;
	        }
	        CorpID = CorpID.trim();
	        String WhID = alCheckChoose.get(0).toString().trim();
	        if (WhID.trim().length() == 0) {
	            return null;
	        }

	        StringBuffer sbSql = new StringBuffer();
	        ArrayList alResultData = null; //结果
	        ArrayList alMultiID = null; //存放ID的arraylist

	        int para = ((Integer) ((ArrayList) alCheckChoose.get(2)).get(0))
	        .intValue();//盘点参数
	        UFBoolean iscountflag = (UFBoolean) alCheckChoose.get(3);
	        
	        try {
	            //盘点方式
	            int radFlag = ((Integer) ((ArrayList) alCheckChoose.get(1)).get(0))
	                    .intValue();
	            
	            String sPowerInv=ICCommonBusiImpl.getInvDataPowerByUser(sUserID, CorpID);
	            

	            switch (radFlag) {
	            case CheckMode.WholeWh: //整仓盘点
	                sbSql.append("SELECT   DISTINCT  ").append(
	                        getGroupByFields("k.")).append(" FROM ")
	                        .append(V_IC_ONHANDNUM).append(" k ").append(" WHERE ")
	                        .append(getWhCpCond("k.", WhID, CorpID));

	                break;
	            case CheckMode.Space: //货位盘点
	                bySpace = true;
	                alMultiID = (ArrayList) ((ArrayList) alCheckChoose.get(1))
	                        .get(1);
	                //指定货位
	                String spaceWh = SQLUtil.formInSQL("k.cspaceid",alMultiID);//v35 35
	                
	                sbSql.append("select  DISTINCT  ").append(
	                        getGroupByFields("k.")).append(","+sSum).append(" FROM ")
	                        .append(V_IC_ONHANDNUM).append(" k ").append(" WHERE ")
	                        .append(getWhCpCond("k.", WhID, CorpID)).append(" "+spaceWh);
	                break;
	                
	                /**add by ouyangzhb 2012-04-17 码单盘点实现*/
	            case CheckMode.md: //货位盘点
	                bySpace = true;
	                alMultiID = (ArrayList) ((ArrayList) alCheckChoose.get(1))
	                        .get(1);
	                //指定货位
	                String spaceMDWh = SQLUtil.formInSQL("k.cspaceid",alMultiID);//v35 35
	                
	                sbSql.append("select  DISTINCT  ").append(
	                		getGroupByFields_MD("k.")).append(","+sSum).append(" FROM ")
	                        .append(V_MD_ONHANDNUM).append(" k ").append(" WHERE ")
	                        .append(getWhCpCond("k.", WhID, CorpID)).append(" "+spaceMDWh);
	                break;
	                /**add by ouyangzhb 2012-04-17 码单盘点实现 end */

	            case CheckMode.Goods: //按存货、大类盘点
	                ArrayList alInv = (ArrayList) ((ArrayList) alCheckChoose.get(1))
	                        .get(1);
	                if (((Integer) alInv.get(0)).intValue() == 1) { //只有大类
	                    String sInvsClass = alInv.get(1).toString().trim();
	                    //lj v35
	                    sbSql
	                            .append("select DISTINCT ")
	                            .append(getGroupByFields("k."))
	                            .append(","+sSum)
	                            .append(" FROM ")
	                            .append(V_IC_ONHANDNUM)
	                            .append(" k ")
	                   //end v35 
	                            .append(
	                                    " left outer join bd_invmandoc q on k.cinventoryid=q.pk_invmandoc ")
	                            .append(
	                                    " left outer join bd_invbasdoc w on q.pk_invbasdoc=w.pk_invbasdoc ,(SELECT bd_invmandoc.pk_invmandoc as cinventoryid ")
	                            .append(
	                                    " FROM bd_invcl bd_invcl1 INNER JOIN bd_invbasdoc ON bd_invcl1.pk_invcl = bd_invbasdoc.pk_invcl ")
	                            .append(
	                                    " INNER JOIN bd_invmandoc ON bd_invbasdoc.pk_invbasdoc = bd_invmandoc.pk_invbasdoc ")
	                            .append(
	                                    " where bd_invcl1.invclasscode like '"
	                                            + sInvsClass + "%'").append(
	                                    " and bd_invmandoc.pk_corp='" + CorpID
	                                            + "' ) a WHERE ").append(
	                                    getWhCpCond("k.", WhID, CorpID)).append(
	                                    " and k.cinventoryid=a.cinventoryid");

	                } else if (((Integer) alInv.get(0)).intValue() == 2) { //只有一批存货
	                    alMultiID = (ArrayList) ((ArrayList) alCheckChoose.get(1))
	                            .get(1);
	                    alMultiID.remove(0);
	                    sbSql.append(" select  DISTINCT  ").append(
	                            getGroupByFields("k.")).append(","+sSum).append(
	                            " from ").append(V_IC_ONHANDNUM).append(" k ")
	                            .append(" WHERE ").append(
	                                    getWhCpCond("k.", WhID, CorpID));
	                    String sInvIDWh = SQLUtil.formInSQL("k.cinventoryid",alMultiID);
	                    sbSql.append(sInvIDWh);
	                    
	                }

	                break;
	            case CheckMode.Circle: //周期盘点
	                String sStartDate = (String) alCheckChoose.get(4);
	                String sLogDate = (String) alCheckChoose.get(5);

	                sbSql
	                        .append(" select  DISTINCT  ")
	                        .append(getGroupByFields("k."))
	                        .append(" from (" +
	                        		"select pk_corp,cwarehouseid,")
	                        .append(getGroupByFields(""))
	                        .append(","+sSum+" as nonhandnum")//v35
	                        .append(" from ")
	                        .append(V_IC_ONHANDNUM)
	                        .append(" where ")
	                        .append(getWhCpCond("", WhID, CorpID))
	                        //v35 周期盘点不走盘点参数路径（此switch的下一个switch case语句），直接在这里增加
	                        .append(" "+getZQPDParamWhere(para,alCheckChoose,WhID,CorpID,sSum))
	                        .append(
	                                " ) k inner join ic_numctl qwe on  qwe.cwarehouseid=k.cwarehouseid")
	                        .append(" and qwe.cinventoryid=k.cinventoryid ")
	                        .append(
	                                " left outer join (select pk_invmandoc,pk_invbasdoc from bd_invmandoc where sealflag ='N') q on k.cinventoryid=q.pk_invmandoc")
	                        .append(
	                                " left outer join (select pk_invbasdoc,invcode,invname from bd_invbasdoc where discountflag='N' and laborflag='N') w on q.pk_invbasdoc=w.pk_invbasdoc ")
	                        /*.append(
	                                " where qwe.icheckcycle< DATEDIFF(day, CONVERT(Datetime,substring(isnull(lastcheckts,'"
	                                        + sStartDate + "'),1,10)),GETDATE()")*///最后一次盘点的时间何当前日期之差小于设置的盘点周期,lastcheckts为ic_numctl表的内容,保存时回写
                            .append(
                            " where qwe.icheckcycle< DATEDIFF(day, CONVERT(Datetime,substring(isnull(lastcheckts,'"
                                    + sStartDate + "'),1,10)),CONVERT(Datetime,'"+sLogDate+"')")
	                        .append(")");

	                break;
	            case CheckMode.Keeper: //保管员盘点
	                String ManagerID = ((ArrayList) ((ArrayList) alCheckChoose
	                        .get(1)).get(1)).get(0).toString();
	                StoreadminDMO storedmo = new StoreadminDMO();
	                alMultiID = storedmo.getInvByWHManager(CorpID, WhID, ManagerID);
	                sbSql.append("select  DISTINCT  ").append(
	                        getGroupByFields("k.")).append(","+sSum). // v35
	                        append("  from ")
	                        .append(V_IC_ONHANDNUM).append(" k ").append(" where ")
	                        .append(getWhCpCond("k.", WhID, CorpID));
	                if (null == alMultiID) {
	                    //无此人员信息
	                    return null;
	                } else if (alMultiID.size() == 0) {
	                    //全部存货
	                } else {
	                 
	                    sbSql.append(SQLUtil.formInSQL("k.cinventoryid",alMultiID));//v35 验证
	                }
	                break;
	            case CheckMode.Minus: //负库存盘点
	                sbSql
	                        .append("SELECT ")
	                        .append(getGroupByFields("k."))
	                        .append("  FROM ")
	                        .append(" (SELECT DISTINCT ")
	                        .append(getGroupByFields(""))
	                        .append(
	                                " ,SUM(COALESCE (ninspacenum, 0.0) - COALESCE (noutspacenum, 0.0)) AS invqtynum FROM ")
	                        .append(V_IC_ONHANDNUM).append("  WHERE ").append(
	                                getWhCpCond("", WhID, CorpID)).append(
	                                " GROUP BY ").append(
	                                getGroupByFields("")).append(
	                                ") k ").append(" WHERE invqtynum < 0 ");
	                break;
	            case CheckMode.NActive: //无动态盘点--
	                String day1 = ((ArrayList) ((ArrayList) alCheckChoose.get(1))
	                        .get(1)).get(0).toString();
	                String sLogDate1 = (String) alCheckChoose.get(4);
	            	//String dateWhere1 = getDateWhere(day1,"dbizdate");
	                String dateWhere1 = getDateWhere(day1,"dbizdate",sLogDate1);
	                sbSql
	                        .append(" select  DISTINCT  ")
	                        .append(getGroupByFields("k."))
	                        .append("	from ")
	                        .append(V_IC_ONHANDNUM)
	                        .append(" k ")
	                        .append(" WHERE ")
	                        .append(getWhCpCond("k.", WhID, CorpID))
	                        /*.append(
	                                " and k.cinventoryid not in (select b.cinventoryid from ic_general_h h,ic_general_b b where "
	                                        + dateWhere1
	                                        + " AND h.cgeneralhid = b.cgeneralhid and h.dr=0 and b.dr=0) ");*/
	                        .append(
	                                " and  not exists (select b.cinventoryid from ic_general_h h,ic_general_b b where "
	                                        + dateWhere1
	                                        + " AND h.cgeneralhid = b.cgeneralhid and b.cinventoryid = k.cinventoryid and h.dr=0 and b.dr=0) ");
	                break;

	            case CheckMode.Dynamic: //动态盘点--
	                String day3 = ((ArrayList) ((ArrayList) alCheckChoose.get(1))
	                        .get(1)).get(0).toString();
	                String sLogDate3 = (String) alCheckChoose.get(4);
	            	//String dateWhere = getDateWhere(day3,"dbizdate");
	                String dateWhere = getDateWhere(day3,"dbizdate",sLogDate3);
	          
	                sbSql
	                        .append(" select  DISTINCT  ")
	                        .append(getGroupByFields("k."))
	                        .append("	from ")
	                        .append(V_IC_ONHANDNUM)
	                        .append(" k ")
	                        .append(" WHERE ")
	                        .append(getWhCpCond("k.", WhID, CorpID))
	                        /*.append(
	                                " and k.cinventoryid in (select b.cinventoryid from ic_general_h h,ic_general_b b where "+dateWhere
	                                        + " AND h.cgeneralhid = b.cgeneralhid and h.dr=0 and b.dr=0) ");*/
	                        .append(
	                                " and  exists (select b.cinventoryid from ic_general_h h,ic_general_b b where "+dateWhere
	                                        + " AND h.cgeneralhid = b.cgeneralhid and b.cinventoryid = k.cinventoryid and h.dr=0 and b.dr=0) ");
	                break;
	            case CheckMode.Term: //保质期盘点--
	                String day2 = ((ArrayList) ((ArrayList) alCheckChoose.get(1))
							.get(1)).get(0).toString();
	                String sLogDate2 = (String) alCheckChoose.get(4);
	                sbSql
	                        .append("SELECT ")
	                        .append(getGroupByFields("k."))
	                        .append(","+sSum)//v35
	                        .append("  FROM ")
	                        .append(V_IC_ONHANDNUM)
	                         .append(" k where ").append(getWhCpCond("",WhID,CorpID)).append(" and "+genDateAfterWhere(day2,"dvalidate",sLogDate2));
	                        //.append(" k where ").append(getWhCpCond("",WhID,CorpID)).append(" and "+getDateWhere(day2,"dvalidate"));
	                        //v35 end
	                break;
	            }
	            
	            if(sPowerInv!=null&&sPowerInv.trim().length()>0){
	            	sbSql.append(" and k.cinventoryid in "+sPowerInv);
	            }
	            //修改人：刘家清 修改时间：2008-9-18 下午08:11:35 修改原因：条码盘点时，只能盘点条码管理的存货。
	            if (null != iscountflag && iscountflag.booleanValue()){
	            	sbSql.append(" and EXISTS (select pk_invmandoc from bd_invmandoc where pk_invmandoc = k.cinventoryid and isprimarybarcode = 'Y') ");
	            }


	            if (radFlag != CheckMode.Minus && radFlag!=CheckMode.Circle&&radFlag!=CheckMode.md) { //负库存盘点不需要下面的条件
	               switch (para) {
	               
	                case 1: //帐面为零参加盘点
	                    sbSql.append(" group by ").append(
	                            getGroupByFields("k."));
	                    break;
	                case 2: //帐面为零并且n天未出库不参加盘点
	                    
	                    String day3 = ((ArrayList) alCheckChoose.get(2)).get(1)
	                            .toString();
	                    String dateWhere = getDateWhere(day3,"dbizdate");
/*	                    sbSql
	                            .append(" and k.cinventoryid not in (select b.cinventoryid from ic_general_h h inner join ic_general_b b"
	                                    + " on h.cgeneralhid=b.cgeneralhid where h.dr=0 and b.dr=0 and h.cwarehouseid='"
	                                    + WhID
	                                    + "' and h.pk_corp='"
	                                    + CorpID
	                                    + "' and " +
	                                    dateWhere+" ) ");*/
	                    //修改人：刘家清 修改时间：2008-9-18 下午08:22:45 修改原因：效率高点。
	                    sbSql
                        .append(" and not exists (select b.cinventoryid from ic_general_h h inner join ic_general_b b"
                                + " on h.cgeneralhid=b.cgeneralhid where h.dr=0 and b.dr=0 and b.cinventoryid = k.cinventoryid and h.cwarehouseid='"
                                + WhID
                                + "' and h.pk_corp='"
                                + CorpID
                                + "' and " +
                                dateWhere+" ) ");
	                    sbSql.append(" group by ").append(
	                            getGroupByFields("k."));
	                 
	                    break;
	                default: //帐面为零不参加盘点  
	                    sbSql.append(" group by ").append(
	                            getGroupByFields("k."))
	                    .append(" having "+sSum+"<>0.0");
	                    break;
	                }
	            }
	            //ADD BY ouyangzhb 2012-04-24 码单盘点
	            if(radFlag == CheckMode.md){
	            	sbSql.append(" group by ").append(
                            getGroupByFields_MD("k."))
                    .append(" having "+sSum+"<>0.0");
	            }
	    
	           alResultData = queryAccInfo(sbSql);

	        } catch (Exception e) {
	            nc.vo.scm.pub.SCMEnv.error(e);
              //库存组异常抛出规范
              throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
	        }
	        return alResultData;
	}
	
	
	  private String getZQPDParamWhere(int para,ArrayList alCheckChoose,String WhID,String CorpID,String sSum){
	        String where  = "";
	        switch (para) {
	        
	         case 1: //帐面为零参加盘点
	             where = " group by pk_corp,cwarehouseid,"+
	                     getGroupByFields("");
	             break;
	         case 2: //帐面为零并且n天未出库不参加盘点
	           
	             String day3 = ((ArrayList) alCheckChoose.get(2)).get(1)
	                     .toString();
	             String dateWhere = getDateWhere(day3,"dbizdate");
	             StringBuffer sbSql = new StringBuffer();
/*	             sbSql
	                     .append(" and cinventoryid not in (select b.cinventoryid from ic_general_h h inner join ic_general_b b"
	                             + " on h.cgeneralhid=b.cgeneralhid where h.dr=0 and b.dr=0 and h.cwarehouseid='"
	                             + WhID
	                             + "' and h.pk_corp='"
	                             + CorpID
	                             + "' and " +
	                             dateWhere+" ) ");*/
	             sbSql
                 .append(" and not exists (select b.cinventoryid from ic_general_h h inner join ic_general_b b"
                         + " on h.cgeneralhid=b.cgeneralhid where h.dr=0 and b.dr=0 and b.cinventoryid = "+V_IC_ONHANDNUM+".cinventoryid and h.cwarehouseid='"
                         + WhID
                         + "' and h.pk_corp='"
                         + CorpID
                         + "' and " +
                         dateWhere+" ) ");
	             sbSql.append(" group by pk_corp,cwarehouseid, ").append(
	                     getGroupByFields(""));
	             where = sbSql.toString();
	          
	             break;
	         default: //帐面为零不参加盘点  
	             where = 
	             " group by pk_corp,cwarehouseid, "+getGroupByFields("")+" having "+sSum+"<>0.0";
	             break;
	         }
	        return where;
	    }
	  
	private String getDateWhere(String sDay,String field) {
        int y = 0;
        try {
            y = Integer.valueOf(sDay).intValue();
        }catch(Exception e){
            nc.vo.scm.pub.SCMEnv.error(e);
        }
        //得到当前日期
        UFDate dnow = new UFDate(System.currentTimeMillis());
        UFDate dbef = dnow.getDateBefore(y);
        String snow = dnow.toString();
        String sbef = dbef.toString();
        if (field.equals("dbizdate"))
            return " b.dbizdate>'"+sbef+"' and b.dbizdate<='"+snow+"'";
        else if (field.equals("dvalidate"))
            return " k.dvalidate>'"+sbef+"' and k.dvalidate<='"+snow+"'";
        return " ";
    }
	/**
	 * 创建人：刘家清
	创建日期：2007-10-23上午10:17:14
	创建原因：传入前台登录日期来拼SQL
	 * @param sDay
	 * @param field
	 * @param dnowStr
	 * @return
	 */
	private String getDateWhere(String sDay,String field,String dnowStr) {
        int y = 0;
        try {
            y = Integer.valueOf(sDay).intValue();
        }catch(Exception e){
            nc.vo.scm.pub.SCMEnv.error(e);
        }
        UFDate dnow = new UFDate(System.currentTimeMillis());
        try {
        	dnow = new UFDate(dnowStr);
        }catch(Exception e){
        	nc.vo.scm.pub.SCMEnv.error(e);
        }
/*        //得到当前日期
        UFDate dnow = new UFDate(System.currentTimeMillis());*/
        UFDate dbef = dnow.getDateBefore(y);
        String snow = dnow.toString();
        String sbef = dbef.toString();
        if (field.equals("dbizdate"))
            return " b.dbizdate>'"+sbef+"' and b.dbizdate<='"+snow+"'";
        else if (field.equals("dvalidate"))
            return " k.dvalidate>'"+sbef+"' and k.dvalidate<='"+snow+"'";
        return " ";
    }

	/**
	 * 根据当前登录日期，及天数，拼接 未来N天范围的SQL  陈倪娜 2009-11-03
	 * @param sDay 天数
	 * @param field 日期字段名称
	 * @param dnowStr 当前登录日期
	 * @return SQL部分
	 */
	private String genDateAfterWhere(String sDay,String field,String dnowStr){
		 int y = 0;
	        try {
	            y = Integer.valueOf(sDay).intValue();
	        }catch(Exception e){
	            nc.vo.scm.pub.SCMEnv.error(e);
	        }
	        UFDate dnow = new UFDate(System.currentTimeMillis());
	        try {
	        	dnow = new UFDate(dnowStr);
	        }catch(Exception e){
	        	nc.vo.scm.pub.SCMEnv.error(e);
	        }
	/*        //得到当前日期
	        UFDate dnow = new UFDate(System.currentTimeMillis());*/
	        UFDate dateAfter = dnow.getDateAfter(y);
	        String snow = dnow.toString();
	        String dateAfterStr = dateAfter.toString();
	        if (field.equals("dbizdate"))
	            return " b.dbizdate>'"+snow+"' and b.dbizdate<='"+dateAfterStr+"'";
	        else if (field.equals("dvalidate"))
	            return " k.dvalidate>'"+snow+"' and k.dvalidate<='"+dateAfterStr+"'";
	        return " ";
	}
	/**
	 * 创建者：仲瑞庆 功能： 参数： 返回： 例外： 日期：(2001-6-26 上午 9:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 */
	public ArrayList queryInvInfo(String CorpID, String WhID,String sUserID) throws BusinessException {
		/*
		 * select distinct k.cinventoryid,b.invcode as cinventorycode,b.invname
		 * from ic_keep_detail1 k left outer join bd_invmandoc a on
		 * k.cinventoryid=a.pk_invmandoc left outer join bd_invbasdoc b on
		 * a.pk_invbasdoc=b.pk_invbasdoc
		 * 
		 * where k.pk_corp=? and k.cwarehouseid=? and b.discountflag='N' and
		 * b.laborflag='N' and a.sealflag ='N'
		 */
		if ((CorpID == null) || (CorpID.trim().length() == 0)) {
			return null;
		}
		if ((WhID == null) || (WhID.trim().length() == 0)) {
			return null;
		}
		String sPowerInv=null;
		if(sUserID!=null&&sUserID.trim().length()>0){
			sPowerInv=ICCommonBusiImpl.getInvDataPowerByUser(sUserID, CorpID);
		}
		
		String sPowerInvCl=null;
		if(sUserID!=null||sUserID.trim().length()>0){
			sPowerInvCl=ICCommonBusiImpl.getInvClDataPowerByUser(sUserID, CorpID);
		}
		
		CorpID = CorpID.trim();
		WhID = WhID.trim();
		InvVO invvo = null;

		StringBuffer sbSql = new StringBuffer();
		Connection con = null;
		PreparedStatement stmt = null;
		ArrayList alResultData = new ArrayList(); //结果
		ResultSet rs = null;
		try {

			con = getConnection();
			sbSql
					.append(
							"select distinct k.cinventoryid,b.invcode as cinventorycode,b.invname from v_ic_onhandnum1 k left outer join bd_invmandoc a on k.cinventoryid=a.pk_invmandoc ")
					.append(
							"	left outer join bd_invbasdoc b on a.pk_invbasdoc=b.pk_invbasdoc where k.cwarehouseid='"
									+ WhID
									+ "' AND  k.pk_corp='"
									+ CorpID
									+ "' ")
					.append(
							" and b.discountflag='N' and b.laborflag='N' and a.sealflag ='N' ");
			if(sPowerInv!=null&&sPowerInv.trim().length()>0){
				sbSql.append(" and k.cinventoryid in "+sPowerInv);
			}
			if(sPowerInvCl!=null&&sPowerInvCl.trim().length()>0){
				sbSql.append(" and b.pk_invcl in "+sPowerInvCl);
			}
			stmt = con.prepareStatement(sbSql.toString());

			rs = stmt.executeQuery();
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			ResultSetMetaData meta = rs.getMetaData();

			while (rs.next()) {
				invvo = new InvVO();
				gm.setData(rs, invvo, meta);
				alResultData.add(invvo);
			}

			return alResultData;
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}

	}

	/**
	 * 创建者：余大英 功能：查询存货的保管损失率 参数： 返回： 例外： 日期：(2003-6-26 上午 9:17)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 */
	public Hashtable queryInvKeeprate(String sSubQry) throws BusinessException {

		Hashtable ht = new Hashtable();
		String sql = "select pk_invmandoc,keepwasterate from bd_invmandoc ";
		if (sSubQry != null)
			sql = sql + "	where pk_invmandoc in (" + sSubQry + ")";
		Connection con = null;
		Statement stmt = null;

		ResultSet rs = null;
		try {
			con = getConnection();

			String invid = null;
			BigDecimal uf = null;
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				invid = rs.getString("pk_invmandoc");
				uf = rs.getBigDecimal("keepwasterate");
				if (invid != null && uf != null)
					ht.put(invid, new UFDouble(uf));

			}
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return ht;
	}

	/**
	 * 创建者：仲瑞庆 功能：帐面取数 参数： 返回： 例外： 日期：(2001-6-26 上午 9:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 * 张海燕 该方法主要用于盘点单的差异计算,由于界面去掉了"差异计算"功能,故v5此处不维护之
	 * 
	 */
	public ArrayList queryOnhandNum(String CorpID, String pk_calbody,
			String WhID, String sBillPK) throws BusinessException {

		if (sBillPK == null || sBillPK.trim().length() == 0 || CorpID == null
				|| CorpID.trim().length() == 0 || WhID == null
				|| WhID.trim().length() == 0) {
			nc.vo.scm.pub.SCMEnv.out("no param ,ret no num...");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(1000);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSetMetaData meta = null;
		ArrayList alResultData = new ArrayList(); //结果
		InvVO voTemp = null;
		ResultSet rs = null;
		final String sPKIn = " cinventoryid||isnull(ltrim(rtrim(castunitid)),'')||isnull(ltrim(rtrim(vbatchcode)),'')||isnull( ltrim(rtrim(vfree1)),'')||isnull(ltrim(rtrim(vfree2)),'')||isnull( ltrim(rtrim(vfree3)),'')||isnull(ltrim(rtrim(vfree4)),'')||isnull(ltrim(rtrim(vfree5)),'')||isnull(ltrim(rtrim(vfree6)),'')||isnull(ltrim(rtrim(vfree7)),'')||isnull(ltrim(rtrim(vfree8)),'')||isnull(ltrim(rtrim(vfree9)),'')||isnull(ltrim(rtrim(vfree10)),'')||isnull(ltrim(rtrim(cspaceid)),'') ";
		String sFields = getFields();
		try {

			con = getConnection();
			sbSql
					.append("	SELECT ")
					.append(sFields)
					.append(",SUM(ISNULL(k.ninspacenum, 0.0) - ISNULL(k.noutspacenum, 0.0)) AS nonhandnum, ")
					.append(" SUM(ISNULL(k.ninspaceassistnum, 0.0) - ISNULL(k.noutspaceassistnum, 0.0)) AS nonhandassistnum ")
					.append(" FROM ")
					.append(V_IC_ONHANDNUM)
					.append(" k WHERE k.cwarehouseid=? AND k.pk_corp=?  AND ")
					.append(sPKIn)
					.append(" IN (SELECT   ")
					.append(sPKIn)
					.append(" FROM ic_special_b WHERE cspecialhid=? AND dr=0 ) ")
					.append(" GROUP BY   ").append(sFields);

			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, WhID);
			stmt.setString(2, CorpID);
			stmt.setString(3, sBillPK);
			rs = stmt.executeQuery();
			meta = rs.getMetaData();

			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			while (rs.next()) {
				voTemp = new InvVO();
				gm.setData(rs, voTemp, meta);
				alResultData.add(voTemp);
			}
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return alResultData;
	}

	/**
	 * 功能：根据前台传入的组合PK，pk_calbody,whid,pk_corp查询现存量和计划价信息
	 * 
	 * @return InvVO组成的ArrayList信息
	 * @author Ljun , 根据新盘点单取帐面数量需求
	 * @param htUK_Field,
	 *            key:关键字（cinventoryid＋castunitid+..), value: cinventoryid
	 *            修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
	 */
	public ArrayList queryOnHandNumPrice(String sCorpID, String pk_calbody,
			String sWhID, HashMap hmUK_Field,UFBoolean iscountflag) throws BusinessException {
		if (hmUK_Field == null || sCorpID == null
				|| sCorpID.trim().length() == 0 || sWhID == null
				|| sWhID.trim().length() == 0) {
			return null;
		}
		//1.从hmUK_Field得到cinventoryid的ArrayList
		Collection collect = hmUK_Field.values();
		if (collect == null)
			return null;
		ArrayList alCinventoryID = new ArrayList();
		Iterator iter = collect.iterator();
		while (iter.hasNext()) {
			String sKeytemp = (String) iter.next();
			alCinventoryID.add(sKeytemp);
		}
		//2.查价格
		//Hashtable htPrice = null;
		/*try {
      IICPrice dmo = new nc.bs.ic.pub.PriceDMO();
      htPrice = dmo.getBalancePriceByStep(sCorpID, pk_calbody, sWhID,
      		alCinventoryID);
    }
    catch (Exception e1) {
      //日志异常
      nc.vo.scm.pub.SCMEnv.out(e1);
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e1.getMessage(), e1);
    }
		*///3.根据cinventoryid的ArrayList得到in ('','')SQL语句
		String sInSql = GeneralSqlString.formInSQL("cinventoryid",alCinventoryID);
		
		//4.查询现存量组成以InvVo为内容
		String sFields = getFields();
		StringBuffer sbSql = new StringBuffer();
		sbSql
				.append("	SELECT ")
				.append(sFields)
				.append(",SUM(ISNULL(k.ninspacenum, 0.0) - ISNULL(k.noutspacenum, 0.0)) AS nonhandnum, ")
				.append(" SUM(ISNULL(k.ninspaceassistnum, 0.0) - ISNULL(k.noutspaceassistnum, 0.0)) AS nonhandassistnum, ")
				.append(" sum(isnull(k.ningrossnum,0.0)-isnull(k.noutgrossnum,0.0)) as nonhandgrossnum ")
				.append(" ,bas.isstorebyconvert,man.issupplierstock ")
				.append(" FROM ")
				.append(V_IC_ONHANDNUM)
				.append(" k ")
				.append(" left outer join bd_invmandoc man on k.cinventoryid=man.pk_invmandoc ")
				.append(" left outer join bd_invbasdoc bas on man.pk_invbasdoc=bas.pk_invbasdoc ")
				.append("WHERE k.cwarehouseid=? AND k.pk_corp=?   ")
				.append("  " + sInSql).append(" GROUP BY   ")
				.append(sFields)
				.append(" ,bas.isstorebyconvert,man.issupplierstock ");

		ArrayList<InvVO> alResultData = new ArrayList<InvVO>(); //结果

		long ITime = System.currentTimeMillis();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Connection con = null;
		
		try {

			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, sWhID);
			stmt.setString(2, sCorpID);
			rs = stmt.executeQuery();
			ResultSetMetaData meta = rs.getMetaData();

			InvVO voTemp = null;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			KeyObject key = null;

			while (rs.next()) {
				voTemp = new InvVO();
				gm.setData(rs, voTemp, meta);
				key = StringKeyJudge.getUKey(voTemp);
                
				if (StringKeyJudge.containString(hmUK_Field, key)) {
					alResultData.add(voTemp);
					/*if (htPrice != null
							&& htPrice.containsKey(voTemp.getCinventoryid()))
						voTemp.setNplannedprice((UFDouble) htPrice.get(voTemp
								.getCinventoryid()));*/
				}
			}
			nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询3:v_ic_onhandnum6");
			
			//修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
			nc.bs.ic.pub.ICCommonBusiImpl.fillInvPlannedpriceByBalancePrice(alResultData, sCorpID, pk_calbody, sWhID);
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		ArrayList alReturn = new ArrayList();
		ArrayList  returnBillBarcode = null;
		if (null != iscountflag && iscountflag.booleanValue()){
			try{
				BarCodeDMO barCodeDMO = new BarCodeDMO();
				returnBillBarcode = barCodeDMO.queryBBCOnHandNumByInvID(alCinventoryID,sCorpID,sWhID);
			}catch(Exception e){
		        //库存组异常抛出规范
		        throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
		    }
		}
		alReturn.add(alResultData);
		alReturn.add(returnBillBarcode);
		
		//return alResultData;
		return alReturn;
	}
	
	public ArrayList queryOnHandNumPrice_MD(String sCorpID, String pk_calbody,
			String sWhID, HashMap hmUK_Field,UFBoolean iscountflag) throws BusinessException {
		if (hmUK_Field == null || sCorpID == null
				|| sCorpID.trim().length() == 0 || sWhID == null
				|| sWhID.trim().length() == 0) {
			return null;
		}
		//1.从hmUK_Field得到cinventoryid的ArrayList
		Collection collect = hmUK_Field.values();
		if (collect == null)
			return null;
		ArrayList alCinventoryID = new ArrayList();
		Iterator iter = collect.iterator();
		while (iter.hasNext()) {
			String sKeytemp = (String) iter.next();
			alCinventoryID.add(sKeytemp);
		}
		//2.查价格
		//Hashtable htPrice = null;
		/*try {
      IICPrice dmo = new nc.bs.ic.pub.PriceDMO();
      htPrice = dmo.getBalancePriceByStep(sCorpID, pk_calbody, sWhID,
      		alCinventoryID);
    }
    catch (Exception e1) {
      //日志异常
      nc.vo.scm.pub.SCMEnv.out(e1);
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e1.getMessage(), e1);
    }
		*///3.根据cinventoryid的ArrayList得到in ('','')SQL语句
		String sInSql = GeneralSqlString.formInSQL("cinventoryid",alCinventoryID);
		
		//4.查询现存量组成以InvVo为内容
		String sFields = getFields_MD();
		StringBuffer sbSql = new StringBuffer();
		sbSql
				.append("	SELECT ")
				.append(sFields)
				.append(",SUM(ISNULL(k.ninspacenum, 0.0) - ISNULL(k.noutspacenum, 0.0)) AS nonhandnum, ")
				.append(" SUM(ISNULL(k.ninspaceassistnum, 0.0) - ISNULL(k.noutspaceassistnum, 0.0)) AS nonhandassistnum, ")
				.append(" sum(isnull(k.ningrossnum,0.0)-isnull(k.noutgrossnum,0.0)) as nonhandgrossnum ")
				.append(" ,bas.isstorebyconvert,man.issupplierstock ")
				.append(" FROM ")
				.append(V_MD_ONHANDNUM)
				.append(" k ")
				.append(" left outer join bd_invmandoc man on k.cinventoryid=man.pk_invmandoc ")
				.append(" left outer join bd_invbasdoc bas on man.pk_invbasdoc=bas.pk_invbasdoc ")
				.append("WHERE k.cwarehouseid=? AND k.pk_corp=?   ")
				.append("  " + sInSql).append(" GROUP BY   ")
				.append(sFields)
				.append(" ,bas.isstorebyconvert,man.issupplierstock ");

		ArrayList<InvVO> alResultData = new ArrayList<InvVO>(); //结果

		long ITime = System.currentTimeMillis();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Connection con = null;
		
		try {

			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, sWhID);
			stmt.setString(2, sCorpID);
			rs = stmt.executeQuery();
			ResultSetMetaData meta = rs.getMetaData();

			InvVO voTemp = null;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			KeyObject key = null;

			while (rs.next()) {
				voTemp = new InvVO();
				gm.setData(rs, voTemp, meta);
				key = StringKeyJudge.getUKey(voTemp);
                
				if (StringKeyJudge.containString(hmUK_Field, key)) {
					alResultData.add(voTemp);
					/*if (htPrice != null
							&& htPrice.containsKey(voTemp.getCinventoryid()))
						voTemp.setNplannedprice((UFDouble) htPrice.get(voTemp
								.getCinventoryid()));*/
				}
			}
			nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询3:v_ic_onhandnum6");
			
			//修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
			nc.bs.ic.pub.ICCommonBusiImpl.fillInvPlannedpriceByBalancePrice(alResultData, sCorpID, pk_calbody, sWhID);
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		ArrayList alReturn = new ArrayList();
		ArrayList  returnBillBarcode = null;
		if (null != iscountflag && iscountflag.booleanValue()){
			try{
				BarCodeDMO barCodeDMO = new BarCodeDMO();
				returnBillBarcode = barCodeDMO.queryBBCOnHandNumByInvID(alCinventoryID,sCorpID,sWhID);
			}catch(Exception e){
		        //库存组异常抛出规范
		        throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
		    }
		}
		alReturn.add(alResultData);
		alReturn.add(returnBillBarcode);
		
		//return alResultData;
		return alReturn;
	}
	
	
	
	

	private static final String V_IC_ONHANDNUM = "v_ic_onhandnum6";
	
	//add by ouyangzhb 2012-04-17 码单盘点数据查询
	private static final String V_MD_ONHANDNUM = "v__md_onhandnum";
	
	//add by ouyangzhb 2012-04-24 码单盘点账面取数字段
	private String getFields_MD(){
		return " k.cinventoryid,k.cspaceid,k.vfree1, k.vdef1, k.vdef2, k.vdef3,k.vdef4 ";
		 
}
	
	private String getFields(){
			return " k.cinventoryid,k.vbatchcode,k.castunitid,k.hsl,k.cspaceid,k.cvendorid,k.vfree1, k.vfree2, k.vfree3, k.vfree4,k.vfree5, k.vfree6, k.vfree7, k.vfree8, k.vfree9, k.vfree10 ";
			 
	}
	
	/**
	 * 创建者：仲瑞庆 功能：帐面取数,结存单价 参数： 返回： 例外： 日期：(2001-6-26 上午 9:17)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * 修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
	 * 
	 * @return java.util.ArrayList
	 * @param Invid
	 *            java.lang.String
	 */
	public ArrayList queryOnhandNumPrice(String CorpID, String pk_calbody,
			String WhID, String sBillPK) throws BusinessException {

		if (sBillPK == null || sBillPK.trim().length() == 0 || CorpID == null
				|| CorpID.trim().length() == 0 || WhID == null
				|| WhID.trim().length() == 0) {
			nc.vo.scm.pub.SCMEnv.out("no param ,ret no num...");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(1000);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSetMetaData meta = null;
		ArrayList alResultData = new ArrayList(); //结果
		InvVO voTemp = null;
		ResultSet rs = null;
		String sFields = null;
		HashMap htBill = new HashMap();
		long ITime = System.currentTimeMillis();
		int icheckmode=-1 ;
		try {
			con = getConnection();
			StringBuffer sqlmdbz = new StringBuffer("select h.icheckmode from ic_special_h h WHERE h.cspecialhid= ? AND h.dr=0 ");
			stmt = con.prepareStatement(sqlmdbz.toString());
			stmt.setString(1, sBillPK);
			rs = stmt.executeQuery();
			
			while (rs.next()) {
				icheckmode = rs.getInt(1);
				break;
			}

			/**区分是否为码单盘点，如果是，则走码单的取数逻辑，不是则用原来的取数逻辑*/
			if( icheckmode == 11){
				sFields = getFields_MD();
				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询1");

				ITime = System.currentTimeMillis();
				String sWhere = " select cinventoryid from ic_special_b WHERE cspecialhid='"
						+ sBillPK + "' AND dr=0 ";

				/*nc.bs.ic.pub.PriceDMO dmo = new nc.bs.ic.pub.PriceDMO();
				Hashtable htPrice = dmo.getBalancePriceBySubQry(CorpID, pk_calbody,
						WhID, sWhere, null);*/

				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询2:getBalancePriceBySubQry");

				//3. get the sum by cinventoryids
				ITime = System.currentTimeMillis();
				nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
				String sWhereView = V_MD_ONHANDNUM;
				sbSql
						.append("	SELECT ")
						.append(sFields)
						.append(",SUM(ISNULL(k.ninspacenum, 0.0) - ISNULL(k.noutspacenum, 0.0)) AS nonhandnum, ")
						.append(" SUM(ISNULL(k.ninspaceassistnum, 0.0) - ISNULL(k.noutspaceassistnum, 0.0)) AS nonhandassistnum ")
						.append(",sum(isnull(k.ningrossnum,0.0)-isnull(k.noutgrossnum,0.0)) as nonhandgrossnum ")
						.append(" ,bas.isstorebyconvert,man.issupplierstock ")
						.append(" FROM ")
						.append(sWhereView)
						.append(" k ")
						.append(" left outer join bd_invmandoc man on k.cinventoryid=man.pk_invmandoc ")
						.append(" left outer join bd_invbasdoc bas on man.pk_invbasdoc=bas.pk_invbasdoc ")
						.append(" WHERE k.cwarehouseid=? AND k.pk_corp=?   ")
						.append(" and cinventoryid in (select cinventoryid from ic_special_b WHERE cspecialhid=? AND dr=0 )")
						.append(" GROUP BY   ")
						.append(sFields)
						.append(" ,bas.isstorebyconvert,man.issupplierstock ");

				stmt = con.prepareStatement(sbSql.toString());
				stmt.setString(1, WhID);
				stmt.setString(2, CorpID);
				stmt.setString(3, sBillPK);
				rs = stmt.executeQuery();
				meta = rs.getMetaData();
				while (rs.next()) {
					voTemp = new InvVO();
					gm.setData(rs, voTemp, meta);
					alResultData.add(voTemp);
				}
				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询3:v__md_onhandnum");
				//修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
				//add by ouayngzhb  2012-04-24 码单盘点不需要用单单价
				nc.bs.ic.pub.ICCommonBusiImpl.fillInvPlannedpriceByBalancePrice(alResultData, CorpID, pk_calbody, WhID);
				
			}else{
				sFields = getFields();
				StringBuffer sql = new StringBuffer(
						" select cinventoryid,castunitid,vbatchcode,hsl,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,cspaceid,cvendorid,bas.isstorebyconvert,man.issupplierstock from ic_special_b b "+
						" left outer join bd_invmandoc man on b.cinventoryid=man.pk_invmandoc "+
						" left outer join bd_invbasdoc bas on man.pk_invbasdoc=bas.pk_invbasdoc "+
						"WHERE b.cspecialhid=? AND b.dr=0 ");
				stmt = con.prepareStatement(sql.toString());
				stmt.setString(1, sBillPK);
				rs = stmt.executeQuery();
				meta = rs.getMetaData();

				//１．query InvVo by sBIllHID
				nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
				while (rs.next()) {
					voTemp = new InvVO();
					gm.setData(rs, voTemp, meta);
					KeyObject keyObj = StringKeyJudge.getUKey(voTemp);
					htBill.put(keyObj, voTemp);
				}
				
				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询1");

				ITime = System.currentTimeMillis();
				String sWhere = " select cinventoryid from ic_special_b WHERE cspecialhid='"
						+ sBillPK + "' AND dr=0 ";

				/*nc.bs.ic.pub.PriceDMO dmo = new nc.bs.ic.pub.PriceDMO();
				Hashtable htPrice = dmo.getBalancePriceBySubQry(CorpID, pk_calbody,
						WhID, sWhere, null);*/

				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询2:getBalancePriceBySubQry");

				//3. get the sum by cinventoryids
				ITime = System.currentTimeMillis();
				String sWhereView = V_IC_ONHANDNUM;
				sbSql
						.append("	SELECT ")
						.append(sFields)
						.append(",SUM(ISNULL(k.ninspacenum, 0.0) - ISNULL(k.noutspacenum, 0.0)) AS nonhandnum, ")
						.append(" SUM(ISNULL(k.ninspaceassistnum, 0.0) - ISNULL(k.noutspaceassistnum, 0.0)) AS nonhandassistnum ")
						.append(",sum(isnull(k.ningrossnum,0.0)-isnull(k.noutgrossnum,0.0)) as nonhandgrossnum ")
						.append(" ,bas.isstorebyconvert,man.issupplierstock ")
						.append(" FROM ")
						.append(sWhereView)
						.append(" k ")
						.append(" left outer join bd_invmandoc man on k.cinventoryid=man.pk_invmandoc ")
						.append(" left outer join bd_invbasdoc bas on man.pk_invbasdoc=bas.pk_invbasdoc ")
						.append(" WHERE k.cwarehouseid=? AND k.pk_corp=?   ")
						.append(" and cinventoryid in (select cinventoryid from ic_special_b WHERE cspecialhid=? AND dr=0 )")
						.append(" GROUP BY   ")
						.append(sFields)
						.append(" ,bas.isstorebyconvert,man.issupplierstock ");

				stmt = con.prepareStatement(sbSql.toString());
				stmt.setString(1, WhID);
				stmt.setString(2, CorpID);
				stmt.setString(3, sBillPK);
				rs = stmt.executeQuery();
				meta = rs.getMetaData();

				while (rs.next()) {
					voTemp = new InvVO();
					gm.setData(rs, voTemp, meta);
//					InvVO tempVO = new InvVO();
//					tempVO=CheckDMO.appendInvInfo(voTemp);//补全存货信息,主要"是否换算率记结存"
//					voTemp.setIsStoreByConvert(tempVO.getIsStoreByConvert());
					KeyObject key = StringKeyJudge.getUKey(voTemp);
					if (StringKeyJudge.containString(htBill, key)) {
						alResultData.add(voTemp);
		/*				if (htPrice != null
								&& htPrice.containsKey(voTemp.getCinventoryid()))
							voTemp.setNplannedprice((UFDouble) htPrice.get(voTemp
									.getCinventoryid()));*/
					}
				}

				nc.vo.scm.pub.SCMEnv.showTime(ITime, "查询3:v_ic_onhandnum6");
				//修改人：刘家清 修改日期：2007-12-6下午05:18:15 修改原因：取结存单价明细到批次。
				nc.bs.ic.pub.ICCommonBusiImpl.fillInvPlannedpriceByBalancePrice(alResultData, CorpID, pk_calbody, WhID);
			}
			
			
			
			

		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		
		return alResultData;
	}

	/**
	 * 创建者：仲瑞庆 功能：整 参数： 返回： 例外： 日期：(2001-8-31 9:57:22) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param sSpecialBillPK
	 *            java.lang.String
	 * @exception java.sql.SQLException
	 *                异常说明。
	 * @exception nc.bs.pub.SystemException
	 *                异常说明。
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public void signSpecialBill(String sSpecialBillPK, String sAuditorID)
			throws BusinessException {
		/**
		 * update ic_special_h set cauditorid=sAuditorID where cspecialhid=?
		 */
		Connection con = null;
		PreparedStatement stmt = null;
		//ResultSet rs= null;

		if (sAuditorID == null)
			sAuditorID = "";
		else
			sAuditorID = sAuditorID.trim();

		StringBuffer sbSql = new StringBuffer();

		try {
			sbSql.append("update ic_special_h set cauditorid='" + sAuditorID
					+ "' ,fbillflag=" + nc.vo.ic.pub.bill.BillStatus.APPROVED
					+ " where cspecialhid='" + sSpecialBillPK + "'");

			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());

			stmt.executeUpdate();

		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return;
	}

	/**
	 * 此处插入方法说明。 更新单据的状态 创建日期：(2003-12-20 14:23:05)
	 * 
	 * @param sBillID
	 *            java.lang.String
	 * @param sState
	 *            java.lang.String
	 */
	public void updateBillState(String sBillID, String approveId, String approveDate,String checkNote,String sState)
			throws BusinessException {

		if (sBillID == null || sState == null) {
			SCMEnv.out("nc.bs.ic.ic261.SpecialHDMO.updateBillState:参数不全");
			return;
		}

		//对于盘点取消，不通过
		String sSQL = null;
		/*if (sState.equalsIgnoreCase(nc.vo.ic.pub.bill.BillStatus.CHECKINPUT)) {
			//审批不通过
			sSQL = "update ic_special_h set fbillflag=" + sState
					+ " ,cauditorid=null  where cspecialhid=? and dr=0";
		} else if (sState.equalsIgnoreCase(nc.vo.ic.pub.bill.BillStatus.APPROVEDING)) {
			//审批中
			sSQL = "update ic_special_h set fbillflag=" + sState
					+ " where cspecialhid=? and dr=0";
		} else {*/
		if (null !=  approveId)
			sSQL = "update ic_special_h set fbillflag=" + sState.trim()
					+ " ,cauditorid = '"+approveId+"' where cspecialhid=? and dr=0";
		else
			sSQL = "update ic_special_h set fbillflag=" + sState.trim()
			+ " ,cauditorid = null where cspecialhid=? and dr=0";
		//}

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSQL);
			stmt.setString(1, sBillID);
			stmt.executeUpdate();
		}catch(Exception e){
      //库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);  
    }
    finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}
	

}