package nc.bs.ic.ic211;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import nc.bs.framework.common.NCLocator;
import nc.bs.ic.ic621.MemosetupDMO;
import nc.bs.ic.pub.GenMethod;
import nc.bs.ic.pub.ICCommonBusiImpl;
import nc.bs.ic.pub.ModuleEnable;
import nc.bs.ic.pub.bill.GeneralSqlString;
import nc.bs.ic.pub.check.CheckDMO;
import nc.bs.ic.pub.vmi.ICSmartToolsDmo;
import nc.bs.scm.pub.bill.SQLUtil;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.itf.ic.service.IIC211GeneralH;
import nc.itf.scm.so.so012.IReturnRedSquare;
import nc.itf.uap.IUAPQueryBS;
import nc.itf.uap.pf.IPFConfig;
import nc.jdbc.framework.processor.BeanListProcessor;
import nc.vo.ic.ic621.MemosetupVO;
import nc.vo.ic.ic700.ICDataSet;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.ic.pub.ICGenVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ic.pub.bill.QryConditionVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.session.ClientLink;
import nc.vo.scm.pub.smart.SmartFieldMeta;
import nc.vo.scm.so.RushLinkQueryVO;
import nc.vo.so.so001.SaleOrderVO;
import nc.vo.so.so001.SaleorderBVO;
import nc.vo.so.so001.SaleorderHVO;

/**
 * 销售出库单服务器端业务控制类
 * 作者：张欣
 * @version	2001-07-17
 * @see		需要参见的其它类
 * @since		从产品的那一个版本，此类被添加进来。（可选）
 * @deprecated该类从产品的那一个版本后，已经被其它类替换。（可选）
*/

public class GeneralHBO extends nc.bs.ic.pub.bill.GeneralBillBO implements IIC211GeneralH  {

/**
 * GeneralHBO 构造子注解。
 */
public GeneralHBO() {
	super();
}

/**
 * 创建者：余大英
 * 功能：取消签字
 * 参数：

 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBillAuditBill.ic.pub.bill.InvvoAuditBill
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public ArrayList cancelSignBill(GeneralBillVO voAuditBill)
	throws BusinessException{

		  
	/** 得到签字单据的来源单据 */
	/*String sSourceBillType = (String) voAuditBill.getItemValue(0, "csourcetype");
	if (sSourceBillType != null
		&& !sSourceBillType.startsWith("4")) //销售订单,销售发票,销售发货单
		{
		SaleToICDRPDMO sdmo = null;
		String sSourceBillHid = (String) voAuditBill.getItemValue(0, "csourcebillhid");
		String sSourceBillBid = (String) voAuditBill.getItemValue(0, "csourcebillbid");
		if (sSourceBillHid == null || sSourceBillBid == null) {
			throw new RemoteException(
				"Remote Call",
				new BusinessException("取消签字时出错！不能得到销售的来源单据表头ID或表体ID！"));
		}
		try {
			sdmo = new SaleToICDRPDMO();
			if (!sdmo.isSaleOut(sSourceBillHid, sSourceBillBid))
				throw new BusinessException("取消签字时出错！出库单在销售系统已经作结算，不能取消签字！");
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw new RemoteException("Remote Call", e);
			reportException(e);
			throw new RemoteException("Remote Call", e);

		}
	}*/
	ArrayList arr= super.cancelSignBill(voAuditBill);
	
	  try{
		    if (voAuditBill.getHeaderVO()!=null && voAuditBill.getHeaderVO().getBoutretflag()!=null && voAuditBill.getHeaderVO().getBoutretflag().booleanValue()
		        && new ModuleEnable().isSOEnble(voAuditBill.getHeaderVO().getPk_corp())){
		        IReturnRedSquare  obj = (IReturnRedSquare)NCLocator.getInstance().lookup(IReturnRedSquare.class.getName());
		        obj.returnred4CUnSign(new GeneralBillVO[]{voAuditBill});
		    }
        
        //检查是否运输
        new CheckDMO().isDMTranOut(voAuditBill);
		  }catch(Exception e){
		    throw GenMethod.handleException(null, e);
		  }
		  
		  return arr;

}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 *
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception BusinessException异常说明。
 */
public void deleteBill(GeneralBillVO vo) throws BusinessException{
	super.deleteBill(vo);
}

/**
 * 向销售提供接口方法, 销售发票弃审时调用的删除方法.
 * 功能：只能一对一的删除
 * 参数：String sourceHeadID
 * 返回：void
 * 例外：RemoteException
 * 日期：(2001-10-17 10:27:02)
 * 修改日期，修改人，修改原因，注释标志：
  2002-07-25.01  wnj,throw exception
 */
public void deleteOut(String sourceHeadID) throws BusinessException{
	try {
		if (sourceHeadID != null) {
			String[] aryParams = null;
			GeneralHDMO dmo = null;
			dmo = new GeneralHDMO();
			/** 根据传入的来源单据表头ID, 查询出删除时需要的, 销售出库单的表头ID和操作员ID,公司ID */
			aryParams = dmo.queryBySourceHID(sourceHeadID);
			if (aryParams != null
				&& aryParams.length > 0
				&& aryParams[0] != null
				&& aryParams[0].trim().length() > 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008busi","UPP4008busi-000071")/*@res "请先删除相关的库存单据，然后再试。"*/);

			////检测测用的单据头
			//GeneralBillHeaderVO voHeaderTest = dmo.queryBillHead(aryParams[0] );
			////如果找不到ts认为单据已经不存在了
			//if (voHeaderTest == null
			//|| voHeaderTest.getPrimaryKey() == null
			//|| voHeaderTest.getPrimaryKey().length() == 0)
			//throw new BusinessException("未查到当前的单据，可能已被删除。");

			////检查是否已经签字了
			//if (voHeaderTest.getCregister() != null
			//&& voHeaderTest.getCregister().toString().trim().length() > 0)
			//throw new BusinessException("此单据已签字！");

			//if (aryParams != null) {
			//String[] aryTemp = { aryParams[0] };
			///** 调用单据删除方法 */
			//deleteBillsWithNoLock(aryTemp, aryParams[1], aryParams[2]);
			//}

		}
	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}

}

/**
 * 形成备查
 * 创建日期：(2001-9-10 13:19:15)
 */
public ArrayList formMemo(MemosetupVO mvo) throws BusinessException{
	MemosetupDMO memodmo = null;
	ArrayList alresult = null;
	try {
		memodmo = new MemosetupDMO();
		alresult = memodmo.update(mvo);

	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}

	return alresult;

}

/**
 * 通过主键获得VO对象。test code
 *
 * 创建日期：(2001-5-14)
 * @return nc.vo.ic.ic201.GeneralHVO
 * @param key String
 * @exception BusinessException异常说明。
 */
public ArrayList getOrderPrice(String sBillType,ArrayList alBid)
	throws BusinessException{
	try {
		GeneralHDMO dmo = new GeneralHDMO();
		return dmo.queryOrderPrice(sBillType,alBid);

	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}
	return null;
}

/* （非 Javadoc）
 * @see nc.bs.ic.ic211.IIC211GeneralH#isSoBillOut(java.lang.String, java.lang.String)
 */
public Boolean isSoBillOut(String sSourceBillType, String sSourceBillID)  throws BusinessException{
	try {
		//因为PK是唯一的，所以不用sSourceBillType
		GeneralHDMO dmo = new GeneralHDMO();
		String [] saPK=dmo.queryChildrenBillPK(sSourceBillID);
		if(saPK==null || saPK.length==0 || saPK[0]==null || saPK[0].trim().length()==0)
			return new Boolean(false);
		else
			return new Boolean(true);

	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}
	return null;
}

/**
* 创建者：王乃军
* 功能：修改现存量，处理 ---不影响现存量--的 借出转销售业务类型
* 参数：GeneralBillVO voNewBill,GeneralBillVO voDbBill
* 返回：无

* 例外：
* 日期：(2001-6-14 9:11:16)
* 修改日期，修改人，修改原因，注释标志：

* @param GeneralBillVO voNewBill,GeneralBillVO voDbBill
*/
//protected void modifyOnhandNum(
//	GeneralBillVO voNewBill,
//	GeneralBillVO voDbBill) throws BusinessException{
//	
//		//特殊处理
//		String sBillBusiType = null, sCorpID = null;
//		if (voNewBill != null && voNewBill.getHeaderVO() != null) {
//			sCorpID = voNewBill.getHeaderVO().getPk_corp();
//			sBillBusiType = voNewBill.getHeaderVO().getCbiztypeid(); //业务类型
//			if (!nc
//				.vo
//				.ic
//				.pub
//				.BillTypeConst
//				.m_saleOut
//				.equals(voNewBill.getHeaderVO().getCbilltypecode()))
//				//非4C无效
//				return;
//		}
//		else if (voDbBill != null && voDbBill.getHeaderVO() != null) {
//			sCorpID = voDbBill.getHeaderVO().getPk_corp();
//			sBillBusiType = voDbBill.getHeaderVO().getCbiztypeid(); //业务类型
//			if (!nc
//				.vo
//				.ic
//				.pub
//				.BillTypeConst
//				.m_saleOut
//				.equals(voDbBill.getHeaderVO().getCbilltypecode()))
//				//非4C无效
//				return;
//		}
//		else {
//			nc.vo.scm.pub.SCMEnv.out("m on hand nvl p");
//			return;
//		}
//
//		try {
//      //修改现存量--删除的前提是单据未被修改，所以这里直接用传入的单据。
//      nc.bs.ic.pub.bill.OnhandnumDMO dmoOnhand = new nc.bs.ic.pub.bill.OnhandnumDMO();
//      //有业务类型的话需要看此业务类型是否影响现存量
//      if (sBillBusiType != null && sBillBusiType.length() > 0) {
//      	Hashtable htBusitype = dmoOnhand.queryBusitype(sCorpID);
//      	//返回的哈希表中有此业务类型，不用更新现存量
//      	if (htBusitype != null && htBusitype.containsKey(sBillBusiType))
//      		return;
//      }
//      //正常更新
//      dmoOnhand.modifyOnhandNum(voNewBill, voDbBill);
//      dmoOnhand = null;
//    }
//    catch (Exception e) {
//      //日志异常
//      nc.vo.scm.pub.SCMEnv.out(e);
//      //库存组异常抛出规范
//      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
//    }
//	
//
//}

/**
 * 通过主键获得VO对象。test code
 *
 * 创建日期：(2001-5-14)
 * @return nc.vo.ic.ic201.GeneralHVO
 * @param key String
 * @exception BusinessException异常说明。
 */
public ArrayList queryBills(QryConditionVO voQC)
	throws BusinessException{
	try {
		GeneralHDMO dmo = new GeneralHDMO();
    String spowerarea = ICCommonBusiImpl.getWhereAreaclDataPowerByUser((String)voQC.getParam(QryConditionVO.QRY_LOGUSERID), 
        (String)voQC.getParam(QryConditionVO.QRY_LOGCORPID));
    if(!nc.vo.ic.pub.GenMethod.isSEmptyOrNull(spowerarea))
      voQC.setQryCond(voQC.getQryCond()+spowerarea);
		return dmo.queryBills(voQC);

	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}
	return null;
}

/**
 * 销售出库对冲联查。v52
 *
 * 创建日期：(2001-5-14)
 * @return RushLinkQueryVO
 * @param key String String pk_corp
 * @exception BusinessException异常说明。
 */
public RushLinkQueryVO[] queryRushLinkQueryVO(String cgeneralhid,String pk_corp)
  throws BusinessException{
  
  if(nc.vo.ic.pub.GenMethod.isSEmptyOrNull(cgeneralhid))
    return null;
  
  try {
    if(!(new ModuleEnable()).isSOEnble(pk_corp))
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008busi","UPP4008busi-000069")/*@res "销售产品没有启用。"*/);
    nc.itf.scm.so.so012.ISquareQuery sq = (nc.itf.scm.so.so012.ISquareQuery)
      NCLocator.getInstance().lookup(nc.itf.scm.so.so012.ISquareQuery.class.getName());
    return sq.queryRushLinkQueryVO(cgeneralhid);
  }catch(Exception e){
    throw GenMethod.handleException(null, e);
  }
}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception BusinessException异常说明。
 */
public ArrayList saveBill(GeneralBillVO vo) throws BusinessException{
	return super.saveBill(vo);
}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception BusinessException异常说明。
 */
public ArrayList saveBill(GeneralBillVO voCur,GeneralBillVO voOld) throws BusinessException{
	ArrayList ret = super.saveBill(voCur,voOld);
	try{
		IPFConfig ipf = (IPFConfig)nc.bs.framework.common.NCLocator.getInstance().lookup(IPFConfig.class.getName());
		if(voCur!=null && voCur.getItemVOs()!=null && voCur.getItemVOs().length>0 
				&& ScmConst.SO_Order.equals(voCur.getItemVOs()[0].getCfirsttype()) ){
			ipf.completeWorkitem(voCur.getHeaderVO().getCgeneralhid(), 
					new String[]{voCur.getItemVOs()[0].getCsourcebillhid()}, 
					voCur.getOperatorid(), BillTypeConst.m_saleOut, voCur.getItemVOs()[0].getCsourcetype());
		}
	}catch(Exception e){
		throw GenMethod.handleException(null, e);
	}
	return ret;

}

/* （非 Javadoc）
 * @see nc.bs.ic.ic211.IGeneralH#setDispense(java.util.ArrayList)
 */
public void setDispense(ArrayList alBid) throws BusinessException{
	if (alBid != null && alBid.size() > 0)
		try {
			GeneralHDMO dmo = new GeneralHDMO();
			dmo.setDispense(alBid);
		}catch(Exception e){
			GenMethod.throwBusiException(e);
		}
		

}

/**
 * 创建者：余大英
 * 功能：签字
 * 参数：

 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public ArrayList signBill(GeneralBillVO voAuditBill)
	throws BusinessException{
	
		return super.signBill(voAuditBill);

}

/**
 * 创建者：余大英
 * 功能：签字
 * 参数：

 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public ArrayList signBills(GeneralBillVO[] voAuditBills)
	throws BusinessException{
	/** 得到签字单据的来源单据 */

	
    ICCommonBusiImpl.getSrcBtoouttoiaflag(voAuditBills);
		//执行签字
    ArrayList arr =  super.signBills(voAuditBills);
    
	  if(voAuditBills==null || voAuditBills.length<=0)
		    return null;
		  ArrayList<GeneralBillVO> retvolist = new ArrayList<GeneralBillVO>(); 
		  for(GeneralBillVO vo : voAuditBills){
		    if(vo.getHeaderVO()!=null && vo.getHeaderVO().getBoutretflag()!=null && vo.getHeaderVO().getBoutretflag().booleanValue())
		      retvolist.add(vo);
		  }
	  try{
		    if (retvolist.size()>0 && new ModuleEnable().isSOEnble(voAuditBills[0].getHeaderVO().getPk_corp())){
		        GeneralBillVO[] vos = retvolist.toArray(new GeneralBillVO[retvolist.size()]);
		        IReturnRedSquare  obj = (IReturnRedSquare)NCLocator.getInstance().lookup(IReturnRedSquare.class.getName());
		        obj.returnRed4CSign(vos);
		    }
		  }catch(Exception e){
		    throw GenMethod.handleException(null, e);
		  }
    
    return arr;

}

/**
 * 创建者：杨波
 * 功能：处理出库金额，防止尾查
 * 参数：

 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public void processOutBillMny(nc.vo.pub.AggregatedValueObject vo)
  throws BusinessException {
  if(vo==null)
    return;
  GeneralBillVO outvo = (GeneralBillVO)vo;
  //根据来源单据，获取来源单据的信息：数量，金额，累计出库数量；
  GeneralBillItemVO[] itemvos = (GeneralBillItemVO[])outvo.getChildrenVO();
  
  HashMap hssrcinfo=null;
  try{
    
  ModuleEnable md = new ModuleEnable();
  
  //销售产品是否启用
  String sPkCorp = (String)outvo.getHeaderValue("pk_corp");
  
    if(sPkCorp!=null && !md.isModuleEnble(sPkCorp,ProductCode.PROD_SO)){
      return;
    } 
    
  hssrcinfo = getSrcBillInfo_new(itemvos); 
  if(hssrcinfo==null || hssrcinfo.size()<=0)
    return;
  
  UFDouble d0 = new UFDouble(0);
  HashMap hsitem = new HashMap();
  GeneralBillItemVO preitemvo = null;
  String srcbillrowid = null;
  for(int i=0,loop=itemvos.length;i<loop;i++){
    if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
      continue;
    if(itemvos[i].getFlargess()!=null && itemvos[i].getFlargess().booleanValue())
      continue;
    
    if("32".equals(itemvos[i].getCsourcetype()))
      srcbillrowid = itemvos[i].getCsourcebillbid();
    else
      srcbillrowid = itemvos[i].getCfirstbillbid();
    
    if(srcbillrowid==null || itemvos[i].getNoutnum()==null || itemvos[i].getNoutnum().compareTo(d0)==0)
      continue;
    
    preitemvo = (GeneralBillItemVO)hsitem.get(srcbillrowid);
    if(preitemvo==null){
      hsitem.put(srcbillrowid, itemvos[i]);
      continue;
    }
    
    if(preitemvo.getNoutnum()!=null && itemvos[i].getNoutnum()!=null && preitemvo.getNoutnum().compareTo(itemvos[i].getNoutnum())<0){
      hsitem.put(srcbillrowid, itemvos[i]);
    }
  }
  
  if(hsitem.size()<0)
    return;
  
  itemvos = (GeneralBillItemVO[])hsitem.values().toArray(new GeneralBillItemVO[hsitem.size()]);
  ICGenVO datavo = null;
  final String diffntaxmny = "diffntaxmny",diffnsalemny = "diffnsalemny",diffnquotemny = "diffnquotemny",diffnquotentmny = "diffnquotentmny";
  UFDouble diffmny = null,nquotemny=null,nquotentmny=null;
  boolean bdiff = false;
  ArrayList updatevolist = new ArrayList();
  for(int i=0,loop=itemvos.length;i<loop;i++){
    if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
      continue;
    if(itemvos[i].getFlargess()!=null && itemvos[i].getFlargess().booleanValue())
      continue;
    //修改人：刘家清 修改时间：2009-3-4 下午03:55:15 修改原因：数量为空或者为0的不处理尾差。
    if (null == itemvos[i].getNoutnum() || UFDouble.ZERO_DBL.compareTo(itemvos[i].getNoutnum()) == 0)
    	continue;
    
    bdiff = false;
    
    if("32".equals(itemvos[i].getCsourcetype()))
      srcbillrowid = itemvos[i].getCsourcebillbid();
    else
      srcbillrowid = itemvos[i].getCfirstbillbid();
    
    if(srcbillrowid==null)
      continue;
    
    datavo = (ICGenVO)hssrcinfo.get(srcbillrowid);
    if(datavo==null)
      continue;
    
    diffmny = datavo.getUFDoubleValue(diffntaxmny);
    if(diffmny!=null && diffmny.compareTo(d0)!=0 && itemvos[i].getNtaxmny()!=null){
      itemvos[i].setNtaxmny(itemvos[i].getNtaxmny().add(diffmny));
      bdiff = true;
    }
    
    diffmny = datavo.getUFDoubleValue(diffnsalemny);
    if(diffmny!=null && diffmny.compareTo(d0)!=0 && itemvos[i].getNsalemny()!=null){
      itemvos[i].setNsalemny(itemvos[i].getNsalemny().add(diffmny));
      bdiff = true;
    }
    
    diffmny = datavo.getUFDoubleValue(diffnquotemny);
    nquotemny = (UFDouble)itemvos[i].getAttributeValue("nquotemny");
    if(diffmny!=null && diffmny.compareTo(d0)!=0 && nquotemny!=null){
      itemvos[i].setAttributeValue("nquotemny", nquotemny.add(diffmny));
      bdiff = true;
    }
    
    diffmny = datavo.getUFDoubleValue(diffnquotentmny);
    nquotentmny = (UFDouble)itemvos[i].getAttributeValue("nquotentmny");
    if(diffmny!=null && diffmny.compareTo(d0)!=0 && nquotentmny!=null){
      itemvos[i].setAttributeValue("nquotentmny", nquotentmny.add(diffmny));
      bdiff = true;
    }
    if(bdiff)
      updatevolist.add(itemvos[i]);
  }
  
  if(updatevolist.size()>0){
    itemvos = (GeneralBillItemVO[])updatevolist.toArray(
         new GeneralBillItemVO[updatevolist.size()]
        );
    
    SmartDMO sdmo = new SmartDMO();
    //sdmo.executeUpdateBatch(new GeneralBillHeaderVO[]{outvo.getHeaderVO()},new String[]{"cgeneralhid"},
    //    new String[]{"cgeneralhid"});
    sdmo.executeUpdateBatch(itemvos,new String[]{"ntaxmny","nsalemny","nquotemny","nquotentmny"},
        new String[]{"cgeneralbid"});
    String[] ids = new String[itemvos.length];
    for(int i=0;i<itemvos.length;i++){
      if(itemvos[i].getCgeneralbid()!=null)
        ids[i] = itemvos[i].getCgeneralbid();
    }
    ICSmartToolsDmo tooldmo = new ICSmartToolsDmo();
    HashMap hsids = tooldmo.getValue("ic_general_b", "ts", SmartFieldMeta.JAVATYPE_UFDATETIME, "cgeneralbid",ids , null);
    if(hsids!=null){
      Object otemp = null;
      for(int i=0;i<itemvos.length;i++){
        if(itemvos[i].getCgeneralbid()!=null){
          otemp = hsids.get(itemvos[i].getCgeneralbid());
          if(otemp!=null)
            itemvos[i].setAttributeValue("ts", otemp);
        }
      }
    }
  }
  }catch(Exception e){
    GenMethod.throwBusiException(e);
  }
  
}

/**
 * 创建者：杨波
 * 功能：处理出库金额，防止尾查
 * 参数：

 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public void processOutBillMny_old(nc.vo.pub.AggregatedValueObject vo)
	throws BusinessException {
	if(vo==null)
		return;
	GeneralBillVO outvo = (GeneralBillVO)vo;
	//根据来源单据，获取来源单据的信息：数量，金额，累计出库数量；
	GeneralBillItemVO[] itemvos = (GeneralBillItemVO[])outvo.getChildrenVO();
	
	HashMap hssrcinfo=null;
	try{
		
	ModuleEnable md = new ModuleEnable();
	
	//销售产品是否启用
	String sPkCorp = (String)outvo.getHeaderValue("pk_corp");
	
		if(sPkCorp!=null && !md.isModuleEnble(sPkCorp,ProductCode.PROD_SO)){
			return;
		}	
		
	 hssrcinfo = getSrcBillInfo(itemvos); 
	if(hssrcinfo==null || hssrcinfo.size()<=0)
		return;
	
	UFDouble ntotaloutnum = null,ntotaltaxmny=null,ntotalmny=null,nquotemny=null,ntotalquotemny=null;
	UFDouble noutnum = null,ntaxmny=null,nmny=null,ntotalquoteunitnum=null,nquoteunitnum=null;
	String srcbillrowid = null;
	UFDouble[] arrrowinfo = null;
	
	UFDouble d0 = new UFDouble(0);
	UFDouble dtemp = null;
	ArrayList updatevolist = new ArrayList();
	
	int itemp = 0;
	//处理累计出库数量
	for(int i=0,loop=itemvos.length;i<loop;i++){
		
		if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
			continue;
		if(itemvos[i].getFlargess()!=null && itemvos[i].getFlargess().booleanValue())
			continue;
		
		noutnum = itemvos[i].getNoutnum();
		if(noutnum==null)
			noutnum = d0;
		ntaxmny = itemvos[i].getNtaxmny();
		if(ntaxmny==null)
			ntaxmny = d0;
		nmny = itemvos[i].getNsalemny();
		if(nmny==null)
			nmny = d0;
		
		nquoteunitnum = (UFDouble)itemvos[i].getAttributeValue("nquoteunitnum");
		if(nquoteunitnum==null)
			nquoteunitnum = d0;
		
		nquotemny = (UFDouble)itemvos[i].getAttributeValue("nquotemny");
		if(nquotemny==null)
			nquotemny = d0;
		
		if("32".equals(itemvos[i].getCsourcebillbid()))
			srcbillrowid = itemvos[i].getCsourcebillbid();
		else
			srcbillrowid = itemvos[i].getCfirstbillbid();
		//value:UFDouble[] ---0数量，1---累计出库数量，2---含税金额 ，3---不含税金额,4--累计出库含税金额，5--累计不含税出库 ,6--报价数量,7--报价含税金额,8--累计报价数量，9--累计报价金额 ,10 --本币含税单价
		arrrowinfo = (UFDouble[])hssrcinfo.get(srcbillrowid);
		if(arrrowinfo==null)
			continue;
		
		if(arrrowinfo[0]==null || arrrowinfo[2]==null || arrrowinfo[3]==null)
			continue;
				
		ntotaloutnum = arrrowinfo[1];
		if(ntotaloutnum==null)
			ntotaloutnum = d0;
		
		ntotalquoteunitnum = arrrowinfo[8];
		if(ntotalquoteunitnum==null)
			ntotalquoteunitnum = d0;
		ntotalquoteunitnum = ntotalquoteunitnum.add(nquoteunitnum);
		arrrowinfo[8] = ntotalquoteunitnum;
		
		ntotaltaxmny = arrrowinfo[4];
		if(ntotaltaxmny==null)
			ntotaltaxmny = d0;
		ntotalmny = arrrowinfo[5];
		if(ntotalmny==null)
			ntotalmny = d0;
		
		ntotalquotemny = arrrowinfo[9];
		if(ntotalquotemny==null)
			ntotalquotemny = d0;
		
		ntotaloutnum = ntotaloutnum.add(noutnum);
		arrrowinfo[1] = ntotaloutnum;
		
		itemp = ntotaloutnum.compareTo(arrrowinfo[0]);
		
		//出库是否完成(可能存在超源单据出库的情况)
		if(itemp==0){
			//源单据含税金额-累计出库含税金额
			dtemp = arrrowinfo[2].sub(ntotaltaxmny);
			if(ntaxmny.compareTo(dtemp)!=0){
				itemvos[i].setNtaxmny(dtemp);
				
				arrrowinfo[4] = arrrowinfo[2];
				
				updatevolist.add(itemvos[i]);
			}
      dtemp = arrrowinfo[3].sub(ntotalmny);
      if(nmny.compareTo(dtemp)!=0){
        //源单据不含税金额-累计出库不含税金额
        itemvos[i].setNsalemny(arrrowinfo[3].sub(ntotalmny));
        
        arrrowinfo[5] = arrrowinfo[3];
        if(!updatevolist.contains(itemvos[i]))
          updatevolist.add(itemvos[i]);
      }
		}else{
			arrrowinfo[4] = arrrowinfo[4].add(ntaxmny);
			arrrowinfo[5] = arrrowinfo[5].add(nmny);
		}
		
		if(arrrowinfo[6]!=null){
			if(ntotalquoteunitnum.compareTo(arrrowinfo[6])==0){
				dtemp = arrrowinfo[7].sub(ntotalquotemny);
				if(nquotemny.compareTo(dtemp)!=0){
					itemvos[i].setAttributeValue("nquotemny", dtemp);
					arrrowinfo[9] = arrrowinfo[7];
					if(!updatevolist.contains(itemvos[i]))
						updatevolist.add(itemvos[i]);
				}
			}else{
				arrrowinfo[9] = arrrowinfo[9].add(nquotemny);
			}
		}
		
		
		
	}
	
	if(updatevolist.size()>0){
		itemvos = (GeneralBillItemVO[])updatevolist.toArray(
				 new GeneralBillItemVO[updatevolist.size()]
				);
		
		SmartDMO sdmo = new SmartDMO();
		//sdmo.executeUpdateBatch(new GeneralBillHeaderVO[]{outvo.getHeaderVO()},new String[]{"cgeneralhid"},
		//		new String[]{"cgeneralhid"});
		sdmo.executeUpdateBatch(itemvos,new String[]{"ntaxmny","nsalemny","nquotemny"},
				new String[]{"cgeneralbid"});
		String[] ids = new String[itemvos.length];
		for(int i=0;i<itemvos.length;i++){
			if(itemvos[i].getCgeneralbid()!=null)
				ids[i] = itemvos[i].getCgeneralbid();
		}
		ICSmartToolsDmo tooldmo = new ICSmartToolsDmo();
		HashMap hsids = tooldmo.getValue("ic_general_b", "ts", SmartFieldMeta.JAVATYPE_UFDATETIME, "cgeneralbid",ids , null);
		if(hsids!=null){
			Object otemp = null;
			for(int i=0;i<itemvos.length;i++){
				if(itemvos[i].getCgeneralbid()!=null){
					otemp = hsids.get(itemvos[i].getCgeneralbid());
					if(otemp!=null)
						itemvos[i].setAttributeValue("ts", otemp);
				}
			}
		}
	}
	}catch(Exception e){
		GenMethod.throwBusiException(e);
	}

}

/**
 * 创建者：杨波
 * 功能：获取出库单来源单据数量，金额及已出库数量信息
 * 参数：

 * 返回：HashMap:key - 源单据行id ,value:UFDouble[] ---0数量，1---累计出库数量，2---含税金额 ，3---不含税金额,4--累计出库含税金额，5--累计不含税出库
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
private HashMap getSrcBillInfo_new(GeneralBillItemVO[] itemvos)
  throws BusinessException {
  if(itemvos==null || itemvos.length<=0)
    return null;
  HashMap retmap = null;
  ArrayList ordlist = new ArrayList();
  ArrayList invlist = new ArrayList();
  ArrayList retlist = new ArrayList();
  for(int i=0,loop=itemvos.length;i<loop;i++){
    if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
      continue;
    //销售发票
    if("32".equals(itemvos[i].getCsourcetype())){
      if(!invlist.contains(itemvos[i].getCsourcebillbid()))
        invlist.add(itemvos[i].getCsourcebillbid());
    //销售订单
    }else if("30".equals(itemvos[i].getCfirsttype())){
      if(!ordlist.contains(itemvos[i].getCfirstbillbid()))
        ordlist.add(itemvos[i].getCfirstbillbid());
    //退货申请单
    }else if("3U".equals(itemvos[i].getCfirsttype())){
      if(!retlist.contains(itemvos[i].getCfirstbillbid()))
        retlist.add(itemvos[i].getCfirstbillbid());
    }
  }
  
  retmap = new HashMap();
  
  if(invlist.size()>0){
    return getSrcBillInfo_new(invlist ,"32");
  }
  
  if(ordlist.size()>0){
    return getSrcBillInfo_new(ordlist ,"30");
  }
  
  if(retlist.size()>0){
    return getSrcBillInfo_new(retlist ,"3U");
  }
  
  return retmap;
}



/**
 * 创建者：杨波
 * 功能：获取出库单来源单据数量，金额及已出库数量信息
 * 参数：

 * 返回：HashMap:key - 源单据行id ,value:UFDouble[] ---0数量，1---累计出库数量，2---含税金额 ，3---不含税金额,4--累计出库含税金额，5--累计不含税出库
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
private HashMap getSrcBillInfo(GeneralBillItemVO[] itemvos)
	throws BusinessException {
	if(itemvos==null || itemvos.length<=0)
		return null;
	HashMap retmap = null;
	ArrayList ordlist = new ArrayList();
	ArrayList invlist = new ArrayList();
	ArrayList retlist = new ArrayList();
	for(int i=0,loop=itemvos.length;i<loop;i++){
		if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
			continue;
		//销售发票
		if("32".equals(itemvos[i].getCsourcetype())){
			if(!invlist.contains(itemvos[i].getCsourcebillbid()))
				invlist.add(itemvos[i].getCsourcebillbid());
		//销售订单
		}else if("30".equals(itemvos[i].getCfirsttype())){
			if(!ordlist.contains(itemvos[i].getCfirstbillbid()))
				ordlist.add(itemvos[i].getCfirstbillbid());
		//退货申请单
		}else if("3U".equals(itemvos[i].getCfirsttype())){
			if(!retlist.contains(itemvos[i].getCfirstbillbid()))
				retlist.add(itemvos[i].getCfirstbillbid());
		}
	}
	
	retmap = new HashMap();
	
	if(invlist.size()>0){
		getSrcBillInfo(invlist ,"32", retmap);
	}
	
	if(ordlist.size()>0){
		getSrcBillInfo(ordlist ,"30", retmap);
	}
	
	if(retlist.size()>0){
		getSrcBillInfo(retlist ,"3U", retmap);
	}
	
	String srcbillrowid = null;
	UFDouble[] arrrowinfo = null;
	
	UFDouble d0 = new UFDouble(0);
	
	UFDouble noutnum = null,ntaxmny=null,nmny=null,nquoteunitnum = null,nquotemny = null;
	
//	处理累计累计出库数量及金额，刨出本次出库数量及金额
	for(int i=0,loop=itemvos.length;i<loop;i++){
		
		if(itemvos[i].getStatus()==VOStatus.DELETED || itemvos[i].getStatus()==VOStatus.UNCHANGED)
			continue;
		
		if("32".equals(itemvos[i].getCsourcebillbid()))
			srcbillrowid = itemvos[i].getCsourcebillbid();
		else
			srcbillrowid = itemvos[i].getCfirstbillbid();
		
//		value:UFDouble[] ---0数量，1---累计出库数量，2---含税金额 ，3---不含税金额,4--累计出库含税金额，5--累计不含税出库
		arrrowinfo = (UFDouble[])retmap.get(srcbillrowid);
		if(arrrowinfo==null)
			continue;
		
		//累计出库数量
		if(arrrowinfo[1]==null)
			arrrowinfo[1] = d0;
		
		noutnum = itemvos[i].getNoutnum();
		if(noutnum!=null)
			arrrowinfo[1] = arrrowinfo[1].sub(noutnum);
		
		//累计出库金额
		if(arrrowinfo[4]==null)
			arrrowinfo[4] = d0;
		
		ntaxmny = itemvos[i].getNtaxmny();
		if(ntaxmny!=null)
			arrrowinfo[4] = arrrowinfo[4].sub(ntaxmny);
		
		if(arrrowinfo[5]==null)
			arrrowinfo[5] = d0;
		
		nmny = itemvos[i].getNsalemny();
		if(nmny!=null)
			arrrowinfo[5] = arrrowinfo[5].sub(nmny);
		
//		累计报价单位出库数量
		if(arrrowinfo[8]==null)
			arrrowinfo[8] = d0;
		
		nquoteunitnum = (UFDouble)itemvos[i].getAttributeValue("nquoteunitnum");
		if(nquoteunitnum!=null)
			arrrowinfo[8] = arrrowinfo[8].sub(nquoteunitnum);
		
		if(arrrowinfo[9]==null)
			arrrowinfo[9] = d0;
		
		nquotemny = (UFDouble)itemvos[i].getAttributeValue("nquotemny");
		if(nquotemny!=null)
			arrrowinfo[9] = arrrowinfo[9].sub(nquotemny);
		
	}
	
	return retmap;
	
}


/**
 * 创建者：杨波
 * 功能：获取出库单来源单据数量，金额及已出库数量信息
 * 参数：

 * 返回：void
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String@
 * @param sInvID java.lang.String
 * 修改人：刘家清 修改时间：2009-2-18 下午02:28:08 修改原因：要处理nquotentmny	原币无税净额的尾差处理
   noriginalcurmny
 */
private HashMap getSrcBillInfo_new(ArrayList ids ,String srcbilltype)
  throws BusinessException {
  if(ids==null || ids.size()<=0)
    return null;
//  String sql_src = null;
//  String sql_ic = null;
//  if("30".equals(srcbilltype)){
//    sql_src = "select corder_bid,nnumber,nsummny,nmny,nquoteunitnum,noriginalcursummny,ntaxnetprice from so_saleorder_b where dr = 0 " + GeneralSqlString.formInSQL("corder_bid",ids);
//    sql_ic = "select cfirstbillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny)  from ic_general_b where dr = 0 and csourcetype<>'32' and cfirsttype='30' " + GeneralSqlString.formInSQL("cfirstbillbid",ids)+ " group by cfirstbillbid ";
//  }else if("32".equals(srcbilltype)){
//    sql_src = "select cinvoice_bid,nnumber,nsummny,nmny,nquotenumber,noriginalcursummny,ntaxnetprice from so_saleinvoice_b where dr = 0 " + GeneralSqlString.formInSQL("cinvoice_bid",ids);
//    sql_ic = "select csourcebillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny) from ic_general_b where dr = 0 and csourcetype='32' " + GeneralSqlString.formInSQL("csourcebillbid",ids)+ " group by csourcebillbid ";
//  }else if("3U".equals(srcbilltype)){
//    sql_src = "select pk_apply_b,nnumber,nsummny,nmny,nquoteunitnum,noriginalcursummny,ntaxnetprice from so_apply_b where dr = 0 " + GeneralSqlString.formInSQL("pk_apply_b",ids);
//    sql_ic = "select cfirstbillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny) from ic_general_b where dr = 0 and csourcetype<>'32' and cfirsttype='3U' " + GeneralSqlString.formInSQL("cfirstbillbid",ids)+ " group by cfirstbillbid ";
//  }
  
  try {
	  
	  
	  
	  ICSmartToolsDmo dmotool = new ICSmartToolsDmo();
	  
//  	修改人：刘家清 修改时间：2009-2-26 下午02:33:43 修改原因：进行尾差处理的行下游的所有出库单的单价必须和订单一致。
	  ICDataSet checkPrice  = null;
	    if("30".equals(srcbilltype)){
	    	
	  	  checkPrice = dmotool.query("select so_saleorder_b.corder_bid from so_saleorder_b,ic_general_b "
	  			  +" where so_saleorder_b.corder_bid = ic_general_b.csourcebillbid and ic_general_b.dr = 0 and so_saleorder_b.dr = 0 "
	  			  + GeneralSqlString.formInSQL("so_saleorder_b.corder_bid",ids)
	  			  +" and isnull(so_saleorder_b.ntaxnetprice,0) != isnull(ic_general_b.ntaxprice,0) ");

	    } 
	    if("32".equals(srcbilltype)){
	    	
	    	  checkPrice = dmotool.query("select so_saleinvoice_b.cinvoice_bid as corder_bid from so_saleinvoice_b,ic_general_b "
		  			  +" where so_saleinvoice_b.cinvoice_bid = ic_general_b.csourcebillbid and ic_general_b.dr = 0 and so_saleinvoice_b.dr = 0 "
		  			  + GeneralSqlString.formInSQL("so_saleinvoice_b.cinvoice_bid",ids)
		  			  +" and isnull(so_saleinvoice_b.ntaxnetprice,0) != isnull(ic_general_b.ntaxprice,0) ");
	    }
      
	    if("3U".equals(srcbilltype)){
	    	
		  	  checkPrice = dmotool.query("select so_apply_b.pk_apply_b as corder_bid from so_apply_b,ic_general_b "
		  			  +" where so_apply_b.pk_apply_b = ic_general_b.csourcebillbid and ic_general_b.dr = 0 and so_apply_b.dr = 0 "
		  			  + GeneralSqlString.formInSQL("so_apply_b.pk_apply_b",ids)
		  			  +" and isnull(so_apply_b.ntaxnetprice,0) != isnull(ic_general_b.ntaxprice,0) ");

	    }
	    
	  	  if (null != checkPrice && 0 < checkPrice.getRowCount()){
	  		  for(int i = 0 ;i < checkPrice.getRowCount();i++)
	  			  if (ids.contains(checkPrice.getStringValueAt(i, "corder_bid")))
	  				ids.remove(checkPrice.getStringValueAt(i, "corder_bid"));
	  	  }
	  	  if(ids==null || ids.size()<=0)
	  	    return null;
	  	  
	  	  
	    
	    
    final String vokey = "csourcebillbid";
    ICGenVO[] icvos = new ICGenVO[ids.size()];
    for(int i=0;i<icvos.length;i++){
      icvos[i] = new ICGenVO();
      icvos[i].setAttributeValue(vokey, ids.get(i));
    }
    
    String[] so_vofields = new String[]{"nnumber","nsummny","nmny",
        "nquoteunitnum","noriginalcursummny","noriginalcurmny","ntaxnetprice"};
    int[] so_types = new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,
        SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE};
    
    String[] ic_vofields = new String[]{"ntotaloutnum","ntotaltaxmny","ntotalsalemny",
        "ntotalquoteunitnum","ntotalquotemny","ntotalquotentmny"};
    int[] ic_types = new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,
        SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE};
        
    
    if("30".equals(srcbilltype)){
    	
      dmotool.fillVOsValuesBy(icvos, so_vofields,so_types, 
           vokey, "so_saleorder_b", 
           new String[]{"nnumber","nsummny","nmny",
           "nquoteunitnum","noriginalcursummny","noriginalcurmny","ntaxnetprice"}, "corder_bid", " dr = 0 ");
      
      dmotool.fillVOsValuesBy(icvos, ic_vofields,ic_types, 
           vokey, "ic_general_b", 
           new String[]{"sum(noutnum)","sum(ntaxmny)","sum(nsalemny)","sum(nquoteunitnum)","sum(nquotemny)","sum(nquotentmny)"}, "cfirstbillbid", 
           " dr = 0 and csourcetype<>'32' and cfirsttype='30'  group by cfirstbillbid  ");
   
    }
    if("32".equals(srcbilltype)){
    	
    	
    	
    	
      dmotool.fillVOsValuesBy(icvos, so_vofields,so_types, 
          vokey, "so_saleinvoice_b", 
          new String[]{"nnumber","nsummny","nmny",
          "nquotenumber","noriginalcursummny","noriginalcurmny","ntaxnetprice"}, "cinvoice_bid", " dr = 0 ");
     
      dmotool.fillVOsValuesBy(icvos, ic_vofields,ic_types, 
          vokey, "ic_general_b", 
          new String[]{"sum(noutnum)","sum(ntaxmny)","sum(nsalemny)","sum(nquoteunitnum)","sum(nquotemny)","sum(nquotentmny)"}, "csourcebillbid", 
          " dr = 0 and csourcetype='32'  group by csourcebillbid  ");
    }
    if("3U".equals(srcbilltype)){
      dmotool.fillVOsValuesBy(icvos, so_vofields,so_types, 
          vokey, "so_apply_b", 
          new String[]{"nnumber","nsummny","nmny",
          "nquoteunitnum","noriginalcursummny","noriginalcurmny","ntaxnetprice"}, "pk_apply_b", " dr = 0 ");
     
      dmotool.fillVOsValuesBy(icvos, ic_vofields,ic_types, 
          vokey, "ic_general_b", 
          new String[]{"sum(noutnum)","sum(ntaxmny)","sum(nsalemny)","sum(nquoteunitnum)","sum(nquotemny)","sum(nquotentmny)"}, "cfirstbillbid", 
          " dr = 0 and csourcetype<>'32' and cfirsttype='3U'  group by cfirstbillbid  ");
    }
    
    UFDouble dsonum = null;
    UFDouble dtotaloutnum = null;
    UFDouble dsomny = null;
    UFDouble dtotaloutmny = null;
    HashMap hsret = new HashMap();
    boolean ishavediff = false;
    final String diffntaxmny = "diffntaxmny",diffnsalemny = "diffnsalemny",diffnquotemny = "diffnquotemny",diffnquotentmny = "diffnquotentmny";
    for(int i=0;i<icvos.length;i++){
      ishavediff = false;
      dsonum = icvos[i].getUFDoubleValue("nnumber");
      dtotaloutnum = icvos[i].getUFDoubleValue("ntotaloutnum");
      //修改人：刘家清 修改时间：2009-3-4 下午03:45:31 修改原因：出库完成时要进行尾差处理。
      if(dsonum!=null && dtotaloutnum!=null && dsonum.compareTo(dtotaloutnum)==0){
        dsomny = icvos[i].getUFDoubleValue("nsummny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotaltaxmny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffntaxmny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
        dsomny = icvos[i].getUFDoubleValue("nmny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotalsalemny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffnsalemny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
        
        dsomny = icvos[i].getUFDoubleValue("noriginalcursummny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotemny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffnquotemny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
        
        dsomny = icvos[i].getUFDoubleValue("noriginalcurmny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotentmny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffnquotentmny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
      }
      
      //修改人：刘家清 修改时间：2009-3-4 下午03:45:31 修改原因：退库时如果都退时要进行尾差处理。
      if(dtotaloutnum!=null && UFDouble.ZERO_DBL.compareTo(dtotaloutnum)==0){
          dtotaloutmny = icvos[i].getUFDoubleValue("ntotaltaxmny");
          if(dtotaloutmny!=null && UFDouble.ZERO_DBL.compareTo(dtotaloutmny)!=0){
            icvos[i].setAttributeValue(diffntaxmny, UFDouble.ZERO_DBL.sub(dtotaloutmny));
            ishavediff = true;
          }

          dtotaloutmny = icvos[i].getUFDoubleValue("ntotalsalemny");
          if( dtotaloutmny!=null && UFDouble.ZERO_DBL.compareTo(dtotaloutmny)!=0){
            icvos[i].setAttributeValue(diffnsalemny, UFDouble.ZERO_DBL.sub(dtotaloutmny));
            ishavediff = true;
          }
          
          dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotemny");
          if( dtotaloutmny!=null && UFDouble.ZERO_DBL.compareTo(dtotaloutmny)!=0){
            icvos[i].setAttributeValue(diffnquotemny, UFDouble.ZERO_DBL.sub(dtotaloutmny));
            ishavediff = true;
          }
          
          dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotentmny");
          if(dtotaloutmny!=null && UFDouble.ZERO_DBL.compareTo(dtotaloutmny)!=0){
            icvos[i].setAttributeValue(diffnquotentmny, UFDouble.ZERO_DBL.sub(dtotaloutmny));
            ishavediff = true;
          }
      }
      
/*      dsonum = icvos[i].getUFDoubleValue("nquoteunitnum");
      dtotaloutnum = icvos[i].getUFDoubleValue("ntotalquoteunitnum");
      if(dsonum!=null && dtotaloutnum!=null && dsonum.compareTo(dtotaloutnum)==0){
        dsomny = icvos[i].getUFDoubleValue("noriginalcursummny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotemny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffnquotemny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
      }
      
      //nquotentmny	原币无税净额	新增
      dsonum = icvos[i].getUFDoubleValue("nquoteunitnum");
      dtotaloutnum = icvos[i].getUFDoubleValue("ntotalquoteunitnum");
      if(dsonum!=null && dtotaloutnum!=null && dsonum.compareTo(dtotaloutnum)==0){
        dsomny = icvos[i].getUFDoubleValue("noriginalcurmny");
        dtotaloutmny = icvos[i].getUFDoubleValue("ntotalquotentmny");
        if(dsomny!=null && dtotaloutmny!=null && dsomny.compareTo(dtotaloutmny)!=0){
          icvos[i].setAttributeValue(diffnquotentmny, dsomny.sub(dtotaloutmny));
          ishavediff = true;
        }
      }*/
      if(ishavediff)
        hsret.put(icvos[i].getAttributeValue(vokey), icvos[i]);
    }
    
    return hsret;
    
  }
  catch (Exception e) {
    //日志异常
    nc.vo.scm.pub.SCMEnv.out(e);
    //库存组异常抛出规范
    throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
  }
  
}
	
/**
 * 创建者：杨波
 * 功能：获取出库单来源单据数量，金额及已出库数量信息
 * 参数：

 * 返回：void
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.voAuditBill.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
private void getSrcBillInfo(ArrayList ids ,String srcbilltype,HashMap hssrcinfo)
	throws BusinessException {
	if(ids==null || ids.size()<=0)
		return;
	if(srcbilltype==null)
		return;
	if(hssrcinfo==null)
		return;
	String sql_src = null;
	String sql_ic = null;
	if("30".equals(srcbilltype)){
		sql_src = "select corder_bid,nnumber,nsummny,nmny,nquoteunitnum,noriginalcursummny,ntaxnetprice from so_saleorder_b where dr = 0 " + GeneralSqlString.formInSQL("corder_bid",ids);
		sql_ic = "select cfirstbillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny) from ic_general_b where dr = 0 and csourcetype<>'32' and cfirsttype='30' " + GeneralSqlString.formInSQL("cfirstbillbid",ids)+ " group by cfirstbillbid ";
	}else if("32".equals(srcbilltype)){
		sql_src = "select cinvoice_bid,nnumber,nsummny,nmny,nquotenumber,noriginalcursummny,ntaxnetprice from so_saleinvoice_b where dr = 0 " + GeneralSqlString.formInSQL("cinvoice_bid",ids);
		sql_ic = "select csourcebillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny) from ic_general_b where dr = 0 and csourcetype='32' " + GeneralSqlString.formInSQL("csourcebillbid",ids)+ " group by csourcebillbid ";
	}else if("3U".equals(srcbilltype)){
		sql_src = "select pk_apply_b,nnumber,nsummny,nmny,nquoteunitnum,noriginalcursummny,ntaxnetprice from so_apply_b where dr = 0 " + GeneralSqlString.formInSQL("pk_apply_b",ids);
		sql_ic = "select cfirstbillbid,sum(noutnum),sum(ntaxmny),sum(nsalemny),sum(nquoteunitnum),sum(nquotemny) from ic_general_b where dr = 0 and csourcetype<>'32' and cfirsttype='3U' " + GeneralSqlString.formInSQL("cfirstbillbid",ids)+ " group by cfirstbillbid ";
	}
	
	if(sql_src==null)
		return;
	
	try {
    SmartDMO sdmo = new SmartDMO();
    Object[] srcinfo = null;
    UFDouble[] drowinfo = null;
    Object[] orowinfo = null;
    
    srcinfo = sdmo.selectBy2(sql_src);
    UFDouble d0 = new UFDouble(0);
    if(srcinfo!=null && srcinfo.length>0){
    	for(int i=0,loop=srcinfo.length;i<loop;i++){
    		orowinfo = (Object[])srcinfo[i];
    		if(orowinfo[0]==null)
    			continue;
    		drowinfo = new UFDouble[11];
    		if(orowinfo[0]==null)
    			continue;
    		if(orowinfo[1] != null)
    			if(orowinfo[1].getClass()==UFDouble.class)
    				drowinfo[0] =  (UFDouble)orowinfo[1];
    			else
    				drowinfo[0] =  new UFDouble(orowinfo[1].toString());
    		else
    			drowinfo[0] = d0;
    		
    		if(orowinfo[2] != null)
    			if(orowinfo[2].getClass()==UFDouble.class)
    				drowinfo[2] =  (UFDouble)orowinfo[2];
    			else
    				drowinfo[2] =  new UFDouble(orowinfo[2].toString());
    		else
    			drowinfo[2] = d0;
    		
    		if(orowinfo[3] != null)
    			if(orowinfo[3].getClass()==UFDouble.class)
    				drowinfo[3] =  (UFDouble)orowinfo[3];
    			else
    				drowinfo[3] =  new UFDouble(orowinfo[3].toString());
    		else
    			drowinfo[3] = d0;
    		
    		if(orowinfo[4] != null)
    			if(orowinfo[4].getClass()==UFDouble.class)
    				drowinfo[6] =  (UFDouble)orowinfo[4];
    			else
    				drowinfo[6] =  new UFDouble(orowinfo[4].toString());
    		else
    			drowinfo[6] = d0;
    		
    		if(orowinfo[5] != null)
    			if(orowinfo[5].getClass()==UFDouble.class)
    				drowinfo[7] =  (UFDouble)orowinfo[5];
    			else
    				drowinfo[7] =  new UFDouble(orowinfo[5].toString());
    		else
    			drowinfo[7] = d0;
    		
    		if(orowinfo[6] != null)
    			if(orowinfo[6].getClass()==UFDouble.class)
    				drowinfo[10] =  (UFDouble)orowinfo[6];
    			else
    				drowinfo[10] =  new UFDouble(orowinfo[6].toString());
    		else
    			drowinfo[10] = d0;
    		
    		hssrcinfo.put(orowinfo[0].toString(),drowinfo);
    	}
    }
    
    srcinfo = sdmo.selectBy2(sql_ic);
    
    if(srcinfo!=null && srcinfo.length>0){
    	for(int i=0,loop=srcinfo.length;i<loop;i++){
    		orowinfo = (Object[])srcinfo[i];
    		if(orowinfo[0]==null)
    			continue;
    		
    		drowinfo = (UFDouble[])hssrcinfo.get(orowinfo[0].toString());
    		if(drowinfo==null)
    			continue;
    		
    		if(orowinfo[1] != null)
    			if(orowinfo[1].getClass()==UFDouble.class)
    				drowinfo[1] =  (UFDouble)orowinfo[1];
    			else
    				drowinfo[1] =  new UFDouble(orowinfo[1].toString());
    		else
    			drowinfo[1] = d0;
    		
    		if(orowinfo[2] != null)
    			if(orowinfo[2].getClass()==UFDouble.class)
    				drowinfo[4] =  (UFDouble)orowinfo[2];
    			else
    				drowinfo[4] =  new UFDouble(orowinfo[2].toString());
    		else
    			drowinfo[4] = d0;
    		
    		if(orowinfo[3] != null)
    			if(orowinfo[3].getClass()==UFDouble.class)
    				drowinfo[5] =  (UFDouble)orowinfo[3];
    			else
    				drowinfo[5] =  new UFDouble(orowinfo[3].toString());
    		else
    			drowinfo[5] = d0;
    		
    		if(orowinfo[4] != null)
    			if(orowinfo[4].getClass()==UFDouble.class)
    				drowinfo[8] =  (UFDouble)orowinfo[4];
    			else
    				drowinfo[8] =  new UFDouble(orowinfo[4].toString());
    		else
    			drowinfo[8] = d0;
    		
    		if(orowinfo[5] != null)
    			if(orowinfo[5].getClass()==UFDouble.class)
    				drowinfo[9] =  (UFDouble)orowinfo[5];
    			else
    				drowinfo[9] =  new UFDouble(orowinfo[5].toString());
    		else
    			drowinfo[9] = d0;
    		
    	}
    		
    }
  }
  catch (Exception e) {
    //日志异常
    nc.vo.scm.pub.SCMEnv.out(e);
    //库存组异常抛出规范
    throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
  }
	
}
/**
 * 创建人：刘家清 创建时间：2008-6-26 下午04:30:57 创建原因： 则采购入库单签字后推式生成自由状态且只有应发数量/辅数量的销售出库单
 * ，销售出库单与采购入库单之间建立出库跟踪入库关系，将采购入库单号记在销售出库单的“对应入库单号”中，同时自动关联直运销售订单，
 * 将销售出库单的“来源单据类型”记为“销售订单”，“来源单据号”、“来源单据行号”记为采购入库单关联的源头直运销售订单的订单号、行号；
 * @param vo
 * @return
 */
public GeneralBillVO[] fillDirectSaleOrderInfo(GeneralBillVO[] vos){
	for(int i=0;i< vos.length;i++)
		vos[i] = fillDirectSaleOrderInfo(vos[i]);
	return vos;
}
/**
 * 创建人：刘家清 创建时间：2008-6-26 下午04:30:57 创建原因： 则采购入库单签字后推式生成自由状态且只有应发数量/辅数量的销售出库单
 * ，销售出库单与采购入库单之间建立出库跟踪入库关系，将采购入库单号记在销售出库单的“对应入库单号”中，同时自动关联直运销售订单，
 * 将销售出库单的“来源单据类型”记为“销售订单”，“来源单据号”、“来源单据行号”记为采购入库单关联的源头直运销售订单的订单号、行号；
 * @param vo
 * @return
 */
public GeneralBillVO fillDirectSaleOrderInfo(GeneralBillVO vo){
	return vo;
}

	/**
	 * 协同生成采购入库单
	 * 
	 * @param al_splitItems
	 * @throws BusinessException
	 */
	public GeneralBillVO[] coopSave45(nc.vo.pub.AggregatedValueObject[] vo4Cs)
			throws BusinessException {
		if (null == vo4Cs || vo4Cs.length == 0)
			throw new BusinessException(
					"nc.bs.ic.ic211.GeneralHBO.coopSave45(GeneralBillVO.class.getName())方法传出参数不正确");
		GeneralBillVO[] vos = null;
		try {
			GeneralHDMO dmo = new GeneralHDMO();
			vos = dmo.coopSave45((GeneralBillVO[])vo4Cs);
		} catch (Exception e) {
			SCMEnv.out(e.getMessage());
			throw new BusinessException(e.getMessage(), e);
		}
		return vos;
	}

	
	public void setCoopFlag(GeneralBillVO vo)
			throws BusinessException {
		if (null == vo || null == vo.getHeaderVO() || null == vo.getItemVOs()
				|| vo.getItemVOs().length == 0)
			throw new BusinessException("传递参数不完整，无法置协同标志");
		try {
			GeneralHDMO dmo = new GeneralHDMO();
				dmo.setCoopFlag(vo);
		} catch (Exception e) {
			SCMEnv.out(e.getMessage());
			throw new BusinessException(e.getMessage(), e);
		}

	}
  
  /*
   * 关闭销售订单 出库关闭定单脚本调用
   */
  public void closeSOOrder(GeneralBillVO vo)
  throws BusinessException {
    
  if (null == vo || null == vo.getHeaderVO() || null == vo.getItemVOs()
      || vo.getItemVOs().length == 0)
    return;
  try {
    GeneralBillItemVO[] itemvo = vo.getItemVOs();
    HashSet<String> hs = new HashSet<String>();
    for(int i=0;i<itemvo.length;i++){
      if(itemvo[i].getCfirsttype()!=null && BillTypeConst.SO_Order.equals(itemvo[i].getCfirsttype())
         && itemvo[i].getCfirstbillhid()!=null && !hs.contains(itemvo[i].getCfirstbillhid()))
        hs.add(itemvo[i].getCfirstbillhid());
    }
    if(hs.size()<=0)
      return;
    if(!new ModuleEnable().isSOEnble(vo.getHeaderVO().getPk_corp()))
      return;
    
    nc.itf.scm.so.so001.ISaleOrder isaleorder = 
      (nc.itf.scm.so.so001.ISaleOrder)NCLocator.getInstance().lookup(nc.itf.scm.so.so001.ISaleOrder.class.getName());
    
    
    ClientLink cl = new ClientLink(nc.bs.ic.pub.GenMethod.getBSCorp(), 
        nc.bs.ic.pub.GenMethod.getBSUser(), nc.bs.ic.pub.GenMethod.getBSDate(),
        null, null, null,null, null, null,
        false, null, null,null);
    isaleorder.updateOrderEnd(hs.toArray(new String[hs.size()]),cl);
    
  } catch (Exception e) {
    SCMEnv.out(e.getMessage());
    throw new BusinessException(e.getMessage(), e);
  }

}
  
  /**
   * 创建人：刘家清 创建时间：2008-10-23 上午11:11:00 创建原因： 出库单删除调用自动结算关闭
   * @param inCurVO
   * @param inPreVO
   * @param iact
   * @throws BusinessException
   */
  public void processAutoClose(GeneralBillVO inCurVO)
			throws BusinessException {

		try {
			
			if (null == inCurVO)
				return;

			String pk_corp = null;

			if (inCurVO != null && inCurVO.getHeaderVO() != null)
				pk_corp = inCurVO.getHeaderVO().getPk_corp();


			ModuleEnable me = new ModuleEnable();

			if (!me.isSOEnble(pk_corp))
				return;
			
			ArrayList<String> orderBidList = new ArrayList<String>();
			for(GeneralBillItemVO itemVO : inCurVO.getItemVOs())
				if (null != itemVO.getCfirsttype()
						&& ScmConst.SO_Order.equals(itemVO.getCfirsttype())
						&&!orderBidList.contains(itemVO.getCfirstbillbid()))
					orderBidList.add(itemVO.getCfirstbillbid());
			
			if (0 < orderBidList.size()){

				String[] orderBids = new String[orderBidList.size()];
				orderBidList.toArray(orderBids);
				nc.itf.scm.so.so001.ISaleOrdBalEndSrv iSaleOrdBalEndSrv = (nc.itf.scm.so.so001.ISaleOrdBalEndSrv) nc.bs.framework.common.NCLocator
						.getInstance().lookup(
								nc.itf.scm.so.so001.ISaleOrdBalEndSrv.class
										.getName());
				
				nc.vo.so.saleordbal.SaleordBalEndVO invoicepara = new nc.vo.so.saleordbal.SaleordBalEndVO(inCurVO.getHeaderVO().getClogdatenow(),inCurVO.getHeaderVO().getCoperatoridnow(),pk_corp,
						orderBids,nc.vo.so.pub.SaleOrdBalConst.ISALEORDBAL_TRIG_ICDEL);
			    iSaleOrdBalEndSrv.processAutoClose(invoicepara);
		        
			}
		
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}
  
  /**
   * 创建人：刘家清 创建时间：2008-12-23 下午08:13:30 创建原因： 方法说明:取消结算
   * @param inCurVO
   * @throws BusinessException
   */
  public void setAfterOutAbandonCheck(GeneralBillVO inCurVO)
	throws BusinessException{
	  if (null == inCurVO)
		  return;
	  try{
	  ModuleEnable me = new ModuleEnable();

		if (!me.isSOEnble(inCurVO.getHeaderVO().getPk_corp()))
			return;
	  String pkBillid=(String)inCurVO.getHeaderValue("cgeneralhid");
	  nc.itf.scm.so.so012.ISquareInputDMO sobo1 = (nc.itf.scm.so.so012.ISquareInputDMO)nc.bs.framework.common.NCLocator.getInstance().lookup(nc.itf.scm.so.so012.ISquareInputDMO.class.getName());
	  sobo1.setAfterOutAbandonCheck(pkBillid);
	} catch (Exception e) {
		throw GenMethod.handleException(null, e);
	}
	  
  }
  
  
  /*
   * add by ouyangzhb 2011-07-03
   * 获取出库单的上游销售订单
   * 
   */
  public nc.vo.so.so001.SaleOrderVO findOrderVO(nc.vo.ic.pub.bill.GeneralBillVO invo){
	  ArrayList<SaleorderBVO> childvos = new ArrayList<SaleorderBVO>();
	  HashMap hmap = new HashMap();
	  HashMap bmap = new HashMap();
	  ArrayList csourcehidlist = new ArrayList();
	  ArrayList csourdebodyid = new ArrayList();
	  
	  IUAPQueryBS iService = (IUAPQueryBS) NCLocator.getInstance().lookup(
				IUAPQueryBS.class.getName());
	  
	  	if(invo==null){
	  		return null;
	  	}
	  	
	  GeneralBillItemVO[] cvos = (GeneralBillItemVO[]) invo.getChildrenVO();
	 
	  //取上游单据表头，表体ID对应的出库单的出库数量
	  for(int i=0;i<cvos.length;i++){
		  String sourcebid = cvos[i].getCsourcebillbid();
		  String sourcehid = cvos[i].getCsourcebillhid();
		  UFDouble num =  cvos[i].getNshouldoutnum();
		  if(csourcehidlist.contains(sourcehid)){
			  hmap.put(sourcehid, ((UFDouble) hmap.get(sourcehid)).add(num));
		  }else{
			  hmap.put(sourcehid, num);
		  }
		  csourdebodyid.add(sourcebid);
		  csourcehidlist.add(sourcehid);
		  bmap.put(sourcebid, num);
	  }
	  
	  nc.vo.so.so001.SaleOrderVO ordervo = new nc.vo.so.so001.SaleOrderVO();
	  String bidinsql = SQLUtil.formInSQL("b.corder_bid",csourdebodyid );
	  String hidinsql = SQLUtil.formInSQL("b.csaleid", csourcehidlist);
	 
	  
	  //构造销售订单的表头
	  //因为能过合成一张发票的所有销售订单的表头生成发票时所需要的信息是一致的，只需要取其中一条组成销售订单的表头就可以了
	  String csoucebillid=null;
	  for(int i=0;i<invo.getChildrenVO().length;i++){
		  csoucebillid = (String) invo.getChildrenVO()[i].getAttributeValue("csourcebillhid");
		  if(csoucebillid!=null){
			  break;
		  }
	  }
	  ArrayList<SaleorderHVO> volist = null;
	  String psql = " select * from so_sale so where so.csaleid='"+csoucebillid+"' and so.dr=0 ";
	  try {
		  volist = (ArrayList<SaleorderHVO>) iService
				.executeQuery(psql, new BeanListProcessor(
						SaleorderHVO.class));
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		
//		//出库单表体的长度
	  ArrayList  listid = new ArrayList();
	  
	  //构造销售订单表体vo,根据需求，有两种情况，1、出库单行对应的销售订单行；2、出库单对应的销售订单的费用信息。所有的数量都必须是当前出库单的数量
		  
		//查询出库单表体行对应的销售订单行，并把数量改为对应出库单的数量
		  String csql = " select * from so_saleorder_b b where  b.dr=0 "+bidinsql ;
		  try {
			  ArrayList<SaleorderBVO> childvolist = new ArrayList<SaleorderBVO>();
			   childvolist = (ArrayList<SaleorderBVO>) iService
				.executeQuery(csql, new BeanListProcessor(
						SaleorderBVO.class));
			  if(childvolist!=null&&childvolist.size()>0){
				  for(int i=0;i<childvolist.size();i++){
					  childvolist.get(i).setNnumber((UFDouble) bmap.get(childvolist.get(i).getCorder_bid()));
					  childvos.add(childvolist.get(i));
				  }
			  }
		} catch (BusinessException e) {
			e.printStackTrace();
		}
	  
  
//查询出库单行对应的费用销售费用信息组成表体vo，并把表体的数量改为出库数量
	  String costsql = "select * from so_saleorder_b b where  b.dr=0 "+hidinsql +
	  		"and b.cinvbasdocid in (select inv.pk_invbasdoc from bd_invbasdoc inv where inv.laborflag='Y' ) ";
	  try {
		ArrayList<SaleorderBVO[]> costvolist = (ArrayList<SaleorderBVO[]>) iService
			.executeQuery(costsql, new BeanListProcessor(
					SaleorderBVO.class));
		if(costvolist!=null&&costvolist.size()>0){
			SaleorderBVO[] costvo = new SaleorderBVO[costvolist.size()];
			costvolist.toArray(costvo);
			for(int a=0;a<costvo.length;a++){
				childvos.add(costvo[a]);
			}
		}
	} catch (BusinessException e) {
		e.printStackTrace();
	}
	 
	
	  //组合出库单对应的销售订单
	if(childvos!=null && childvos.size()>0 &&volist!=null&&volist.size()>0){
		 SaleorderBVO[] cvo = new SaleorderBVO[childvos.size()];
		  childvos.toArray(cvo);
		ordervo.setParentVO(volist.get(0));
		ordervo.setChildrenVO(cvo);
		return ordervo;
	}else{
		return null;
	}
	
  }
	
}