/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.pi;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import org.apache.commons.lang.ArrayUtils;

import nc.bs.arap.outer.ArapPubUnVerifyInterface;
import nc.bs.arap.outer.ArapPubVerifyInterface;
import nc.bs.bd.b21.CurrencyRateUtil;
import nc.bs.framework.common.NCLocator;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.po.close.PoCloseImpl;
import nc.bs.pu.pub.BsPuTool;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.pub.pf.IBackCheckState;
import nc.bs.pub.pf.ICheckState;
import nc.bs.pub.pf.IQueryData;
import nc.bs.scm.pub.TempTableDMO;
import nc.itf.pi.IInvoiceD;
import nc.itf.scm.cenpur.service.TempTableUtil;
import nc.itf.uap.busibean.ISysInitQry;
import nc.ui.bd.b21.CurrParamQuery;
import nc.ui.bd.b21.CurrtypeQuery;
import nc.vo.arap.accountpub.DjclDapItemVO;
import nc.vo.arap.accountpub.DjclDapVO;
import nc.vo.arap.verify.DJCLBVO;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.jcom.lang.StringUtil;
import nc.vo.pf.change.IChangeVOCheck;
import nc.vo.pf.pub.BusitypeVO;
import nc.vo.pi.InvoiceHeaderVO;
import nc.vo.pi.InvoiceItemVO;
import nc.vo.pi.InvoiceVO;
import nc.vo.pi.RelatedTableVO;
import nc.vo.ps.estimate.GeneralBb3VO;
import nc.vo.ps.settle.IAdjuestVO;
import nc.vo.ps.settle.SettlebillItemVO;
import nc.vo.ps.settle.SettlebillVO;
import nc.vo.ps.vmi.SettleVO;
import nc.vo.pu.exception.RwtPiToScException;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.plugin.PluginExtFieldParser;
import nc.vo.scm.pu.BillStatus;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pu.VariableConst;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.TempTableVO;
import nc.vo.scm.pub.bill.IExamAVO;
import nc.vo.scm.puic.ParaPoToIcLendRewriteVO;

//import nc.bs.po.* ;
/**
 * Invoice的DMO类。
 *
 * 创建日期：(2001-6-18)
 * @author：王印芬
 */
public class InvoiceDMO extends DataManageObject
implements IQueryData,ICheckState,ArapPubVerifyInterface,ArapPubUnVerifyInterface,IBackCheckState, IInvoiceD ,IChangeVOCheck {
/**
 * InvoiceDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public InvoiceDMO() throws javax.naming.NamingException, SystemException {
	super();
	/*
	2001-10-29 1.0
1.修改发票检查容差时报的空指针异常.
2.修改是否单据可自制时多次报错的错误.
3.修改发票审批过程与审批流结合.
4.只有业务类型为直运的订单生成发票时才需结算,加入该判断.
5.发现结算的存货ID没有保存的问题.
6.由入库单生成发票时报空指针的错误.
7.其他单据转发票时,处理表体备注不能保留的问题.

2001-10-29 1.1
1.主辅币转换有问题,暂时按汇率1转为本币与辅币.
2.修改入库单生成发票时子子VO与主子VO不相符的严重错误.
3.结算通过
4.修改取启用日期的方法.
5.加入入库单转发票的税率转出,币种转出.
6.根据与结算单接口,增加差异转入方式与暂估方式的处理.

2001-10-30 1.0
1.已结算的发票仍旧改回不能修改,不能作废.
2.修改完毕与结算的接口,修改传入结算的入口参数.增加行数时亦进行了处理.
3.入库单生成的发票结算单作废后,再进行修改时,按从订单转入的发票处理,数量及单价取订单的限制.
4.结算后生成的发票,取回结算数量与结算金额,限制发票不能再修改与作废.

2001-10-30 1.1
1.修改弃审,审批,作废的方法,提高速度,只理发必要字段.
	*/
}
/**
 * InvoiceDMO 构造子注解。
 */
public InvoiceDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
* 作者：晁志平
* 功能：审批订单
* 参数：
*		String billId				单据ID
*		String approveId			审批人ID
*		String approveDate			审批日期
*		String checkNote			批语
* 返回：void
* 例外：Exception					一般异常
* 日期：(2005-05-24 15:39:21)
* 修改日期，修改人，修改原因，注释标志：
*/
public void backGoing(String billId, String approveId, String approveDate, String backNote) throws Exception {
	InvoiceHeaderVO vo = findHeaderByPrimaryKey(billId);

	if (vo.getIbillstatus().intValue() != BillStatus.AUDITING.intValue() 
			&& vo.getIbillstatus().intValue() != BillStatus.AUDITED.intValue())
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000270")/*@res "单据状态不是审批中、审批通过，不可以弃审。"*/);

	//0自由 1作废 2正在审批 3审批通过 4审批未通过
	String sql = "update po_invoice set cauditpsn=?,ibillstatus = ?,dauditdate=?,taudittime=? where cinvoiceid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//审批进行中的状态
		stmt.setString(1, approveId);
		stmt.setInt(2, BillStatus.AUDITING.intValue());
		stmt.setString(3, approveDate.toString());
		stmt.setString(4, (new UFDateTime(new Date())).toString());
		stmt.setString(5, billId);
		//
		stmt.executeUpdate();
	} catch (SQLException e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
}
/**
* 作者：晁志平
* 功能：审批订单--驳回
* 参数：
*		String billId				单据ID
*		String approveId			审批人ID
*		String approveDate			审批日期
*		String checkNote			批语
* 返回：void
* 例外：Exception					一般异常
* 日期：(2005-05-24 15:39:21)
* 修改日期，修改人，修改原因，注释标志：
*/
public void backNoState(String billId, String approveId, String approveDate, String backNote) throws Exception {

	String sql =
		"update po_invoice set ibillstatus = 0, cauditpsn = null, dauditdate = null where cinvoiceid = ? and dr = 0";
	Connection con = null;
	PreparedStatement stmt = null;

	try {		
	    con = getConnection();
		
		stmt = prepareStatement(con,sql);
		
		stmt.setString(1, billId);

		executeUpdate(stmt);
		
		executeBatch(stmt);
		
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
}
/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2001-8-4)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 */
public InvoiceVO findByPrimaryKey(String key) throws SQLException {

	InvoiceVO vo = new InvoiceVO();
	//
	InvoiceHeaderVO header = findHeaderByPrimaryKey(key);
	InvoiceItemVO[] items = null;
	if (header != null) {
		items = findItemsForHeader(header.getPrimaryKey());
	}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);

	return vo;
}
 /**
 * 作者：王印芬
 * 功能：通过主键查找一个VO对象
 * 参数：
 *		String	key						主键值
 * 返回：InvoiceHeaderVO					发票头VO
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 */
public InvoiceHeaderVO findHeaderByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/
	StringBuffer	sbufHeadSQL = new	StringBuffer("SELECT distinct ") ;
	String[]	saHField = InvoiceHeaderVO.getDbFields() ;
	int	iHLen = saHField.length ;
	for (int i = 0; i < iHLen ; i++){
		sbufHeadSQL.append( "po_invoice." ) ;
		sbufHeadSQL.append( saHField[i] ) ;
		sbufHeadSQL.append( "," ) ;
	}
	sbufHeadSQL.append( "po_invoice_b.nexchangeotobrate,");

	sbufHeadSQL.append( "po_invoice_b.ccurrencytypeid ");
	sbufHeadSQL.append( "from po_invoice,po_invoice_b where po_invoice.cinvoiceid = po_invoice_b.cinvoiceid and po_invoice.cinvoiceid = ? and po_invoice.dr = 0 ");

	InvoiceHeaderVO headVO = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sbufHeadSQL.toString());
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if(rs.next()) {
			headVO = new InvoiceHeaderVO() ;

			Object	ob = rs.getObject(1);
			headVO.setPrimaryKey(ob.toString()) ;

			for(int	i=1;i<saHField.length;i++){
				ob = rs.getObject(i+1);
				if(ob==null || ob.toString().trim().equals("") ){
					headVO.setAttributeValue(saHField[i],null );
				}else	if(ob.getClass().equals(String.class)){
					headVO.setAttributeValue(saHField[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					headVO.setAttributeValue(saHField[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
						headVO.setAttributeValue(saHField[i],null );
					else
						headVO.setAttributeValue(saHField[i],new	UFDouble(ob.toString()) );
				}
			}

			//fangy added 2003-02-24 begin
			//设置折本汇率
			BigDecimal nexchangeotobrate = (BigDecimal)rs.getObject(saHField.length + 1);
			if(nexchangeotobrate != null)
				headVO.setNexchangeotobrate(new UFDouble(nexchangeotobrate));
			else
				headVO.setNexchangeotobrate(null);

			//币种
			String ccurrencytypeid = rs.getObject(saHField.length + 2).toString();
			headVO.setCcurrencytypeid(ccurrencytypeid);
			//fangy added 2003-02-24 end
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return headVO;
}
 /**
 * 作者：王印芬
 * 功能：通过发票行主键查询符合条件的体VO
 * 参数：
 *		String	key						发票行ID
 * 返回：InvoiceItemVO					体VO
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-08-02	wyf		修改对BigDecimal的取法
 */
public InvoiceItemVO findItemByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select cinvoiceid, pk_corp, cusedeptid, corder_bid, corderid, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, cmangid, cbaseid, ninvoicenum, naccumsettnum, idiscounttaxtype, ntaxrate, ccurrencytypeid, noriginalcurprice, noriginaltaxmny, noriginalcurmny, noriginalsummny, noriginalpaymentmny, nexchangeotobrate, nmoney, ntaxmny, nsummny, npaymentmny, naccumsettmny,cprojectid, cprojectphaseid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6,";
	sql += "vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20, dr, ts, crowno, nreasonwastenum, pk_upsrccorp,ccostsubjid from po_invoice_b where cinvoice_bid = ?";

	InvoiceItemVO invoiceItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			invoiceItem = new InvoiceItemVO(key);
			// cinvoiceid :
			String cinvoiceid = rs.getString(1);
			invoiceItem.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			invoiceItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// cusedeptid :
			String cusedeptid = rs.getString(3);
			invoiceItem.setCusedeptid(cusedeptid == null ? null : cusedeptid.trim());
			// corder_bid :
			String corder_bid = rs.getString(4);
			invoiceItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			// corderid :
			String corderid = rs.getString(5);
			invoiceItem.setCorderid(corderid == null ? null : corderid.trim());
			// csourcebilltype :
			String csourcebilltype = rs.getString(6);
			invoiceItem.setCsourcebilltype(csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(7);
			invoiceItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(8);
			invoiceItem.setCsourcebillrowid(csourcebillrowid == null ? null : csourcebillrowid.trim());
			// cupsourcebilltype :
			String cupsourcebilltype = rs.getString(9);
			invoiceItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			// cupsourcebillid :
			String cupsourcebillid = rs.getString(10);
			invoiceItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			// cupsourcebillrowid :
			String cupsourcebillrowid = rs.getString(11);
			invoiceItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			// cmangid :
			String cmangid = rs.getString(12);
			invoiceItem.setCmangid(cmangid == null ? null : cmangid.trim());
			// cbaseid :
			String cbaseid = rs.getString(13);
			invoiceItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
			// ninvoicenum :
			BigDecimal ninvoicenum = rs.getBigDecimal(14);
			invoiceItem.setNinvoicenum(ninvoicenum == null ? null : new UFDouble(ninvoicenum));
			// naccumsettnum :
			BigDecimal naccumsettnum = rs.getBigDecimal(15);
			invoiceItem.setNaccumsettnum(naccumsettnum == null ? null : new UFDouble(naccumsettnum));
			// idiscounttaxtype :
			Integer idiscounttaxtype = (Integer)rs.getObject(16);
			invoiceItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
			// ntaxrate :
			BigDecimal ntaxrate = rs.getBigDecimal(17);
			invoiceItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
			// ccurrencytypeid :
			String ccurrencytypeid = rs.getString(18);
			invoiceItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			// noriginalcurprice :
			BigDecimal noriginalcurprice = rs.getBigDecimal(19);
			invoiceItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
			// noriginaltaxmny :
			BigDecimal noriginaltaxmny = rs.getBigDecimal(20);
			invoiceItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
			// noriginalcurmny :
			BigDecimal noriginalcurmny = rs.getBigDecimal(21);
			invoiceItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
			// noriginalsummny :
			BigDecimal noriginalsummny = rs.getBigDecimal(22);
			invoiceItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
			// noriginalpaymentmny :
			BigDecimal noriginalpaymentmny = rs.getBigDecimal(23);
			invoiceItem.setNoriginalpaymentmny(noriginalpaymentmny == null ? null : new UFDouble(noriginalpaymentmny));
			// nexchangeotobrate :
			BigDecimal nexchangeotobrate = rs.getBigDecimal(24);
			invoiceItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
			// nmoney :
			BigDecimal nmoney = rs.getBigDecimal(25);
			invoiceItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
			// ntaxmny :
			BigDecimal ntaxmny = rs.getBigDecimal(26);
			invoiceItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
			// nsummny :
			BigDecimal nsummny = rs.getBigDecimal(27);
			invoiceItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
			// npaymentmny :
			BigDecimal npaymentmny = rs.getBigDecimal(28);
			invoiceItem.setNpaymentmny(npaymentmny == null ? null : new UFDouble(npaymentmny));
			// naccumsettmny :
			BigDecimal naccumsettmny = rs.getBigDecimal(29);
			invoiceItem.setNaccumsettmny(naccumsettmny == null ? null : new UFDouble(naccumsettmny));
			// cprojectid :
			String cprojectid = rs.getString(30);
			invoiceItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid :
			String cprojectphaseid = rs.getString(31);
			invoiceItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
			// vmemo :
			String vmemo = rs.getString(32);
			invoiceItem.setVmemo(vmemo == null ? null : vmemo.trim());
			// vfree1 :
			String vfree1 = rs.getString(33);
			invoiceItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(34);
			invoiceItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(35);
			invoiceItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(36);
			invoiceItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(37);
			invoiceItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			// vdef1 :
			String vdef1 = rs.getString(38);
			invoiceItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(39);
			invoiceItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(40);
			invoiceItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(41);
			invoiceItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(42);
			invoiceItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(43);
			invoiceItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			//vdef7 :
			String vdef7 = rs.getString(44);
			invoiceItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(45);
			invoiceItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(46);
			invoiceItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(47);
			invoiceItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(48);
			invoiceItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(49);
			invoiceItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(50);
			invoiceItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(51);
			invoiceItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(52);
			invoiceItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(53);
			invoiceItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(54);
			invoiceItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(55);
			invoiceItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(56);
			invoiceItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(57);
			invoiceItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(58);
			invoiceItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(59);
			invoiceItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(60);
			invoiceItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(61);
			invoiceItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(62);
			invoiceItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(63);
			invoiceItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(64);
			invoiceItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(65);
			invoiceItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(66);
			invoiceItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(67);
			invoiceItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(68);
			invoiceItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(69);
			invoiceItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(70);
			invoiceItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(71);
			invoiceItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(72);
			invoiceItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(73);
			invoiceItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(74);
			invoiceItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(75);
			invoiceItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(76);
			invoiceItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(77);
			invoiceItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// dr :
			Integer dr = (Integer)rs.getObject(78);
			invoiceItem.setDr(dr == null ? null : dr);
			// ts :
			String ts = (String)rs.getObject(79);
			invoiceItem.setTs(ts == null ? null : ts.trim());
			//crowno
			String crowno = (String)rs.getObject(80);
			invoiceItem.setCrowno(crowno == null ? null : crowno.trim());
			// nreasonwastenum :
			BigDecimal nreasonwastenum = rs.getBigDecimal(81);
			invoiceItem.setNreasonwastenum(nreasonwastenum == null ? null : new UFDouble(nreasonwastenum));
			
			//pk_upsrccorp
			String pk_upsrccorp = (String)rs.getObject(82);
			invoiceItem.setPk_upsrccorp(pk_upsrccorp == null ? null : pk_upsrccorp.trim());

			//ccostsubjid
			String ccostsubjid = (String)rs.getObject(83);
			invoiceItem.setCcostsubjid(ccostsubjid == null ? null : ccostsubjid.trim());

		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return invoiceItem;
}
 /**
 * 作者: 方益
 * 功能：通过发票主键查询符合条件的体VO数组
 * 参数：
 *		String	key						发票ID
 * 返回：InvoiceItemVO[]					体VO数组
 * 例外：SQLException					SQL异常
 * 日期：(2003-02-21 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 */
public InvoiceItemVO[] findItemsForHeader(String key) throws SQLException {

	return findItemsForHeaders(new String[]{key});
}
/**
 * <p>将VO插入母子表。
 * <p>
 * 创建日期：(2001-8-4)
 * @param vo nc.vo.pi.InvoiceVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(InvoiceVO vo) throws SQLException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insert", new Object[]{vo});
	/*************************************************************/

	// 插入表头：
	String key = insertHeader((InvoiceHeaderVO) vo.getParentVO());
	// 插入表体各项：
	InvoiceItemVO[] items = (InvoiceItemVO[]) vo.getChildrenVO();

	insertItems(items,key);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insert", new Object[]{vo});
	/*************************************************************/

	return key;
}
/**
 * 作者：王印芬
 * 功能：向数据库插入一个VO对象。
 * 参数：InvoiceHeaderVO invoiceHeader		发票表头VO
 * 返回：String							插入的表体的cinvoiceid
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-09-18	wyf		加入对库存组织的处理，并规范代码
 */
public String insertHeader(InvoiceHeaderVO invoiceHeader) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insertHeader", new Object[]{invoiceHeader});
	/*************************************************************/

	StringBuffer sql = new StringBuffer();
	sql.append("INSERT INTO po_invoice(cinvoiceid,pk_corp,vinvoicecode,iinvoicetype,cdeptid,cfreecustid,cvendormangid,cvendorbaseid,cemployeeid,dinvoicedate,");
	sql.append("darrivedate,cbiztype,caccountbankid,cpayunit,finitflag,cvoucherid,ctermprotocolid,coperator,caccountyear,cbilltype,");
	sql.append("ibillstatus,dauditdate,cauditpsn,vmemo,vdef1,vdef2,vdef3,vdef4,vdef5,vdef6,vdef7,vdef8,vdef9,vdef10,vdef11, ");
	sql.append("vdef12,vdef13,vdef14,vdef15,vdef16,vdef17,vdef18,vdef19,vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,");
	sql.append("pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,dr,cstoreorganization,pk_purcorp,tmaketime,taudittime,tlastmaketime)");
	sql.append("values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ? , ?, ?, ?, ?,");
	sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ?,?,?,?,?)");

  //二次开发插件支持 by zhaoyha at 2009.2.4
  //根据扩展的字段，生成新的update sql语句
  sql=new StringBuffer(PluginExtFieldParser.getInstance().getExtInsertSql(sql.toString(), 
      InvoiceHeaderVO.getAryExtFieldsMeta()));
	
	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID(invoiceHeader.getPk_corp());
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (invoiceHeader.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, invoiceHeader.getPk_corp());
		}
		if (invoiceHeader.getVinvoicecode() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, invoiceHeader.getVinvoicecode());
		}
		if (invoiceHeader.getIinvoicetype() == null) {
			stmt.setNull(4, Types.INTEGER);
		} else {
			stmt.setInt(4, invoiceHeader.getIinvoicetype().intValue());
		}
		if (invoiceHeader.getCdeptid() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, invoiceHeader.getCdeptid());
		}
		if (invoiceHeader.getCfreecustid() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, invoiceHeader.getCfreecustid());
		}
		if (invoiceHeader.getCvendormangid() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, invoiceHeader.getCvendormangid());
		}
		if (invoiceHeader.getCvendorbaseid() == null) {
			stmt.setNull(8, Types.CHAR);
		} else {
			stmt.setString(8, invoiceHeader.getCvendorbaseid());
		}
		if (invoiceHeader.getCemployeeid() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, invoiceHeader.getCemployeeid());
		}
		if (invoiceHeader.getDinvoicedate() == null) {
			stmt.setNull(10, Types.CHAR);
		} else {
			stmt.setString(10, invoiceHeader.getDinvoicedate().toString());
		}
		if (invoiceHeader.getDarrivedate() == null) {
			stmt.setNull(11, Types.CHAR);
		} else {
			stmt.setString(11, invoiceHeader.getDarrivedate().toString());
		}
		if (invoiceHeader.getCbiztype() == null) {
			stmt.setNull(12, Types.CHAR);
		} else {
			stmt.setString(12, invoiceHeader.getCbiztype());
		}
		if (invoiceHeader.getCaccountbankid() == null) {
			stmt.setNull(13, Types.CHAR);
		} else {
			stmt.setString(13, invoiceHeader.getCaccountbankid());
		}
		if (invoiceHeader.getCpayunit() == null) {
			stmt.setNull(14, Types.CHAR);
		} else {
			stmt.setString(14, invoiceHeader.getCpayunit());
		}
		if (invoiceHeader.getFinitflag() == null) {
			stmt.setNull(15, Types.INTEGER);
		} else {
			stmt.setInt(15, invoiceHeader.getFinitflag().intValue());
		}
		if (invoiceHeader.getCvoucherid() == null) {
			stmt.setNull(16, Types.CHAR);
		} else {
			stmt.setString(16, invoiceHeader.getCvoucherid());
		}
		if (invoiceHeader.getCtermprotocolid() == null) {
			stmt.setNull(17, Types.CHAR);
		} else {
			stmt.setString(17, invoiceHeader.getCtermprotocolid());
		}
		if (invoiceHeader.getCoperator() == null) {
			stmt.setNull(18, Types.CHAR);
		} else {
			stmt.setString(18, invoiceHeader.getCoperator());
		}
		if (invoiceHeader.getCaccountyear() == null) {
			stmt.setNull(19, Types.CHAR);
		} else {
			stmt.setString(19, invoiceHeader.getCaccountyear());
		}
		if (invoiceHeader.getCbilltype() == null) {
			stmt.setNull(20, Types.CHAR);
		} else {
			stmt.setString(20, invoiceHeader.getCbilltype());
		}
		if (invoiceHeader.getIbillstatus() == null) {
			stmt.setNull(21, Types.INTEGER);
		} else {
			stmt.setInt(21, invoiceHeader.getIbillstatus().intValue());
		}
		if (invoiceHeader.getDauditdate() == null) {
			stmt.setNull(22, Types.CHAR);
		} else {
			stmt.setString(22, invoiceHeader.getDauditdate().toString());
		}
		if (invoiceHeader.getCauditpsn() == null) {
			stmt.setNull(23, Types.CHAR);
		} else {
			stmt.setString(23, invoiceHeader.getCauditpsn());
		}
		if (invoiceHeader.getVmemo() == null) {
			stmt.setNull(24, Types.CHAR);
		} else {
			stmt.setString(24, invoiceHeader.getVmemo());
		}
		if (invoiceHeader.getVdef1() == null) {
			stmt.setNull(25, Types.CHAR);
		} else {
			stmt.setString(25, invoiceHeader.getVdef1());
		}
		if (invoiceHeader.getVdef2() == null) {
			stmt.setNull(26, Types.CHAR);
		} else {
			stmt.setString(26, invoiceHeader.getVdef2());
		}
		if (invoiceHeader.getVdef3() == null) {
			stmt.setNull(27, Types.CHAR);
		} else {
			stmt.setString(27, invoiceHeader.getVdef3());
		}
		if (invoiceHeader.getVdef4() == null) {
			stmt.setNull(28, Types.CHAR);
		} else {
			stmt.setString(28, invoiceHeader.getVdef4());
		}
		if (invoiceHeader.getVdef5() == null) {
			stmt.setNull(29, Types.CHAR);
		} else {
			stmt.setString(29, invoiceHeader.getVdef5());
		}
		if (invoiceHeader.getVdef6() == null) {
			stmt.setNull(30, Types.CHAR);
		} else {
			stmt.setString(30, invoiceHeader.getVdef6());
		}
		if (invoiceHeader.getVdef7() == null) {
			stmt.setNull(31, Types.CHAR);
		} else {
			stmt.setString(31, invoiceHeader.getVdef7());
		}
		if (invoiceHeader.getVdef8() == null) {
			stmt.setNull(32, Types.CHAR);
		} else {
			stmt.setString(32, invoiceHeader.getVdef8());
		}
		if (invoiceHeader.getVdef9() == null) {
			stmt.setNull(33, Types.CHAR);
		} else {
			stmt.setString(33, invoiceHeader.getVdef9());
		}
		if (invoiceHeader.getVdef10() == null) {
			stmt.setNull(34, Types.CHAR);
		} else {
			stmt.setString(34, invoiceHeader.getVdef10());
		}
		if (invoiceHeader.getVdef11() == null) {
			stmt.setNull(35, Types.CHAR);
		} else {
			stmt.setString(35, invoiceHeader.getVdef11());
		}
		if (invoiceHeader.getVdef12() == null) {
			stmt.setNull(36, Types.CHAR);
		} else {
			stmt.setString(36, invoiceHeader.getVdef12());
		}
		if (invoiceHeader.getVdef13() == null) {
			stmt.setNull(37, Types.CHAR);
		} else {
			stmt.setString(37, invoiceHeader.getVdef13());
		}
		if (invoiceHeader.getVdef14() == null) {
			stmt.setNull(38, Types.CHAR);
		} else {
			stmt.setString(38, invoiceHeader.getVdef14());
		}
		if (invoiceHeader.getVdef15() == null) {
			stmt.setNull(39, Types.CHAR);
		} else {
			stmt.setString(39, invoiceHeader.getVdef15());
		}
		if (invoiceHeader.getVdef16() == null) {
			stmt.setNull(40, Types.CHAR);
		} else {
			stmt.setString(40, invoiceHeader.getVdef16());
		}
		if (invoiceHeader.getVdef17() == null) {
			stmt.setNull(41, Types.CHAR);
		} else {
			stmt.setString(41, invoiceHeader.getVdef17());
		}
		if (invoiceHeader.getVdef18() == null) {
			stmt.setNull(42, Types.CHAR);
		} else {
			stmt.setString(42, invoiceHeader.getVdef18());
		}
		if (invoiceHeader.getVdef19() == null) {
			stmt.setNull(43, Types.CHAR);
		} else {
			stmt.setString(43, invoiceHeader.getVdef19());
		}
		if (invoiceHeader.getVdef20() == null) {
			stmt.setNull(44, Types.CHAR);
		} else {
			stmt.setString(44, invoiceHeader.getVdef20());
		}
		if (invoiceHeader.getPKDefDoc1() == null) {
			stmt.setNull(45, Types.CHAR);
		} else {
			stmt.setString(45, invoiceHeader.getPKDefDoc1());
		}
		if (invoiceHeader.getPKDefDoc2() == null) {
			stmt.setNull(46, Types.CHAR);
		} else {
			stmt.setString(46, invoiceHeader.getPKDefDoc2());
		}
		if (invoiceHeader.getPKDefDoc3() == null) {
			stmt.setNull(47, Types.CHAR);
		} else {
			stmt.setString(47, invoiceHeader.getPKDefDoc3());
		}
		if (invoiceHeader.getPKDefDoc4() == null) {
			stmt.setNull(48, Types.CHAR);
		} else {
			stmt.setString(48, invoiceHeader.getPKDefDoc4());
		}
		if (invoiceHeader.getPKDefDoc5() == null) {
			stmt.setNull(49, Types.CHAR);
		} else {
			stmt.setString(49, invoiceHeader.getPKDefDoc5());
		}
		if (invoiceHeader.getPKDefDoc6() == null) {
			stmt.setNull(50, Types.CHAR);
		} else {
			stmt.setString(50, invoiceHeader.getPKDefDoc6());
		}
		if (invoiceHeader.getPKDefDoc7() == null) {
			stmt.setNull(51, Types.CHAR);
		} else {
			stmt.setString(51, invoiceHeader.getPKDefDoc7());
		}
		if (invoiceHeader.getPKDefDoc8() == null) {
			stmt.setNull(52, Types.CHAR);
		} else {
			stmt.setString(52, invoiceHeader.getPKDefDoc8());
		}
		if (invoiceHeader.getPKDefDoc9() == null) {
			stmt.setNull(53, Types.CHAR);
		} else {
			stmt.setString(53, invoiceHeader.getPKDefDoc9());
		}
		if (invoiceHeader.getPKDefDoc10() == null) {
			stmt.setNull(54, Types.CHAR);
		} else {
			stmt.setString(54, invoiceHeader.getPKDefDoc10());
		}
		if (invoiceHeader.getPKDefDoc11() == null) {
			stmt.setNull(55, Types.CHAR);
		} else {
			stmt.setString(55, invoiceHeader.getPKDefDoc11());
		}
		if (invoiceHeader.getPKDefDoc12() == null) {
			stmt.setNull(56, Types.CHAR);
		} else {
			stmt.setString(56, invoiceHeader.getPKDefDoc12());
		}
		if (invoiceHeader.getPKDefDoc13() == null) {
			stmt.setNull(57, Types.CHAR);
		} else {
			stmt.setString(57, invoiceHeader.getPKDefDoc13());
		}
		if (invoiceHeader.getPKDefDoc14() == null) {
			stmt.setNull(58, Types.CHAR);
		} else {
			stmt.setString(58, invoiceHeader.getPKDefDoc14());
		}
		if (invoiceHeader.getPKDefDoc15() == null) {
			stmt.setNull(59, Types.CHAR);
		} else {
			stmt.setString(59, invoiceHeader.getPKDefDoc15());
		}
		if (invoiceHeader.getPKDefDoc16() == null) {
			stmt.setNull(60, Types.CHAR);
		} else {
			stmt.setString(60, invoiceHeader.getPKDefDoc16());
		}
		if (invoiceHeader.getPKDefDoc17() == null) {
			stmt.setNull(61, Types.CHAR);
		} else {
			stmt.setString(61, invoiceHeader.getPKDefDoc17());
		}
		if (invoiceHeader.getPKDefDoc18() == null) {
			stmt.setNull(62, Types.CHAR);
		} else {
			stmt.setString(62, invoiceHeader.getPKDefDoc18());
		}
		if (invoiceHeader.getPKDefDoc19() == null) {
			stmt.setNull(63, Types.CHAR);
		} else {
			stmt.setString(63, invoiceHeader.getPKDefDoc19());
		}
		if (invoiceHeader.getPKDefDoc20() == null) {
			stmt.setNull(64, Types.CHAR);
		} else {
			stmt.setString(64, invoiceHeader.getPKDefDoc20());
		}
		if (invoiceHeader.getDr() == null) {
			stmt.setNull(65, Types.INTEGER);
		} else {
			stmt.setInt(65, invoiceHeader.getDr().intValue());
		}
		if (invoiceHeader.getCstoreorganization() == null) {
			stmt.setNull(66, Types.INTEGER);
		} else {
			stmt.setString(66, invoiceHeader.getCstoreorganization());
		}
		
		if (invoiceHeader.getPk_purcorp() == null) {
			stmt.setNull(67, Types.CHAR);
		} else {
			stmt.setString(67, invoiceHeader.getPk_purcorp());
		}
		
		if (invoiceHeader.getTmaketime() == null) {
			stmt.setNull(68, Types.CHAR);
		} else {
			stmt.setString(68, invoiceHeader.getTmaketime().toString());
		}
		
		if (invoiceHeader.getTaudittime() == null) {
			stmt.setNull(69, Types.CHAR);
		} else {
			stmt.setString(69, invoiceHeader.getTaudittime().toString());
		}
		
		if (invoiceHeader.getTlastmaketime() == null) {
			stmt.setNull(70, Types.CHAR);
		} else {
			stmt.setString(70, invoiceHeader.getTlastmaketime().toString());
		}
    //二次开发插件支持 by zhaoyha at 2009.2.4
    PluginExtFieldParser.getInstance().setExtStmtValues(71, stmt, 
        InvoiceHeaderVO.getAryExtFieldsMeta(),new InvoiceHeaderVO[]{invoiceHeader});

		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insertHeader", new Object[]{invoiceHeader});
	/*************************************************************/

	return key;
}
/**
 * 作者：王印芬
 * 功能：向数据库插入一个VO对象
 * 参数：InvoiceItemVO invoiceItem		发票表体VO
 * 返回：String							插入的表体的cinvoice_bid
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-09-18	wyf		加入对批次号、仓库的处理，并规范代码
 * 2003-01-21   fangy   使用统一的插入操作接口.
 */
public String insertItem(InvoiceItemVO invoiceItem) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insertItem", new Object[]{invoiceItem});
	/*************************************************************/
	//fangy add 2003-01-21 09:23 begin
	String key = null;

	//将item放入数组中,用统一的接口进行插入操作
	if(invoiceItem != null) {
		InvoiceItemVO[] vos = new InvoiceItemVO[]{invoiceItem};
		String[] keys = insertItems(vos);

		if(keys != null && keys.length > 0)
			key = keys[0];
	}
	//fangy add 2003-01-21 09:23 end

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insertItem", new Object[]{invoiceItem});
	/*************************************************************/

	return key;
}
/**
 * <p>向数据库插入一个VO对象。
 * <p>
 * 创建日期：(2001-8-4)
 * @param InvoiceItem nc.vo.pi.InvoiceItemVO
 * @param foreignKey String
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItem(InvoiceItemVO invoiceItem, String foreignKey) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insertItem", new Object[]{invoiceItem, foreignKey});
	/*************************************************************/

	invoiceItem.setCinvoiceid(foreignKey);
	String key = insertItem(invoiceItem);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insertItem", new Object[]{invoiceItem, foreignKey});
	/*************************************************************/

	return key;
}
/**
 * <p>删除母子表的所有内容。
 * <p>
 * 创建日期：(2001-8-4)
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(InvoiceVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "delete", new Object[]{vo});
	/*************************************************************/

	deleteItemsForHeader(((InvoiceHeaderVO)vo.getParentVO()).getPrimaryKey());
	deleteHeader((InvoiceHeaderVO)vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-8-4)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteHeader(InvoiceHeaderVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from po_invoice where cinvoiceid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-8-4)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItem(InvoiceItemVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from po_invoice_b where cinvoice_bid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-8-4)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItemsForHeader(String headerKey) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/

	String sql = "delete from po_invoice_b where cinvoiceid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, headerKey);
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/
}
/**
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2001-8-4)
 * @param vo nc.vo.pi.InvoiceVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(InvoiceVO vo) throws SQLException, BusinessException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "update", new Object[]{vo});
	/*************************************************************/

	InvoiceItemVO[] items = (InvoiceItemVO[]) vo.getChildrenVO();
	for ( int i = 0; i < items.length; i++ ) {
		switch (items[i].getStatus()) {
			case VOStatus.NEW :
				insertItem(items[i]);
				break;
			case VOStatus.UPDATED :
				updateItem(items[i]);
				break;
			case VOStatus.DELETED :
				deleteItem(items[i]);
		}
	}
	updateHeader((InvoiceHeaderVO) vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "update", new Object[]{vo});
	/*************************************************************/
}
 /**
 * 作者：王印芬
 * 功能：用一个VO对象的属性更新数据库中的值。
 * 参数：InvoiceHeaderVO invoiceHeader		发票表头VO
 * 返回：String							插入的表体的corder_bid无
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-09-18	wyf		加入对库存的处理，并规范代码
 */
public void updateHeader(InvoiceHeaderVO invoiceHeader) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateHeader", new Object[]{invoiceHeader});
	/*************************************************************/

	StringBuffer sql = new StringBuffer("UPDATE po_invoice SET ");
	sql.append("pk_corp = ?,vinvoicecode = ?,iinvoicetype = ?,cdeptid = ?,");
	sql.append("cfreecustid = ?,cvendormangid = ?,cvendorbaseid = ?,cemployeeid = ?,dinvoicedate = ?,");
	sql.append("darrivedate = ?,cbiztype = ?,caccountbankid = ?,cpayunit = ?,finitflag = ?,");
	sql.append("cvoucherid = ?,ctermprotocolid = ?,coperator = ?,caccountyear = ?,cbilltype = ?,");
	sql.append("ibillstatus = ?,dauditdate = ?,cauditpsn = ?,vmemo = ?, vdef1 = ?,");
	sql.append("vdef2 = ?,vdef3 = ?,vdef4 = ?,vdef5 = ?,vdef6 = ?,");
	sql.append("vdef7 = ?,vdef8 = ?,vdef9 = ?,vdef10 = ?,");
	sql.append("vdef11 = ?,vdef12 = ?,vdef13 = ?,vdef14 = ?,vdef15 = ?,");
	sql.append("vdef16 = ?,vdef17 = ?,vdef18 = ?,vdef19 = ?,vdef20 = ?,");
	sql.append("pk_defdoc1 = ?,pk_defdoc2 = ?,pk_defdoc3 = ?,pk_defdoc4 = ?,pk_defdoc5 = ?,");
	sql.append("pk_defdoc6 = ?,pk_defdoc7 = ?,pk_defdoc8 = ?,pk_defdoc9 = ?,pk_defdoc10 = ?,");
	sql.append("pk_defdoc11 = ?,pk_defdoc12 = ?,pk_defdoc13 = ?,pk_defdoc14 = ?,pk_defdoc15 = ?,");
	sql.append("pk_defdoc16 = ?,pk_defdoc17 = ?,pk_defdoc18 = ?,pk_defdoc19 = ?,pk_defdoc20 = ?,");
	sql.append("dr = ?,cstoreorganization = ?,pk_purcorp = ?,tmaketime = ?,taudittime = ?,tlastmaketime = ?");
	sql.append(" WHERE cinvoiceid = ?");
 
  //二次开发插件支持 by zhaoyha at 2009.2.4
 //根据扩展的字段，生成新的update sql语句
 sql=new StringBuffer(PluginExtFieldParser.getInstance().getExtUpdateSql(sql.toString(), 
     InvoiceHeaderVO.getAryExtFieldsMeta()));
 
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		// update non PK fields:
		if (invoiceHeader.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		} else {
			stmt.setString(1, invoiceHeader.getPk_corp());
		}
		if (invoiceHeader.getVinvoicecode() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, invoiceHeader.getVinvoicecode());
		}
		if (invoiceHeader.getIinvoicetype() == null) {
			stmt.setNull(3, Types.INTEGER);
		} else {
			stmt.setInt(3, invoiceHeader.getIinvoicetype().intValue());
		}
		if (invoiceHeader.getCdeptid() == null) {
			stmt.setNull(4, Types.CHAR);
		} else {
			stmt.setString(4, invoiceHeader.getCdeptid());
		}
		if (invoiceHeader.getCfreecustid() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, invoiceHeader.getCfreecustid());
		}
		if (invoiceHeader.getCvendormangid() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, invoiceHeader.getCvendormangid());
		}
		if (invoiceHeader.getCvendorbaseid() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, invoiceHeader.getCvendorbaseid());
		}
		if (invoiceHeader.getCemployeeid() == null) {
			stmt.setNull(8, Types.CHAR);
		} else {
			stmt.setString(8, invoiceHeader.getCemployeeid());
		}
		if (invoiceHeader.getDinvoicedate() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, invoiceHeader.getDinvoicedate().toString());
		}
		if (invoiceHeader.getDarrivedate() == null) {
			stmt.setNull(10, Types.CHAR);
		} else {
			stmt.setString(10, invoiceHeader.getDarrivedate().toString());
		}
		if (invoiceHeader.getCbiztype() == null) {
			stmt.setNull(11, Types.CHAR);
		} else {
			stmt.setString(11, invoiceHeader.getCbiztype());
		}
		if (invoiceHeader.getCaccountbankid() == null) {
			stmt.setNull(12, Types.CHAR);
		} else {
			stmt.setString(12, invoiceHeader.getCaccountbankid());
		}
		if (invoiceHeader.getCpayunit() == null) {
			stmt.setNull(13, Types.CHAR);
		} else {
			stmt.setString(13, invoiceHeader.getCpayunit());
		}
		if (invoiceHeader.getFinitflag() == null) {
			stmt.setNull(14, Types.INTEGER);
		} else {
			stmt.setInt(14, invoiceHeader.getFinitflag().intValue());
		}
		if (invoiceHeader.getCvoucherid() == null) {
			stmt.setNull(15, Types.CHAR);
		} else {
			stmt.setString(15, invoiceHeader.getCvoucherid());
		}
		if (invoiceHeader.getCtermprotocolid() == null) {
			stmt.setNull(16, Types.CHAR);
		} else {
			stmt.setString(16, invoiceHeader.getCtermprotocolid());
		}
		if (invoiceHeader.getCoperator() == null) {
			stmt.setNull(17, Types.CHAR);
		} else {
			stmt.setString(17, invoiceHeader.getCoperator());
		}
		if (invoiceHeader.getCaccountyear() == null) {
			stmt.setNull(18, Types.CHAR);
		} else {
			stmt.setString(18, invoiceHeader.getCaccountyear());
		}
		if (invoiceHeader.getCbilltype() == null) {
			stmt.setNull(19, Types.CHAR);
		} else {
			stmt.setString(19, invoiceHeader.getCbilltype());
		}
		if (invoiceHeader.getIbillstatus() == null) {
			stmt.setNull(20, Types.INTEGER);
		} else {
			stmt.setInt(20, invoiceHeader.getIbillstatus().intValue());
		}
		if (invoiceHeader.getDauditdate() == null) {
			stmt.setNull(21, Types.CHAR);
		} else {
			stmt.setString(21, invoiceHeader.getDauditdate().toString());
		}
		if (invoiceHeader.getCauditpsn() == null) {
			stmt.setNull(22, Types.CHAR);
		} else {
			stmt.setString(22, invoiceHeader.getCauditpsn());
		}
		if (invoiceHeader.getVmemo() == null) {
			stmt.setNull(23, Types.CHAR);
		} else {
			stmt.setString(23, invoiceHeader.getVmemo());
		}
		if (invoiceHeader.getVdef1() == null) {
			stmt.setNull(24, Types.CHAR);
		} else {
			stmt.setString(24, invoiceHeader.getVdef1());
		}
		if (invoiceHeader.getVdef2() == null) {
			stmt.setNull(25, Types.CHAR);
		} else {
			stmt.setString(25, invoiceHeader.getVdef2());
		}
		if (invoiceHeader.getVdef3() == null) {
			stmt.setNull(26, Types.CHAR);
		} else {
			stmt.setString(26, invoiceHeader.getVdef3());
		}
		if (invoiceHeader.getVdef4() == null) {
			stmt.setNull(27, Types.CHAR);
		} else {
			stmt.setString(27, invoiceHeader.getVdef4());
		}
		if (invoiceHeader.getVdef5() == null) {
			stmt.setNull(28, Types.CHAR);
		} else {
			stmt.setString(28, invoiceHeader.getVdef5());
		}
		if (invoiceHeader.getVdef6() == null) {
			stmt.setNull(29, Types.CHAR);
		} else {
			stmt.setString(29, invoiceHeader.getVdef6());
		}
		if (invoiceHeader.getVdef7() == null) {
			stmt.setNull(30, Types.CHAR);
		} else {
			stmt.setString(30, invoiceHeader.getVdef7());
		}
		if (invoiceHeader.getVdef8() == null) {
			stmt.setNull(31, Types.CHAR);
		} else {
			stmt.setString(31, invoiceHeader.getVdef8());
		}
		if (invoiceHeader.getVdef9() == null) {
			stmt.setNull(32, Types.CHAR);
		} else {
			stmt.setString(32, invoiceHeader.getVdef9());
		}
		if (invoiceHeader.getVdef10() == null) {
			stmt.setNull(33, Types.CHAR);
		} else {
			stmt.setString(33, invoiceHeader.getVdef10());
		}
		if (invoiceHeader.getVdef11() == null) {
			stmt.setNull(34, Types.CHAR);
		} else {
			stmt.setString(34, invoiceHeader.getVdef11());
		}
		if (invoiceHeader.getVdef12() == null) {
			stmt.setNull(35, Types.CHAR);
		} else {
			stmt.setString(35, invoiceHeader.getVdef12());
		}
		if (invoiceHeader.getVdef13() == null) {
			stmt.setNull(36, Types.CHAR);
		} else {
			stmt.setString(36, invoiceHeader.getVdef13());
		}
		if (invoiceHeader.getVdef14() == null) {
			stmt.setNull(37, Types.CHAR);
		} else {
			stmt.setString(37, invoiceHeader.getVdef14());
		}
		if (invoiceHeader.getVdef15() == null) {
			stmt.setNull(38, Types.CHAR);
		} else {
			stmt.setString(38, invoiceHeader.getVdef15());
		}
		if (invoiceHeader.getVdef16() == null) {
			stmt.setNull(39, Types.CHAR);
		} else {
			stmt.setString(39, invoiceHeader.getVdef16());
		}
		if (invoiceHeader.getVdef17() == null) {
			stmt.setNull(40, Types.CHAR);
		} else {
			stmt.setString(40, invoiceHeader.getVdef17());
		}
		if (invoiceHeader.getVdef18() == null) {
			stmt.setNull(41, Types.CHAR);
		} else {
			stmt.setString(41, invoiceHeader.getVdef18());
		}
		if (invoiceHeader.getVdef19() == null) {
			stmt.setNull(42, Types.CHAR);
		} else {
			stmt.setString(42, invoiceHeader.getVdef19());
		}
		if (invoiceHeader.getVdef20() == null) {
			stmt.setNull(43, Types.CHAR);
		} else {
			stmt.setString(43, invoiceHeader.getVdef20());
		}
		if (invoiceHeader.getPKDefDoc1() == null) {
			stmt.setNull(44, Types.CHAR);
		} else {
			stmt.setString(44, invoiceHeader.getPKDefDoc1());
		}
		if (invoiceHeader.getPKDefDoc2() == null) {
			stmt.setNull(45, Types.CHAR);
		} else {
			stmt.setString(45, invoiceHeader.getPKDefDoc2());
		}
		if (invoiceHeader.getPKDefDoc3() == null) {
			stmt.setNull(46, Types.CHAR);
		} else {
			stmt.setString(46, invoiceHeader.getPKDefDoc3());
		}
		if (invoiceHeader.getPKDefDoc4() == null) {
			stmt.setNull(47, Types.CHAR);
		} else {
			stmt.setString(47, invoiceHeader.getPKDefDoc4());
		}
		if (invoiceHeader.getPKDefDoc5() == null) {
			stmt.setNull(48, Types.CHAR);
		} else {
			stmt.setString(48, invoiceHeader.getPKDefDoc5());
		}
		if (invoiceHeader.getPKDefDoc6() == null) {
			stmt.setNull(49, Types.CHAR);
		} else {
			stmt.setString(49, invoiceHeader.getPKDefDoc6());
		}
		if (invoiceHeader.getPKDefDoc7() == null) {
			stmt.setNull(50, Types.CHAR);
		} else {
			stmt.setString(50, invoiceHeader.getPKDefDoc7());
		}
		if (invoiceHeader.getPKDefDoc8() == null) {
			stmt.setNull(51, Types.CHAR);
		} else {
			stmt.setString(51, invoiceHeader.getPKDefDoc8());
		}
		if (invoiceHeader.getPKDefDoc9() == null) {
			stmt.setNull(52, Types.CHAR);
		} else {
			stmt.setString(52, invoiceHeader.getPKDefDoc9());
		}
		if (invoiceHeader.getPKDefDoc10() == null) {
			stmt.setNull(53, Types.CHAR);
		} else {
			stmt.setString(53, invoiceHeader.getPKDefDoc10());
		}
		if (invoiceHeader.getPKDefDoc11() == null) {
			stmt.setNull(54, Types.CHAR);
		} else {
			stmt.setString(54, invoiceHeader.getPKDefDoc11());
		}
		if (invoiceHeader.getPKDefDoc12() == null) {
			stmt.setNull(55, Types.CHAR);
		} else {
			stmt.setString(55, invoiceHeader.getPKDefDoc12());
		}
		if (invoiceHeader.getPKDefDoc13() == null) {
			stmt.setNull(56, Types.CHAR);
		} else {
			stmt.setString(56, invoiceHeader.getPKDefDoc13());
		}
		if (invoiceHeader.getPKDefDoc14() == null) {
			stmt.setNull(57, Types.CHAR);
		} else {
			stmt.setString(57, invoiceHeader.getPKDefDoc14());
		}
		if (invoiceHeader.getPKDefDoc15() == null) {
			stmt.setNull(58, Types.CHAR);
		} else {
			stmt.setString(58, invoiceHeader.getPKDefDoc15());
		}
		if (invoiceHeader.getPKDefDoc16() == null) {
			stmt.setNull(59, Types.CHAR);
		} else {
			stmt.setString(59, invoiceHeader.getPKDefDoc16());
		}
		if (invoiceHeader.getPKDefDoc17() == null) {
			stmt.setNull(60, Types.CHAR);
		} else {
			stmt.setString(60, invoiceHeader.getPKDefDoc17());
		}
		if (invoiceHeader.getPKDefDoc18() == null) {
			stmt.setNull(61, Types.CHAR);
		} else {
			stmt.setString(61, invoiceHeader.getPKDefDoc18());
		}
		if (invoiceHeader.getPKDefDoc19() == null) {
			stmt.setNull(62, Types.CHAR);
		} else {
			stmt.setString(62, invoiceHeader.getPKDefDoc19());
		}
		if (invoiceHeader.getPKDefDoc20() == null) {
			stmt.setNull(63, Types.CHAR);
		} else {
			stmt.setString(63, invoiceHeader.getPKDefDoc20());
		}
		if (invoiceHeader.getDr() == null) {
			stmt.setNull(64, Types.INTEGER);
		} else {
			stmt.setInt(64, invoiceHeader.getDr().intValue());
		}
		if (invoiceHeader.getCstoreorganization() == null) {
			stmt.setNull(65, Types.INTEGER);
		} else {
			stmt.setString(65, invoiceHeader.getCstoreorganization());
		}
		
		if (invoiceHeader.getPk_purcorp() == null) {
			stmt.setNull(66, Types.CHAR);
		} else {
			stmt.setString(66, invoiceHeader.getPk_purcorp());
		}
		
		if (invoiceHeader.getTmaketime() == null) {
			stmt.setNull(67, Types.CHAR);
		} else {
			stmt.setString(67, invoiceHeader.getTmaketime().toString());
		}
		
		if (invoiceHeader.getTaudittime() == null) {
			stmt.setNull(68, Types.CHAR);
		} else {
			stmt.setString(68, invoiceHeader.getTaudittime().toString());
		}
		
		if (invoiceHeader.getTlastmaketime() == null) {
			stmt.setNull(69, Types.CHAR);
		} else {
			stmt.setString(69, invoiceHeader.getTlastmaketime().toString());
		}
    //二次开发插件支持 by zhaoyha at 2009.2.4
    int paraIndex=PluginExtFieldParser.getInstance().setExtStmtValues(70, stmt, 
        InvoiceHeaderVO.getAryExtFieldsMeta(),new InvoiceHeaderVO[]{invoiceHeader});
    
    // find record by PK fields:
    stmt.setString(paraIndex, invoiceHeader.getPrimaryKey());

		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateHeader", new Object[]{invoiceHeader});
	/*************************************************************/
}
 /**
 * 作者：王印芬
 * 功能：用一个VO对象的属性更新数据库中的值。
 * 参数：InvoiceItemVO invoiceItem		发票表体VO
 * 返回：String							插入的表体的corder_bid无
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-09-18	wyf		加入对批次号、仓库的处理，并规范代码
 */
public void updateItem(InvoiceItemVO invoiceItem) throws java.sql.SQLException {


	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateItem", new Object[]{invoiceItem});
	/*************************************************************/

	//fangyi add 2003-01-20 11:15 begin
	if (invoiceItem!= null) {
		InvoiceItemVO[] invoiceItems = new InvoiceItemVO[]{invoiceItem};
		updateItems(invoiceItems);
	}
	//fangyi add 2003-01-20 11:15 end


	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateItem", new Object[]{invoiceItem});
	/*************************************************************/
}



































/**
 * 根据发票行ID得到该行的发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public double findInvoiceNumByInvoiceBPKMy(String	key) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{key});
	/*************************************************************/

	String sql = "SELECT ninvoicenum FROM po_invoice_b WHERE cinvoice_bid='" + key + "'";

	double	value = 0.0 ;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			BigDecimal	ob = rs.getBigDecimal("ninvoicenum");
			if(ob!=null)
				value = ob.doubleValue() ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{key});
	/*************************************************************/

	return value ;
}















/**
 * 此处方法说明为根据主表的关键字段进行查询子表的数据。
 * 创建日期：(2001-7-9 20:06:40)
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 * @param key java.lang.String
 */
public CircularlyAccessibleValueObject[] queryAllBodyData(String key)
	throws BusinessException {
  //
  InvoiceItemVO[]	items =  null;
  //
	try {
		items = findItemsForHeader(key);	
	} catch (SQLException e) {
		throw new BusinessException(e.getMessage());
	}
  //
	return items ;
}

/**
 * 此处方法说明为根据查询条件获得的条件约束及在固化
 * 的条件语句组成条件语句及该方法中定义的的sql语句
 * 进行组合查询。
 * 创建日期：(2001-7-9 19:58:37)
 * @return nc.vo.pub.AggregatedValueObject
 * @param whereString java.lang.String
 */
public CircularlyAccessibleValueObject[] queryAllHeadData(String whereString)
	throws BusinessException{
  //
	String sql = "select pk_corp, vinvoicecode, iinvoicetype, cdeptid, cfreecustid, cvendormangid, cvendorbaseid, cemployeeid, dinvoicedate, darrivedate, cbiztype, caccountbankid, cpayunit, finitflag, cvoucherid, ctermprotocolid, coperator, caccountyear, cbilltype, ibillstatus, dauditdate, cauditpsn, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10,";
	sql += "vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,dr, cinvoiceid,pk_purcorp,tmaketime,taudittime,tlastmaketime,ts from po_invoice " ;
	sql += " WHERE " + whereString ;

	Vector	vec = new	Vector() ;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			InvoiceHeaderVO invoiceHeader = new InvoiceHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(1);
			invoiceHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// vinvoicecode :
			String vinvoicecode = rs.getString(2);
			invoiceHeader.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode.trim());
			// iinvoicetype :
			Integer iinvoicetype = (Integer)rs.getObject(3);
			invoiceHeader.setIinvoicetype(iinvoicetype == null ? null : iinvoicetype);
			// cdeptid :
			String cdeptid = rs.getString(4);
			invoiceHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
			// cfreecustid :
			String cfreecustid = rs.getString(5);
			invoiceHeader.setCfreecustid(cfreecustid == null ? null : cfreecustid.trim());
			// cvendormangid :
			String cvendormangid = rs.getString(6);
			invoiceHeader.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
			// cvendorbaseid :
			String cvendorbaseid = rs.getString(7);
			invoiceHeader.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
			// cemployeeid :
			String cemployeeid = rs.getString(8);
			invoiceHeader.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
			// dinvoicedate :
			String dinvoicedate = rs.getString(9);
			invoiceHeader.setDinvoicedate(dinvoicedate == null ? null : new UFDate(dinvoicedate.trim(),false));
			// darrivedate :
			String darrivedate = rs.getString(10);
			invoiceHeader.setDarrivedate(darrivedate == null ? null : new UFDate(darrivedate.trim(),false));
			// cbiztype :
			String cbiztype = rs.getString(11);
			invoiceHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// caccountbankid :
			String caccountbankid = rs.getString(12);
			invoiceHeader.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
			// cpayunit :
			String cpayunit = rs.getString(13);
			invoiceHeader.setCpayunit(cpayunit == null ? null : cpayunit.trim());
			// finitflag :
			Integer finitflag = (Integer)rs.getObject(14);
			invoiceHeader.setFinitflag(finitflag == null ? null : finitflag);
			// cvoucherid :
			String cvoucherid = rs.getString(15);
			invoiceHeader.setCvoucherid(cvoucherid == null ? null : cvoucherid.trim());
			// ctermProtocolid :
			String ctermProtocolid = rs.getString(16);
			invoiceHeader.setCtermprotocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
			// coperator :
			String coperator = rs.getString(17);
			invoiceHeader.setCoperator(coperator == null ? null : coperator.trim());
			// caccountyear :
			String caccountyear = rs.getString(18);
			invoiceHeader.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
			// cbilltype :
			String cbilltype = rs.getString(19);
			invoiceHeader.setCbilltype(cbilltype == null ? null : cbilltype.trim());
			// ibillstatus :
			Integer ibillstatus = (Integer)rs.getObject(20);
			invoiceHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
			// dauditdate :
			String dauditdate = rs.getString(21);
			invoiceHeader.setDauditdate(dauditdate == null ? null : new UFDate(dauditdate.trim(),false));
			// cauditpsn :
			String cauditpsn = rs.getString(22);
			invoiceHeader.setCauditpsn(cauditpsn == null ? null : cauditpsn.trim());
			// vmemo :
			String vmemo = rs.getString(23);
			invoiceHeader.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(24);
			invoiceHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(25);
			invoiceHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(26);
			invoiceHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(27);
			invoiceHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(28);
			invoiceHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(29);
			invoiceHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(30);
			invoiceHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8 :
			String vdef8 = rs.getString(31);
			invoiceHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(32);
			invoiceHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(33);
			invoiceHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(34);
			invoiceHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(35);
			invoiceHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(36);
			invoiceHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(37);
			invoiceHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(38);
			invoiceHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(39);
			invoiceHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(40);
			invoiceHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(41);
			invoiceHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(42);
			invoiceHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(43);
			invoiceHeader.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(44);
			invoiceHeader.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(45);
			invoiceHeader.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(46);
			invoiceHeader.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(47);
			invoiceHeader.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(48);
			invoiceHeader.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(49);
			invoiceHeader.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(50);
			invoiceHeader.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(51);
			invoiceHeader.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(52);
			invoiceHeader.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(53);
			invoiceHeader.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(54);
			invoiceHeader.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(55);
			invoiceHeader.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(56);
			invoiceHeader.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(57);
			invoiceHeader.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(58);
			invoiceHeader.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(59);
			invoiceHeader.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(60);
			invoiceHeader.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(61);
			invoiceHeader.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(62);
			invoiceHeader.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(63);
			invoiceHeader.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// dr :
			Integer dr = (Integer)rs.getObject(64);
			invoiceHeader.setDr(dr==null ? new	Integer(0) : dr);
			// cinvoiceid :
			String cinvoiceid = rs.getString(65);
			invoiceHeader.setPrimaryKey(cinvoiceid == null ? null : cinvoiceid.trim());

			// pk_purcorp :
			String pk_purcorp = rs.getString(66);
			invoiceHeader.setPk_purcorp(pk_purcorp == null ? null : pk_purcorp.trim());
			
			// tmaketime :
			String tmaketime = rs.getString(67);
			invoiceHeader.setTmaketime(tmaketime == null ? null : tmaketime.trim());
			
			// taudittime :
			String taudittime = rs.getString(68);
			invoiceHeader.setTaudittime(taudittime == null ? null : taudittime.trim());
			
			// tlastmaketime :
			String tlastmaketime = rs.getString(69);
			invoiceHeader.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());
      
      // ts :
      String ts = rs.getString(70);
      invoiceHeader.setTs(ts == null ? null : ts.trim());
			
			vec.addElement(invoiceHeader) ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}catch(SQLException e){
		PubDMO.throwBusinessException(e);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	//
	InvoiceHeaderVO[]	retVOs = null ;
	if(vec.size()!=0){
		retVOs = new	InvoiceHeaderVO[vec.size()] ;
		vec.copyInto(retVOs) ;
	}

	return retVOs;
}

/**
 * 此处方法说明为根据查询条件获得的条件约束及在固化
 * 的条件语句组成条件语句及该方法中定义的的sql语句
 * 进行组合查询。
 * 创建日期：(2001-7-9 19:58:37)
 * @return nc.vo.pub.AggregatedValueObject
 * @param whereString java.lang.String
 */
public Object findNaccumsettnumForScOrder(String bllid_b)
	throws java.sql.SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "queryAllHeadData", new Object[]{bllid_b});
	/*************************************************************/

	String sql = "select sum(naccumsettnum) from po_invoice_b " ;
	sql += " WHERE corder_bid ='" + bllid_b +"'";

	
	Connection con = null;
	PreparedStatement stmt = null;
	String naccumsettnum =null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {	
			naccumsettnum = rs.getString(1);
		}
        
		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "queryAllHeadData", new Object[]{bllid_b});
	/*************************************************************/
	return naccumsettnum;
}













/**
 * 方法为根据单据Id设置单据在进行中
 * 的状态说明,与当前审批人。
 * 创建日期：(2001-7-19 23:19:34)
 * @return boolean
 * @param billId java.lang.String
 */
public boolean checkGoing(String billId, String ApproveId, String ApproveDate, String checkNote)
	throws SQLException, BusinessException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "checkGoing", new Object[] { billId });
	/*************************************************************/
	InvoiceHeaderVO vo = findHeaderByPrimaryKey(billId);

	if (!(vo.getIbillstatus().intValue() == BillStatus.AUDITING.intValue() || vo.getIbillstatus().intValue() == BillStatus.FREE.intValue()))
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000096")/*@res "单据不能继续审批!"*/);

	//0自由 1作废 2正在审批 3审批通过 4审批未通过
	String sql = "update po_invoice set cauditpsn=?,ibillstatus = ?,dauditdate=?,taudittime=? where cinvoiceid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//审批进行中的状态
		stmt.setString(1, ApproveId);
		stmt.setInt(2, BillStatus.AUDITING.intValue());
		stmt.setString(3, ApproveDate.toString());
		stmt.setString(4, (new UFDateTime(new Date())).toString());
		stmt.setString(5, billId);
		//
		stmt.executeUpdate();
	} catch (SQLException e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "checkGoing", new Object[] { billId });
	/*************************************************************/

	return true;
}

/**
 * 方法为根据单据Id设置单据未通过
 * 审批说明与当前审批人。
 * 创建日期：(2001-7-19 23:08:48)
 * @return boolean
 */
public boolean checkNoPass(String billId, String ApproveId, String ApproveDate, String checkNote)
	throws SQLException, BusinessException {	
	//0自由 1作废 2正在审批 3审批通过 4审批未通过 
	String sql = "update po_invoice set cauditpsn= '"+ApproveId+"',ibillstatus = " + BillStatus.AUDITFAIL 
	+ ", dauditdate= '"+ApproveDate+"',taudittime= '"+(new UFDateTime(new Date())).toString()+"' where cinvoiceid = ? ";
	//
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, billId);
		stmt.executeUpdate();
	} catch (SQLException e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	//
	return true;
}

/**
 * 方法为根据单据Id设置单据在进行中
 * 的状态说明,与当前审批人。
 * 创建日期：(2001-7-19 23:19:34)
 * @return boolean
 * @param billId java.lang.String
 */
public boolean checkPass(String billId, String ApproveId, String ApproveDate, String checkNote)
	throws SQLException, BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "checkNoPass", new Object[] { billId });
	/*************************************************************/

	InvoiceHeaderVO vo = findHeaderByPrimaryKey(billId);

	if (vo.getIbillstatus().intValue() == BillStatus.AUDITED.intValue())
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000097")/*@res "审批已经通过，不能审批！"*/);

	if (vo.getIbillstatus().intValue() == BillStatus.DELETED.intValue())
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000098")/*@res "审批已经作废，不能审批！"*/);

	if (vo.getIbillstatus().intValue() == BillStatus.AUDITFAIL.intValue())
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000099")/*@res "审批未通过，不能审批！"*/);

	//0自由 1作废 2正在审批 3审批通过 4审批未通过
	String sql = "update po_invoice set cauditpsn=?,ibillstatus = ?,dauditdate=?,taudittime=? where cinvoiceid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//审批进行中的状态
		stmt.setString(1, ApproveId);
		stmt.setInt(2, BillStatus.AUDITED.intValue());
		stmt.setString(3, ApproveDate.toString());
		stmt.setString(4, (new UFDateTime(new Date())).toString());
		stmt.setString(5, billId);
		//
		stmt.executeUpdate();
	} catch (SQLException e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	//afterCallMethod("nc.bs.pi.InvoiceDMO", "checkNoPass", new Object[]{billId});
	/*************************************************************/

	return true;
}







/**
 * 根据订单行ID得到该行的累计发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public double findAccumInvoiceNumByPoOrderBPKMy(String	key) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByOrderBPK", new Object[]{key});
	/*************************************************************/

	String sql = "SELECT naccuminvoicenum FROM po_order_b WHERE corder_bid='" + key + "'";

	double	value = 0.0 ;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			BigDecimal	ob = rs.getBigDecimal("naccuminvoicenum");
			if(ob!=null)
				value = ob.doubleValue() ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByOrderBPK", new Object[]{key});
	/*************************************************************/

	return value ;
}

/**
 * 根据订单行ID得到该行的累计发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public double findAccumInvoiceNumByScOrderBPKMy(String	key) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByScOrderBPKMy", new Object[]{key});
	/*************************************************************/

	String sql = "SELECT naccuminvoicenum FROM sc_order_b WHERE corder_bid='" + key + "'";

	double	value = 0.0 ;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			BigDecimal	ob = rs.getBigDecimal("naccuminvoicenum");
			if(ob!=null)
				value = ob.doubleValue() ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByScOrderBPKMy", new Object[]{key});
	/*************************************************************/

	return value ;
}



 /**
 * 作者：王印芬
 * 功能：根据条件查询采购入库单或期初暂估入库单
 * 参数：
 *		String	strFromWhere			FROM及WHERE后的字符串
 * 返回：Object[]						结构如下:
 *		[0] 	GeneralBillVO[]			入库单大VO数组
		[1] 	GeneralBb3VO[]			入库单附表VO数组,与[0]中的子表顺序保持一致
		[2] 	String[]				订单号数组,与[0]中的子表顺序保持一致
		[3] 	String[]				付款协议数组,与[0]中的子表顺序保持一致
		[4] 	nc.vo.po.OrderItemVO[]	订单体VO数组,与[0]中的子表顺序保持一致
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-09-19	wyf		加入库存组织的查询
 */
public Object[] findGenenelVOsFromPoOrderByCondsMy(
	String	strFromWhere) throws SQLException, BusinessException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findGenenelVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	String[]	strHeadItems = new	String[]{
		"cauditorid",			"cbilltypecode",		"cbizid",				"cbiztype",
		"ccustomerid",			"cdilivertypeid",		"cdispatcherid",		"cdptid",
		//"cgeneralhid",
		"cinventoryid",			"coperatorid",			"cproviderid",
		"cregister",			"cwarehouseid",			"cwastewarehouseid",	"cwhsmanagerid",
		"daccountdate",			"dauditdate",			"dbilldate",			"dr",
		"fbillflag",			"fspecialflag",			"pk_corp",				"vbillcode",
		"vdiliveraddress",		"vnote",				"vuserdef1",			"vuserdef10",
		"vuserdef2",			"vuserdef3",			"vuserdef4",			"vuserdef5",
		"vuserdef6",			"vuserdef7",			"vuserdef8",			"vuserdef9",
		"vuserdef11",			"vuserdef12",
		"vuserdef13",			"vuserdef14",			"vuserdef15",			"vuserdef16",
		"vuserdef17",			"vuserdef18",			"vuserdef19",			"vuserdef20",
		"pk_defdoc1","pk_defdoc2","pk_defdoc3","pk_defdoc4","pk_defdoc5","pk_defdoc6","pk_defdoc7","pk_defdoc8",
		"pk_defdoc9","pk_defdoc10","pk_defdoc11","pk_defdoc12","pk_defdoc13","pk_defdoc14","pk_defdoc15",
		"pk_defdoc16","pk_defdoc17","pk_defdoc18","pk_defdoc19","pk_defdoc20","pk_corp",
		//wyf	add	2002-04-10	begin
		"ts",
		//wyf	add	2002-04-10	end
		//wyf	add	2002-04-10	begin
		"pk_calbody","pk_purcorp","freplenishflag","boutretflag","bassetcard"
    ,"taccounttime"//参照采购入库单生成采购发票转单，签字时间为空
    ,"clastmodiid","iprintcount","tmaketime","tlastmoditime"
		//wyf	add	2002-04-10	end
		} ;
	String[]	strBodyItems = new	String[]{
		"bzgflag",				"castunitid",			"ccorrespondbid",		"ccorrespondcode",
		"ccorrespondhid",		"ccorrespondtype",		"ccostobject",			"cfirstbillbid",
		"cfirstbillhid",		"cfirsttype",			"cgeneralbid",			"cgeneralhid",
		"cinventoryid",			"cprojectid",			"cprojectphaseid",		"csourcebillbid",
		"csourcebillhid",		"csourcetype",			"cwp",					"dbizdate",
		"dr",					"dstandbydate",			"dvalidate",			"fchecked",
		"flargess",				"isok",					"ninassistnum",			"ninnum",
		"nmny",					"nneedinassistnum",		"noutassistnum",		"noutnum",
		"nplannedmny",			"nplannedprice",		"nprice",				"nshouldinnum",
		"nshouldoutassistnum",	"nshouldoutnum",		"ntranoutnum",			"vbatchcode",
		"vfree1",				"vfree10",				"vfree2",				"vfree3",
		"vfree4",				"vfree5",				"vfree6",				"vfree7",
		"vfree8",				"vfree9",				"vproductbatch",		"vsourcebillcode",
		"vuserdef1",			"vuserdef10",			"vuserdef2",			"vuserdef3",
		"vuserdef4",			"vuserdef5",			"vuserdef6",			"vuserdef7",
		"vuserdef8",			"vuserdef9",
		"vuserdef11",			"vuserdef12",			"vuserdef13",			"vuserdef14",
		"vuserdef15",			"vuserdef16",			"vuserdef17",			"vuserdef18",
		"vuserdef19",			"vuserdef20",
		"pk_defdoc1","pk_defdoc2","pk_defdoc3","pk_defdoc4","pk_defdoc5","pk_defdoc6","pk_defdoc7","pk_defdoc8",
		"pk_defdoc9","pk_defdoc10","pk_defdoc11","pk_defdoc12","pk_defdoc13","pk_defdoc14","pk_defdoc15",
		"pk_defdoc16","pk_defdoc17","pk_defdoc18","pk_defdoc19","pk_defdoc20","pk_corp",
		//wyf	add	2002-04-10	begin
		"ts",
		//wyf	add	2002-04-10	end
		//czp	add	2002-07-24	begin
		"vnotebody",
		//czp	add	2002-07-24	end
		  //zx	add	2002-07-24	begin
		"cinvbasid","pk_invoicecorp"
        //zx	add	2002-07-24	begin
		
		,"hsl"
		,"crowno","csourcetype","vsourcebillcode","vsourcerowno"//采购发票参照入库单转单界面，子表的行号、来源单据类型，来源单据号，来源单据行号未带出。
		,"vfirstbillcode","vfirstrowno" //源头单据号,行号

      
		} ;
	String[]	strBb3Items = new	String[]{
		"caccountunitid",		"cgeneralbb3",			"cgeneralbid",			"cgeneralhid",
		"dr",					"naccountmny",			"naccountnum1",			"naccountnum2",
		"nmaterialmoney",		"npmoney",				"npprice",				"nsignnum",
		//wyf	add	2002-04-10	begin
		"ts"
		//wyf	add	2002-04-10	end
		} ;
	String[]	strPoOrderItems = new	String[]{
		"corderid",				"corder_bid",			"pk_corp",				"cusedeptid",
		"cmangid",				"cbaseid",				"nordernum",			"cassistunit",
		"nassistnum",			"ndiscountrate",		"idiscounttaxtype",		"ntaxrate",
		"ccurrencytypeid",		"noriginalnetprice",	"noriginalcurprice",	"noriginalcurmny",
		"noriginaltaxmny",		"noriginaltaxpricemny",	"nexchangeotobrate",	"ntaxmny",
		"nmoney",				"ntaxpricemny",			"naccumarrvnum",		"naccumstorenum",
		"naccuminvoicenum",		"naccumwastnum",		"dplanarrvdate",		"vvendorordercode",
		"vvendororderrow",		"cwarehouseid",			"vreceiveaddress",		"nconfirmnum",
		"dconfirmdate",			"ccorrectrowid",		"dcorrectdate",			"cprojectid",
		"cprojectphaseid",		"coperator",			"iisactive",			"iisreplenish",
		"forderrowstatus",		"csourcebilltype",		"csourcebillid",		"csourcerowid",
		"cupsourcebilltype",	"cupsourcebillid",		"cupsourcebillrowid",	"vmemo",
		"vfree1",	"vfree2",	"vfree3",	"vfree4",	"vfree5",
		"vdef1",	"vdef2",	"vdef3",	"vdef4",	"vdef5",	"vdef6",	"dr",
		//wyf	add	2002-04-10	begin
		"ts",
		//wyf	add	2002-04-10	end
		"norgnettaxprice"
		} ;
	//////////SELECT
	String selectStr = "SELECT ic_general_h.cgeneralhid," ;
	//表头
	for(int	i=0;i<strHeadItems.length;i++){
		selectStr += "ic_general_h."+ strHeadItems[i] + ",";
	}
	//表体
	for(int	i=0;i<strBodyItems.length;i++)
		selectStr += "ic_general_b."+  strBodyItems[i] + ",";
	//子子表
	for(int	i=0;i<strBb3Items.length;i++)
		selectStr += "ic_general_bb3."+  strBb3Items[i] + ",";
	//订单号
	selectStr += "po_order.vordercode,po_order.ctermprotocolid," ;
	 //订单的供应商和发票方
  selectStr +="po_order.cgiveinvoicevendor,po_order.cvendormangid,";
	//订单子表
	for(int	i=0;i<strPoOrderItems.length-1;i++)
		selectStr += "po_order_b."+  strPoOrderItems[i] + ",";
	selectStr += "po_order_b." + strPoOrderItems[strPoOrderItems.length-1] ;


	//入库单
	String orderByStr = "ORDER BY ic_general_h.cgeneralhid,ic_general_b.cinventoryid" ;
	String	sql = selectStr + " " + strFromWhere + " " + orderByStr ;

	Connection con = null;
	Statement 	stmt = null;
	Hashtable	voTable = new	Hashtable() ;
	try {
		con = getConnection();

		stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		String	curKey = null ;

		while (rs.next()) {

			//////表头
			Object	ob = rs.getString(1);
			GeneralBillHeaderVO  headVO=null;
			if(!voTable.containsKey(ob)){
			  headVO = new	GeneralBillHeaderVO() ;
				headVO.setCgeneralhid((String)ob) ;
				for(int	i=0;i<strHeadItems.length;i++){
					ob = rs.getObject(i+2);

					if(ob==null || ob.toString().trim().equals("") ){
						headVO.setAttributeValue(strHeadItems[i],null );
					}else	if(
						strHeadItems[i].equals("dbilldate") || strHeadItems[i].equals("dauditdate") ||
						strHeadItems[i].equals("daccountdate") 	){
						//为日期
						headVO.setAttributeValue(strHeadItems[i],new	UFDate(ob.toString().trim(),false) );
					}else	if(ob.getClass().equals(String.class)){
						headVO.setAttributeValue(strHeadItems[i],ob.toString().trim() );
					}else	if(ob.getClass().equals(Integer.class)){
						headVO.setAttributeValue(strHeadItems[i],ob );
					}else	if(ob.getClass().equals(BigDecimal.class)){
						headVO.setAttributeValue(strHeadItems[i],new	UFDouble(ob.toString()) );
					}
				}
				//表头加入到哈希表中
				Vector	voVEC = new	Vector() ;
				voVEC.addElement(headVO) ;

				//入库单主子VO,BB3VO,订单号,付款协议,订单子VO
				Vector[]	allVEC = new	Vector[5] ;
				allVEC[0] = voVEC ;
				for (int i = 1; i <5 ; i++){
					allVEC[i] = new	Vector() ;
				}

				curKey = headVO.getPrimaryKey() ;
				voTable.put(curKey,allVEC) ;
			}
			
			//////表体
			int	recordPos = strHeadItems.length+2 ;
			GeneralBillItemVO	bodyVO = new	GeneralBillItemVO() ;
			for(int	i=0;i<strBodyItems.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(strBodyItems[i],null );
				}else	if(
					strBodyItems[i].equals("dvalidate") || strBodyItems[i].equals("dbizdate") ||
					strBodyItems[i].equals("dstandbydate") 	){
					//为日期
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDate(ob.toString().trim(),false) );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDouble(ob.toString()) );
				}
			}
			//表体加入哈希表	0
			(((Vector[])voTable.get(curKey))[0]).addElement(bodyVO) ;

			//////附表
			GeneralBb3VO	bb3VO = new	GeneralBb3VO() ;
			recordPos += strBodyItems.length ;
			for(int	i=0;i<strBb3Items.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bb3VO.setAttributeValue(strBb3Items[i],null );
				}else	if(ob.getClass().equals(String.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bb3VO.setAttributeValue(strBb3Items[i],new	UFDouble(ob.toString()) );
				}
			}
			//表体加入哈希表	1
			(((Vector[])voTable.get(curKey))[1]).addElement(bb3VO) ;

			//=================订单
			//=======订单号
			recordPos += strBb3Items.length ;
			ob = rs.getObject(recordPos);
			//订单号加入哈希表	2
			(((Vector[])voTable.get(curKey))[2]).addElement((String)ob) ;

			if(ob!=null){
				//=======付款协议
				recordPos += 1 ;
				ob = rs.getObject(recordPos);
				//订单号加入哈希表	2
				(((Vector[])voTable.get(curKey))[3]).addElement((String)ob) ;
				//订单供应商（发票方）--为采购发票分单准备数据
				recordPos +=1;
				ob = rs.getObject(recordPos);
				recordPos +=1;
				if(!StringUtil.isEmptyWithTrim((String) ob))
				  bodyVO.setCvendorid((String) ob);
				else if(!StringUtil.isEmptyWithTrim(rs.getString(recordPos)))
				  bodyVO.setCvendorid(rs.getString(recordPos));

				
				//=======订单体数据
				nc.vo.po.OrderItemVO		orderItemVO = new	nc.vo.po.OrderItemVO() ;
				recordPos += 1 ;
				
				
				for(int	i=0;i<strPoOrderItems.length;i++){
					ob = rs.getObject(recordPos+i);

					if(ob==null || ob.toString().trim().equals("") ){
						orderItemVO.setAttributeValue(strPoOrderItems[i],null );
					}else	if( strPoOrderItems[i].equals("dplanarrvdate") ||
								strPoOrderItems[i].equals("dconfirmdate") ||
								strPoOrderItems[i].equals("dcorrectdate")){
							//为日期
						orderItemVO.setAttributeValue(strPoOrderItems[i],new	UFDate(ob.toString().trim(),false) );
					}else	if(ob.getClass().equals(String.class)){
						orderItemVO.setAttributeValue(strPoOrderItems[i],ob.toString().trim() );
					}else	if(ob.getClass().equals(Integer.class)){
						orderItemVO.setAttributeValue(strPoOrderItems[i],ob );
					}else	if(ob.getClass().equals(BigDecimal.class)){
						orderItemVO.setAttributeValue(strPoOrderItems[i],new	UFDouble(ob.toString()) );
					}
				}
				//订单体加入哈希表	3
				(((Vector[])voTable.get(curKey))[4]).addElement(orderItemVO) ;
			}else{
			  (((Vector[])voTable.get(curKey))[3]).addElement(null) ;
			  (((Vector[])voTable.get(curKey))[4]).addElement(null) ;

			  if(null==headVO)
			    headVO=(GeneralBillHeaderVO) 
			    ((Vector)((Vector[])voTable.get(rs.getString(1)))[0]).get(0);
			  bodyVO.setCvendorid(headVO.getCproviderid());
			}
		}
		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findGenenelVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	GeneralBillVO[] allVOs = null;
	Vector		bb3VEC = new	Vector() ;
	Vector		orderCodeVEC = new	Vector() ;
	Vector		termProtocolVEC = new	Vector() ;
	Vector		orderDataVEC = new	Vector() ;
	if (voTable.size() > 0) {
		////////入库单主子表
		allVOs = new GeneralBillVO[voTable.size()];
		Enumeration	elems = voTable.elements() ;
		int	i = 0 ;
		while(elems.hasMoreElements()){
			Vector[]	vecs = (Vector[])elems.nextElement() ;
			int	len = vecs[0].size()-1 ;

			GeneralBillHeaderVO	headVO = (GeneralBillHeaderVO)vecs[0].elementAt(0) ;
			GeneralBillItemVO[]	itemVOs = new	GeneralBillItemVO[len] ;
			vecs[0].removeElementAt(0) ;
			vecs[0].copyInto(itemVOs) ;
//			nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
//			gm.setFreeItemVO((nc.vo.ic.pub.FreeItemDeal[])itemVOs);
			allVOs[i] = new	GeneralBillVO(len);
			allVOs[i].setParentVO(headVO) ;
			allVOs[i].setChildrenVO(itemVOs) ;

			//入库单子VO
			for (int j = 0; j < itemVOs.length; j++){
				bb3VEC.addElement(vecs[1].elementAt(j)) ;
				orderCodeVEC.addElement(vecs[2].elementAt(j)) ;
				termProtocolVEC.addElement(vecs[3].elementAt(j)) ;
				orderDataVEC.addElement(vecs[4].elementAt(j)) ;
			}

			//下一条记录
			i++ ;
		}

		//入库单子子表
		GeneralBb3VO[]	bb3VOs = new GeneralBb3VO[bb3VEC.size()];
		bb3VEC.copyInto(bb3VOs);
		//订单号
		String[]	strOrderCodes = new	String[orderCodeVEC.size()] ;
		orderCodeVEC.copyInto(strOrderCodes) ;
		//付款协议
		String[]	strTermProtocolIds = new	String[orderCodeVEC.size()] ;
		termProtocolVEC.copyInto(strTermProtocolIds) ;
		//订单子VO
		nc.vo.po.OrderItemVO[]	orderItemVOs = new	nc.vo.po.OrderItemVO[orderDataVEC.size()] ;
		orderDataVEC.copyInto(orderItemVOs) ;

		//数据返回
		return filterStockData(allVOs, bb3VOs, strOrderCodes, strTermProtocolIds, orderItemVOs, true);
	}

	return null;
}

private Object[] filterStockData(GeneralBillVO allVOs[], GeneralBb3VO bb3VOs[], String strOrderCodes[], String strTermProtocolIds[], CircularlyAccessibleValueObject orderItemVOs[], boolean bPO)
	throws SQLException
{
	Connection con = null;
	Statement 	stmt = null;
	Hashtable t = new Hashtable();
	try {
		String sql = "select A.cgeneralbid, sum(B.nreasonwastenum) from ic_general_b A, po_invoice_b B ";
		sql += "where A.cgeneralbid = B.cupsourcebillrowid and A.dr = 0 and B.dr = 0 ";
		sql += " and A.cgeneralbid in ";

		String sID[] = new String[bb3VOs.length];
		for(int i = 0; i < bb3VOs.length; i++) sID[i] = bb3VOs[i].getCgeneralbid();
		
		//使用临时表
		String sIdSubSql = null ;
		try {
			sIdSubSql = new TempTableDMO().insertTempTable(sID, TempTableVO.TEMPTABLE_PU_00, TempTableVO.TEMPPKFIELD_PU);
		} catch (Exception	e) {
			reportException(e) ;
			throw	e ;
		}		
		
		sql += sIdSubSql + " group by A.cgeneralbid";
		con = getConnection();

		stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		while(rs.next()){
			String sid = rs.getString(1);
			Object oTemp = rs.getObject(2);
			if(oTemp != null) t.put(sid, new UFDouble(oTemp.toString()));
		}
		
		if(t.size() > 0){
			for(int i = 0; i < bb3VOs.length; i++){
				Object oTemp = t.get(bb3VOs[i].getCgeneralbid());
				if(oTemp != null) bb3VOs[i].setNaccountwastenum((UFDouble)oTemp);
			}
		}
	}catch(Exception e){
		throw new SQLException(e.getMessage());
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	
	Vector vTemp = new Vector();
	Hashtable t1 = new Hashtable(), t2 = new Hashtable();
	for(int i = 0; i < allVOs.length; i++){
		GeneralBillItemVO bodyVO[] = allVOs[i].getItemVOs();
		if(bodyVO == null || bodyVO.length == 0) continue;
		for(int j = 0; j < bodyVO.length; j++){
			if(!t1.containsKey(bodyVO[j].getCgeneralbid()) && bodyVO[j].getNinnum() != null) t1.put(bodyVO[j].getCgeneralbid(), bodyVO[j].getNinnum());
		}
	}
	for(int i = 0; i < bb3VOs.length; i++){
		if(!t2.contains(bb3VOs[i].getCgeneralbid())) t2.put(bb3VOs[i].getCgeneralbid(), new Object[]{bb3VOs[i].getNaccountnum1(), bb3VOs[i].getNsignnum()});
	}
	
	for(int i = 0; i < bb3VOs.length; i++){
		Object o1 = t1.get(bb3VOs[i].getCgeneralbid());
		Object o2 = t2.get(bb3VOs[i].getCgeneralbid());
		Object o3 = t.get(bb3VOs[i].getCgeneralbid());
		if(o1 != null && o2 != null){
			UFDouble nInNum = (UFDouble) o1;
			UFDouble nAccountNum1 = new UFDouble(0);
			UFDouble nSignNum = new UFDouble(0);
			UFDouble nReasonWasteNum = new UFDouble(0);
			Object o[] = (Object[]) o2;
			if(o[0] != null && o[0].toString().trim().length() > 0) nAccountNum1 = (UFDouble) o[0];
			if(o[1] != null && o[1].toString().trim().length() > 0) nSignNum = (UFDouble) o[1];
			if(o3 != null) nReasonWasteNum = (UFDouble) o3;
			if(Math.abs(nAccountNum1.doubleValue()) < Math.abs(nSignNum.doubleValue() - nReasonWasteNum.doubleValue())) nAccountNum1 = new UFDouble(nSignNum.doubleValue() - nReasonWasteNum.doubleValue());
			if(Math.abs(nInNum.doubleValue() - nAccountNum1.doubleValue()) > 0) vTemp.addElement(bb3VOs[i].getCgeneralbid());
		}
	}
	
	Vector vTemp1 = new Vector(), vTemp2 = new Vector();
	for(int i = 0; i < bb3VOs.length; i++){
		if(vTemp.contains(bb3VOs[i].getCgeneralbid())){
			vTemp1.addElement(bb3VOs[i]);
			vTemp2.addElement(new Integer(i));
		}
	}
	if(vTemp1.size() == 0) return null;
	bb3VOs = new GeneralBb3VO[vTemp1.size()];
	vTemp1.copyInto(bb3VOs);
	
	vTemp1 = new Vector();
	for(int i = 0; i < strOrderCodes.length; i++){
		if(vTemp2.contains(new Integer(i))) vTemp1.addElement(strOrderCodes[i]);
	}
	strOrderCodes = new String[vTemp1.size()];
	vTemp1.copyInto(strOrderCodes);
	
	vTemp1 = new Vector();
	for(int i = 0; i < strTermProtocolIds.length; i++){
		if(vTemp2.contains(new Integer(i))) vTemp1.addElement(strTermProtocolIds[i]);
	}
	strTermProtocolIds = new String[vTemp1.size()];
	vTemp1.copyInto(strTermProtocolIds);

	vTemp1 = new Vector();
	for(int i = 0; i < orderItemVOs.length; i++){
		if(vTemp2.contains(new Integer(i))) vTemp1.addElement(orderItemVOs[i]);
	}
	if(bPO) orderItemVOs = new nc.vo.po.OrderItemVO[vTemp1.size()];
	else orderItemVOs = new nc.vo.sc.order.OrderItemVO[vTemp1.size()];
	vTemp1.copyInto(orderItemVOs);
	
	vTemp1 = new Vector();
	for(int i = 0; i < allVOs.length; i++){
		vTemp2 = new Vector();
		GeneralBillItemVO bodyVO[] = allVOs[i].getItemVOs();
		if(bodyVO == null || bodyVO.length == 0) continue;
		for(int j = 0; j < bodyVO.length; j++){
			if(vTemp.contains(bodyVO[j].getCgeneralbid())) vTemp2.addElement(bodyVO[j]);
		}
		if(vTemp2.size() == 0) continue;
		
		bodyVO = new GeneralBillItemVO[vTemp2.size()];
		vTemp2.copyInto(bodyVO);
		allVOs[i].setChildrenVO(bodyVO);
		vTemp1.addElement(allVOs[i]);
	}
	
	if(vTemp1.size() == 0) return null;
	allVOs = new GeneralBillVO[vTemp1.size()];
	vTemp1.copyInto(allVOs);
	
	Object ob[] = new Object[5];
	ob[0] = allVOs;
	ob[1] = bb3VOs;
	ob[2] = strOrderCodes;
	ob[3] = strTermProtocolIds;
	ob[4] = orderItemVOs;
	return ob;
}

/* （非 Javadoc）
 * @see nc.bs.pi.IInvoiceD#queryRelatedData(java.lang.String, java.lang.String[])
 */
public Object queryRelatedData(String cSourceBillType, String cSourceBillRowID[]) throws SQLException{
	Object oTemp[][] = null;

	String sql1 = "select corder_bid, naccuminvoicenum, nordernum from po_order_b where corder_bid in ('";
	String sql2 = "select corder_bid, naccuminvoicenum, nordernum from sc_order_b where corder_bid in ('";
	String sql3 = "select A.cgeneralbid, B.nsignnum, A.ninnum from ic_general_b A, ic_general_bb3 B where A.cgeneralbid = B.cgeneralbid and A.cgeneralbid in ('";

	for(int i = 0; i < cSourceBillRowID.length - 1; i++){
		sql1 += cSourceBillRowID[i] + "','";
		sql2 += cSourceBillRowID[i] + "','";
		sql3 += cSourceBillRowID[i] + "','";
	}
	sql1 += cSourceBillRowID[cSourceBillRowID.length - 1] + "')";
	sql2 += cSourceBillRowID[cSourceBillRowID.length - 1] + "')";
	sql3 += cSourceBillRowID[cSourceBillRowID.length - 1] + "')";

	Connection con = null;
	Statement 	stmt = null;
	ResultSet rs = null;
	Hashtable t = new Hashtable();
	String id = null;
	Object o1 = null, o2 = null;
	try {
		con = getConnection();
		stmt = con.createStatement();
		
		if(cSourceBillType.equals(ScmConst.PO_Order)) rs = stmt.executeQuery(sql1);
		else if(cSourceBillType.equals(ScmConst.SC_Order)) rs = stmt.executeQuery(sql2);
		else if(cSourceBillType.equals("45") || cSourceBillType.equals("47")) rs = stmt.executeQuery(sql3);
		else return null;
		
		while(rs.next()){
			id = rs.getString(1);
			o1 = rs.getObject(2);
			o2 = rs.getObject(3);
			t.put(id, new Object[]{o1,o2});
		}
		if(rs != null) rs.close();
	
		if(t.size() > 0){
			oTemp = new Object[cSourceBillRowID.length][2];
			Object oo[] = null;
			for(int i = 0; i < oTemp.length; i++){
				o1 = t.get(cSourceBillRowID[i]);
				if(o1 != null){
					oo = (Object[]) o1;
					if(oo[0] != null){
					oTemp[i][0] = oo[0];
					}else{
					oTemp[i][0] = new BigDecimal(0);	
					}
					if(oo[1] != null){
					oTemp[i][1] = oo[1];
					}else{
					oTemp[i][1] = new BigDecimal(0);	
					}
				}else{
					oTemp[i][0] = new UFDouble(0);
					oTemp[i][1] = new UFDouble(0);
				}
			}
		}
		
	}catch(Exception e){
		throw new SQLException(e.getMessage());
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	
	return oTemp;
}

/**
 * 检查发票回写入库单数量
 * 
 * @param VOs
 * @throws SQLException
 * @throws BusinessException
 * 
 * 2006-07-07，Czp, 重构，解决无锡锡钢项目问题
 */
public void isSignNumExceedInNum(ParaPoToIcLendRewriteVO VOs[]) throws SQLException,BusinessException{
//	入库开票时,如果入库单行累计开票数量-入库单行对应发票行累计损耗数量>入库单行实收数量  抛出异常
	String sql1 = "select A.cgeneralbid, A.ninnum, B.nsignnum from ic_general_b A, ic_general_bb3 B ";
	sql1 += "where A.cgeneralbid = B.cgeneralbid and A.dr = 0 and B.dr = 0 and A.cgeneralbid in ";
		
	String sql2 = "select A.cgeneralbid, sum(B.nreasonwastenum) from ic_general_b A, po_invoice_b B ";
	sql2 += "where A.cgeneralbid = B.cupsourcebillrowid and A.dr = 0 and B.dr = 0 and A.cgeneralbid in ";
	
  ArrayList<String> listInvoiceHid = new ArrayList<String>();
  for(int i = 0; i < VOs.length; i++){
    listInvoiceHid.add(VOs[i].getCRowId());
  }
  sql1 += new TempTableUtil().getSubSql(listInvoiceHid);
  sql2 += new TempTableUtil().getSubSql(listInvoiceHid);

	sql2 += "group by A.cgeneralbid ";
	
	Connection con = null;
	Statement 	stmt = null;
	Hashtable hashBid2Num = new Hashtable(), hashBidWastNum = new Hashtable();
	try {
		con = getConnection();
		stmt = con.createStatement();
		
		ResultSet rs = stmt.executeQuery(sql1);
		while(rs.next()){
			String sid = rs.getString(1);
			
			Object oTemp = rs.getString(2);
			UFDouble d1 = new UFDouble(0);
			if(oTemp != null) d1 = new UFDouble(oTemp.toString());

			oTemp = rs.getString(3);
			UFDouble d2 = new UFDouble(0);
			if(oTemp != null) d2 = new UFDouble(oTemp.toString());
			
			hashBid2Num.put(sid, new UFDouble[]{d1, d2});
		}
		if(rs != null) rs.close();
		
		rs = stmt.executeQuery(sql2);
		while(rs.next()){
			String sid = rs.getString(1);
			Object oTemp = rs.getObject(2);
			if(oTemp != null) hashBidWastNum.put(sid, new UFDouble(oTemp.toString()));
		}
		
		if(hashBid2Num.size() == 0) throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000242")/*@res "查询入库单实收数量和累计开票数量错误!"*/);
		
		for(int i = 0; i < VOs.length; i++){
			String s = VOs[i].getCRowId();
			if(s == null || s.trim().length() == 0) continue;
			Object oTemp1 = hashBid2Num.get(s);
			Object oTemp2 = hashBidWastNum.get(s);
			if(oTemp2 == null) oTemp2 = new UFDouble(0);
			
			UFDouble ufdUsuableNums[] = (UFDouble[]) oTemp1;
			UFDouble ufdWastNum = (UFDouble) oTemp2;
			UFDouble ufdRslt = new UFDouble(0.0);
			if(ufdUsuableNums[1] != null) {
				ufdRslt = ufdRslt.add(ufdUsuableNums[1]);
			}
			if(VOs[i].getDSubNum() != null){
				ufdRslt = ufdRslt.add(VOs[i].getDSubNum());			
			}
			if(ufdWastNum != null){
				ufdRslt = ufdRslt.sub(ufdWastNum);
			}
			if(VOs[i].getDWasteSubNum() != null) {
				ufdRslt = ufdRslt.sub(VOs[i].getDWasteSubNum());
			}
			
			ufdUsuableNums[1] = ufdRslt;
			hashBid2Num.put(s, ufdUsuableNums);
		}
		
		StringBuffer errorLins = new StringBuffer();
		for(int i = 0; i < VOs.length; i++){
			String s = VOs[i].getCRowId();
			if(s == null || s.trim().length() == 0) continue;
			Object oTemp1 = hashBid2Num.get(s);			
			UFDouble ufdUsuableNums[] = (UFDouble[]) oTemp1;
			UFDouble ufdRslt = new UFDouble(0.0);
			
			if(ufdUsuableNums[1] != null) {
				ufdRslt = ufdUsuableNums[1];
			

				if ((ufdUsuableNums[0].doubleValue() >= 0 && ufdRslt.compareTo(ufdUsuableNums[0]) > 0)
						|| ufdUsuableNums[0].doubleValue() < 0 && (ufdRslt.compareTo(ufdUsuableNums[0]) < 0)) {
					if (i < VOs.length - 1) {
						errorLins.append(new Integer(i + 1) + ",");
					} else if (i == VOs.length - 1) {
						errorLins.append(new Integer(i + 1) + " ");
					}
				}
			}
		}
		
		try {
			if(errorLins.length() > 0){
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000241",null,
			            new String[] {errorLins.toString(),errorLins.toString()})+"\n");
			}
		} catch (Exception e) {
			nc.bs.pu.pub.PubDMO.throwBusinessException(e) ;
		}

		
	}catch(Exception e){
		if(e instanceof BusinessException) throw new BusinessException(e.getMessage());
		else throw new SQLException(e.getMessage());
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	
}
 /**
 * 作者：王印芬
 * 功能：根据条件查询委外入库单
 * 参数：
 *		String	strFromWhere			FROM及WHERE后的字符串
 * 返回：Object[]						结构如下:
 *		[0] 	GeneralBillVO[]			入库单大VO数组
		[1] 	GeneralBb3VO[]			入库单附表VO数组,与[0]中的子表顺序保持一致
		[2] 	String[]				订单号数组,与[0]中的子表顺序保持一致
		[3] 	String[]				付款协议数组,与[0]中的子表顺序保持一致
		[4] 	nc.vo.sc.order.OrderVO[]订单体VO数组,与[0]中的子表顺序保持一致
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-09-19	wyf		加入库存组织的查询
 */
public Object[] findGenenelVOsFromScOrderByCondsMy(
	String	strFromWhere) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findGenenelVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	String[]	strHeadItems = new	String[]{
		"cauditorid",			"cbilltypecode",		"cbizid",				"cbiztype",
		"ccustomerid",			"cdilivertypeid",		"cdispatcherid",		"cdptid",
		"cinventoryid",			"coperatorid",			"cproviderid",
		"cregister",			"cwarehouseid",			"cwastewarehouseid",	"cwhsmanagerid",
		"daccountdate",			"dauditdate",			"dbilldate",			"dr",
		"fbillflag",			"fspecialflag",			"pk_corp",				"vbillcode",
		"vdiliveraddress",		"vnote",				"vuserdef1",			"vuserdef10",
		"vuserdef2",			"vuserdef3",			"vuserdef4",			"vuserdef5",
		"vuserdef6",			"vuserdef7",			"vuserdef8",			"vuserdef9",
		"ts",					"pk_calbody"
		} ;
	String[]	strBodyItems = new	String[]{
		"bzgflag",				"castunitid",			"ccorrespondbid",		"ccorrespondcode",
		"ccorrespondhid",		"ccorrespondtype",		"ccostobject",			"cfirstbillbid",
		"cfirstbillhid",		"cfirsttype",			"cgeneralbid",			"cgeneralhid",
		"cinventoryid",			"cprojectid",			"cprojectphaseid",		"csourcebillbid",
		"csourcebillhid",		"csourcetype",			"cwp",					"dbizdate",
		"dr",					"dstandbydate",			"dvalidate",			"fchecked",
		"flargess",				"isok",					"ninassistnum",			"ninnum",
		"nmny",					"nneedinassistnum",		"noutassistnum",		"noutnum",
		"nplannedmny",			"nplannedprice",		"nprice",				"nshouldinnum",
		"nshouldoutassistnum",	"nshouldoutnum",		"ntranoutnum",			"vbatchcode",
		"vfree1",				"vfree10",				"vfree2",				"vfree3",
		"vfree4",				"vfree5",				"vfree6",				"vfree7",
		"vfree8",				"vfree9",				"vproductbatch",		"vsourcebillcode",
		"vuserdef1",			"vuserdef10",			"vuserdef2",			"vuserdef3",
		"vuserdef4",			"vuserdef5",			"vuserdef6",			"vuserdef7",
		"vuserdef8",			"vuserdef9",			"ts",  
		//zx	add	2002-07-24	begin
		"cinvbasid"
        //zx	add	2002-07-24	begin
		} ;
	String[]	strBb3Items = new	String[]{
		"caccountunitid",		"cgeneralbb3",			"cgeneralbid",			"cgeneralhid",
		"dr",					"naccountmny",			"naccountnum1",			"naccountnum2",
		"nmaterialmoney",		"npmoney",				"npprice",				"nsignnum",
		//wyf	add	2002-04-10	begin
		"ts"
		//wyf	add	2002-04-10	end
		
		} ;
	String[]	strScOrderItems = new	String[]{
		"corderid", 			"corder_bid",			"pk_corp",				"cmangid",
		"cbaseid",				"nordernum",			"cassistunit",			"nassistnum",
		"ndiscountrate",		"idiscounttaxtype",		"ntaxrate",				"ccurrencytypeid",
		"noriginalnetprice",	"noriginalcurprice",	"noriginalcurmny",		"noriginaltaxmny",
		"noriginalsummny",		"nexchangeotobrate",	"ntaxmny",				"nmoney",
		"nsummny",				"naccumarrvnum",		"naccumstorenum",		"naccuminvoicenum",
		"naccumwastnum",		"dplanarrvdate",		"cwarehouseid",			"creceiveaddress",
		"cprojectid",			"cprojectphaseid",		"coperator",			"forderrowstatus",
		"cordersource",			"csourcebillid",		"csourcebillrow",		"cupsourcebilltype",
		"cupsourcebillid",		"cupsourcebillrowid",	"vmemo",
		"vfree1","vfree2","vfree3","vfree4","vfree5",
		"vdef1","vdef2","vdef3","vdef4","vdef5","vdef6",
		"dr",
		//wyf	add	2002-04-10	begin
		"ts",
		//wyf	add	2002-04-10	end
		"norgnettaxprice"
		} ;
	//////////SELECT
	String selectStr = "SELECT ic_general_h.cgeneralhid," ;
	//表头
	for(int	i=0;i<strHeadItems.length;i++){
		selectStr += "ic_general_h."+ strHeadItems[i] + ",";
	}
	//表体
	for(int	i=0;i<strBodyItems.length;i++)
		selectStr += "ic_general_b."+  strBodyItems[i] + ",";
	//子子表
	for(int	i=0;i<strBb3Items.length;i++)
		selectStr += "ic_general_bb3."+  strBb3Items[i] + ",";
	//订单号
	selectStr += "sc_order.vordercode,sc_order.ctermProtocolid," ;
  //订单的供应商和发票方
  selectStr +="sc_order.cgiveinvoicevendor,sc_order.cvendormangid,";
	//订单子表
	for(int	i=0;i<strScOrderItems.length-1;i++)
		selectStr += "sc_order_b."+  strScOrderItems[i] + ",";
	selectStr += "sc_order_b." + strScOrderItems[strScOrderItems.length-1] ;

	//入库单
	String orderByStr = "ORDER BY ic_general_h.cgeneralhid,ic_general_b.cinventoryid" ;
	String	sql = selectStr + " " + strFromWhere + " " + orderByStr ;

	Connection con = null;
	Statement stmt = null;
	Hashtable	voTable = new	Hashtable() ;
	try {
		con = getConnection();

		stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		String	curKey = null ;

		while (rs.next()) {

			//////表头
			Object	ob = rs.getString(1);
			GeneralBillHeaderVO  headVO = null;
			if(!voTable.containsKey(ob)){
				headVO = new	GeneralBillHeaderVO() ;
				headVO.setCgeneralhid((String)ob) ;
				for(int	i=0;i<strHeadItems.length;i++){
					ob = rs.getObject(i+2);

					if(ob==null || ob.toString().trim().equals("") ){
						headVO.setAttributeValue(strHeadItems[i],null );
					}else	if(
						strHeadItems[i].equals("dbilldate") || strHeadItems[i].equals("dauditdate") ||
						strHeadItems[i].equals("daccountdate") 	){
						//为日期
						headVO.setAttributeValue(strHeadItems[i],new	UFDate(ob.toString().trim(),false) );
					}else	if(ob.getClass().equals(String.class)){
						headVO.setAttributeValue(strHeadItems[i],ob.toString().trim() );
					}else	if(ob.getClass().equals(Integer.class)){
						headVO.setAttributeValue(strHeadItems[i],ob );
					}else	if(ob.getClass().equals(BigDecimal.class)){
						headVO.setAttributeValue(strHeadItems[i],new	UFDouble(ob.toString()) );
					}
				}
				//表头加入到哈希表中
				Vector	voVEC = new	Vector() ;
				voVEC.addElement(headVO) ;

				//入库单主子VO,BB3VO,订单号,付款协议,订单子VO
				Vector[]	allVEC = new	Vector[5] ;
				allVEC[0] = voVEC ;
				for (int i = 1; i <5 ; i++){
					allVEC[i] = new	Vector() ;
				}

				curKey = headVO.getPrimaryKey() ;
				voTable.put(curKey,allVEC) ;
			}

			//////表体
			int	recordPos = strHeadItems.length+2 ;
			GeneralBillItemVO	bodyVO = new	GeneralBillItemVO() ;
			for(int	i=0;i<strBodyItems.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(strBodyItems[i],null );
				}else	if(
					strBodyItems[i].equals("dvalidate") || strBodyItems[i].equals("dbizdate") ||
					strBodyItems[i].equals("dstandbydate") 	){
					//为日期
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDate(ob.toString().trim(),false) );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDouble(ob.toString()) );
				}
			}
			//表体加入哈希表	0
			(((Vector[])voTable.get(curKey))[0]).addElement(bodyVO) ;

			//////附表
			GeneralBb3VO	bb3VO = new	GeneralBb3VO() ;
			recordPos += strBodyItems.length ;
			for(int	i=0;i<strBb3Items.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bb3VO.setAttributeValue(strBb3Items[i],null );
				}else	if(ob.getClass().equals(String.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bb3VO.setAttributeValue(strBb3Items[i],new	UFDouble(ob.toString()) );
				}
			}
			//表体加入哈希表	1
			(((Vector[])voTable.get(curKey))[1]).addElement(bb3VO) ;

			//==============订单
			//=======订单号
			recordPos += strBb3Items.length ;
			ob = rs.getObject(recordPos);
			//订单号加入哈希表	2
			(((Vector[])voTable.get(curKey))[2]).addElement((String)ob) ;

			if(ob!=null){
				//=======付款协议
				recordPos += 1 ;
				ob = rs.getObject(recordPos);
				//付款协议加入哈希表	3
				(((Vector[])voTable.get(curKey))[3]).addElement((String)ob) ;
        //订单供应商（发票方）--为采购发票分单准备数据
        recordPos +=1;
        ob = rs.getObject(recordPos);
        recordPos +=1;
        if(!StringUtil.isEmptyWithTrim((String) ob))
          bodyVO.setCvendorid((String) ob);
        else if(!StringUtil.isEmptyWithTrim(rs.getString(recordPos)))
          bodyVO.setCvendorid(rs.getString(recordPos));

				//=======订单体数据
				//nc.vo.sc.order.OrderItemVO		orderItemVO = new	nc.vo.sc.order.OrderItemVO() ;
				nc.vo.po.OrderItemVO		orderItemVO = new	nc.vo.po.OrderItemVO() ;
				recordPos += 1 ;
				for(int	i=0;i<strScOrderItems.length;i++){
					ob = rs.getObject(recordPos+i);

					if(ob==null || ob.toString().trim().equals("") ){
						orderItemVO.setAttributeValue(strScOrderItems[i],null );
					}else	if( strScOrderItems[i].equals("dplanarrvdate") ){//为日期
						orderItemVO.setAttributeValue(strScOrderItems[i],new	UFDate(ob.toString().trim(),false) );
					}else	if(ob.getClass().equals(String.class)){
						if( strScOrderItems[i].equals("cordersource") ){
							orderItemVO.setCsourcebilltype( ob.toString() );
						}else	if( strScOrderItems[i].equals("csourcebillrow") ){
							orderItemVO.setCsourcerowid( ob.toString() );
						}else{
							orderItemVO.setAttributeValue(strScOrderItems[i],ob.toString().trim() );
						}
					}else	if(ob.getClass().equals(Integer.class)){
						if(strScOrderItems[i].equals("idiscounttaxtype")){
							//委外:	1不计税	2外加	3内含
							//采购: 0应税内含 1应税外加 2不计税	订单
							if(ob==null || ob.toString().length()<1){
								orderItemVO.setIdiscounttaxtype( new Integer(1) );
							}else{
								int	iDis = new	Integer(ob.toString().trim()).intValue() ;
								if( iDis==0 ){
									orderItemVO.setIdiscounttaxtype( new Integer(0) );
								}else	if( iDis==1 ){
									orderItemVO.setIdiscounttaxtype( new Integer(1) );
								}else	if( iDis==2 ){
									orderItemVO.setIdiscounttaxtype( new Integer(2) );
								}else{
									orderItemVO.setIdiscounttaxtype( new Integer(1) );
								}
							}
						}else{
							orderItemVO.setAttributeValue(strScOrderItems[i],ob );
						}
					}else	if(ob.getClass().equals(BigDecimal.class)){
						if( strScOrderItems[i].equals("noriginalsummny") ){
							orderItemVO.setNoriginaltaxpricemny(new	UFDouble(ob.toString()) );
						}else	if( strScOrderItems[i].equals("nsummny") ){
							orderItemVO.setNtaxpricemny(new	UFDouble(ob.toString()) );
						}else{
							orderItemVO.setAttributeValue(strScOrderItems[i],new	UFDouble(ob.toString()) );
						}
					}
				}
				//订单体加入哈希表	4
				(((Vector[])voTable.get(curKey))[4]).addElement(orderItemVO) ;
			}else{
				(((Vector[])voTable.get(curKey))[3]).addElement(null) ;
				(((Vector[])voTable.get(curKey))[4]).addElement(null) ;

        if(null==headVO)
          headVO=(GeneralBillHeaderVO) 
          ((Vector)((Vector[])voTable.get(rs.getString(1)))[0]).get(0);
        bodyVO.setCvendorid(headVO.getCproviderid());
			}
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findGenenelVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	GeneralBillVO[] allVOs = null;
	Vector		bb3VEC = new	Vector() ;
	Vector		orderCodeVEC = new	Vector() ;
	Vector		termProtocolVEC = new	Vector() ;
	Vector		orderDataVEC = new	Vector() ;
	if (voTable.size() > 0) {
		////////入库单主子表
		allVOs = new GeneralBillVO[voTable.size()];
		Enumeration	elems = voTable.elements() ;
		int	i = 0 ;
		while(elems.hasMoreElements()){
			Vector[]	vecs = (Vector[])elems.nextElement() ;
			int	len = vecs[0].size()-1 ;

			GeneralBillHeaderVO	headVO = (GeneralBillHeaderVO)vecs[0].elementAt(0) ;
			GeneralBillItemVO[]	itemVOs = new	GeneralBillItemVO[len] ;
			vecs[0].removeElementAt(0) ;
			vecs[0].copyInto(itemVOs) ;
//			nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
//			gm.setFreeItemVO((nc.vo.ic.pub.FreeItemDeal[])itemVOs);
			allVOs[i] = new	GeneralBillVO(len);
			allVOs[i].setParentVO(headVO) ;
			allVOs[i].setChildrenVO(itemVOs) ;

			//入库单子VO
			for (int j = 0; j < itemVOs.length; j++){
				bb3VEC.addElement(vecs[1].elementAt(j)) ;
				orderCodeVEC.addElement(vecs[2].elementAt(j)) ;
				termProtocolVEC.addElement(vecs[3].elementAt(j)) ;
				orderDataVEC.addElement(vecs[4].elementAt(j)) ;
			}

			//下一条记录
			i++ ;
		}

		//入库单子子表
		GeneralBb3VO[]	bb3VOs = new GeneralBb3VO[bb3VEC.size()];
		bb3VEC.copyInto(bb3VOs);
		//订单号
		String[]	strOrderCodes = new	String[orderCodeVEC.size()] ;
		orderCodeVEC.copyInto(strOrderCodes) ;
		//付款协议
		String[]	strTermProtocolIds = new	String[orderCodeVEC.size()] ;
		termProtocolVEC.copyInto(strTermProtocolIds) ;
		//订单子VO
		nc.vo.po.OrderItemVO[]	orderItemVOs = new	nc.vo.po.OrderItemVO[orderDataVEC.size()] ;
		orderDataVEC.copyInto(orderItemVOs) ;

		//数据返回
//		Object[]	ob = new	Object[5] ;
//		ob[0] = allVOs ;//入库单大VO
//		ob[1] = bb3VOs ;//入库单附表VO
//		ob[2] = strOrderCodes ;//订单号
//		ob[3] = strTermProtocolIds ;//付款协议
//		ob[4] = orderItemVOs ; //订单体
		return filterStockData(allVOs, bb3VOs, strOrderCodes, strTermProtocolIds, orderItemVOs, true);
	}

	return null;
}









 /**
 * 作者：王印芬
 * 功能：根据条件查询委外订单
 * 参数：
 *		String	strFromWhere			FROM及WHERE后的字符串
 * 返回：nc.vo.sc.order.OrderVO[]		符合查询条件的订单VO数组
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 */
public nc.vo.sc.order.OrderVO[] findScOrderVOsByCondsMy(String strFromWhere) throws SQLException,ClassNotFoundException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findScOrderVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	//需要查询的表头及表体字段
	String[]	strHeadItems = new	String[]{
		"corderid",				"vordercode",		"pk_corp",				"cpurorganization",
		"cwareid",				"dorderdate",		"cvendorid",			"caccountbankid",
		"cdeptid",				"cemployeeid",		"cbiztype",				"creciever",
		"cgiveinvoicevendor",	"ctransmodeid",		"ctermProtocolid",		"caccountyear",
		"coperator",			"ibillstatus",		"dauditdate",			"cauditpsn",
		"cvendormangid",		"vmemo",
		"vdef1","vdef2","vdef3","vdef4","vdef5","vdef6","vdef7","vdef8","vdef9","vdef10",
		"vdef11","vdef12","vdef13","vdef14","vdef15","vdef16","vdef17","vdef18","vdef19","vdef20",
		"pk_defdoc1","pk_defdoc2","pk_defdoc3","pk_defdoc4","pk_defdoc5","pk_defdoc6","pk_defdoc7",
		"pk_defdoc8","pk_defdoc9","pk_defdoc10","pk_defdoc11","pk_defdoc12","pk_defdoc13","pk_defdoc14",
		"pk_defdoc15","pk_defdoc16","pk_defdoc17","pk_defdoc18","pk_defdoc19","pk_defdoc20",
		"dr",
		//wyf	add	2002-04-10	begin
		"ts"
		//wyf	add	2002-04-10	end
		} ;

	String[]	strBodyItems = new	String[]{
		"corderid", 			"corder_bid",		"pk_corp",				"cmangid",
		"cbaseid",				"nordernum",		"cassistunit",			"nassistnum",
		"ndiscountrate",		"idiscounttaxtype",	"ntaxrate",				"ccurrencytypeid",
		"noriginalnetprice",	"noriginalcurprice","noriginalcurmny",		"noriginaltaxmny",
		"noriginalsummny",		"nexchangeotobrate","ntaxmny",				"nmoney",
		"nsummny",				"naccumarrvnum",	"naccumstorenum",		"naccuminvoicenum",
		"naccumwastnum",		"dplanarrvdate",	"cwarehouseid",			"creceiveaddress",
		"cprojectid",			"cprojectphaseid",	"coperator",			"forderrowstatus",
		//"bisactive",
		"cordersource",		"csourcebillid",		"csourcebillrow",
		"cupsourcebilltype",	"cupsourcebillid",	"cupsourcebillrowid",	"vmemo",
		"vfree1","vfree2","vfree3","vfree4","vfree5",
		"vdef1","vdef2","vdef3","vdef4","vdef5","vdef6",
		"vdef7","vdef8","vdef9","vdef10","vdef11","vdef12",
		"vdef13","vdef14","vdef15","vdef16","vdef17","vdef18","vdef19","vdef20",
		"pk_defdoc1","pk_defdoc2","pk_defdoc3","pk_defdoc4","pk_defdoc5","pk_defdoc6","pk_defdoc7",
		"pk_defdoc8","pk_defdoc9","pk_defdoc10","pk_defdoc11","pk_defdoc12","pk_defdoc13","pk_defdoc14",
		"pk_defdoc15","pk_defdoc16","pk_defdoc17","pk_defdoc18","pk_defdoc19","pk_defdoc20",
		"dr",
		//wyf	add	2002-04-10	begin
		"ts",
		"norgnettaxprice",
		//wyf	add	2002-04-10	end
		"crowno"
		} ;
	//SELECT

	StringBuffer	selectStr = new	StringBuffer("sc_order." + strHeadItems[0]) ;
	for (int i = 1; i < strHeadItems.length; i++){
		selectStr.append(",sc_order."+strHeadItems[i]) ;
	}
	for (int i = 0; i < strBodyItems.length; i++){
		selectStr.append(",sc_order_b."+strBodyItems[i]) ;
	}
	//ORDER	BY
	String	orderByStr = "ORDER BY sc_order.vordercode,sc_order.corderid" ;
	//SQL
	String	sql = 	"SELECT " + selectStr.toString()
				+	" " + strFromWhere
				+ 	" " + orderByStr ;

	Connection con = null;
	Statement stmt = null;
	Hashtable	voTable = new	Hashtable() ;
	try {
		con = getConnection();
		stmt = con.createStatement() ;
		ResultSet rs = stmt.executeQuery(sql);
		String	curKey = null ;

		//
		Object	ob = null ;
		
		
		while (rs.next()) {
			

			//表头
			ob = rs.getString(1);
			if(!voTable.containsKey(ob)){
				nc.vo.sc.order.OrderHeaderVO	headVO = new	nc.vo.sc.order.OrderHeaderVO() ;
				headVO.setPrimaryKey(ob.toString()) ;
				for(int	i=1;i<strHeadItems.length;i++){
					ob = rs.getObject(i+1);

					if(ob==null || ob.toString().trim().equals("") ){
						headVO.setAttributeValue(strHeadItems[i],null );
					}else	if(strHeadItems[i].equals("dorderdate") || strHeadItems[i].equals("dauditdate")){
						//为日期
						headVO.setAttributeValue(strHeadItems[i],new	UFDate(ob.toString().trim(),false) );
					}else	if(ob.getClass().equals(String.class)){
						headVO.setAttributeValue(strHeadItems[i],ob.toString().trim() );
					}else	if(ob.getClass().equals(Integer.class)){
						headVO.setAttributeValue(strHeadItems[i],ob );
					}else	if(ob.getClass().equals(BigDecimal.class)){
						headVO.setAttributeValue(strHeadItems[i],new	UFDouble(ob.toString()) );
					}
				}
				//表头加入到哈希表中
				Vector	voVEC = new	Vector() ;
				voVEC.addElement(headVO) ;

				curKey = headVO.getPrimaryKey() ;
				voTable.put(curKey,voVEC) ;
			}

			//表体
			int	recordPos = strHeadItems.length+1 ;
			nc.vo.sc.order.OrderItemVO	bodyVO = new	nc.vo.sc.order.OrderItemVO() ;
			for(int	i=0;i<strBodyItems.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(strBodyItems[i],null );
				}else	if( strBodyItems[i].equals("dplanarrvdate")){//为日期
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDate(ob.toString().trim(),false) );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					if(strBodyItems[i].equals("idiscounttaxtype")){
						//委外:	1不计税	2外加	3内含
						//采购: 0应税内含 1应税外加 2不计税	订单
						if(ob==null || ob.toString().length()<1){
							bodyVO.setIdiscounttaxtype( new	Integer(1) );
						}else{
							int	iDis = new	Integer(ob.toString().trim()).intValue() ;
							if( iDis==0 ){
								bodyVO.setIdiscounttaxtype( new Integer(0) );
							}else	if( iDis==1 ){
								bodyVO.setIdiscounttaxtype( new Integer(1) );
							}else	if( iDis==2 ){
								bodyVO.setIdiscounttaxtype( new Integer(2) );
							}else{
								bodyVO.setIdiscounttaxtype( new Integer(1) );
							}
						}
					}else{
						bodyVO.setAttributeValue(strBodyItems[i],ob );
					}
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDouble(ob.toString()) );
				}
			}
			//表体加入哈希表
			((Vector)voTable.get(curKey)).addElement(bodyVO) ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findScOrderVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	nc.vo.sc.order.OrderVO[] allVOs = null;
	if (voTable.size() > 0) {
		allVOs = new nc.vo.sc.order.OrderVO[voTable.size()];
		Enumeration	elems = voTable.elements() ;
		int	i = 0 ;
		while(elems.hasMoreElements()){
			Vector	vec = (Vector)elems.nextElement() ;
			int	len = vec.size()-1 ;

			nc.vo.sc.order.OrderHeaderVO	headVO = (nc.vo.sc.order.OrderHeaderVO)vec.elementAt(0) ;
			nc.vo.sc.order.OrderItemVO[]	itemVOs = new	nc.vo.sc.order.OrderItemVO[len] ;
			vec.removeElementAt(0) ;
			vec.copyInto(itemVOs) ;

			allVOs[i] = new	nc.vo.sc.order.OrderVO();
			allVOs[i].setParentVO(headVO) ;
			allVOs[i].setChildrenVO(itemVOs) ;

			i++ ;
		}
	}

	return allVOs;
}























/**
 * 根据订单行ID修改该行的累计发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateAccumInvoiceNumByScOrderBPKMy(String	key,double value) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{key});
	/*************************************************************/

	//fangy modified 2003-01-22 10:20 begin
	String[] keys = new String[]{key};
	double[] values = new double[]{value};
	updateAccumInvoiceNumByScOrderBPKMy(keys,values);
	//fangy modified 2003-01-22 10:20 end


	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{key});
	/*************************************************************/
}













/**
 * 作者：王印芬
 * 功能：作结算时根据入库单ID查询所有入库单VO，由方法doSettle调用
 * 参数：
 *		String	strIdWhere				WHERE后的字符串，为(ic_general_b.cgeneralbid='d' OR ic_general_b.cgeneralbid='e')
 * 返回：Object[]						结构如下:
 *		[0] 	Vector			GeneralBillHeaderVO数组
 *		[1] 	Vector			GeneralBillItemVO数组，与[0]一一对应
 *		[2] 	Vector			GeneralBb3VO数组，与[0]一一对应
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 */

public Object[] findGeneralVOsFromIDs(String	strIdWhere)
throws Exception{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "getGeneralVOsFromInvVO", new Object[]{strIdWhere});
	/*************************************************************/

	String[]	strHeadItems = new	String[]{
		"cauditorid",			"cbilltypecode",		"cbizid",				"cbiztype",
		"ccustomerid",			"cdilivertypeid",		"cdispatcherid",		"cdptid",
		"cgeneralhid",			"pk_calbody",
		"cinventoryid",			"coperatorid",			"cproviderid",
		"cregister",			"cwarehouseid",			"cwastewarehouseid",	"cwhsmanagerid",
		"daccountdate",			"dauditdate",			"dbilldate",			"dr",
		"fbillflag",			"fspecialflag",			"pk_corp",				"vbillcode",
		"vdiliveraddress",		"vnote",				"vuserdef1",			"vuserdef10",
		"vuserdef2",			"vuserdef3",			"vuserdef4",			"vuserdef5",
		"vuserdef6",			"vuserdef7",			"vuserdef8",			"vuserdef9",   "pk_purcorp"} ;
	String[]	strBodyItems = new	String[]{
		"bzgflag",				"castunitid",			"ccorrespondbid",		"ccorrespondcode",
		"ccorrespondhid",		"ccorrespondtype",		"ccostobject",			"cfirstbillbid",
		"cfirstbillhid",		"cfirsttype",			"cgeneralbid",			"cgeneralhid",
		"cinventoryid",			"cprojectid",			"cprojectphaseid",		"csourcebillbid",
		"csourcebillhid",		"csourcetype",			"cwp",					"dbizdate",
		"dr",					"dstandbydate",			"dvalidate",			"fchecked",
		"flargess",				"isok",					"ninassistnum",			"ninnum",
		"nmny",					"nneedinassistnum",		"noutassistnum",		"noutnum",
		"nplannedmny",			"nplannedprice",		"nprice",				"nshouldinnum",
		"nshouldoutassistnum",	"nshouldoutnum",		"ntranoutnum",			"vbatchcode",
		"vfree1",				"vfree10",				"vfree2",				"vfree3",
		"vfree4",				"vfree5",				"vfree6",				"vfree7",
		"vfree8",				"vfree9",				"vproductbatch",		"vsourcebillcode",
		"vuserdef1",			"vuserdef10",			"vuserdef2",			"vuserdef3",
		"vuserdef4",			"vuserdef5",			"vuserdef6",			"vuserdef7",
		"vuserdef8",			"vuserdef9",			"pk_invoicecorp", "vfirstbillcode",  "hsl", "cinvbasid"} ;
	String[]	strBb3Items = new	String[]{
		"caccountunitid",		"cgeneralbb3",			"cgeneralbid",			"cgeneralhid",
		"dr",					"naccountmny",			"naccountnum1",			"naccountnum2",
		"nmaterialmoney",		"npmoney",				"npprice",				"nsignnum"} ;
	//=============SELECT
	String selectStr = "SELECT " ;
	//表头
	for(int	i=0;i<strHeadItems.length;i++){
		selectStr += "ic_general_h."+ strHeadItems[i] + ",";
	}
	//表体
	for(int	i=0;i<strBodyItems.length;i++)
		selectStr += "ic_general_b."+  strBodyItems[i] + ",";
	//子子表
	for(int	i=0;i<strBb3Items.length-1;i++)
		selectStr += "ic_general_bb3."+  strBb3Items[i] + ",";
	selectStr += "ic_general_bb3."+  strBb3Items[strBb3Items.length-1] ;
	//入库单
	String	sql = selectStr + " FROM " + new	RelatedTableVO("入库单").getFromTable()
				+ " WHERE " + strIdWhere
				+ " AND ic_general_h.dr=0 AND ic_general_b.dr=0 AND ic_general_bb3.dr=0";//oracle

	SCMEnv.out(sql) ;

	Vector	hVector	= new	Vector() ;
	Vector	bVector	= new	Vector() ;
	Vector	bb3Vector	= new	Vector() ;

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		

		Object	ob = null ;
		while (rs.next()) {

			//////表头
			GeneralBillHeaderVO	headVO = new	GeneralBillHeaderVO() ;
			for(int	i=0;i<strHeadItems.length;i++){
				ob = rs.getObject(i+1);

				if(ob==null || ob.toString().trim().equals("") ){
					headVO.setAttributeValue(strHeadItems[i],null );
				}else	if(
					strHeadItems[i].equals("dbilldate") || strHeadItems[i].equals("dauditdate") ||
					strHeadItems[i].equals("daccountdate") 	){
					//为日期
					headVO.setAttributeValue(strHeadItems[i],new	UFDate(ob.toString().trim(),false) );
				}else	if(ob.getClass().equals(String.class)){
					headVO.setAttributeValue(strHeadItems[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					headVO.setAttributeValue(strHeadItems[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					headVO.setAttributeValue(strHeadItems[i],new	UFDouble(ob.toString()) );
				}
			}
			hVector.addElement(headVO) ;

			//////表体
			int	recordPos = strHeadItems.length+1 ;
			GeneralBillItemVO	bodyVO = new	GeneralBillItemVO() ;
			for(int	i=0;i<strBodyItems.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(strBodyItems[i],null );
				}else	if(
					strBodyItems[i].equals("dvalidate") || strBodyItems[i].equals("dbizdate") ||
					strBodyItems[i].equals("dstandbydate") 	){
					//为日期
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDate(ob.toString().trim(),false) );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bodyVO.setAttributeValue(strBodyItems[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bodyVO.setAttributeValue(strBodyItems[i],new	UFDouble(ob.toString()) );
				}
			}
			bVector.addElement(bodyVO) ;

			//////附表
			GeneralBb3VO	bb3VO = new	GeneralBb3VO() ;
			recordPos += strBodyItems.length ;
			for(int	i=0;i<strBb3Items.length;i++){
				ob = rs.getObject(recordPos+i);

				if(ob==null || ob.toString().trim().equals("") ){
					bb3VO.setAttributeValue(strBb3Items[i],null );
				}else	if(ob.getClass().equals(String.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bb3VO.setAttributeValue(strBb3Items[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					bb3VO.setAttributeValue(strBb3Items[i],new	UFDouble(ob.toString()) );
				}
			}
			bb3Vector.addElement(bb3VO) ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findGenenelVOsByCondsMy", new Object[]{strIdWhere});
	/*************************************************************/

	if(hVector.size()==0){
		return	null ;
	}

	return	new		Object[]{hVector,bVector,bb3Vector} ;

}





/**
 * 作者：王印芬
 * 功能：得到一张发票的本币价税合计
 *		该方法为注册函数，用于配于如审批中，作为一个是否可以审批通过的条件。
 *		请不要随意删除及修改
 * 参数：InvoiceVO invVO				发票VO
 * 返回：UFDouble					参数invVO的
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-07-26	wyf		不查库，只统计VO，去掉删除的行
 */
public UFDouble getTotalNativeSummny(InvoiceVO invVO) throws SQLException {

	if(invVO==null){
		return VariableConst.ZERO;
	}

	UFDouble	dSummny = nc.vo.scm.pu.VariableConst.ZERO ;
	InvoiceItemVO[]	voaItem = invVO.getBodyVO() ;
	int		iLen = voaItem.length ;
	for (int i = 0; i < iLen; i++){
		//删除的行不能作检查
		//wyf	2002-07-26	add	begin
		if (voaItem[i].getStatus() == VOStatus.DELETED) {
			continue;
		}
		//wyf	2002-07-26	add	end
		UFDouble	dCurSummny = voaItem[i].getNsummny() ;
		dSummny = dSummny.add(dCurSummny==null ? VariableConst.ZERO:dCurSummny ) ;
	}
	return	dSummny ;
}

















 /**
 * 作者：王印芬
 * 功能：判断一个发票的所有表体行,累计结算数量与发票数量谁大
 *		该方法为注册函数，用于配于如审批中，作为一个是否可以审批通过的条件。
 *		请不要随意删除及修改
 * 参数：InvoiceVO invVO				发票VO
 * 返回：UFBoolean					是否能通过
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-07-26	wyf		不查库，只统计VO，去掉删除的行
 */
public UFBoolean isSettleFinished(InvoiceVO invVO) throws Exception {

	if( invVO==null || invVO.getHeadVO()==null) {
		return new	UFBoolean(false) ;
	}

	InvoiceItemVO[]	voaItem = invVO.getBodyVO() ;
	int		iLen = voaItem.length ;
	for (int i = 0; i < iLen; i++){
		//删除的行不能作检查
		//wyf	2002-07-26	add	begin
		if (voaItem[i].getStatus() == VOStatus.DELETED) {
			continue;
		}
		//wyf	2002-07-26	add	end
		UFDouble	dAccumSetMny = voaItem[i].getNaccumsettmny()==null ? VariableConst.ZERO : voaItem[i].getNaccumsettmny() ;
		UFDouble	dMny = voaItem[i].getNmoney()==null ? VariableConst.ZERO : voaItem[i].getNmoney() ;
		if(dAccumSetMny.compareTo(dMny) != 0 ){
			return new	UFBoolean(false) ;
		}
	}

	return new	UFBoolean(true) ;
}


/*
if( invVO==null || invVO.getHeadVO()==null) {
		return new	UFBoolean(false) ;
	}

	String	strInvoiceID = invVO.getHeadVO().getCinvoiceid() ;
	if(strInvoiceID==null){
		return new	UFBoolean(false) ;
	}

	//是否结算
	//公用DMO
	nc.bs.pu.pub.PubDMO	dmoPuPub = new	nc.bs.pu.pub.PubDMO() ;
	Object[][]	ob = dmoPuPub.queryResultsFromAnyTable("po_invoice_b",
		new	String[]{"naccumsettmny","nmoney"},
		"cinvoiceid='"+strInvoiceID+"'" ) ;

	double	d1 = 0.0 ;
	double	d2 = 0.0 ;
	if(ob!=null){
		for (int i = 0; i < ob.length; i++){
			d1 = d2 = 0.0 ;
			if(ob[i][0]!=null){
				d1 = new	UFDouble(ob[i][0].toString()).doubleValue() ;
			}
			if(ob[i][1]!=null){
				d2 = new	UFDouble(ob[i][1].toString()).doubleValue() ;
			}
			if(d1!=d2 ){
				throw	new	BusinessException(
					"发票"
				+ 	CommonConstant.BEGIN_MARK
				+	invVO.getHeadVO().getVinvoicecode()
				+	CommonConstant.END_MARK
				+	"未结算完毕！") ;
			}
		}
	}

	return new	UFBoolean(true) ;
*/

/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-8-4)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateIbillStatusAndApproveForHID(
	String	hID,
	int		ibillstatus,
	String	approveID,
	String	approveDate) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateIBillStatusForHID", new Object[]{hID});
	/*************************************************************/

	String sql = "update po_invoice set ibillstatus = " + ibillstatus + ",";
	if(approveID==null){
		sql += "cauditpsn=null," ;
	}else{
		sql += "cauditpsn='" + approveID + "'," ;
	}
	if(approveDate==null){
		sql += "dauditdate=null,taudittime=null" ;
	}else{
		sql += "dauditdate='" + approveDate + "',taudittime='"+(new UFDateTime(new Date())).toString()+"'";
	}
	sql += " WHERE cinvoiceid = '" + hID + "'";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateIBillStatusForHID", new Object[]{hID});
	/*************************************************************/
}

/**
 * 作者：李金巧
 * 功能：完成采购订单保存前的校验：存货与库存组织的对应关系
 *		该方法为平台注册方法，请不要随意删除及修改
 * 参数：OrderVO	采购订单VO
 * 返回：void
 * 例外：
 * 日期：(2002-4-9 18:16:20)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-07-26	王印芬	删除的行不作检查，否则不能通过
 */
public UFBoolean checkCalbAndInv(InvoiceVO vo)
	throws java.sql.SQLException, nc.vo.pub.BusinessException {

	InvoiceHeaderVO head = (InvoiceHeaderVO) vo.getParentVO();
	InvoiceItemVO[] items = (InvoiceItemVO[]) vo.getChildrenVO();

	//库存组织
	String sstoreOrg = head.getCstoreorganization().trim();

	Vector vBaseids = new Vector();
	boolean bflag = true;

	String sql = "select pk_invbasdoc, pk_calbody from bd_produce where dr = 0 and (1< 0";

	//取得存货基本ID
	for (int i = 0; i < items.length; i++) {

		if (items[i].getStatus() == VOStatus.DELETED)
			continue;

		if (vBaseids.indexOf(items[i].getCbaseid()) < 0) {
			vBaseids.addElement(items[i].getCbaseid());
			sql += " or pk_invbasdoc = '" + items[i].getCbaseid() + "'";
		}
	}
	sql += ")";

	boolean[] flag = new boolean[vBaseids.size()];
	for (int i = 0; i < flag.length; i++) {
		flag[i] = false;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		String sorg = null;
		String cbaseid = null;
		int i = 0;
		while (rs.next()) {
			i++;
			cbaseid = rs.getString(1);
			sorg = rs.getString(2);
			if (sorg == null || sorg.trim().length() == 0)
				continue;
			if (sorg.trim().equals(sstoreOrg)) {
				int index = vBaseids.indexOf(cbaseid);
				//vBaseids.remove(cbaseid)
				flag[index] = true;
				//throw new BusinessException("行" + CommonConstant.BEGIN_MARK + i + CommonConstant.END_MARK + "：存货与库存组织不一致！");
			}
		}
		//关闭结果集,即时释放资源
		rs.close();
	} catch (Exception e) {
		if (e instanceof BusinessException)
			throw (BusinessException) e;
		else {
			reportException(e);
			throw new BusinessException(e.getMessage());
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	
	for (int j = 0; j < flag.length; j++) {
		//if(!flag[j] && strLines.length() == 0) strLines += "" + (j + 1);
		if (!flag[j])
			bflag = false;
	}
	return new UFBoolean(bflag);
	//throw new BusinessException ("行" + CommonConstant.BEGIN_MARK + strLines + CommonConstant.END_MARK + "：存货与库存组织不一致！");
}

/**
 * 作者：王印芬
 * 功能：根据一组发票体VO，更新数据库中该组VO对应的DR值
 * 参数：InvoiceItemVO[]	voInvoiceItems			需更新的发票VO数组
 *		 int	dr								需要更新成为的DR值
 * 返回：无
 * 例外：Exception			保存过程中的系统及业务异常
 * 日期：(2002-3-20 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-03-20	wyf		减少与数据库的连接,尽量一次连接进行多个操作,如insert	//wyf	modify/add/delete	2002-03-20	begin/end
 */
public void deleteBIdArrayForHIdArray(String[]	saInvoiceid) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO",	"updateDrForBIDArray(InvoiceItemVO [], int)",new Object[] { saInvoiceid });
	/*************************************************************/

	StringBuffer sbufSQL =
		new StringBuffer("UPDATE po_invoice_b SET dr = 1 WHERE cinvoiceid IN ");
	int iLen = saInvoiceid.length;
	ArrayList<String> listInvoiceHid = new ArrayList<String>();
	for (int i = 0; i < iLen; i++) {
    listInvoiceHid.add(saInvoiceid[i]);
	}

  sbufSQL.append(new TempTableUtil().getSubSql(listInvoiceHid));

	Connection con = null;
	Statement stmt = null;
	try {
		con = getConnection();
		stmt = con.createStatement() ;
		stmt.executeUpdate(sbufSQL.toString());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO",	"updateDrForBIDArray(InvoiceItemVO [], int)",new Object[] { saInvoiceid });
	/*************************************************************/
}

/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-8-4)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteHIdArray(String[] saInvoiceId)
	throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO",	"updateDrForHIDArray(String [], int)",new Object[] { saInvoiceId });
	/*************************************************************/

	StringBuffer sbufSQL =
		new StringBuffer("UPDATE po_invoice SET dr = 1 WHERE cinvoiceid IN (");
	int iLen = saInvoiceId.length;
	for (int i = 0; i < iLen; i++) {
		sbufSQL.append("'");
		sbufSQL.append(saInvoiceId[i]);
		sbufSQL.append("'");
		if (i < iLen - 1) {
			sbufSQL.append(",");
		} else {
			sbufSQL.append(")");
		}
	}

	Connection con = null;
	Statement stmt = null;
	try {
		con = getConnection();
		stmt = con.createStatement() ;
		stmt.executeUpdate(sbufSQL.toString());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO",	"updateDrForHIDArray(String [], int)",new Object[] { saInvoiceId });
	/*************************************************************/
}

/**
 * 根据订单行ID得到该行的累计发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public HashMap findAccumInvoiceNumByScOrderBPKMy(String[] sKeys) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByScOrderBPKMy", new Object[]{sKeys});
	/*************************************************************/

	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT corder_bid,naccuminvoicenum FROM sc_order_b WHERE dr = 0 AND ");

	sql.append(" corder_bid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI001,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");

	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" corder_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String sCorder_bId = rs.getString("corder_bid");
			BigDecimal	ob = rs.getBigDecimal("naccuminvoicenum");
			if(ob!=null)
				hRet.put(sCorder_bId,new UFDouble(ob.doubleValue()));
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findAccumInvoiceNumByScOrderBPKMy", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;
}

/**
 * 作者：汪维敏
 * 功能：根据采购订单行ID得到订单数量、累计发票数量、金额
 * 参数：String[] sCorder_bid 采购订单行ID
 * 返回：无
 * 例外：SQLException
 * 日期：(2001-6-9 12:42:34)
 * 修改日期，修改人，修改原因，注释标志：
 */
public HashMap findInvoiceNum (String[] sKeys) throws SQLException {
	if (sKeys == null || sKeys.length < 1) {
		return null;
	}
	ArrayList<String> list = new ArrayList<String>();
	//去数组重复值
	for (int i = 0; i < sKeys.length; i++) {
		if (!list.contains(sKeys[i]))
			list.add(sKeys[i]);
	}
	sKeys = new String[list.size()];
	list.toArray(sKeys);

    
	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT cinvoice_bid,ninvoicenum,noriginalcurmny,norgnettaxprice,noriginalcurprice,noriginalsummny,ccurrencytypeid,corder_bid,noriginaltaxmny FROM po_invoice_b WHERE dr = 0 AND ");

	sql.append(" corder_bid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI003,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");
	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" cinvoice_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();
		InvoiceItemVO	bodyVO = null ;
		Vector<InvoiceItemVO>	vctBodyVO = new Vector<InvoiceItemVO>() ;
		while (rs.next()) {
			
			bodyVO = new	InvoiceItemVO() ;
			bodyVO.setAttributeValue("cinvoice_bid",rs.getString("cinvoice_bid") );//发票行id
			bodyVO.setAttributeValue("ninvoicenum",new UFDouble(rs.getBigDecimal("ninvoicenum")) );//发票数量
			bodyVO.setAttributeValue("noriginalcurmny",new UFDouble(rs.getBigDecimal("noriginalcurmny")) );//原币无税金额
			bodyVO.setAttributeValue("norgnettaxprice",new UFDouble(rs.getBigDecimal("norgnettaxprice")) );//原币净含税单价
			bodyVO.setAttributeValue("noriginalcurprice",new UFDouble(rs.getBigDecimal("noriginalcurprice")) );//原币无税净单价
			bodyVO.setAttributeValue("noriginalsummny",new UFDouble(rs.getBigDecimal("noriginalsummny")) );//原币价税合计
			bodyVO.setAttributeValue("ccurrencytypeid",rs.getString("ccurrencytypeid") );//原币币种id
			bodyVO.setAttributeValue("corder_bid",rs.getString("corder_bid") );//采购订单行ID
			bodyVO.setAttributeValue("noriginaltaxmny", rs.getString("noriginaltaxmny"));//表体行税额
			vctBodyVO.add(bodyVO);
		}

		//关闭结果集,即时释放资源
		rs.close();
		
		if(vctBodyVO==null||vctBodyVO.size()<1)return null;
		String string = "";
		for (int i = 0; i < sKeys.length; i++) {
			Vector<InvoiceItemVO>	temp = new Vector<InvoiceItemVO>() ;
			for (int ii = 0; ii < vctBodyVO.size(); ii++) {
				string = ((InvoiceItemVO)vctBodyVO.get(ii)).getCorder_bid();
				if(string!=null && string.equalsIgnoreCase(sKeys[i])){
					temp.add((InvoiceItemVO) vctBodyVO.get(ii));
				}
			}
			InvoiceItemVO[] itemVOs = null;
			if(temp.size()>0){
				itemVOs = new InvoiceItemVO[temp.size()]; 
				temp.copyInto(itemVOs);
			}
			hRet.put(sKeys[i], itemVOs);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNum", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;



}

/**
 * 作者：汪维敏
 * 功能：根据采购订单行ID得到订单数量、累计发票数量、金额
 * 参数：String[] sCorder_bid 采购订单行ID
 * 返回：无
 * 例外：SQLException
 * 日期：(2001-6-9 12:42:34)
 * 修改日期，修改人，修改原因，注释标志：
 */
public HashMap findInvoiceNumForStore (String[] sKeys) throws SQLException {
	if (sKeys == null || sKeys.length < 1) {
		return null;
	}
	ArrayList<String> list = new ArrayList<String>();
	//去数组重复值
	for (int i = 0; i < sKeys.length; i++) {
		if (!list.contains(sKeys[i]))
			list.add(sKeys[i]);
	}
	sKeys = new String[list.size()];
	list.toArray(sKeys);

    
	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT cinvoice_bid,ninvoicenum,noriginalcurmny,norgnettaxprice,noriginalcurprice,noriginalsummny,ccurrencytypeid,corder_bid,noriginaltaxmny,cupsourcebillrowid FROM po_invoice_b WHERE dr = 0 AND ");

	sql.append(" corder_bid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI003,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");
	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" cinvoice_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();
		InvoiceItemVO	bodyVO = null ;
		Vector<InvoiceItemVO>	vctBodyVO = new Vector<InvoiceItemVO>() ;
		while (rs.next()) {
			
			bodyVO = new	InvoiceItemVO() ;
			bodyVO.setAttributeValue("cinvoice_bid",rs.getString("cinvoice_bid") );//发票行id
			bodyVO.setAttributeValue("ninvoicenum",new UFDouble(rs.getBigDecimal("ninvoicenum")) );//发票数量
			bodyVO.setAttributeValue("noriginalcurmny",new UFDouble(rs.getBigDecimal("noriginalcurmny")) );//原币无税金额
			bodyVO.setAttributeValue("norgnettaxprice",new UFDouble(rs.getBigDecimal("norgnettaxprice")) );//原币净含税单价
			bodyVO.setAttributeValue("noriginalcurprice",new UFDouble(rs.getBigDecimal("noriginalcurprice")) );//原币无税净单价
			bodyVO.setAttributeValue("noriginalsummny",new UFDouble(rs.getBigDecimal("noriginalsummny")) );//原币价税合计
			bodyVO.setAttributeValue("ccurrencytypeid",rs.getString("ccurrencytypeid") );//原币币种id
			bodyVO.setAttributeValue("corder_bid",rs.getString("corder_bid") );//采购订单行ID
			bodyVO.setAttributeValue("noriginaltaxmny", rs.getString("noriginaltaxmny"));//表体行税额
			bodyVO.setAttributeValue("cupsourcebillrowid",rs.getString("cupsourcebillrowid") );//入库单行ID
			vctBodyVO.add(bodyVO);
		}

		//关闭结果集,即时释放资源
		rs.close();
		
		if(vctBodyVO==null||vctBodyVO.size()<1)return null;
		String string = "";
		for (int i = 0; i < sKeys.length; i++) {
			Vector<InvoiceItemVO>	temp = new Vector<InvoiceItemVO>() ;
			for (int ii = 0; ii < vctBodyVO.size(); ii++) {
				string = ((InvoiceItemVO)vctBodyVO.get(ii)).getCorder_bid();
				if(string!=null && string.equalsIgnoreCase(sKeys[i])){
					temp.add((InvoiceItemVO) vctBodyVO.get(ii));
				}
			}
			InvoiceItemVO[] itemVOs = null;
			if(temp.size()>0){
				itemVOs = new InvoiceItemVO[temp.size()]; 
				temp.copyInto(itemVOs);
			}
			if(null!=itemVOs && itemVOs.length>0)
			  hRet.put(sKeys[i], itemVOs);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNum", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;



}

/**
 * 作者：汪维敏
 * 功能：根据采购订单行ID得到订单数量、累计发票数量、金额
 * 参数：String[] sCorder_bid 采购订单行ID
 * 返回：无
 * 例外：SQLException
 * 日期：(2001-6-9 12:42:34)
 * 修改日期，修改人，修改原因，注释标志：
 */
public HashMap findInvoiceNumStore (String[] sKeys) throws SQLException {
	if (sKeys == null || sKeys.length < 1) {
		return null;
	}
	ArrayList<String> list = new ArrayList<String>();
	//去数组重复值
	for (int i = 0; i < sKeys.length; i++) {
		if (!list.contains(sKeys[i]))
			list.add(sKeys[i]);
	}
	sKeys = new String[list.size()];
	list.toArray(sKeys);

    
	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT cinvoice_bid,ninvoicenum,noriginalcurmny,norgnettaxprice,noriginalcurprice,noriginalsummny,ccurrencytypeid,cupsourcebillrowid,noriginaltaxmny，corder_bid FROM po_invoice_b WHERE dr = 0 AND ");

	sql.append(" cupsourcebillrowid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI003,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");
	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" cinvoice_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();
		InvoiceItemVO	bodyVO = null ;
		Vector<InvoiceItemVO>	vctBodyVO = new Vector<InvoiceItemVO>() ;
		while (rs.next()) {
			
			bodyVO = new	InvoiceItemVO() ;
			bodyVO.setAttributeValue("cinvoice_bid",rs.getString("cinvoice_bid") );//发票行id
			bodyVO.setAttributeValue("ninvoicenum",new UFDouble(rs.getBigDecimal("ninvoicenum")) );//发票数量
			bodyVO.setAttributeValue("noriginalcurmny",new UFDouble(rs.getBigDecimal("noriginalcurmny")) );//原币无税金额
			bodyVO.setAttributeValue("norgnettaxprice",new UFDouble(rs.getBigDecimal("norgnettaxprice")) );//原币净含税单价
			bodyVO.setAttributeValue("noriginalcurprice",new UFDouble(rs.getBigDecimal("noriginalcurprice")) );//原币无税净单价
			bodyVO.setAttributeValue("noriginalsummny",new UFDouble(rs.getBigDecimal("noriginalsummny")) );//原币价税合计
			bodyVO.setAttributeValue("ccurrencytypeid",rs.getString("ccurrencytypeid") );//原币币种id
			bodyVO.setAttributeValue("cupsourcebillrowid",rs.getString("cupsourcebillrowid") );//入库单行ID
			bodyVO.setAttributeValue("noriginaltaxmny", rs.getString("noriginaltaxmny"));//表体行税额
			bodyVO.setAttributeValue("corder_bid",rs.getString("corder_bid") );//采购订单行ID
			vctBodyVO.add(bodyVO);
		}

		//关闭结果集,即时释放资源
		rs.close();
		
		if(vctBodyVO==null||vctBodyVO.size()<1)return null;
		String string = "";
		for (int i = 0; i < sKeys.length; i++) {
			Vector<InvoiceItemVO>	temp = new Vector<InvoiceItemVO>() ;
			for (int ii = 0; ii < vctBodyVO.size(); ii++) {
				string = ((InvoiceItemVO)vctBodyVO.get(ii)).getCupsourcebillrowid();
				if(string!=null && string.equalsIgnoreCase(sKeys[i])){
					temp.add((InvoiceItemVO) vctBodyVO.get(ii));
				}
			}
			InvoiceItemVO[] itemVOs = null;
			if(temp.size()>0){
				itemVOs = new InvoiceItemVO[temp.size()]; 
				temp.copyInto(itemVOs);
			}
			hRet.put(sKeys[i], itemVOs);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNum", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;



}
/**
 * 根据发票行ID得到该行的发票数量
 *
 * 创建日期：(2001-6-18)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 * <p>
 * <p>For V56 修改返回值结构
 * <p>＜发票表体ID,{数量,原币价税合计}＞
 */
public HashMap findInvoiceNumByInvoiceBPKMy(String[] sKeys) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{sKeys});
	/*************************************************************/
	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT cinvoice_bid,ninvoicenum,noriginalsummny FROM po_invoice_b WHERE dr = 0 AND ");

	sql.append(" cinvoice_bid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI002,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");
	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" cinvoice_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String sCinvoice_bId = rs.getString("cinvoice_bid");
			List<UFDouble> colValues=new ArrayList<UFDouble>();
			BigDecimal	ob = rs.getBigDecimal("ninvoicenum");
			colValues.add(new UFDouble(ob.doubleValue()));
			ob = rs.getBigDecimal("noriginalsummny");
			colValues.add(new UFDouble(ob.doubleValue()));
			if(ob!=null)
				hRet.put(sCinvoice_bId,colValues);
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;
}

public HashMap findInvoiceNumByInvoiceBPKMyForIc2In(String[] sKeys) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{sKeys});
	/*************************************************************/
	HashMap hRet = new HashMap();
	StringBuffer sql = new StringBuffer();
	sql.append("SELECT cinvoice_bid,ninvoicenum,nreasonwastenum FROM po_invoice_b WHERE dr = 0 AND ");

	sql.append(" cinvoice_bid in ");
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sKeys,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI002,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql.append(strIdsSet + " ");
	//for(int i = 0;i < sKeys.length;i++){
		//sql.append(" cinvoice_bid='");
		//sql.append(sKeys[i]);
		//sql.append("'");
		//if(i < sKeys.length - 1)
			//sql.append(" or ");
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String sCinvoice_bId = rs.getString("cinvoice_bid");
			UFDouble d1 = new UFDouble(0), d2 = new UFDouble(0);
			Object	ob = rs.getObject("ninvoicenum");
			if(ob != null) d1 = new UFDouble(ob.toString());
			ob = rs.getObject("nreasonwastenum");
			if(ob != null) d2 = new UFDouble(ob.toString());			
			hRet.put(sCinvoice_bId,new UFDouble[]{d1,d2});
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceNumByInvoiceBPK", new Object[]{sKeys});
	/*************************************************************/

	return hRet ;
}
 /**
 * 作者：王印芬
 * 功能：通过查询条件得到发票的VO数组
 * 参数：
 *		String	strFromWhere			FROM及WHERE后的字符串
 * 返回：InvoiceVO[]						符合条件的发票VO数组
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-06-12	wyf		换用另外一种方法查询	原先的方法于方法后的注释中,只要COPY即可使用
 *						主要用于比较两种方法的速度
 * 2002-07-26	wyf		修改查询表体未滤掉dr=1的行的问题
 */
public InvoiceVO[] findInvoiceVOsByAllItems(
	String strFromWhere
	) throws SQLException {


	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	//==============构造语句
	//主表
	StringBuffer	sbufHeadSQL = new	StringBuffer("SELECT distinct ") ;
	String[]	saHField = InvoiceHeaderVO.getDbFields() ;
	int	iHLen = saHField.length ;
	for (int i = 0; i < iHLen-1; i++){
		sbufHeadSQL.append( "po_invoice." ) ;
		sbufHeadSQL.append( saHField[i] ) ;
		sbufHeadSQL.append( "," ) ;
	}
	sbufHeadSQL.append( "po_invoice." + saHField[iHLen-1] + " " + strFromWhere ) ;


	//子表
	StringBuffer	sbufBodySQL = new	StringBuffer("SELECT ") ;
	String[]	saBField = InvoiceItemVO.getDbFields() ;
	int	iBLen = saBField.length ;
	for (int i = 0; i < iBLen-1; i++){
		sbufBodySQL.append( "po_invoice_b." ) ;
		sbufBodySQL.append( saBField[i] ) ;
		sbufBodySQL.append( "," ) ;
	}
	sbufBodySQL.append( "po_invoice_b." + saBField[iBLen-1]  ) ;
	//==================准备查询

	Connection 	con = null;
	Statement	stmt = null;
	ResultSet 	rs = null ;
	Hashtable	voTable1 = new	Hashtable() ;
	try {
		con = getConnection();
		stmt = con.createStatement();
		Vector headIDsV = new Vector();

		//==================查询表头
		//String	sHeadSql = "SELECT " + sSqlHeadSelect + " " + strFromWhere ;
		//rs = stmt.executeQuery(sHeadSql);
		rs = stmt.executeQuery(sbufHeadSQL.toString());

		//表头ID		1　OR　2
		
		while (rs.next()) {
			Object	ob = rs.getObject(1);
			InvoiceHeaderVO	headVO = new	InvoiceHeaderVO() ;
			headVO.setPrimaryKey(ob.toString()) ;
			for(int	i=1;i<saHField.length;i++){
				ob = rs.getObject(i+1);
				if(ob==null || ob.toString().trim().equals("") ){
					headVO.setAttributeValue(saHField[i],null );
				}else	if(ob.getClass().equals(String.class)){
					headVO.setAttributeValue(saHField[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					headVO.setAttributeValue(saHField[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
						headVO.setAttributeValue(saHField[i],null );
					else
						headVO.setAttributeValue(saHField[i],new	UFDouble(ob.toString()) );
				}
			}
			//表头加入到哈希表中
			Vector	voVEC = new	Vector() ;
			voVEC.addElement(headVO) ;
			voTable1.put(headVO.getCinvoiceid(),voVEC) ;

			//ljq modify begin
			//if (sbufHId.length()==0) {
				////sbufHId.append(" WHERE cinvoiceid = '" + headVO.getCinvoiceid() + "'") ;
				//sbufHId.append(" WHERE po_invoice_b.dr=0 AND (cinvoiceid = '" + headVO.getCinvoiceid() + "'") ;
			//}else{
				//sbufHId.append(" OR cinvoiceid = '" + headVO.getCinvoiceid() + "'") ;
			//}

			headIDsV.addElement(headVO.getCinvoiceid());


			//ljq modify end
		}

		//==================查询表体
		if (voTable1.size()>0){

			//ljq modify begin，对发票表体分批查询
            String[] invoiceids = new String[headIDsV.size()];
            headIDsV.copyInto(invoiceids);
            /*del by Rale ora查询条件超过1000时会出错*/
            /*begin*/
			//对表头ID条件进行拆分
			//String[] strArray = nc.bs.pu.pub.PubDMO.splitCondsByNormalSize("po_invoice_b.cinvoiceid", headIDsV);
            /*end*/
//			String strIdsSet = "";
//			try {
//				nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
//				strIdsSet = tmpTblDmo.insertTempTable(invoiceids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI010,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//				if (strIdsSet == null || strIdsSet.trim().length() == 0)
//					strIdsSet = "('TempTableDMOError')";
//			} catch (Exception e) {
//				throw new SQLException(e.getMessage());
//			}
			
			//if(strArray == null && strArray.length == 0) return null;
			//sbufHId.append(")") ;
			//String	sBodySql = "SELECT " + sSqlBodySelect + " FROM po_invoice_b" + sbufHId ;
			sbufBodySQL.append( " FROM po_invoice_b where po_invoice_b.dr=0") ;
			for(int k = 0; k < headIDsV.size(); k ++){
				rs = stmt.executeQuery(sbufBodySQL.toString() + " and (po_invoice_b.cinvoiceid in('" + headIDsV.get(k) + "'))");

				
				while (rs.next()) {
					//表体
					InvoiceItemVO	bodyVO = new	InvoiceItemVO() ;
					for(int	i=0;i<saBField.length;i++){
						Object	ob = rs.getObject(i+1);
						if(ob==null || ob.toString().trim().equals("") ){
							bodyVO.setAttributeValue(saBField[i],null );
						}else	if(ob.getClass().equals(String.class)){
							bodyVO.setAttributeValue(saBField[i],ob.toString().trim() );
						}else	if(ob.getClass().equals(Integer.class)){
							bodyVO.setAttributeValue(saBField[i],ob );
						}else	if(ob.getClass().equals(BigDecimal.class)){
							if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
								bodyVO.setAttributeValue(saBField[i],null );
							else
								bodyVO.setAttributeValue(saBField[i],new	UFDouble(ob.toString()) );
						}
					}
					////含税单价
					//if(bodyVO.getNinvoicenum()!=null && bodyVO.getNinvoicenum().doubleValue()!=0.0){
						//bodyVO.setNoriginalcurpriceinctax(bodyVO.getNoriginalsummny().div(bodyVO.getNinvoicenum())) ;
					//}

					//表体加入哈希表
					((Vector)voTable1.get(bodyVO.getCinvoiceid())).addElement(bodyVO) ;
				}
			}
		}

		//关闭结果集,即时释放资源
		rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}

	}


	InvoiceVO[] allVOs1 = null;
	if (voTable1.size() > 0) {
		allVOs1 = new InvoiceVO[voTable1.size()];
		Enumeration	elems = voTable1.elements() ;
		int	i = 0 ;
		while(elems.hasMoreElements()){
			Vector	vec = (Vector)elems.nextElement() ;
			int	len = vec.size()-1 ;

			InvoiceHeaderVO	headVO = (InvoiceHeaderVO)vec.elementAt(0) ;
			InvoiceItemVO[]	itemVOs = new	InvoiceItemVO[len] ;
			vec.removeElementAt(0) ;
			vec.copyInto(itemVOs) ;

			//币种,折本及折辅汇率
			headVO.setCcurrencytypeid(itemVOs[0].getCcurrencytypeid()) ;
			headVO.setNexchangeotobrate(itemVOs[0].getNexchangeotobrate()) ;
			//headVO.setNexchangeotoarate(itemVOs[0].getNexchangeotoarate()) ;

			//设置VO
			allVOs1[i] = new	InvoiceVO(len);
			allVOs1[i].setParentVO(headVO) ;
			allVOs1[i].setChildrenVO(itemVOs) ;

			i++ ;
		}
	}


	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	return allVOs1;
}

 /**
 * 作者：王印芬
 * 功能：通过查询条件得到发票的VO数组
 * 参数：
 *		String	strFromWhere			FROM及WHERE后的字符串
 * 返回：InvoiceVO[]						符合条件的发票VO数组
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-06-12	wyf		换用另外一种方法查询	原先的方法于方法后的注释中,只要COPY即可使用
 *						主要用于比较两种方法的速度
 * 2002-07-26	wyf		修改查询表体未滤掉dr=1的行的问题
 * 2003-02-24	fangy	修改为:将表体中的币种一次读出,不分开读.
 */
public InvoiceVO[] findInvoiceVOsByNoneItems(
	String strFromWhere
	) throws SQLException {


	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	//==============构造语句
	//主表
	StringBuffer	sbufHeadSQL = new	StringBuffer("SELECT distinct ") ;
	String[]	saHField = InvoiceHeaderVO.getDbFields() ;
	int	iHLen = saHField.length ;
	for (int i = 0; i < iHLen ; i++){
		
		sbufHeadSQL.append( "po_invoice." ) ;
		sbufHeadSQL.append( saHField[i] ) ;
		if(i<iHLen-1){
		sbufHeadSQL.append( "," ) ;
		}else{
		sbufHeadSQL.append( " " ) ;	
		}
	}

	sbufHeadSQL.append( strFromWhere );
//	sbufHeadSQL.append( strFromWhere );

	//子表
	StringBuffer	sbufBodySQL = new	StringBuffer("SELECT ") ;
	String[]	saBField = InvoiceItemVO.getDbFields() ;
	int	iBLen = saBField.length ;
	for (int i = 0; i < iBLen-1; i++){
		sbufBodySQL.append( "po_invoice_b." ) ;
		sbufBodySQL.append( saBField[i] ) ;
		sbufBodySQL.append( "," ) ;
	}
	sbufBodySQL.append( "po_invoice_b." + saBField[iBLen-1]  ) ;
	
	//==================准备查询
	Connection 	con = null;
	Statement	stmt = null;
	ResultSet 	rs = null ;
	Vector	v = new	Vector() ;
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sbufHeadSQL.toString());

		//表头ID		1　OR　2
		//StringBuffer	sbufHId = new	StringBuffer("") ;
		while (rs.next()) {
			Object	ob = rs.getObject(1);
			InvoiceHeaderVO	headVO = new	InvoiceHeaderVO() ;
			headVO.setPrimaryKey(ob.toString()) ;
			for(int	i=1;i<saHField.length;i++){
				ob = rs.getObject(i+1);
				if(ob==null || ob.toString().trim().equals("") ){
					headVO.setAttributeValue(saHField[i],null );
				}else	if(ob.getClass().equals(String.class)){
					headVO.setAttributeValue(saHField[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					headVO.setAttributeValue(saHField[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
						headVO.setAttributeValue(saHField[i],null );
					else
						headVO.setAttributeValue(saHField[i],new	UFDouble(ob.toString()) );
				}
			}

//			//fangy added 2003-02-24 begin
//			//设置折本汇率
//			BigDecimal nexchangeotobrate = null;
//			ob = rs.getObject(saHField.length + 1);
//			if(ob != null&& ob.toString().trim().length() > 0){
//				nexchangeotobrate = (BigDecimal)ob;
//				headVO.setNexchangeotobrate(new UFDouble(nexchangeotobrate));
//			}
//			else{
//				headVO.setNexchangeotobrate(null);
//			    //fangy added 2003-02-24 end
//			}
//			
//			//币种
//			String ccurrencytypeid = null;
//			ob = rs.getObject(saHField.length + 2);
//			if(ob != null && ob.toString().trim().length() > 0){
//			 ccurrencytypeid = (String)ob;
//			 headVO.setCcurrencytypeid(ccurrencytypeid);
//			}
//			else{
//				headVO.setCcurrencytypeid(null);
//			    //fangy added 2003-02-24 end
//			}
			InvoiceVO vo = new InvoiceVO();
			vo.setParentVO(headVO);
			v.addElement(vo);
		}

		/*
		//==================查询表体
		if (voTable1.size()>0){

			//ljq modify begin，对发票表体分批查询

			//对表头ID条件进行拆分
			String[] strArray = nc.bs.pu.pub.PubDMO.splitCondsByNormalSize("po_invoice_b.cinvoiceid", headIDsV);
			if(strArray == null && strArray.length == 0) return null;
			//sbufHId.append(")") ;
			//String	sBodySql = "SELECT " + sSqlBodySelect + " FROM po_invoice_b" + sbufHId ;
			sbufBodySQL.append( " FROM po_invoice_b where po_invoice_b.dr=0") ;
			for(int k = 0; k < strArray.length; k ++){
				rs = stmt.executeQuery(sbufBodySQL.toString() + " and " + strArray[k]);

				String	curKey = null ;
				while (rs.next()) {
					//表体
					InvoiceItemVO	bodyVO = new	InvoiceItemVO() ;
					for(int	i=0;i<saBField.length;i++){
						Object	ob = rs.getObject(i+1);
						if(ob==null || ob.toString().trim().equals("") ){
							bodyVO.setAttributeValue(saBField[i],null );
						}else	if(ob.getClass().equals(String.class)){
							bodyVO.setAttributeValue(saBField[i],ob.toString().trim() );
						}else	if(ob.getClass().equals(Integer.class)){
							bodyVO.setAttributeValue(saBField[i],ob );
						}else	if(ob.getClass().equals(BigDecimal.class)){
							if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
								bodyVO.setAttributeValue(saBField[i],null );
							else
								bodyVO.setAttributeValue(saBField[i],new	UFDouble(ob.toString()) );
						}
					}
					//含税单价
					if(bodyVO.getNinvoicenum()!=null && bodyVO.getNinvoicenum().doubleValue()!=0.0){
						bodyVO.setNoriginalcurpriceinctax(bodyVO.getNoriginalsummny().div(bodyVO.getNinvoicenum())) ;
					}

					//表体加入哈希表
					((Vector)voTable1.get(bodyVO.getCinvoiceid())).addElement(bodyVO) ;
				}
			}
		}

		*/

		//关闭结果集,即时释放资源
		rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*
	InvoiceVO[] allVOs1 = null;
	if (voTable1.size() > 0) {
		allVOs1 = new InvoiceVO[voTable1.size()];
		Enumeration	elems = voTable1.elements() ;
		int	i = 0 ;
		while(elems.hasMoreElements()){
			Vector	vec = (Vector)elems.nextElement() ;
			int	len = vec.size()-1 ;

			InvoiceHeaderVO	headVO = (InvoiceHeaderVO)vec.elementAt(0) ;
			InvoiceItemVO[]	itemVOs = new	InvoiceItemVO[len] ;
			vec.removeElementAt(0) ;
			vec.copyInto(itemVOs) ;

			//币种,折本及折辅汇率
			headVO.setCcurrencytypeid(itemVOs[0].getCcurrencytypeid()) ;
			headVO.setNexchangeotobrate(itemVOs[0].getNexchangeotobrate()) ;
			headVO.setNexchangeotoarate(itemVOs[0].getNexchangeotoarate()) ;

			//设置VO
			allVOs1[i] = new	InvoiceVO(len);
			allVOs1[i].setParentVO(headVO) ;
			allVOs1[i].setChildrenVO(itemVOs) ;

			i++ ;

		}
	}
	*/
	InvoiceVO[] vos = null;
	if(v.size()>0) {
		vos = new InvoiceVO[v.size()];
		v.copyInto(vos);
	}

	//为第一个InvoiceVO查询表体InvoiceItemVO[]
	//if(vos!=null) {
		//String  key = ((InvoiceHeaderVO)vos[0].getParentVO()).getCinvoiceid();
		//vos[0].setChildrenVO(findItemsForHeader(key));
	//}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findInvoiceVOsByCondsMy", new Object[]{strFromWhere});
	/*************************************************************/

	return vos;
}

 /**
 * 作者：汪维敏
 * 功能：通过发票主键查询符合条件的体VO数组
 * 参数：
 *		String	key						发票ID
 * 返回：HashMap
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-08-02	wyf		修改对BigDecimal的取法
 */
public HashMap findItemsByPrimaryKeys(String[] keys) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "findItemsByPrimaryKeys", new Object[]{keys});
	/*************************************************************/

	//输入条件合法性判断
	if(keys == null || keys.length == 0)
		return null;

	HashMap hRet = new HashMap();

	//构建or条件语句. 如:and (corderid ='xxxx' or corderid='yyyy')
	String wherePart = " and (cinvoiceid = '" + keys[0] +"'";
	for(int i=1;i<keys.length;i++) {
		wherePart += " or cinvoiceid = '"+keys[i]+"'";
	}
	wherePart +=")";

	//子表字段构造
	StringBuffer sbufBodySQL = new StringBuffer("SELECT ") ;
	String[] saBField = InvoiceItemVO.getDbFields() ;
	int	iBLen = saBField.length ;
	for (int i = 0; i < iBLen-1; i++){
		sbufBodySQL.append( "po_invoice_b." ) ;
		sbufBodySQL.append( saBField[i] ) ;
		sbufBodySQL.append( "," ) ;
	}
	sbufBodySQL.append( "po_invoice_b." + saBField[iBLen-1]+ " ") ;
	sbufBodySQL.append( "from po_invoice_b where dr = 0 "+ wherePart);

	//查询
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sbufBodySQL.toString());
		ResultSet rs = stmt.executeQuery();
		String sCinvoiceId = "";
		//
		while (rs.next()) {
			//表体
			InvoiceItemVO bodyVO = new InvoiceItemVO() ;
			for(int	i=0;i<saBField.length;i++){
				Object	ob = rs.getObject(i+1);
				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(saBField[i],null );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(saBField[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bodyVO.setAttributeValue(saBField[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
						bodyVO.setAttributeValue(saBField[i],null );
					else
						bodyVO.setAttributeValue(saBField[i],new UFDouble(ob.toString()) );
				}
			}
			if(sCinvoiceId.trim().length() <= 0){
				ArrayList arr = new ArrayList();
				arr.add(bodyVO);
				sCinvoiceId = bodyVO.getCinvoiceid();
				hRet.put(sCinvoiceId,arr);
			}else if(hRet.containsKey(bodyVO.getCinvoiceid())){
				ArrayList arr = (ArrayList)hRet.get(bodyVO.getCinvoiceid());
				arr.add(bodyVO);
			}else{
				ArrayList arr = new ArrayList();
				arr.add(bodyVO);
				sCinvoiceId = bodyVO.getCinvoiceid();
				hRet.put(sCinvoiceId,arr);
			}
		}
		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	HashMap hResult = new HashMap();
	InvoiceItemVO[] invoiceItems = null;
	for(int i = 0;i < keys.length;i++){
		ArrayList arr = (ArrayList)hRet.get(keys[i]);
		if(arr == null || arr.size() <= 0)
			continue;
		invoiceItems = new InvoiceItemVO[arr.size()];
		arr.toArray(invoiceItems);
		hResult.put(keys[i],invoiceItems);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findItemsByPrimaryKeys", new Object[]{keys});
	/*************************************************************/

	return hResult;
}

 /**
 * 作者：王印芬
 * 功能：通过发票主键查询符合条件的体VO数组
 * 参数：
 *		String	key						发票ID
 * 返回：InvoiceItemVO[]					体VO数组
 * 例外：SQLException					SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-04-10	wyf		加入TS的查询	wyf	add	2002-04-10	b/e
 * 2002-08-02	wyf		修改对BigDecimal的取法
 */
public InvoiceItemVO[] findItemsForHeaders(String[] keys) throws SQLException {

	//输入条件合法性判断
	if(keys == null || keys.length == 0)
		return null;

	//构建or条件语句. 如:and cinvoiceid in (select ****)
	String wherePart = " and cinvoiceid in ";
  wherePart += new TempTableUtil().getSubSql(keys);

	//子表字段构造
	StringBuffer	sbufBodySQL = new	StringBuffer("SELECT ") ;
	String[]	saBField = InvoiceItemVO.getDbFields() ;
	int	iBLen = saBField.length ;
	for (int i = 0; i < iBLen-1; i++){
		sbufBodySQL.append( "po_invoice_b." ) ;
		sbufBodySQL.append( saBField[i] ) ;
		sbufBodySQL.append( "," ) ;
	}
	sbufBodySQL.append( "po_invoice_b." + saBField[iBLen-1]+ " ") ;
	sbufBodySQL.append( "from po_invoice_b where dr = 0 "+ wherePart);

	//查询
	InvoiceItemVO[] invoiceItems = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sbufBodySQL.toString());
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			//表体
			InvoiceItemVO	bodyVO = new	InvoiceItemVO() ;
			for(int	i=0;i<saBField.length;i++){
				Object	ob = rs.getObject(i+1);
				if(ob==null || ob.toString().trim().equals("") ){
					bodyVO.setAttributeValue(saBField[i],null );
				}else	if(ob.getClass().equals(String.class)){
					bodyVO.setAttributeValue(saBField[i],ob.toString().trim() );
				}else	if(ob.getClass().equals(Integer.class)){
					bodyVO.setAttributeValue(saBField[i],ob );
				}else	if(ob.getClass().equals(BigDecimal.class)){
					if( new	UFDouble(ob.toString()).doubleValue()==0.0 )
						bodyVO.setAttributeValue(saBField[i],null );
					else
						bodyVO.setAttributeValue(saBField[i],new	UFDouble(ob.toString()) );
				}
			}
			////含税单价
			//if(bodyVO.getNinvoicenum()!=null && bodyVO.getNinvoicenum().doubleValue()!=0.0){
				//bodyVO.setNoriginalcurpriceinctax(bodyVO.getNoriginalsummny().div(bodyVO.getNinvoicenum())) ;
			//}
			v.add(bodyVO);
		}
		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	invoiceItems = new InvoiceItemVO[v.size()];
	if (v.size() > 0){
		v.copyInto(invoiceItems);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "findItemsForHeaders", new Object[]{keys});
	/*************************************************************/

	return invoiceItems;
}

/**
 * 作者：王印芬
 * 功能：得到关闭的BEAN
 *		请注意：	该方法必须与remove方法成对使用!
 * 参数：无
 * 返回：nc.bs.po.close.PoClose		合同本地BEAN
 * 例外：RemoteException			其中包裹BusinessException及SystemException异常
 * 日期：(2003-12-03 12:42:34)
 * 修改日期，修改人，修改原因，注释标志：
 */
private PoCloseImpl getBean_PoClose() throws BusinessException {

	String	sMethodName = "nc.bs.po.OrderImpl.getBean_PoClose()" ;

	nc.bs.po.close.PoCloseImpl bean = null;
	try {
		bean = new nc.bs.po.close.PoCloseImpl();
	}catch (Exception	e1) {
		reportException(e1) ;
		PubDMO.throwBusinessException(sMethodName,e1) ;
	}
	return bean ;
}

/**
 * 作者:汪维敏
 * 功能描述:从物料生产档案获取计划价
 * 输入参数:存货基础档案ID，库存组织Id
 * 返回值:计划价格
 * 异常处理:SQLException
 * 日期:
 * 修改日期:
 * @return nc.vo.pub.lang.UFDouble
 */
public HashMap getPlanPricesForPr(String sBaseIds[],String sStoreOrgId,String sCorpId) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "getPlanPriceForPr", new Object[]{sBaseIds,sStoreOrgId,sCorpId});
	/*************************************************************/
	//判断参数有效性
	if(sBaseIds == null || sBaseIds.length == 0 || sStoreOrgId == null)
		return null;
	//构造sql语句
	StringBuffer sbSql = new StringBuffer();
	sbSql.append("select pk_invbasdoc,jhj from bd_produce where pk_invbasdoc in ");

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sBaseIds,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI010,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sbSql.append(strIdsSet + " ");
	//for(int i = 0;i < sBaseIds.length - 1;i++){
		//sbSql.append(sBaseIds[i]);
		//sbSql.append("' or pk_invbasdoc='");
	//}
	//sbSql.append(sBaseIds[ sBaseIds.length - 1]);
	//sbSql.append("')");
	sbSql.append(" and pk_calbody='");
	sbSql.append(sStoreOrgId);
	sbSql.append("'");
	sbSql.append(" and pk_corp='");
	sbSql.append(sCorpId);
	sbSql.append("'");

	//存放存货基础档案主键、计划价值对
	HashMap hResult = new HashMap();
	//存货管理档案主键
	String sPk_invbasedoc = null;
	//计划价
	UFDouble uPlanPrice = null;
	//临时变量
	Object oTemp = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = this.getConnection();
		stmt = con.prepareStatement(sbSql.toString());
		rs = stmt.executeQuery();
		while(rs.next())
		{
			oTemp = rs.getObject("pk_invbasdoc");
			if(oTemp != null)
				sPk_invbasedoc = oTemp.toString();
			else
				continue;
			oTemp = rs.getObject("jhj");
			if(oTemp != null)
				uPlanPrice = new UFDouble(oTemp.toString());
			else
				uPlanPrice = null;
			hResult.put(sPk_invbasedoc,uPlanPrice);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}catch (Exception e) {}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "getPlanPriceForPr", new Object[]{sBaseIds,sStoreOrgId,sCorpId});
	/*************************************************************/

	return hResult;
}

/**
 * 作者:汪维敏
 * 功能描述:从存货管理档案获取计划价
 * 输入参数:存货基础档案ID，公司Id
 * 返回值:计划价格
 * 异常处理:SQLException
 * 日期:
 * 修改日期:
 * @return nc.vo.pub.lang.UFDouble
 */
public HashMap getPlanPricesFrmInvMan(String sBaseIds[],String sCorpId) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "getPlanPriceForPr", new Object[]{sBaseIds,sCorpId});
	/*************************************************************/
	//判断参数有效性
	if(sBaseIds == null || sBaseIds.length == 0)
		return null;
	//构造sql语句
	StringBuffer sbSql = new StringBuffer();
	sbSql.append("select pk_invbasdoc,pk_invmandoc,planprice from bd_invmandoc where pk_invbasdoc in ");

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sBaseIds,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI009,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sbSql.append(strIdsSet + " ");

	sbSql.append(" and pk_corp='");
	sbSql.append(sCorpId);
	sbSql.append("'");

	//存放存货基础档案主键、计划价值对
	HashMap hResult = new HashMap();
	//存货管理档案主键
	String sPk_invbasedoc = null;
	//计划价
	UFDouble uPlanPrice = null;
	//临时变量
	Object oTemp = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = this.getConnection();
		stmt = con.prepareStatement(sbSql.toString());
		rs = stmt.executeQuery();
		while(rs.next())
		{
			oTemp = rs.getObject("pk_invbasdoc");
			if(oTemp != null)
				sPk_invbasedoc = oTemp.toString();
			else
				continue;
			oTemp = rs.getObject("planprice");
			if(oTemp != null)
				uPlanPrice = new UFDouble(oTemp.toString());
			else
				uPlanPrice = null;
			hResult.put(sPk_invbasedoc,uPlanPrice);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}catch (Exception e) {}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "getPlanPriceForPr", new Object[]{sBaseIds,sCorpId});
	/*************************************************************/

	return hResult;
}

/**
 * 作者：汪维敏
 * 功能：用于升级入库单累计开票数量的接口
 * 参数：无
 * 返回：nc.vo.scm.puic.ParaPoToIcLendRewriteVO[]
 * 例外：SQLException
 * 日期：(2004-3-2 11:51:50)
 */
public nc.vo.scm.puic.ParaPoToIcLendRewriteVO[] getPuSignNums() throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "getPuSignNums", new Object[]{});
	/*************************************************************/
	nc.vo.scm.puic.ParaPoToIcLendRewriteVO[] vos = null;
	nc.vo.scm.puic.ParaPoToIcLendRewriteVO vo = null;
	ArrayList arrResult = new ArrayList();
	StringBuffer sbSql = new StringBuffer();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		sbSql.append( "select sum(ninvoicenum),cupsourcebillrowid from po_invoice_b where cupsourcebillrowid in");
		sbSql.append("(select cgeneralbid from ic_general_b where dr = 0) and dr = 0 group by cupsourcebillrowid");
		con = getConnection();
		stmt = con.prepareStatement(sbSql.toString());
		rs = stmt.executeQuery();
		while(rs.next()){
			vo = new nc.vo.scm.puic.ParaPoToIcLendRewriteVO();
			Object o = rs.getObject(1);
			if(o != null)
				vo.setDSubNum(new UFDouble(o.toString()));
			vo.setCRowID(rs.getString(2));
			arrResult.add(vo);
		}
		int size = arrResult.size();
		if(size > 0){
			vos = new nc.vo.scm.puic.ParaPoToIcLendRewriteVO[size];
			arrResult.toArray(vos);
		}
	}
	finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "getPuSignNums", new Object[]{});
	/*************************************************************/

	return vos;
}

/**
 * 作者：方益
 * 功能：批处理插入操作
 * 参数：InvoiceItemVO[] invoiceItem		发票表体VO
 * 返回：String[]							插入的表体的cinvoice_bid数组
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 */
public String[] insertItems(InvoiceItemVO[] invoiceItems) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insertItems", new Object[]{invoiceItems});
	/*************************************************************/

	StringBuffer sql = new StringBuffer();
	sql.append("INSERT INTO po_invoice_b(");
	sql.append("cinvoice_bid,cinvoiceid,pk_corp,cusedeptid,corder_bid,corderid,csourcebilltype,csourcebillid,csourcebillrowid,cupsourcebilltype,");
	sql.append("cupsourcebillid,cupsourcebillrowid,cmangid,cbaseid,ninvoicenum,naccumsettnum,idiscounttaxtype,ntaxrate,ccurrencytypeid,noriginalcurprice,");
	sql.append("noriginaltaxmny,noriginalcurmny,noriginalsummny,noriginalpaymentmny,nexchangeotobrate,nmoney,ntaxmny,nsummny,npaymentmny,naccumsettmny,");
	sql.append("cprojectid,cprojectphaseid,vmemo,vfree1,");
	sql.append("vfree2,vfree3,vfree4,vfree5,vdef1,vdef2,vdef3,vdef4,vdef5,vdef6,");
	sql.append("vdef7,vdef8,vdef9,vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16,");
	sql.append("vdef17, vdef18, vdef19,vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,");
	sql.append("pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,");
	sql.append("pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,dr,cwarehouseid,vproducenum,crowno,norgnettaxprice,nreasonwastenum,pk_upsrccorp,nassistnum,cassistunit,nexchangerate,ccostsubjid)");
	sql.append(" values(");
	sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 		?, ?, ?, ?, ?, ?, ?, ?, ?, ?,");
	sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 		?, ?, ?, ?, ?, ?, ?, ?, ?, ?,");
	sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 		?, ?, ?, ?, ?, ?, ?, ?, ?, ?,");
	sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 		?, ?, ?, ?, ?, ?, ?, ?, ?, ?,");
	sql.append("?, ?, ?, ?, ?, ?, ?, ? ,?)");//增加辅数量 辅计量单位
  //二次开发插件支持 by zhaoyha at 2009.2.4
  //根据扩展的字段，生成新的update sql语句
  sql=new StringBuffer(PluginExtFieldParser.getInstance().getExtInsertSql(sql.toString(), 
      InvoiceItemVO.getAryExtFieldsMeta()));

	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con, sql.toString());
		InvoiceItemVO invoiceItem = null;

		//初始化即将要返回的主键数组
		if(invoiceItems != null) {
			keys = new String[invoiceItems.length];
		}

		//批处理插入Item.
		for(int i=0;invoiceItems!=null && i<invoiceItems.length; i++) {

			invoiceItem = invoiceItems[i];

			String key = getOID(invoiceItem.getPk_corp());
			//设置主键
			invoiceItem.setPrimaryKey(key);
			//将主键存入数组
			keys[i] = key;

			// set PK fields:
			stmt.setString(1, key);
			// set non PK fields:
			if (invoiceItem.getCinvoiceid() == null) {
				stmt.setNull(2, Types.CHAR);
			} else {
				stmt.setString(2, invoiceItem.getCinvoiceid());
			}
			if (invoiceItem.getPk_corp() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, invoiceItem.getPk_corp());
			}
			if (invoiceItem.getCusedeptid() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, invoiceItem.getCusedeptid());
			}
			if (invoiceItem.getCorder_bid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, invoiceItem.getCorder_bid());
			}
			if (invoiceItem.getCorderid() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, invoiceItem.getCorderid());
			}
			if (invoiceItem.getCsourcebilltype() == null) {
				stmt.setNull(7, Types.CHAR);
			} else {
				stmt.setString(7, invoiceItem.getCsourcebilltype());
			}
			if (invoiceItem.getCsourcebillid() == null) {
				stmt.setNull(8, Types.CHAR);
			} else {
				stmt.setString(8, invoiceItem.getCsourcebillid());
			}
			if (invoiceItem.getCsourcebillrowid() == null) {
				stmt.setNull(9, Types.CHAR);
			} else {
				stmt.setString(9, invoiceItem.getCsourcebillrowid());
			}
			if (invoiceItem.getCupsourcebilltype() == null) {
				stmt.setNull(10, Types.CHAR);
			} else {
				stmt.setString(10, invoiceItem.getCupsourcebilltype());
			}
			if (invoiceItem.getCupsourcebillid() == null) {
				stmt.setNull(11, Types.CHAR);
			} else {
				stmt.setString(11, invoiceItem.getCupsourcebillid());
			}
			if (invoiceItem.getCupsourcebillrowid() == null) {
				stmt.setNull(12, Types.CHAR);
			} else {
				stmt.setString(12, invoiceItem.getCupsourcebillrowid());
			}
			if (invoiceItem.getCmangid() == null) {
				stmt.setNull(13, Types.CHAR);
			} else {
				stmt.setString(13, invoiceItem.getCmangid());
			}
			if (invoiceItem.getCbaseid() == null) {
				stmt.setNull(14, Types.CHAR);
			} else {
				stmt.setString(14, invoiceItem.getCbaseid());
			}
			if (invoiceItem.getNinvoicenum() == null) {
				stmt.setNull(15, Types.INTEGER);
			} else {
				stmt.setBigDecimal(15, invoiceItem.getNinvoicenum()
						.toBigDecimal());
			}
			if (invoiceItem.getNaccumsettnum() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setBigDecimal(16, invoiceItem.getNaccumsettnum()
						.toBigDecimal());
			}
			if (invoiceItem.getIdiscounttaxtype() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setInt(17, invoiceItem.getIdiscounttaxtype()
						.intValue());
			}
			if (invoiceItem.getNtaxrate() == null) {
				stmt.setNull(18, Types.INTEGER);
			} else {
				stmt.setBigDecimal(18, invoiceItem.getNtaxrate()
						.toBigDecimal());
			}
			if (invoiceItem.getCcurrencytypeid() == null) {
				stmt.setNull(19, Types.CHAR);
			} else {
				stmt.setString(19, invoiceItem.getCcurrencytypeid());
			}
			if (invoiceItem.getNoriginalcurprice() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setBigDecimal(20, invoiceItem.getNoriginalcurprice()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginaltaxmny() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setBigDecimal(21, invoiceItem.getNoriginaltaxmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalcurmny() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setBigDecimal(22, invoiceItem.getNoriginalcurmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalsummny() == null) {
				stmt.setNull(23, Types.INTEGER);
			} else {
				stmt.setBigDecimal(23, invoiceItem.getNoriginalsummny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalpaymentmny() == null) {
				stmt.setNull(24, Types.INTEGER);
			} else {
				stmt.setBigDecimal(24, invoiceItem.getNoriginalpaymentmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNexchangeotobrate() == null) {
				stmt.setNull(25, Types.INTEGER);
			} else {
				stmt.setBigDecimal(25, invoiceItem.getNexchangeotobrate()
						.toBigDecimal());
			}
			if (invoiceItem.getNmoney() == null) {
				stmt.setNull(26, Types.INTEGER);
			} else {
				stmt.setBigDecimal(26, invoiceItem.getNmoney()
						.toBigDecimal());
			}
			if (invoiceItem.getNtaxmny() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setBigDecimal(27, invoiceItem.getNtaxmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNsummny() == null) {
				stmt.setNull(28, Types.INTEGER);
			} else {
				stmt.setBigDecimal(28, invoiceItem.getNsummny()
						.toBigDecimal());
			}
			if (invoiceItem.getNpaymentmny() == null) {
				stmt.setNull(29, Types.INTEGER);
			} else {
				stmt.setBigDecimal(29, invoiceItem.getNpaymentmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNaccumsettmny() == null) {
				stmt.setNull(30, Types.INTEGER);
			} else {
				stmt.setBigDecimal(30, invoiceItem.getNaccumsettmny()
						.toBigDecimal());
			}
			if (invoiceItem.getCprojectid() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, invoiceItem.getCprojectid());
			}
			if (invoiceItem.getCprojectphaseid() == null) {
				stmt.setNull(32, Types.CHAR);
			} else {
				stmt.setString(32, invoiceItem.getCprojectphaseid());
			}
			if (invoiceItem.getVmemo() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, invoiceItem.getVmemo());
			}
			if (invoiceItem.getVfree1() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, invoiceItem.getVfree1());
			}
			if (invoiceItem.getVfree2() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, invoiceItem.getVfree2());
			}
			if (invoiceItem.getVfree3() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, invoiceItem.getVfree3());
			}
			if (invoiceItem.getVfree4() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, invoiceItem.getVfree4());
			}
			if (invoiceItem.getVfree5() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, invoiceItem.getVfree5());
			}
			if (invoiceItem.getVdef1() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, invoiceItem.getVdef1());
			}
			if (invoiceItem.getVdef2() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, invoiceItem.getVdef2());
			}
			if (invoiceItem.getVdef3() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, invoiceItem.getVdef3());
			}
			if (invoiceItem.getVdef4() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, invoiceItem.getVdef4());
			}
			if (invoiceItem.getVdef5() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, invoiceItem.getVdef5());
			}
			if (invoiceItem.getVdef6() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, invoiceItem.getVdef6());
			}
			if (invoiceItem.getVdef7() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, invoiceItem.getVdef7());
			}
			if (invoiceItem.getVdef8() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, invoiceItem.getVdef8());
			}
			if (invoiceItem.getVdef9() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, invoiceItem.getVdef9());
			}
			if (invoiceItem.getVdef10() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, invoiceItem.getVdef10());
			}
			if (invoiceItem.getVdef11() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, invoiceItem.getVdef11());
			}
			if (invoiceItem.getVdef12() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, invoiceItem.getVdef12());
			}
			if (invoiceItem.getVdef13() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, invoiceItem.getVdef13());
			}
			if (invoiceItem.getVdef14() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, invoiceItem.getVdef14());
			}
			if (invoiceItem.getVdef15() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, invoiceItem.getVdef15());
			}
			if (invoiceItem.getVdef16() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, invoiceItem.getVdef16());
			}
			if (invoiceItem.getVdef17() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, invoiceItem.getVdef17());
			}
			if (invoiceItem.getVdef18() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, invoiceItem.getVdef18());
			}
			if (invoiceItem.getVdef19() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, invoiceItem.getVdef19());
			}
			if (invoiceItem.getVdef20() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, invoiceItem.getVdef20());
			}
			if (invoiceItem.getPKDefDoc1() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, invoiceItem.getPKDefDoc1());
			}
			if (invoiceItem.getPKDefDoc2() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, invoiceItem.getPKDefDoc2());
			}
			if (invoiceItem.getPKDefDoc3() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, invoiceItem.getPKDefDoc3());
			}
			if (invoiceItem.getPKDefDoc4() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, invoiceItem.getPKDefDoc4());
			}
			if (invoiceItem.getPKDefDoc5() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, invoiceItem.getPKDefDoc5());
			}
			if (invoiceItem.getPKDefDoc6() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, invoiceItem.getPKDefDoc6());
			}
			if (invoiceItem.getPKDefDoc7() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, invoiceItem.getPKDefDoc7());
			}
			if (invoiceItem.getPKDefDoc8() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, invoiceItem.getPKDefDoc8());
			}
			if (invoiceItem.getPKDefDoc9() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, invoiceItem.getPKDefDoc9());
			}
			if (invoiceItem.getPKDefDoc10() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, invoiceItem.getPKDefDoc10());
			}
			if (invoiceItem.getPKDefDoc11() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, invoiceItem.getPKDefDoc11());
			}
			if (invoiceItem.getPKDefDoc12() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, invoiceItem.getPKDefDoc12());
			}
			if (invoiceItem.getPKDefDoc13() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, invoiceItem.getPKDefDoc13());
			}
			if (invoiceItem.getPKDefDoc14() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, invoiceItem.getPKDefDoc14());
			}
			if (invoiceItem.getPKDefDoc15() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, invoiceItem.getPKDefDoc15());
			}
			if (invoiceItem.getPKDefDoc16() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, invoiceItem.getPKDefDoc16());
			}
			if (invoiceItem.getPKDefDoc17() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, invoiceItem.getPKDefDoc17());
			}
			if (invoiceItem.getPKDefDoc18() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, invoiceItem.getPKDefDoc18());
			}
			if (invoiceItem.getPKDefDoc19() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, invoiceItem.getPKDefDoc19());
			}
			if (invoiceItem.getPKDefDoc20() == null) {
				stmt.setNull(78, Types.CHAR);
			} else {
				stmt.setString(78, invoiceItem.getPKDefDoc20());
			}
			if (invoiceItem.getDr() == null) {
				stmt.setNull(79, Types.INTEGER);
			} else {
				stmt.setInt(79, invoiceItem.getDr().intValue());
			}
			//wyf 2002-09-17 add begin
			if (invoiceItem.getCwarehouseid() == null) {
			  //modify by dgq 解决插入到数据库中不是null，加载仓库的数据权限之后查询不到的问题。
				stmt.setNull(80, Types.CHAR);
			} else {
				stmt.setString(80, invoiceItem.getCwarehouseid());
			}
			if (invoiceItem.getVproducenum() == null) {
				stmt.setNull(81, Types.CHAR);
			} else {
				stmt.setString(81, invoiceItem.getVproducenum());
			}
			if (invoiceItem.getCrowno() == null) {
				stmt.setNull(82, Types.CHAR);
			} else {
				stmt.setString(82, invoiceItem.getCrowno());
			}
			if (invoiceItem.getNorgnettaxprice() == null) {
				stmt.setNull(83, Types.INTEGER);
			} else {
				stmt.setBigDecimal(83, invoiceItem.getNorgnettaxprice()
						.toBigDecimal());
			}
			if (invoiceItem.getNreasonwastenum() == null) {
				stmt.setNull(84, Types.INTEGER);
			} else {
				stmt.setBigDecimal(84, invoiceItem.getNreasonwastenum()
						.toBigDecimal());
			}
			
			if (invoiceItem.getPk_upsrccorp() == null) {
				stmt.setNull(85, Types.CHAR);
			} else {
				stmt.setString(85, invoiceItem.getPk_upsrccorp());
			}
			if (invoiceItem.getM_nassistnum() == null){
				stmt.setNull(86, Types.DECIMAL);
			}else{
				stmt.setBigDecimal(86, invoiceItem.getM_nassistnum().toBigDecimal());
			}
			if (invoiceItem.getM_cassistunit() == null){
				stmt.setNull(87, Types.CHAR);
			}else{
				stmt.setString(87, invoiceItem.getM_cassistunit());
			}
			if (invoiceItem.getNexchangerate() == null){
				stmt.setNull(88, Types.DECIMAL);
			} else{
				stmt.setBigDecimal(88, invoiceItem.getNexchangerate().toBigDecimal());
			}
			if (invoiceItem.getCcostsubjid() == null) {
				stmt.setNull(89, Types.CHAR);
			} else {
				stmt.setString(89, invoiceItem.getCcostsubjid());
			}
      //二次开发插件支持 by zhaoyha at 2009.2.4
      PluginExtFieldParser.getInstance().setExtStmtValues(90, stmt, 
          InvoiceItemVO.getAryExtFieldsMeta(),new InvoiceItemVO[]{invoiceItem});

			//wyf	2002-09-17	add		end

			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insertItems", new Object[]{invoiceItems});
	/*************************************************************/

	return keys;
}

/**
 * <p>向数据库插入一个VO对象。
 * <p>
 * 创建日期：(2001-8-4)
 * @param InvoiceItem nc.vo.pi.InvoiceItemVO
 * @param foreignKey String
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertItems(InvoiceItemVO[] invoiceItems, String foreignKey) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "insertItems", new Object[]{invoiceItems, foreignKey});
	/*************************************************************/

	for(int i=0; invoiceItems!=null && i<invoiceItems.length;i++) {
		invoiceItems[i].setCinvoiceid(foreignKey);
	}
	String[] keys = insertItems(invoiceItems);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "insertItems", new Object[]{invoiceItems, foreignKey});
	/*************************************************************/

	return keys;

}

/**
 * 作者：汪维敏
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-5-13 13:25:19)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @return java.util.ArrayList
 */
public ArrayList queryForSaveAudit(String key) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "queryForSaveAudit", new Object[]{});
	/*************************************************************/
	ArrayList arr = new ArrayList();
	String sql = "SELECT dauditdate,cauditpsn,ibillstatus,ts,taudittime FROM po_invoice WHERE cinvoiceid='";
	sql += key + "'";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String sDate = rs.getString("dauditdate");
			UFDate dDate = sDate == null ? null : new UFDate(sDate);
			String sAuditPsn = rs.getString("cauditpsn");
			Integer iBillStatus = new Integer(rs.getInt("ibillstatus"));
			String ts = rs.getString("ts");
			String tAuditTime=rs.getString("taudittime");
			arr.add(dDate);
			arr.add(sAuditPsn);
			arr.add(iBillStatus);
			arr.add(ts);
			arr.add(tAuditTime);
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "queryForSaveAudit", new Object[]{});
	/*************************************************************/

	return arr;
}

public Hashtable queryForSaveAuditBatch(String key[]) throws SQLException{
	
	String sql = "SELECT cinvoiceid,dauditdate,cauditpsn,ibillstatus,ts FROM po_invoice WHERE dr = 0 and cinvoiceid in ('";
	for(int i = 0; i < key.length - 1; i++) sql += key[i] + "','";
	sql += key[key.length - 1] + "')";

	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String s = rs.getString("cinvoiceid");
			String sDate = rs.getString("dauditdate");
			UFDate dDate = sDate == null ? null : new UFDate(sDate);
			String sAuditPsn = rs.getString("cauditpsn");
			Integer iBillStatus = new Integer(rs.getInt("ibillstatus"));
			String ts = rs.getString("ts");

			ArrayList arr = new ArrayList();
			arr.add(dDate);
			arr.add(sAuditPsn);
			arr.add(iBillStatus);
			arr.add(ts);
			
			if(s != null) t.put(s, arr);
		}

		//关闭结果集,即时释放资源
		if(rs != null) rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	return t;
}
/**
 * 作者：周晓
 * 功能：VMI消耗汇总行是否已经生成发票
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-5-13 13:25:19)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @return java.util.ArrayList
 */
public boolean queryIfExecVMI(String  conHids) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "queryIfExecVMI", new Object[]{});
	/*************************************************************/
	
	String sql = "SELECT cinvoice_bid,csourcebillid FROM po_invoice_b WHERE dr = 0 and csourcebilltype='50' and csourcebillid in " + conHids;

	Connection con = null;
	PreparedStatement stmt = null;
	boolean isAlreadyGen = false;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		if (rs.next()) {
			isAlreadyGen = true ;
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "queryForSaveAudit", new Object[]{});
	/*************************************************************/

	return isAlreadyGen;
}
/**
 * 根据订单行ID修改该行的累计发票数量
 *
 * 创建日期：(2003-01-22)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateAccumInvoiceNumByScOrderBPKMy(String	keys[],double values[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{keys,values});
	/*************************************************************/

	//2006-04-30, czp , v35 ，如果不合并会造成只回写相同ID的最后一行数据
	if(keys == null
			|| keys.length == 0
			|| values == null
			|| values.length == 0
			|| keys.length != values.length){
		return;
	}
	//按ID合并，否则只记录最后一个ID的值
	HashMap mapCom = new HashMap();
	UFDouble ufdNum = null;
	for(int i=0;i<keys.length;i++){
		if(keys[i] == null){
			continue;
		}
		if(mapCom.containsKey(keys[i])){
			ufdNum = (UFDouble) mapCom.get(keys[i]);
			ufdNum = ufdNum.add(values[i]);
			mapCom.put(keys[i],ufdNum);
		}else{
			mapCom.put(keys[i],new UFDouble(values[i]));
		}
	}
	if(mapCom.size() == 0){
		return;
	}
	Object[] oaKeys = mapCom.keySet().toArray();
	
	String sql = "UPDATE sc_order_b set naccuminvoicenum=?  WHERE corder_bid=?" ;

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i=0;i<oaKeys.length;i++) {
			stmt.setDouble(1,((UFDouble)mapCom.get(oaKeys[i])).doubleValue());
			stmt.setString(2,oaKeys[i]+"") ;

			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{keys,values});
	/*************************************************************/
}


/**
 * 根据订单行ID修改该行的累计发票数量
 *
 * 创建日期：(2003-01-22)
 * @param invoiceHeader nc.vo.pi.InvoiceHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateAccumInvoiceNumByScOrderBPKMy(String	keys[],double values[],double prices[],InvoiceVO invVO) throws java.sql.SQLException,BusinessException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{keys,values});
	/*************************************************************/
	
	//容差控制Begin
	try{
		String		sPk_corp = invVO.getHeadVO().getPk_corp();
	
		//PO02	数量容差控制	PO03	数量容差数值	PO04	单价容差控制	PO05	单价容差数值
		//数量、单价容差控制
		ISysInitQry dmoInit = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		String	sNumPresKind = dmoInit.getParaString(sPk_corp,"PO02") ;
		String	sPricePresKind = dmoInit.getParaString(sPk_corp,"PO04") ;
	
		//取本公司的单价精度
		int		iPriceDigit = dmoInit.getParaInt(sPk_corp,"BD505").intValue() ;
	
		//发票直接由订单生成，才需检查数量容差
		//单价必须作容差检查
		boolean		bNumCheck = false;
		if(sNumPresKind.equals("不保存") || sNumPresKind.equals("提示")) bNumCheck = true;
		boolean		bPriceCheck = false;
		if(sPricePresKind.equals("不保存") || sPricePresKind.equals("提示")) bPriceCheck = true;
		if ( bNumCheck || bPriceCheck ) {
	
			UFDouble		dNumPresValue = null ;
			UFDouble		dPricePresValue = null ;
			if (bNumCheck) {
				dNumPresValue = dmoInit.getParaDbl(sPk_corp,"PO03") ;
				dNumPresValue = PuPubVO.getUFDouble_NullAsZero(dNumPresValue);
			}
			if (bPriceCheck) {
				dPricePresValue = dmoInit.getParaDbl(sPk_corp,"PO05") ;
				dPricePresValue = PuPubVO.getUFDouble_NullAsZero(dPricePresValue);
			}
	
			String[]	saBId = keys ;
			
			
			//UFDouble[]	daLocalNetPrice = voPara.getDLocalNetPriceArray() ;	
			UFDouble[]	daLocalNetPrice = null;
			if (prices != null){
				daLocalNetPrice = new UFDouble[prices.length];
				for (int i = 0;i<prices.length;i++){
					daLocalNetPrice[i] = new UFDouble(prices[i]);
				}
			}
					
			//公用DMO
			String				sPoBIdSubSql = new	TempTableDMO().insertTempTable(
				saBId,
				//"rewritePiNumOrder21BId",
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PO017,
				"corder_bid"	) ;
	
			PubDMO	dmoPuPub = new	PubDMO() ;
			Hashtable	htScData = dmoPuPub.queryHtResultFromAnyTable(
				"sc_order_b",
				"corder_bid",
				new	String[]{"nordernum","nmoney","naccuminvoicenum"},
				"corder_bid IN " + sPoBIdSubSql) ;
			if(htScData == null){
				htScData = new Hashtable();
			}
			Object[]	oaData = null ;
			UFDouble	dOrderNum = null ;
			UFDouble	dMoney = null ;
			UFDouble	dAccumInvoiceNum = null ;
			UFDouble	dPrice = null ;
	
			int		iLen = saBId.length ;
			for (int i = 0; i < iLen; i++){
				Vector	vecData = (Vector)htScData.get(saBId[i]) ;
				if (vecData==null) {
					continue ;
				}
	
				oaData = (Object[])vecData.get(0) ;
				dOrderNum = PuPubVO.getUFDouble_NullAsZero(oaData[0]) ;
				dMoney = PuPubVO.getUFDouble_NullAsZero(oaData[1]) ;
				dAccumInvoiceNum = PuPubVO.getUFDouble_NullAsZero(null) ;
				dAccumInvoiceNum = dAccumInvoiceNum.add(values[i]);
	
				//数量一致性
				if ( dOrderNum.multiply(dAccumInvoiceNum).compareTo(VariableConst.ZERO)<0 ) {
				    throw	new	BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004020201","UPP4004020201-000259")/*@res "存在 累计发票数量 与 订单数量 正负不一致 的行，请检查"*/);
				}
	
				//数量检查：正负容差检查
				if ( bNumCheck ) {
					if ( (dAccumInvoiceNum.compareTo(VariableConst.ZERO)>0 && dAccumInvoiceNum.compareTo( dOrderNum.multiply(dNumPresValue.div(100.0).add(1.0)) )>0) ||
						 (dAccumInvoiceNum.compareTo(VariableConst.ZERO)<0 && dAccumInvoiceNum.compareTo( dOrderNum.multiply(dNumPresValue.div(100.0).add(1.0)) )<0)) {
						if(sNumPresKind.equals("提示")){
							if(invVO.getUserConfirmFlag() == null || !invVO.getUserConfirmFlag().booleanValue()){
								throw	new	RwtPiToScException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004020201","UPP4004020201-000260")/*@res "存在 累计发票数量 超出 订单数量容差控制 的行，请检查"*/) ;								
							}
						}else{
							throw	new	BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004020201","UPP4004020201-000260")/*@res "存在 累计发票数量 超出 订单数量容差控制 的行，请检查"*/) ;
						}
					}
				}
	
				//单价检查
				if ( bPriceCheck ) {
					if ( dOrderNum.compareTo(VariableConst.ZERO)==0 ) {
						continue ;
					}
					//取订单的单价容差，及发票的单价，按精度
					dPrice = (dMoney.div(dOrderNum)).setScale(iPriceDigit,UFDouble.ROUND_HALF_UP) ;
					dPrice = dPrice.multiply(dPricePresValue.div(100.0).add(1.0)).setScale(iPriceDigit,UFDouble.ROUND_HALF_UP) ;
					daLocalNetPrice[i] = daLocalNetPrice[i].setScale(iPriceDigit,UFDouble.ROUND_HALF_UP) ;
					if ( daLocalNetPrice[i].compareTo( dPrice )>0 ) {
						if(sPricePresKind.equals("提示")){
							if(invVO.getUserConfirmFlag() == null || !invVO.getUserConfirmFlag().booleanValue()){
								throw	new	RwtPiToScException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004020201","UPP4004020201-000261")/*@res "存在 发票本币净单价 超出 订单本币净单价容差控制 的行，请检查"*/) ;
							}
						}else{
							throw	new	BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004020201","UPP4004020201-000261")/*@res "存在 发票本币净单价 超出 订单本币净单价容差控制 的行，请检查"*/) ;
						}						
					}
	
				}
			}	
		}
	} catch (Exception	e) {
		PubDMO.throwBusinessException("updateAccumInvoiceNumByScOrderBPKMy",e) ;
	}
	
	//容差控制End

	String sql = "UPDATE sc_order_b set naccuminvoicenum=?  WHERE corder_bid=?" ;

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i=0;keys!=null && values!=null && keys.length == values.length && i<keys.length;i++) {
			stmt.setDouble(1,values[i]);
			stmt.setString(2,keys[i]) ;

			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateAccumInvoiceNumByScOrderBPKMy", new Object[]{keys,values});
	/*************************************************************/
}


/**
 * 根据入库单行ID修改该行的暂估应付累计回冲数量
 *
 */
public void updateAccumWashNumForIC(String[] keys, UFDouble[] values, boolean addFlag) throws java.sql.SQLException {


	String sql = "UPDATE ic_general_bb3 set naccumwashnum = isnull(naccumwashnum,0) + ? WHERE dr = 0 and cgeneralbid = ?" ;
	if (!addFlag){
		sql = "UPDATE ic_general_bb3 set naccumwashnum = isnull(naccumwashnum,0) - ? WHERE dr = 0 and cgeneralbid = ?" ;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con, sql);
		for(int i=0;keys!=null && values!=null && keys.length == values.length && i<keys.length;i++) {
			stmt.setDouble(1,PuPubVO.getUFDouble_NullAsZero(values[i]).doubleValue());
			stmt.setString(2,keys[i]) ;

			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
}
/**
 * 根据消耗汇总ID修改该行的暂估应付累计回冲数量
 * 
 * since v55, zhfa
 *
 */
public void updateAccumWashNumForVmi(String[] keys, UFDouble[] values, boolean addFlag) throws java.sql.SQLException {


  String sql = "UPDATE ic_vmi_sum set naccumwashnum = isnull(naccumwashnum,0) + ? WHERE dr = 0 and cvmihid = ?" ;
  if (!addFlag){
    sql = "UPDATE ic_vmi_sum set naccumwashnum = isnull(naccumwashnum,0) - ? WHERE dr = 0 and cvmihid = ?" ;
  }

  Connection con = null;
  PreparedStatement stmt = null;
  try {
    con = getConnection();
    stmt = prepareStatement(con, sql);
    for(int i=0;keys!=null && values!=null && keys.length == values.length && i<keys.length;i++) {
      stmt.setDouble(1,PuPubVO.getUFDouble_NullAsZero(values[i]).doubleValue());
      stmt.setString(2,keys[i]) ;

      executeUpdate(stmt);
    }
    executeBatch(stmt);
  }
  finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }catch (Exception e) {}
    try {
      if (con != null) {
        con.close();
      }
    }catch (Exception e) {}
  }
}


 /**
 * 作者：方益
 * 功能：根据发票体中的存货价格回写物料生产档案的参考成本价格
 * 参数：InvoiceItemVO[] vos	发票表体VO，库存组织ID,公司主键
 * 返回：void
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * @modify since v56, 无论如何都更新存货管理档案，中钢需求：“需要在不同采购业务场景下取得最新结算价”
 */
public void updateCostPriceForInv(InvoiceItemVO[] vos,String sStoreOrg,String sCorpId) throws java.sql.SQLException {
    
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateInvoicePaymentMny", new Object[]{vos,sStoreOrg,sCorpId});
	/*************************************************************/

	if(vos == null || vos.length == 0){
	    return ;
	}
	
	String sql = "update bd_produce set ckcb = ? where pk_invbasdoc = ? and pk_calbody = ? and pk_corp = ?";
  String sqlMandoc = "update bd_invmandoc set costprice = ? where pk_invmandoc = ? and pk_corp = ?";
  //判定是否是公司本位币
  String strCurrId = vos[0].getCcurrencytypeid();
  boolean bSame = false;
  try{
      bSame = strCurrId.equals(CurrParamQuery.getInstance().getLocalCurrPK(sCorpId));
  }catch(BusinessException be){
      throw new SQLException(be.getMessage());
  }
  
	Connection con = null;
	PreparedStatement stmt = null, stmtMandoc = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		stmtMandoc = prepareStatement(con, sqlMandoc);
		UFDouble ufdPrice = null;
		for(int i = 0;vos != null && i < vos.length;i++) {
		  if(bSame){
          ufdPrice = vos[i].getNoriginalnetprice();
          if(PuPubVO.getUFDouble_ZeroAsNull(ufdPrice) == null){
		          ufdPrice = vos[i].getNoriginalcurprice();
          }
		  }else{
		      //double value = vos[i].getNmoney().doubleValue()/vos[i].getNinvoicenum().doubleValue();
		      ufdPrice = vos[i].getNmoney().div(vos[i].getNinvoicenum());
		  }
		  ufdPrice = PuPubVO.getUFDouble_ZeroAsNull(ufdPrice);
		  if(ufdPrice == null){
		      continue;
		  }
			//回写生产档案
			stmt.setDouble(1,ufdPrice.doubleValue());
			stmt.setString(2,vos[i].getCbaseid());
			stmt.setString(3,sStoreOrg);
			stmt.setString(4,sCorpId);
			executeUpdate(stmt);
			//回写管理档案
			stmtMandoc.setDouble(1,ufdPrice.doubleValue());
			stmtMandoc.setString(2,vos[i].getCmangid());
			stmtMandoc.setString(3,sCorpId);
      executeUpdate(stmtMandoc);
		}
		executeBatch(stmt);
    executeBatch(stmtMandoc);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
    try {
        if (stmtMandoc != null) {
          stmtMandoc.close();
        }
      }catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateRefSalePriceForInv", new Object[]{vos,sStoreOrg,sCorpId});
	/*************************************************************/
}

 /**
 * 作者：王印芬
 * 功能：付款单回写发票的累计付款方法
 *			该方法由付款直接调用，请不要随意修改及删除该方法
 * 参数：String	 sPk_corp			公司ID
	String	 strInvoiceBId			发票行ID
	UFDouble dOriginalPayMny		原币付款
	UFDouble dNativePayMny,			本币付款
	UFDouble dAssistPayMny			辅币付款
 * 返回：无
 * 例外：SQLException				SQL异常
 * 日期：(2001-08-04 11:39:21)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-09-18	wyf		加入公司ID
 */
public void updateInvoicePaymentMny(
	String	 sPk_corp[],
	String	 strInvoiceBId[],
	UFDouble dOriginalPayMny[],
	UFDouble dNativePayMny[],
	UFDouble dAssistPayMny[]) throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateInvoicePaymentMny", new Object[]{strInvoiceBId});
	/*************************************************************/

	String sql2 = "UPDATE po_invoice_b SET noriginalpaymentmny=ISNULL(noriginalpaymentmny,0.0)+(?),npaymentmny=ISNULL(npaymentmny,0.0)+(?) WHERE cinvoice_bid=?" ;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con,sql2);
		
		for(int i = 0; i < sPk_corp.length; i++){
			stmt.setBigDecimal(1, dOriginalPayMny[i] == null ? VariableConst.ZERO.toBigDecimal() : dOriginalPayMny[i].toBigDecimal() );
			stmt.setBigDecimal(2, dNativePayMny[i] == null ? VariableConst.ZERO.toBigDecimal() : dNativePayMny[i].toBigDecimal() );
			stmt.setString(3, strInvoiceBId[i]) ;
			executeUpdate(stmt);
		}		
		executeBatch(stmt);
	}catch(Exception e){
		SCMEnv.out(e);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	//===========调用采购订单提供的接口,即时关闭订单
	nc.bs.po.close.PoCloseImpl beanPoClose = null ;
	try{
		//除去非法数据
		ArrayList listValid = new ArrayList();
		int iLen = strInvoiceBId.length;
		for (int i = 0; i < iLen; i++) {
			if(PuPubVO.getString_TrimZeroLenAsNull(strInvoiceBId[i]) != null){
				listValid.add(strInvoiceBId[i]);
			}
		}
		if(listValid.size() == 0){
			SCMEnv.out("发票行均不是源自采购订单，未执行自动关闭功能!");
			return;
		}
		String[] saRowid = (String[]) listValid.toArray(new String[listValid.size()]);
		Object[][] oa2Val = new PubDMO().queryArrayValue("po_invoice_b","cinvoice_bid",new String[]{"corder_bid"},saRowid);
		if(oa2Val == null){
			SCMEnv.out("发票行均不是源自采购订单，未执行自动关闭功能!");
			return;
		}
		iLen = oa2Val.length;
		saRowid = new String[iLen];
		for (int i = 0; i < iLen; i++) {
			saRowid[i] = oa2Val[i] == null ? null : (String)oa2Val[i][0];
		}
		beanPoClose = getBean_PoClose() ;
		//参数:发票行ID,发票类型
		beanPoClose.closeRowsAtOnce_ForPay(
			sPk_corp[0],
			saRowid,
			null
		);
	}catch(Exception e){
		SCMEnv.out(e);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateInvoicePaymentMny", new Object[]{strInvoiceBId});
	/*************************************************************/
}

 /**
 * 作者：方益
 * 功能：批处理更新表体的多行
 * 参数：InvoiceItemVO[] invoiceItems   被更新的发票表体VO数组
 * 返回：void
 * 例外：SQLException
 * 日期：(2003-01-20 11:03)
 * 修改日期，修改人，修改原因，注释标志：
 */
public void updateItems(InvoiceItemVO[] invoiceItems) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pi.InvoiceDMO", "updateItems", new Object[]{invoiceItems});
	/*************************************************************/

	StringBuffer sql = new StringBuffer("UPDATE po_invoice_b SET ");
	sql.append("cinvoiceid = ?,pk_corp = ?,cusedeptid = ?,corder_bid = ?, ");
	sql.append("corderid = ?,csourcebilltype = ?,csourcebillid = ?,csourcebillrowid = ?,cupsourcebilltype = ?, ");
	sql.append("cupsourcebillid = ?,cupsourcebillrowid = ?,cmangid = ?,cbaseid = ?,ninvoicenum = ?,");
	sql.append("naccumsettnum = ?,idiscounttaxtype = ?,ntaxrate = ?,ccurrencytypeid = ?,noriginalcurprice = ?,");
	sql.append("noriginaltaxmny = ?,noriginalcurmny = ?,noriginalsummny = ?,noriginalpaymentmny = ?,nexchangeotobrate = ?,");
	sql.append("nmoney = ?,ntaxmny = ?,nsummny = ?,npaymentmny = ?,naccumsettmny = ?,");
	sql.append("cprojectid = ?,cprojectphaseid = ?,vmemo = ?,vfree1 = ?,");
	sql.append("vfree2 = ?,vfree3 = ?,vfree4 = ?,vfree5 = ?,vdef1 = ?,");
	sql.append("vdef2 = ?,vdef3 = ?,vdef4 = ?,vdef5 = ?,vdef6 = ?,");
	sql.append("vdef7 = ?,vdef8 = ?,vdef9 = ?,vdef10 = ?,");
	sql.append("vdef11 = ?,vdef12 = ?,vdef13 = ?,vdef14 = ?,vdef15 = ?,");
	sql.append("vdef16 = ?,vdef17 = ?,vdef18 = ?,vdef19 = ?,vdef20 = ?,");
	sql.append("pk_defdoc1 = ?,pk_defdoc2 = ?,pk_defdoc3 = ?,pk_defdoc4 = ?,pk_defdoc5 = ?,");
	sql.append("pk_defdoc6 = ?,pk_defdoc7 = ?,pk_defdoc8 = ?,pk_defdoc9 = ?,pk_defdoc10 = ?,");
	sql.append("pk_defdoc11 = ?,pk_defdoc12 = ?,pk_defdoc13 = ?,pk_defdoc14 = ?,pk_defdoc15 = ?,");
	sql.append("pk_defdoc16 = ?,pk_defdoc17 = ?,pk_defdoc18 = ?,pk_defdoc19 = ?,pk_defdoc20 = ?,");
	sql.append("dr = ?,cwarehouseid = ?,vproducenum = ?,crowno = ?,norgnettaxprice = ?,nreasonwastenum = ?,pk_upsrccorp = ? ," +
	"nassistnum = ? ,cassistunit = ? , ccostsubjid = ? , nexchangerate = ?");

	sql.append(" WHERE cinvoice_bid = ?");
	
  //二次开发插件支持 by zhaoyha at 2009.2.3
  //根据扩展的字段，生成新的update sql语句
  sql=new StringBuffer(PluginExtFieldParser.getInstance().getExtUpdateSql(sql.toString(), 
      InvoiceItemVO.getAryExtFieldsMeta()));

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql.toString());
		InvoiceItemVO invoiceItem = null;

		//批处理更新表体行
		for(int i =0; invoiceItems!=null && i< invoiceItems.length; i++) {
			invoiceItem = invoiceItems[i];

			// update non PK fields:
			if (invoiceItem.getCinvoiceid() == null) {
				stmt.setNull(1, Types.CHAR);
			} else {
				stmt.setString(1, invoiceItem.getCinvoiceid());
			}
			if (invoiceItem.getPk_corp() == null) {
				stmt.setNull(2, Types.CHAR);
			} else {
				stmt.setString(2, invoiceItem.getPk_corp());
			}
			if (invoiceItem.getCusedeptid() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, invoiceItem.getCusedeptid());
			}
			if (invoiceItem.getCorder_bid() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, invoiceItem.getCorder_bid());
			}
			if (invoiceItem.getCorderid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, invoiceItem.getCorderid());
			}
			if (invoiceItem.getCsourcebilltype() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, invoiceItem.getCsourcebilltype());
			}
			if (invoiceItem.getCsourcebillid() == null) {
				stmt.setNull(7, Types.CHAR);
			} else {
				stmt.setString(7, invoiceItem.getCsourcebillid());
			}
			if (invoiceItem.getCsourcebillrowid() == null) {
				stmt.setNull(8, Types.CHAR);
			} else {
				stmt.setString(8, invoiceItem.getCsourcebillrowid());
			}
			if (invoiceItem.getCupsourcebilltype() == null) {
				stmt.setNull(9, Types.CHAR);
			} else {
				stmt.setString(9, invoiceItem.getCupsourcebilltype());
			}
			if (invoiceItem.getCupsourcebillid() == null) {
				stmt.setNull(10, Types.CHAR);
			} else {
				stmt.setString(10, invoiceItem.getCupsourcebillid());
			}
			if (invoiceItem.getCupsourcebillrowid() == null) {
				stmt.setNull(11, Types.CHAR);
			} else {
				stmt.setString(11, invoiceItem.getCupsourcebillrowid());
			}
			if (invoiceItem.getCmangid() == null) {
				stmt.setNull(12, Types.CHAR);
			} else {
				stmt.setString(12, invoiceItem.getCmangid());
			}
			if (invoiceItem.getCbaseid() == null) {
				stmt.setNull(13, Types.CHAR);
			} else {
				stmt.setString(13, invoiceItem.getCbaseid());
			}
			if (invoiceItem.getNinvoicenum() == null) {
				stmt.setNull(14, Types.INTEGER);
			} else {
				stmt.setBigDecimal(14, invoiceItem.getNinvoicenum()
						.toBigDecimal());
			}
			if (invoiceItem.getNaccumsettnum() == null) {
				stmt.setNull(15, Types.INTEGER);
			} else {
				stmt.setBigDecimal(15, invoiceItem.getNaccumsettnum()
						.toBigDecimal());
			}
			if (invoiceItem.getIdiscounttaxtype() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setInt(16, invoiceItem.getIdiscounttaxtype()
						.intValue());
			}
			if (invoiceItem.getNtaxrate() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setBigDecimal(17, invoiceItem.getNtaxrate()
						.toBigDecimal());
			}
			if (invoiceItem.getCcurrencytypeid() == null) {
				stmt.setNull(18, Types.CHAR);
			} else {
				stmt.setString(18, invoiceItem.getCcurrencytypeid());
			}
			if (invoiceItem.getNoriginalcurprice() == null) {
				stmt.setNull(19, Types.INTEGER);
			} else {
				stmt.setBigDecimal(19, invoiceItem.getNoriginalcurprice()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginaltaxmny() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setBigDecimal(20, invoiceItem.getNoriginaltaxmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalcurmny() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setBigDecimal(21, invoiceItem.getNoriginalcurmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalsummny() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setBigDecimal(22, invoiceItem.getNoriginalsummny()
						.toBigDecimal());
			}
			if (invoiceItem.getNoriginalpaymentmny() == null) {
				stmt.setNull(23, Types.INTEGER);
			} else {
				stmt.setBigDecimal(23, invoiceItem.getNoriginalpaymentmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNexchangeotobrate() == null) {
				stmt.setNull(24, Types.INTEGER);
			} else {
				stmt.setBigDecimal(24, invoiceItem.getNexchangeotobrate()
						.toBigDecimal());
			}
			if (invoiceItem.getNmoney() == null) {
				stmt.setNull(25, Types.INTEGER);
			} else {
				stmt.setBigDecimal(25, invoiceItem.getNmoney()
						.toBigDecimal());
			}
			if (invoiceItem.getNtaxmny() == null) {
				stmt.setNull(26, Types.INTEGER);
			} else {
				stmt.setBigDecimal(26, invoiceItem.getNtaxmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNsummny() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setBigDecimal(27, invoiceItem.getNsummny()
						.toBigDecimal());
			}
			if (invoiceItem.getNpaymentmny() == null) {
				stmt.setNull(28, Types.INTEGER);
			} else {
				stmt.setBigDecimal(28, invoiceItem.getNpaymentmny()
						.toBigDecimal());
			}
			if (invoiceItem.getNaccumsettmny() == null) {
				stmt.setNull(29, Types.INTEGER);
			} else {
				stmt.setBigDecimal(29, invoiceItem.getNaccumsettmny()
						.toBigDecimal());
			}
			if (invoiceItem.getCprojectid() == null) {
				stmt.setNull(30, Types.CHAR);
			} else {
				stmt.setString(30, invoiceItem.getCprojectid());
			}
			if (invoiceItem.getCprojectphaseid() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, invoiceItem.getCprojectphaseid());
			}
			if (invoiceItem.getVmemo() == null) {
				stmt.setNull(32, Types.CHAR);
			} else {
				stmt.setString(32, invoiceItem.getVmemo());
			}
			if (invoiceItem.getVfree1() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, invoiceItem.getVfree1());
			}
			if (invoiceItem.getVfree2() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, invoiceItem.getVfree2());
			}
			if (invoiceItem.getVfree3() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, invoiceItem.getVfree3());
			}
			if (invoiceItem.getVfree4() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, invoiceItem.getVfree4());
			}
			if (invoiceItem.getVfree5() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, invoiceItem.getVfree5());
			}
			if (invoiceItem.getVdef1() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, invoiceItem.getVdef1());
			}
			if (invoiceItem.getVdef2() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, invoiceItem.getVdef2());
			}
			if (invoiceItem.getVdef3() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, invoiceItem.getVdef3());
			}
			if (invoiceItem.getVdef4() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, invoiceItem.getVdef4());
			}
			if (invoiceItem.getVdef5() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, invoiceItem.getVdef5());
			}
			if (invoiceItem.getVdef6() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, invoiceItem.getVdef6());
			}

			if (invoiceItem.getVdef7() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, invoiceItem.getVdef7());
			}
			if (invoiceItem.getVdef8() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, invoiceItem.getVdef8());
			}
			if (invoiceItem.getVdef9() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, invoiceItem.getVdef9());
			}
			if (invoiceItem.getVdef10() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, invoiceItem.getVdef10());
			}
			if (invoiceItem.getVdef11() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, invoiceItem.getVdef11());
			}
			if (invoiceItem.getVdef12() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, invoiceItem.getVdef12());
			}
			if (invoiceItem.getVdef13() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, invoiceItem.getVdef13());
			}
			if (invoiceItem.getVdef14() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, invoiceItem.getVdef14());
			}
			if (invoiceItem.getVdef15() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, invoiceItem.getVdef15());
			}
			if (invoiceItem.getVdef16() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, invoiceItem.getVdef16());
			}
			if (invoiceItem.getVdef17() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, invoiceItem.getVdef17());
			}
			if (invoiceItem.getVdef18() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, invoiceItem.getVdef18());
			}
			if (invoiceItem.getVdef19() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, invoiceItem.getVdef19());
			}
			if (invoiceItem.getVdef20() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, invoiceItem.getVdef20());
			}
			if (invoiceItem.getPKDefDoc1() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, invoiceItem.getPKDefDoc1());
			}
			if (invoiceItem.getPKDefDoc2() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, invoiceItem.getPKDefDoc2());
			}
			if (invoiceItem.getPKDefDoc3() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, invoiceItem.getPKDefDoc3());
			}
			if (invoiceItem.getPKDefDoc4() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, invoiceItem.getPKDefDoc4());
			}
			if (invoiceItem.getPKDefDoc5() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, invoiceItem.getPKDefDoc5());
			}
			if (invoiceItem.getPKDefDoc6() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, invoiceItem.getPKDefDoc6());
			}
			if (invoiceItem.getPKDefDoc7() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, invoiceItem.getPKDefDoc7());
			}
			if (invoiceItem.getPKDefDoc8() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, invoiceItem.getPKDefDoc8());
			}
			if (invoiceItem.getPKDefDoc9() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, invoiceItem.getPKDefDoc9());
			}
			if (invoiceItem.getPKDefDoc10() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, invoiceItem.getPKDefDoc10());
			}
			if (invoiceItem.getPKDefDoc11() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, invoiceItem.getPKDefDoc11());
			}
			if (invoiceItem.getPKDefDoc12() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, invoiceItem.getPKDefDoc12());
			}
			if (invoiceItem.getPKDefDoc13() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, invoiceItem.getPKDefDoc13());
			}
			if (invoiceItem.getPKDefDoc14() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, invoiceItem.getPKDefDoc14());
			}
			if (invoiceItem.getPKDefDoc15() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, invoiceItem.getPKDefDoc15());
			}
			if (invoiceItem.getPKDefDoc16() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, invoiceItem.getPKDefDoc16());
			}
			if (invoiceItem.getPKDefDoc17() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, invoiceItem.getPKDefDoc17());
			}
			if (invoiceItem.getPKDefDoc18() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, invoiceItem.getPKDefDoc18());
			}
			if (invoiceItem.getPKDefDoc19() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, invoiceItem.getPKDefDoc19());
			}
			if (invoiceItem.getPKDefDoc20() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, invoiceItem.getPKDefDoc20());
			}
			if (invoiceItem.getDr() == null) {
				stmt.setNull(78, Types.INTEGER);
			} else {
				stmt.setInt(78, invoiceItem.getDr().intValue());
			}
			if (invoiceItem.getCwarehouseid() == null) {
				stmt.setNull(79, Types.CHAR);
			} else {
				stmt.setString(79, invoiceItem.getCwarehouseid());
			}
			if (invoiceItem.getVproducenum() == null) {
				stmt.setNull(80, Types.INTEGER);
			} else {
				stmt.setString(80, invoiceItem.getVproducenum());
			}
			if (invoiceItem.getCrowno() == null) {
				stmt.setNull(81, Types.INTEGER);
			} else {
				stmt.setString(81, invoiceItem.getCrowno());
			}
			if (invoiceItem.getNorgnettaxprice() == null) {
				stmt.setNull(82, Types.INTEGER);
			} else {
				stmt.setBigDecimal(82, invoiceItem.getNorgnettaxprice()
						.toBigDecimal());
			}
			if (invoiceItem.getNreasonwastenum() == null) {
				stmt.setNull(83, Types.INTEGER);
			} else {
				stmt.setBigDecimal(83, invoiceItem.getNreasonwastenum()
						.toBigDecimal());
			}
			
			if (invoiceItem.getPk_upsrccorp() == null) {
				stmt.setNull(84, Types.CHAR);
			} else {
				stmt.setString(84, invoiceItem.getPk_upsrccorp());
			}
			if (invoiceItem.getM_nassistnum() == null){
				stmt.setNull(85, Types.DECIMAL);
			}else{
				stmt.setBigDecimal(85, invoiceItem.getM_nassistnum().toBigDecimal());
			}
			if (invoiceItem.getM_cassistunit() == null){
				stmt.setNull(86, Types.CHAR);
			}else{
				stmt.setString(86, invoiceItem.getM_cassistunit());
			}

      if (invoiceItem.getCcostsubjid() == null){
        stmt.setNull(87, Types.CHAR);
      }else{
        stmt.setString(87, invoiceItem.getCcostsubjid());
      }
      if (invoiceItem.getNexchangerate() == null){
        stmt.setNull(88, Types.INTEGER);
      }else{
        stmt.setBigDecimal(88, invoiceItem.getNexchangerate().toBigDecimal());
      }
      //二次开发插件支持 by zhaoyha at 2009.2.3
      int newParaIndex=PluginExtFieldParser.getInstance().setExtStmtValues(89, stmt, 
          InvoiceItemVO.getAryExtFieldsMeta(),new InvoiceItemVO[]{invoiceItem});
      
      stmt.setString(newParaIndex, invoiceItem.getPrimaryKey());
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pi.InvoiceDMO", "updateItems", new Object[]{invoiceItems});
	/*************************************************************/
}
    public DjclDapVO afterVerifyAct(DjclDapVO vo) throws Exception {

        SCMEnv.out("执行收付接口方法开始afterVerifyAct(DjclDapVO)...");
        DjclDapItemVO[] voItems = (DjclDapItemVO[]) vo.getChildrenVO();        
       if(voItems == null || voItems.length == 0) return vo;
        
        Vector vTemp = new Vector();
        for(int i = 0; i < voItems.length; i++){
        	if(voItems[i].getDdhh() != null && voItems[i].getDdhh().trim().length() > 0) vTemp.addElement(voItems[i]);
        }
        if(vTemp.size() == 0) return vo;
        DjclDapItemVO[] voItem = new DjclDapItemVO[vTemp.size()];
        vTemp.copyInto(voItem);

        int nLen = voItem.length;
        String pk_corp[] = new String[nLen], rowid[] = new String[nLen];
        UFDouble clybje[] = new UFDouble[nLen], clbbje[] = new UFDouble[nLen], clfbje[] = new UFDouble[nLen];
        for (int i = 0; i < nLen; i++) {
            int lybz = voItem[i].getLybz().intValue();
            int clbz = voItem[i].getClbz().intValue();
            pk_corp[i] = voItem[i].getDwbm();            
            //String billtype = voItems[i].getJsfsbm();
            if (lybz == 4 && (clbz == -1 || clbz == 0 || clbz == 3 || clbz == 4 || clbz == -2 || clbz == 1 || clbz == 2 || clbz == 5 || clbz == 6)) {
                rowid[i] = voItem[i].getDdhh();
                CurrencyRateUtil sCurrdmo = new CurrencyRateUtil(pk_corp[i]);      

                String ybbm = voItem[i].getBzbm(); /* 原币编码 */
//                String fbbm = sCurrdmo.getFracCurrPK(); /* 辅币编码 */
                String bbbm = CurrParamQuery.getInstance().getLocalCurrPK(pk_corp[i]); /* 本币编码 */                
                int ybDig = CurrtypeQuery.getInstance().getCurrtypeVO(ybbm).getCurrdigit().intValue(); /* 原币小数位数 */
//                int fbDig = /* 辅币小数位数 */
//                (fbbm != null && fbbm.trim().length() != 0) ? CurrtypeQuery.getInstance()
//                        .getCurrtypeVO(fbbm).getCurrdigit().intValue() : 0;
                int bbDig = CurrtypeQuery.getInstance().getCurrtypeVO(bbbm).getCurrdigit().intValue(); /* 本币小数位数 */

                clybje[i] = voItem[i].getJfclybje().add(voItem[i].getDfclybje());
                clfbje[i] = voItem[i].getJfclfbje().add(voItem[i].getDfclfbje());
                clbbje[i] = voItem[i].getJfclbbje().add(voItem[i].getDfclbbje());
                clybje[i] = new UFDouble(clybje[i].toString(), ybDig);
//                clfbje[i] = new UFDouble(clfbje[i].toString(), fbDig);
                clbbje[i] = new UFDouble(clbbje[i].toString(), bbDig);
             }
        }
        
        updateInvoicePaymentMny(pk_corp, rowid, clybje, clbbje, clfbje);
        SCMEnv.out("执行收付接口方法结束afterVerifyAct(DjclDapVO)");

        return vo;
    }
    public DJCLBVO[] beforeVerifyAct(DJCLBVO[] vos) throws Exception {

        SCMEnv.out("无操作返回DJZBVO!执行收付接口方法在afterVerifyAct(DJCLBVO)");

        return vos;
    }
    public DjclDapVO afterUnVerifyAct(DjclDapVO vo) throws Exception {

        SCMEnv.out("执行收付接口方法开始 afterUnVerifyAct(DjclDapVO)...");
        DjclDapItemVO[] voItems = (DjclDapItemVO[]) vo.getChildrenVO();
        if(voItems == null || voItems.length == 0) return vo;
        
        Vector vTemp = new Vector();
        for(int i = 0; i < voItems.length; i++){
        	if(voItems[i].getDdhh() != null && voItems[i].getDdhh().trim().length() > 0) vTemp.addElement(voItems[i]);
        }
        if(vTemp.size() == 0) return vo;
        DjclDapItemVO[] voItem = new DjclDapItemVO[vTemp.size()];
        vTemp.copyInto(voItem);
        
        int nLen = voItem.length;
        String pk_corp[] = new String[nLen], rowid[] = new String[nLen];
        UFDouble clybje[] = new UFDouble[nLen], clbbje[] = new UFDouble[nLen], clfbje[] = new UFDouble[nLen];

        for (int i = 0; i < nLen; i++) {
            int lybz = voItem[i].getLybz().intValue();
            int clbz = voItem[i].getClbz().intValue();
            pk_corp[i] = voItem[i].getDwbm();            
            //String billtype = voItems[i].getJsfsbm();
            if (lybz == 4 && (clbz == -1 || clbz == 0 || clbz == 3 || clbz == 4 || clbz == -2 || clbz == 1 || clbz == 2 || clbz == 5 || clbz == 6)) {
                rowid[i] = voItem[i].getDdhh();
                CurrencyRateUtil sCurrdmo = new CurrencyRateUtil(pk_corp[i]);

                String ybbm = voItem[i].getBzbm(); /* 原币编码 */
//                String fbbm = sCurrdmo.getFracCurrPK(); /* 辅币编码 */
                String bbbm = CurrParamQuery.getInstance().getLocalCurrPK(pk_corp[i]); /* 本币编码 */
                int ybDig = CurrtypeQuery.getInstance().getCurrtypeVO(ybbm).getCurrdigit().intValue(); /* 原币小数位数 */
//                int fbDig = /* 辅币小数位数 */
//                (fbbm != null && fbbm.trim().length() != 0) ? CurrtypeQuery.getInstance()
//                        .getCurrtypeVO(fbbm).getCurrdigit().intValue() : 0;
                int bbDig = CurrtypeQuery.getInstance().getCurrtypeVO(bbbm).getCurrdigit().intValue(); /* 本币小数位数 */

                clybje[i] = voItem[i].getJfclybje().add(voItem[i].getDfclybje());
                clfbje[i] = voItem[i].getJfclfbje().add(voItem[i].getDfclfbje());
                clbbje[i] = voItem[i].getJfclbbje().add(voItem[i].getDfclbbje());
                
                clybje[i] = clybje[i].multiply(-1.0);
                clfbje[i] = clfbje[i].multiply(-1.0);
                clbbje[i] = clbbje[i].multiply(-1.0);
                
                clybje[i] = new UFDouble(clybje[i].toString(), ybDig);
//                clfbje[i] = new UFDouble(clfbje[i].toString(), fbDig);
                clbbje[i] = new UFDouble(clbbje[i].toString(), bbDig);
             }
        }

        updateInvoicePaymentMny(pk_corp, rowid, clybje, clbbje, clfbje);
        SCMEnv.out("执行收付接口方法结束 afterUnVerifyAct(DjclDapVO)");

        return vo;
    }
    
    public DJCLBVO[] beforeUnVerifyAct(DJCLBVO[] vos) throws Exception {

        SCMEnv.out("无操作返回DJZBVO!执行收付接口方法在 afterUnVerifyAct(DjclDapVO)");

        return vos;
    }
    /**
     * 批量更新发票头处理编号字段。
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param washVOs     冲暂估应付VO数组
     * @param pk_corp     公司
     * @param strClbh     处理编号, since 2008-01-23, 不再接收处理编号了，统一重新生成，否则如果处理编号用了发票ID时，就有可能与收付出现重复加锁发票ID的情况
     * @param bCrtNoFlag  是否清空标志
     * @return
     * @throws BusinessException
     * <p>
     * @author czp
     * @time 2007-10-29 上午09:09:44
     */
    public String updateClbh(IAdjuestVO[] washVOs, String pk_corp, String strClbh, boolean bSetNull) throws BusinessException {
    
    Connection con = null;
    PreparedStatement stmt = null;
    
    try {
      String sql = null;
      if(bSetNull){
        sql = "update po_invoice set clbh = null where cinvoiceid = ?";  
      }else{
        if(strClbh == null){
          strClbh = getOID(pk_corp);
        }
        sql = "update po_invoice set clbh = '"+ strClbh +"' where cinvoiceid = ?";
      }    
      con=getConnection();
      stmt = prepareStatement(con, sql.toString());
      HashMap<String, String> mapUpdated = new HashMap<String, String>();
      //批处理更新
      String strHid = null;
      for(int i =0; i < washVOs.length; i++) {        
        strHid = washVOs[i].getCinvoiceid();
        if(mapUpdated.containsKey(strHid)){
          continue;
        }
        stmt.setString(1, strHid);
        executeUpdate(stmt);
        mapUpdated.put(strHid, "");
      }
      executeBatch(stmt);
      //
    } catch (SQLException e) {
      throw new BusinessException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return strClbh;
  } 

    /**
     * @function 发票审批或者无发票结算时冲减暂估应付调用
     *
     * @author QuSida
     *
     * @param invoiceVOs
     * @return
     * @throws Exception 
     *
     * @return IAdjuestVO[]
     *
     * @date 2010-9-27 上午11:14:00
     */
    public IAdjuestVO[] washDataForFeeZGYF(InvoiceVO invoiceVOs[]) throws Exception{
    	Vector vBid = new Vector(), v2 = new Vector();
    	String sUnitCode = null;
    	
    	//发票归类
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
    		sUnitCode = headVO.getPk_corp();
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
     		for(int j = 0; j < bodyVO.length; j++){
    			if(!vBid.contains(bodyVO[j].getCbaseid())) vBid.addElement(bodyVO[j].getCbaseid());
    		}
    	}
    	String sTemp[] = new String[vBid.size()];
    	vBid.copyInto(sTemp);
    	
    	ISysInitQry myService = (ISysInitQry) NCLocator.getInstance().lookup(ISysInitQry.class.getName());
    	String sZGYF = myService.getParaString(sUnitCode,"PO52");
    	if(sZGYF.equals("N") || sZGYF.equals("否")) return null;

    	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp," dr = 0 ");
    	vBid = new Vector();
    	Object oTemp = null, invFlag[] = null;
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
    		for(int j = 0; j < bodyVO.length; j++){
    			oTemp = hInv.get(bodyVO[j].getCbaseid());
    			if(oTemp != null){
    				invFlag = (Object[]) oTemp;
    				if(invFlag[0].equals("Y") ) 
//    					vBid.addElement(bodyVO[j]);
//    				else 
    					v2.addElement(bodyVO[j]);
    			}
    		}
    	}
      	if(v2.size() == 0){
      		//审批的发票行全部为劳务或者折扣,直接返回
      		return null;
      	}
      	
		//核算规则
    Vector vVerifyRule = new Vector();
		for(int i = 0; i < v2.size(); i++){
			InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
			if(!vVerifyRule.contains(bodyVO.getCinvoiceid())) {
				vVerifyRule.addElement(bodyVO.getCinvoiceid());
			}
		}
		String cinvoiceid[] = new String[vVerifyRule.size()];
		vVerifyRule.copyInto(cinvoiceid);
		Hashtable hVerifyRule = queryVerifyRuleAndBillStatus(cinvoiceid);
		if (hVerifyRule == null || hVerifyRule.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000072")/*@res "未找到该单据业务类型对应核算规则!"*/);
		}

		Vector<InvoiceItemVO> vOver = new Vector<InvoiceItemVO>(); //全部结算完毕
    Vector<InvoiceItemVO> vPart = new Vector<InvoiceItemVO>(); //部分未结算
    Vector<InvoiceItemVO> vNo = new Vector<InvoiceItemVO>(); //未结算
      	
    for(int i = 0; i < v2.size(); i++){
      InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
      		
			oTemp = hVerifyRule.get(bodyVO.getCinvoiceid());
			if(oTemp == null) continue;
			Object data[] = (Object[])oTemp;
			String verifyrule = (String)data[1];
			//if(verifyrule.equals("N") || verifyrule.equals("V")) continue;
			//since v55, 支持消耗汇总的冲暂估应付
      if(verifyrule.equals("N")) continue;

//			if(Math.abs(bodyVO.getNaccumsettmny().doubleValue() - bodyVO.getNmoney().doubleValue()) == 0.0){
				vOver.addElement(bodyVO);
//			}else{
//				if(Math.abs(bodyVO.getNaccumsettmny().doubleValue()) == 0.0){
//					vNo.addElement(bodyVO);
//				}else{
//					vPart.addElement(bodyVO);
//				}
//			}
      	}
      
      /**
       * 2008.12.29有以下需求变更:
       * 1.采购入库单中如果存货为资产类存货,则不允许作暂估应付,也就是针对该行作暂估时即使暂估应付参数为是也不生成暂估应付单.
       * 2.采购发票中存货为资产类存货的行,则不受暂估应付参数的控制,只要审核就可以传应付.
       */
//  		if(filteAssetInv(vPart.toArray(new InvoiceItemVO[0])).length > 0){
//  			//发票部分未结算完毕
//	      	//判断是否可以冲减暂估应付	      	
//	      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
//  		}
//  		if(filteAssetInv(vNo.toArray(new InvoiceItemVO[0])).length > 0){
//  			//发票均未结算完毕
//	      	//判断是否可以冲减暂估应付	      	
//	      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
//  		}

//  		if(vOver.size() > 0)
	      	//发票均结算完毕
	      	//判断是否可以冲减暂估应付
	      	
	      	//以发票行ID, 获取入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
	      	HashMap hSettle = getSettleInfoByInvoice(vOver);
//	      	if(hSettle == null || hSettle.size() == 0){
//	      		//发票未与入库单或消耗汇总结算过,直接返回
//	      		return null;
//	      	}
	      	
	      	//查询入库单行是否已暂估应付 {入库单行ID或消耗汇总ID=Object[]{应付单据ID}}
	      	HashMap tZGYF = isStockZGYF(hSettle);
//	      	if(tZGYF == null || tZGYF.size() == 0){
//	      		//入库单未暂估应付,直接返回
//	      		return null;
//	      	}
	      	
	      	//确定哪些发票行需要回冲: vBid={发票行ID}
	      	//已与入库单或消耗汇总结算, 而且入库单或消耗汇总已暂估应付
	      	vBid = getInvoicesToWashFeeZGYF(hSettle,tZGYF,vOver);
//	      	if(vBid == null || vBid.size() == 0) return null;
	      	
	      	//返回冲减VO(不含是否红冲完毕的处理)
	      	IAdjuestVO VOs[] = getReturnVOsToWashFeeZGYF(vBid,hSettle,vOver,tZGYF);
          //
	      	return VOs;
  		
  		
//  		return null;
    }
    /*
     * 发票审批或者无发票结算时冲减暂估应付调用
     * 获取调整VO[]
     * 2006-03-23 xhq
     */
    public IAdjuestVO[] washDataForZGYF(InvoiceVO invoiceVOs[]) throws Exception{
    	Vector vBid = new Vector(), v2 = new Vector();
    	String sUnitCode = null;
    	
    	//发票归类
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
    		sUnitCode = headVO.getPk_corp();
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
     		for(int j = 0; j < bodyVO.length; j++){
    			if(!vBid.contains(bodyVO[j].getCbaseid())) vBid.addElement(bodyVO[j].getCbaseid());
    		}
    	}
    	String sTemp[] = new String[vBid.size()];
    	vBid.copyInto(sTemp);
    	
    	ISysInitQry myService = (ISysInitQry) NCLocator.getInstance().lookup(ISysInitQry.class.getName());
    	String sZGYF = myService.getParaString(sUnitCode,"PO52");
    	if(sZGYF.equals("N") || sZGYF.equals("否")) return null;

    	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp," dr = 0 ");
    	vBid = new Vector();
    	Object oTemp = null, invFlag[] = null;
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
    		for(int j = 0; j < bodyVO.length; j++){
    			String csourcebillrowid = (String) bodyVO[j].getCsourcebillrowid();
    			if(csourcebillrowid!=null){
    				oTemp = hInv.get(bodyVO[j].getCbaseid());
        			if(oTemp != null){
        				invFlag = (Object[]) oTemp;
        				if(invFlag[0].equals("Y") || invFlag[1].equals("Y")) vBid.addElement(bodyVO[j]);
        				else 
        					v2.addElement(bodyVO[j]);
        			}
    			}
    			
    		}
    	}
      	if(v2.size() == 0){
      		//审批的发票行全部为劳务或者折扣,直接返回
      		return null;
      	}
      	
		//核算规则
    Vector vVerifyRule = new Vector();
		for(int i = 0; i < v2.size(); i++){
			InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
			if(!vVerifyRule.contains(bodyVO.getCinvoiceid())) {
				vVerifyRule.addElement(bodyVO.getCinvoiceid());
			}
		}
		String cinvoiceid[] = new String[vVerifyRule.size()];
		vVerifyRule.copyInto(cinvoiceid);
		Hashtable hVerifyRule = queryVerifyRuleAndBillStatus(cinvoiceid);
		if (hVerifyRule == null || hVerifyRule.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000072")/*@res "未找到该单据业务类型对应核算规则!"*/);
		}

		Vector<InvoiceItemVO> vOver = new Vector<InvoiceItemVO>(); //全部结算完毕
    Vector<InvoiceItemVO> vPart = new Vector<InvoiceItemVO>(); //部分未结算
    Vector<InvoiceItemVO> vNo = new Vector<InvoiceItemVO>(); //未结算
      	
    for(int i = 0; i < v2.size(); i++){
      InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
      		
			oTemp = hVerifyRule.get(bodyVO.getCinvoiceid());
			if(oTemp == null) continue;
			Object data[] = (Object[])oTemp;
			String verifyrule = (String)data[1];
			//if(verifyrule.equals("N") || verifyrule.equals("V")) continue;
			//since v55, 支持消耗汇总的冲暂估应付
      if(verifyrule.equals("N")) continue;

			if(Math.abs(bodyVO.getNaccumsettmny().doubleValue() - bodyVO.getNmoney().doubleValue()) == 0.0){
				vOver.addElement(bodyVO);
			}else{
				if(Math.abs(bodyVO.getNaccumsettmny().doubleValue()) == 0.0){
					vNo.addElement(bodyVO);
				}else{
					vPart.addElement(bodyVO);
				}
			}
      	}
      
      /**
       * 2008.12.29有以下需求变更:
       * 1.采购入库单中如果存货为资产类存货,则不允许作暂估应付,也就是针对该行作暂估时即使暂估应付参数为是也不生成暂估应付单.
       * 2.采购发票中存货为资产类存货的行,则不受暂估应付参数的控制,只要审核就可以传应付.
       */
  		if(filteAssetInv(vPart.toArray(new InvoiceItemVO[0])).length > 0){
  			//发票部分未结算完毕
	      	//判断是否可以冲减暂估应付	      	
	      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
  		}
  		if(filteAssetInv(vNo.toArray(new InvoiceItemVO[0])).length > 0){
  			//发票均未结算完毕
	      	//判断是否可以冲减暂估应付	      	
	      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
  		}

  		if(vOver.size() > 0){
	      	//发票均结算完毕
	      	//判断是否可以冲减暂估应付
	      	
	      	//以发票行ID, 获取入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
	      	HashMap hSettle = getSettleInfoByInvoice(vOver);
	      	if(hSettle == null || hSettle.size() == 0){
	      		//发票未与入库单或消耗汇总结算过,直接返回
	      		return null;
	      	}
	      	
	      	//查询入库单行是否已暂估应付 {入库单行ID或消耗汇总ID=Object[]{应付单据ID}}
	      	HashMap tZGYF = isStockZGYF(hSettle);
	      	if(tZGYF == null || tZGYF.size() == 0){
	      		//入库单未暂估应付,直接返回
	      		return null;
	      	}
	      	
	      	//确定哪些发票行需要回冲: vBid={发票行ID}
	      	//已与入库单或消耗汇总结算, 而且入库单或消耗汇总已暂估应付
	      	vBid = getInvoicesToWashZGYF(hSettle,tZGYF,vOver);
	      	if(vBid == null || vBid.size() == 0) return null;
	      	
	      	//返回冲减VO(不含是否红冲完毕的处理)
	      	IAdjuestVO VOs[] = getReturnVOsToWashZGYF(vBid,hSettle,vOver,tZGYF);
          
	      	return VOs;
  		}
  		
  		return null;
    }
    private HashMap getSettleInfoByInvoice(Vector v22) throws Exception{
      	//以发票行ID, 获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
    	HashMap hSettle = new HashMap();
      	Vector v1 = new Vector();
      	for(int i = 0; i < v22.size(); i++){
      		InvoiceItemVO bodyVO = (InvoiceItemVO) v22.elementAt(i);
      		v1.addElement(bodyVO.getCinvoice_bid());
      	}
      	String sTemp[] = new String[v1.size()];
      	v1.copyInto(sTemp);
      	String strIdSet = null;
    	try {
    		nc.bs.scm.pub.TempTableDMO dmoTmpTbl  = new nc.bs.scm.pub.TempTableDMO();
    		strIdSet = dmoTmpTbl.insertTempTable(sTemp,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU55,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
    		if (strIdSet == null || strIdSet.trim().length() == 0)
    			strIdSet = "('TempTableDMOError')";
    	} catch (Exception e) {
    		throw new BusinessException(e.getMessage());
    	}
    	
      	String sql = "select cinvoice_bid,cstockrow,nsettlenum,nreasonalwastnum,cvmiid from po_settlebill_b where isnull(dr, 0)=0 and cinvoice_bid in ";
      	sql += strIdSet;
      	
    	Connection con = null;
    	PreparedStatement stmt = null;
		String cinvoice_bid = null;
		String cstockrow = null;
    String cvmiid = null;
		Object nsettlenum = null;
		Object nreasonalwastnum = null;
    	
    	try {
    		con=getConnection();
    		stmt = con.prepareStatement(sql);
    		ResultSet rs = stmt.executeQuery();

    		while (rs.next()) {
    			cinvoice_bid = rs.getString(1);
    			cstockrow = rs.getString(2);
    			nsettlenum = rs.getObject(3);
    			nreasonalwastnum = rs.getObject(4);
          //since v55, 支持消耗汇总处理
          cvmiid = rs.getString(5);
    			if(cinvoice_bid == null 
              || (cstockrow == null && cvmiid == null)) {
            continue;
          }				
    			ArrayList list = new ArrayList();   			
    			if(hSettle.get(cinvoice_bid) == null){
    				list.add(new Object[]{cstockrow,nsettlenum,nreasonalwastnum,cvmiid});
    			}else{
    				list = (ArrayList)hSettle.get(cinvoice_bid);
    				list.add(new Object[]{cstockrow,nsettlenum,nreasonalwastnum,cvmiid});
    			}
    			hSettle.put(cinvoice_bid, list);
    		}
    	}
    	finally {
    		try {
    			if (stmt != null) {
    				stmt.close();
    			}
    		}catch (Exception e) {}
    		try {
    			if (con != null) {
    				con.close();
    			}
    		}catch (Exception e) {}
    	}
   	
    	return hSettle;
    }
 
    private HashMap isStockZGYF(HashMap hSettle) throws Exception{
      	//查询入库单行是否已暂估应付
      	Vector v1 = new Vector();
      	Object key = null, data = null, d[] = null;
      	ArrayList list = null;
      	Set keys = hSettle.keySet();
      	Object kKeys[] = new Object[keys.size()];
      	keys.toArray(kKeys);
      	for(int j = 0; j < kKeys.length; j++){
      		key = kKeys[j];
      		data = hSettle.get(key);
      		if(data != null){
      			list = (ArrayList)data;
      			for(int i = 0; i < list.size(); i++){
      				d = (Object[]) list.get(i);
      				if(d[0] != null && !v1.contains(d[0])) v1.addElement(d[0]);
              //since v55, 加入消耗汇总ID
              if(d[3] != null && !v1.contains(d[3])) v1.addElement(d[3]);
      			}
      		}
      	}
      	if(v1.size() == 0) return null;
      	String sTemp[] = new String[v1.size()];
      	v1.copyInto(sTemp);
      	HashMap tZGYF = new PubDMO().queryArrayValues("arap_djfb","ddhh",new String[]{"vouchid"},sTemp,"dr=0 and dwbm = '" + BsPuTool.getLoginCorp(null) + "' ");
      	if(tZGYF == null || tZGYF.size() == 0){
      		//入库单未暂估应付,直接返回
      		return null;
      	}
      	
      	return tZGYF;
    }
    /*
     * 确定哪些发票行需要回冲: vBid={发票行ID}
     */
    private Vector getInvoicesToWashZGYF(HashMap hSettle,HashMap tZGYF,Vector vOver) throws Exception{
      	//确定哪些发票行需要回冲:
      	//已与入库单结算, 而且入库单已暂估应付
      	Vector v1 = new Vector();
      	Object data = null, d[] = null, dd[] = null, oTemp = null;
      	ArrayList list = null;
      	for(int i = 0; i < vOver.size(); i++){
      		InvoiceItemVO bodyVO = (InvoiceItemVO) vOver.elementAt(i);
      		data = hSettle.get(bodyVO.getCinvoice_bid());
      		if(data == null) continue;
      		list = (ArrayList)data;
      		for(int j = 0; j < list.size(); j++){
	      		d = (Object[])list.get(j);
	      		if(d[0] != null || d[3] != null){
	      			oTemp = tZGYF.get(d[0]);
	      			if(oTemp != null){
	      				dd = (Object[])oTemp;
	      				if(dd[0] != null && !v1.contains(bodyVO.getCinvoice_bid())) v1.addElement(bodyVO.getCinvoice_bid());     				
	      			}
              //since v55, 支持消耗汇总ID
              oTemp = tZGYF.get(d[3]);
              if(oTemp != null){
                dd = (Object[])oTemp;
                if(dd[0] != null && !v1.contains(bodyVO.getCinvoice_bid())) v1.addElement(bodyVO.getCinvoice_bid());            
              }
	      		}
      		}
      	}
      	if(v1.size() == 0) return null;
   	
      	return v1;
    }

    private IAdjuestVO[] getReturnVOsToWashZGYF(Vector vBid,HashMap hSettle, Vector vOverItemVo, HashMap tZGYF) throws Exception{
      	Vector v2 = new Vector();
      	UFDouble d1 = null, d2 = null;
      	Object data = null, d[] = null;
      	ArrayList list = null;
  		//sinve v502,
      	HashMap<String, String> mapHid = new HashMap<String, String>();
      	if(vOverItemVo != null && vOverItemVo.size() > 0){
      		InvoiceItemVO bodyVO = null;
	      	for(int i=0; i<vOverItemVo.size(); i++){
	      		bodyVO = (InvoiceItemVO) vOverItemVo.elementAt(i);
	      		if(bodyVO != null
	      				&& bodyVO.getCinvoiceid() != null
	      				&& bodyVO.getCinvoice_bid() != null){
	      			mapHid.put(bodyVO.getCinvoice_bid(), bodyVO.getCinvoiceid());
	      		}
	      	}
      	}
      	//
      	for(int i = 0; i < vBid.size(); i++){
      		data = hSettle.get(vBid.elementAt(i));
      		if(data == null) continue;
      		list = (ArrayList)data;
      		for(int j = 0; j < list.size(); j++){
	     		d = (Object[])list.get(j);
	     		  //since V55, 支持消耗汇总 
	      		if((d[0] == null || tZGYF.get(d[0]) == null)
                &&(d[3] == null || tZGYF.get(d[3]) == null)){
              continue;
            }
	      		//
	      		IAdjuestVO tempVO = new IAdjuestVO();
	      		tempVO.setCinvoice_bid((String)vBid.elementAt(i));
            if(d[0] == null){
              tempVO.setDdhh((String)d[3]);
              tempVO.setVmiFlag(true);
            }else{
              tempVO.setDdhh((String)d[0]);
            }
	      		//sinve v502,
	      		if(tempVO.getCinvoice_bid() != null
	      				&& PuPubVO.getString_TrimZeroLenAsNull(tempVO.getCinvoiceid()) == null){
	      			tempVO.setCinvoiceid(mapHid.get(tempVO.getCinvoice_bid()));
	      		}
	      		//
	      		d1 = new UFDouble(0);
	      		d2 = new UFDouble(0);
	      		if(d[1] != null) d1 = new UFDouble(d[1].toString());
	      		if(d[2] != null) d2 = new UFDouble(d[2].toString());
	      		tempVO.setShl(d1);
	      		      		
	      		v2.addElement(tempVO);	
      		}
       	}
      	//
      	if(v2.size() == 0) return null;
      	//
      	IAdjuestVO VOs[] = new IAdjuestVO[v2.size()];
      	v2.copyInto(VOs);
        //
      	return VOs;  	
    }
    
    
    
    /*
     * 冲减暂估应付调用
     * 
     * 获取调整VO[]
     * 同washDataForZGYF（）的差别仅在于支持虚拟发票
     * 2006-03-23 xhq
     * 
     */
    public IAdjuestVO[] antiWashDataForZGYF(InvoiceVO invoiceVOs[]) throws Exception{
    	Vector vecCbaseid = new Vector(), vecItemVo2 = new Vector(), vecItemVo22 = new Vector();
    	String sUnitCode = null;
    	
    	//发票归类
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
    		sUnitCode = headVO.getPk_corp();
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
     		for(int j = 0; j < bodyVO.length; j++){
    			if(!vecCbaseid.contains(bodyVO[j].getCbaseid())) vecCbaseid.addElement(bodyVO[j].getCbaseid());
    		}
    	}
    	String sTemp[] = new String[vecCbaseid.size()];
    	vecCbaseid.copyInto(sTemp);
    	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp,"dr=0");
    	vecCbaseid = new Vector();
    	Object oTemp = null, invFlag[] = null;
      	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
    		InvoiceHeaderVO headerVO = (InvoiceHeaderVO)invoiceVOs[i].getParentVO();
    		for(int j = 0; j < bodyVO.length; j++){
    			oTemp = hInv.get(bodyVO[j].getCbaseid());
    			if(oTemp != null){
    				invFlag = (Object[]) oTemp;
    				if(invFlag[0].equals("Y") 
                || invFlag[1].equals("Y") 
                || headerVO.getIinvoicetype().intValue() == 3) {
                vecCbaseid.addElement(bodyVO[j]);//同washDataForZGYF（）的差别仅在于支持虚拟发票
            }else{
                vecItemVo2.addElement(bodyVO[j]);
            }
    			}
    			if(Math.abs(bodyVO[j].getNaccumsettmny().doubleValue() - bodyVO[j].getNmoney().doubleValue()) <= 0.0){
    				vecItemVo22.addElement(bodyVO[j]);
    			}
    			
    		}
      	}
      	if(vecItemVo2.size() == 0 || vecItemVo22.size() == 0) return null;
      	
      	//以发票行ID, 获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量, 消耗总ID
      	HashMap hSettle = getSettleInfoByInvoice(vecItemVo22);
      	if(hSettle == null || hSettle.size() == 0) return null;
      	
      	//查询入库单行是否已暂估应付
      	vecCbaseid = new Vector();
      	Object key = null, data = null, d[] = null, dd[] = null;
      	Set keys = hSettle.keySet();
      	Object kKeys[] = new Object[keys.size()];
      	keys.toArray(kKeys);
      	for(int j = 0; j < kKeys.length; j++){
      		key = kKeys[j];
      		data = hSettle.get(key);
      		if(data != null){
      			ArrayList list = (ArrayList)data;
      			if(list == null || list.size() == 0) continue;
      			for(int k = 0; k < list.size(); k++){
          			d = (Object[]) list.get(k);
                if(d[0] != null && !vecCbaseid.contains(d[0])){
                  vecCbaseid.addElement(d[0]);              
                }
          			if(d[3]!= null && !vecCbaseid.contains(d[3])){
                  vecCbaseid.addElement(d[3]);              
                }
      			}
      		}
      	}
      	if(vecCbaseid.size() == 0) return null;
      	sTemp = new String[vecCbaseid.size()];
      	vecCbaseid.copyInto(sTemp);
      	HashMap tZGYF = new PubDMO().queryArrayValues("arap_djfb","ddhh",new String[]{"vouchid"},sTemp,"dr=0");
      	if(tZGYF == null || tZGYF.size() == 0) return null;
      	
      	//确定哪些发票行需要回冲
      	vecCbaseid = new Vector();
      	Vector vv = null;
      	for(int i = 0; i < vecItemVo22.size(); i++){
      		InvoiceItemVO bodyVO = (InvoiceItemVO) vecItemVo22.elementAt(i);
      		data = hSettle.get(bodyVO.getCinvoice_bid());
      		if(data == null) continue;
      		ArrayList list = (ArrayList)data;
      		if(list == null || list.size() == 0) continue;
      		for(int k = 0; k < list.size(); k++){
	      		d = (Object[])list.get(k);
	      		if(d[0] != null){
	      			oTemp = tZGYF.get(d[0]);
	      			if(oTemp != null){
	      				dd = (Object[])oTemp;
	      				if(dd[0] != null && !vecCbaseid.contains(bodyVO.getCinvoice_bid())) vecCbaseid.addElement(bodyVO.getCinvoice_bid());
	      			}
	      		}
            if(d[3] != null){
              oTemp = tZGYF.get(d[3]);
              if(oTemp != null){
                dd = (Object[])oTemp;
                if(dd[0] != null && !vecCbaseid.contains(bodyVO.getCinvoice_bid())) vecCbaseid.addElement(bodyVO.getCinvoice_bid());
              }
            }
      		}
      	}
      	if(vecCbaseid.size() == 0) return null;
      	
      	//返回冲减VO
      	vecItemVo2 = new Vector();
      	UFDouble d1 = null, d2 = null;
      	for(int i = 0; i < vecCbaseid.size(); i++){
      		data = hSettle.get(vecCbaseid.elementAt(i));
      		if(data == null) continue;
      		ArrayList list = (ArrayList)data;
      		if(list == null || list.size() == 0) continue;
      		
      		for(int k = 0; k < list.size(); k++){
	     		d = (Object[])list.get(k);
	      		if((d[0] == null || tZGYF.get(d[0]) == null)
                && (d[3] == null || tZGYF.get(d[3]) == null)) {
              continue;
            }
	      		//
	      		IAdjuestVO tempVO = new IAdjuestVO();
	      		tempVO.setCinvoice_bid((String)vecCbaseid.elementAt(i));
            if(PuPubVO.getString_TrimZeroLenAsNull(d[3]) != null){
              tempVO.setVmiFlag(true); 
              tempVO.setDdhh((String)d[3]);
            }else if(PuPubVO.getString_TrimZeroLenAsNull(d[0]) != null){
              tempVO.setDdhh((String)d[0]);
            }
	      		
	      		d1 = new UFDouble(0);
	      		d2 = new UFDouble(0);
	      		if(d[1] != null) d1 = new UFDouble(d[1].toString());
	      		if(d[2] != null) d2 = new UFDouble(d[2].toString());
	      		tempVO.setShl(d1);      	      		
	      		      		
	      		vecItemVo2.addElement(tempVO);	
      		}
      	}
      	
      	IAdjuestVO VOs[] = new IAdjuestVO[vecItemVo2.size()];
      	vecItemVo2.copyInto(VOs);
    	return VOs;
    }
     
    
    /**
     * @function 费用暂估应付的取消传应付
     *
     * @author ouyangzhb 
     *
     * @param voaInv
     * @throws BusinessException 
     *
     * @return IAdjuestVO
     *
     * @date 2011-05-10 
     */
    
    public IAdjuestVO[] antiWashDataForFEEZGYF(InvoiceVO invoiceVOs[]) throws Exception{
    	Vector vecCbaseid = new Vector(), vecItemVo2 = new Vector(), vecItemVo22 = new Vector();
    	String sUnitCode = null;
    	
    	//发票归类
    	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
    		sUnitCode = headVO.getPk_corp();
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
     		for(int j = 0; j < bodyVO.length; j++){
    			if(!vecCbaseid.contains(bodyVO[j].getCbaseid())) 
    				vecCbaseid.addElement(bodyVO[j].getCbaseid());
    			
    		}
    	}
    	String sTemp[] = new String[vecCbaseid.size()];
    	vecCbaseid.copyInto(sTemp);
    	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp,"dr=0");
    	vecCbaseid = new Vector();
    	Object oTemp = null, invFlag[] = null;
      	for(int i = 0; i < invoiceVOs.length; i++){
    		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
    		InvoiceHeaderVO headerVO = (InvoiceHeaderVO)invoiceVOs[i].getParentVO();
    		for(int j = 0; j < bodyVO.length; j++){
    			oTemp = hInv.get(bodyVO[j].getCbaseid());
    			if(oTemp != null){
    				invFlag = (Object[]) oTemp;
    				//add by ouyangzhb 2011-06-12 过滤物料发票 begin
    				if(invFlag[0].equals("Y") ) {
//                vecCbaseid.addElement(bodyVO[j]);//同washDataForZGYF（）的差别仅在于支持虚拟发票
//            }else{
                vecItemVo2.addElement(bodyVO[j]);
            }
    				//add by ouyangzhb 2011-06-12 过滤物料发票 end
    			}
//    			if(Math.abs(bodyVO[j].getNaccumsettmny().doubleValue() - bodyVO[j].getNmoney().doubleValue()) <= 0.0){
    				vecItemVo22.addElement(bodyVO[j]);
//    			}
    		}
      	}
      	if(vecItemVo2.size() == 0 || vecItemVo22.size() == 0) return null;
      	
      	//以发票行ID, 获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量, 消耗总ID
      
//      	if(hSettle == null || hSettle.size() == 0) return null;
      
      	//查询发票参照的暂估应付单
      
      	Object key = null, data = null, d[] = null, dd[] = null;
      	for(int i=0;i<vecItemVo22.size();i++){
      		 InvoiceItemVO vo = (InvoiceItemVO) vecItemVo22.elementAt(i);
      		vecCbaseid.addElement(vo.getCsourcebillrowid());
      	}
      	if(vecCbaseid.size() == 0) return null;
      	sTemp = new String[vecCbaseid.size()];
      	vecCbaseid.copyInto(sTemp);
//      	HashMap tZGYF = new PubDMO().queryArrayValues("arap_djfb","ddhh",new String[]{"vouchid"},sTemp,"dr=0");
//      	if(tZGYF == null || tZGYF.size() == 0) return null;
      	
      	//add by ouyangzhb 2011-08-20 不能注解，因为需要用这个条件来判断是否是“手工自制费用发票”（有没有来源单据-采购订单）
      		HashMap tZGYF = new PubDMO().queryArrayValues("arap_djfb","ddhh",new String[]{"vouchid"},sTemp,"dr=0");
      		if(tZGYF == null || tZGYF.size() == 0) return null;
      	
      	//确定哪些发票行需要回冲
      	vecCbaseid = new Vector();
      	vecItemVo2 =  new Vector();
      	for(int i = 0; i < vecItemVo22.size(); i++){
      		InvoiceItemVO bodyVO = (InvoiceItemVO) vecItemVo22.elementAt(i);
      		//
      		IAdjuestVO tempVO = new IAdjuestVO();
      		tempVO.setCinvoice_bid(bodyVO.getCinvoice_bid());
       
          tempVO.setDdhh(bodyVO.getCsourcebillrowid());
      		vecItemVo2.addElement(tempVO);	
      		
              }
      
      	IAdjuestVO VOs[] = new IAdjuestVO[vecItemVo2.size()];
    	vecItemVo2.toArray(VOs);
//      	vecItemVo2.copyInto(VOs);
    	return VOs;
    }
    /*
     * 获取采购发票的核算规则和单据状态
     */
    public Hashtable queryVerifyRuleAndBillStatus(String cinvoiceid[]) throws SQLException{
    	String sql = "select A.cinvoiceid, A.ibillstatus, B.verifyrule from po_invoice A, bd_busitype B ";
    	sql += "where A.cbiztype = B.pk_busitype and A.dr = 0 and A.cinvoiceid in";
    	String strSetId = null;
    	try {
    		nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
    		strSetId =
    			dmoTmpTbl.insertTempTable(cinvoiceid, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
    		if (strSetId == null || strSetId.trim().equals("()")) {
    			strSetId = " ('ErrorPk') ";
    		}
    	} catch (Exception e) {
    		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000413")/*@res "调用临时表处理出现异常:"*/ + e.getMessage());
    	}
    	sql += strSetId;

    	Connection con = null;
    	PreparedStatement stmt = null;
    	Hashtable h = new Hashtable();
    	try {
    		con=getConnection();
    		stmt = con.prepareStatement(sql);
    		ResultSet rs = stmt.executeQuery();

    		while (rs.next()) {
    			String s1 = rs.getString(1);
    			Object o = rs.getObject(2);
    			String s2 = rs.getString(3);
    			if(s1 != null && o != null && s2 != null) h.put(s1, new Object[]{o,s2});
    		}

    		//关闭结果集,即时释放资源
    		rs.close();
    	}
    	finally {
    		try {
    			if (stmt != null) {
    				stmt.close();
    			}
    		}catch (Exception e) {}
    		try {
    			if (con != null) {
    				con.close();
    			}
    		}catch (Exception e) {}
    	}

    	return h;
    }
    /**
     * 直运销售毛利报表需要发票提供的接口
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param corder_bid
     * @return
     * @throws SQLException
     * <p>
     * @author lixiaodong
     * @time 2007-7-13 上午11:02:01
     */
    public ArrayList queryInfoForOrder(String corder_bid) throws SQLException {

		if (PuPubVO.getString_TrimZeroLenAsNull(corder_bid) == null) {
			return null;
		}
		ArrayList arr = new ArrayList();
		String sql = "select sum(nmoney) as nmoney,sum(ninvoicenum) as ninvoicenum from po_invoice_b where dr = 0 and csourcebillrowid = '";
		sql += corder_bid + "'";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			ResultSet rs = stmt.executeQuery();

			while (rs.next()) {
				BigDecimal nmoney = rs.getBigDecimal(1);
				BigDecimal ninvoicenum = rs.getBigDecimal(2);
				UFDouble r0 = null;
				UFDouble r1 = null;

				
				if (nmoney == null) {
					arr.add(0);
				} else {
					r0 = new UFDouble(nmoney);
					arr.add(r0);
				}
				if (ninvoicenum != null && ninvoicenum.doubleValue()!= 0) {
					r1 = new UFDouble(ninvoicenum);
					arr.add(r0.div(r1));
				} else {
					arr.add(0);
				}
			}
			//关闭结果集,即时释放资源
			rs.close();
		} catch (Exception e) {
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return arr;
	}

   /**
   * 根据库存组织从仓库档案中获取直运仓  V502 集采分收集结模式下，采购发票表头库存组织应该是采购组织对应的内部结算库存组织；表体仓库应为直运仓。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param sCstoreorganization 库存组织ID
   * @return
   * @throws SQLException
   * <p>
   * @author lixiaodong
   * @time 2007-8-24 下午04:29:12
   */
  public String queryStordocByStoreorg(String sCstoreorganization) throws SQLException {

    if (PuPubVO.getString_TrimZeroLenAsNull(sCstoreorganization) == null) {
      return null;
    }
    String stor = null;
    String sql = "select pk_stordoc from bd_stordoc where isdirectstore = 'Y' and pk_calbody='";
    sql += sCstoreorganization + "'";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();

      while (rs.next()) {
        stor = rs.getString(1);

      }
      //关闭结果集,即时释放资源
      rs.close();
    } catch (Exception e) {
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return stor;
  }


  /**
   * 采购发票参照采购入库单保存时增加检验,检查发票日期是否大于等于采购入库单业务日期
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param InvoiceVO
   * @return
   * @throws Exception
   *             <p>
   * @author lixiaodong
   * @time 2008-01-31 09:33:21
   */
  public void checkInvoiceDateAndStoDate(InvoiceVO invVO) throws Exception {

	  if (invVO == null || invVO.getHeadVO() == null) {
		  return;
	  }
	  UFDate invoiceDate = invVO.getHeadVO().getDinvoicedate();
	  InvoiceItemVO[] voaItem = invVO.getBodyVO();
	  int iLen = voaItem.length;
	  StringBuffer errorLins = new StringBuffer();

	  for (int i = 0; i < iLen; i++) {
		  // 删除的行和不是来源于采购入库单的不作检查
		  if (voaItem[i].getStatus() == VOStatus.DELETED
				  || voaItem[i].getCupsourcebilltype() == null
				  || !voaItem[i].getCupsourcebilltype().equals(
						  nc.vo.scm.pu.BillTypeConst.STORE_PO)) {
			  continue;
		  }
		  String strUupsourcebillrowid = voaItem[i].getCupsourcebillrowid();
		  if (PuPubVO.getString_TrimZeroLenAsNull(strUupsourcebillrowid) != null) {
			  String strWhere = " (ic_general_b.cgeneralbid= '" + strUupsourcebillrowid + "')";
			  Object[] obGeneVO = findGeneralVOsFromIDs(strWhere);
			  Vector geneHVEC = (Vector) obGeneVO[0];
			  Vector geneBVEC = (Vector) obGeneVO[1];
//			  Vector geneBB3VEC = (Vector) obGeneVO[2];

			  for (int j = 0; j < geneHVEC.size(); j++) {
				  if (((GeneralBillItemVO) geneBVEC.get(j)).getCgeneralbid().equals(strUupsourcebillrowid)) {
					  UFDate dbizdate = ((GeneralBillItemVO) geneBVEC.get(j)).getDbizdate();
					  if (dbizdate.compareTo(invoiceDate) > 0) {
						  errorLins.append(voaItem[i].getCrowno() + "行：发票日期(" + invoiceDate + ")小于入库日期(" + dbizdate.toString() + ")"+"\n");
					  }
				  }
			  }
		  }
	  }
		try {
			if(errorLins.length() > 0){
				throw new BusinessException(errorLins.toString());
			}
		} catch (Exception e) {
			nc.bs.pu.pub.PubDMO.throwBusinessException(e) ;
		}

  }

  /**
   * 方法功能描述：批量更改发票上是否已传应付标志。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param arr
   * @throws SQLException
   * @throws BusinessException
   * <p>
   * @author lixiaodong
   * @time 2008-7-29 下午03:10:34
   */
  public void updateBapFlag(java.util.ArrayList arr) throws BusinessException {

    //参数检查
    if ( arr==null || arr.size()<2) {
      SCMEnv.out("nc.bs.pi.InvoiceDMO.updateBapFlag(java.util.ArrayList)传入参数不正确！") ;
      return  ;
    }
//    ArrayList arr1 = new ArrayList();
//    arr1.add(vctRowId.toArray());
//    arr1.add(new UFBoolean("Y"));

    String strOperator = ",'";
    Object[] strCinvoiceid = (Object[]) arr.get(0);
    int iLen = strCinvoiceid.length;
    UFBoolean bfaflag = (UFBoolean) arr.get(1);
    
    String sql = "update po_invoice set bapflag = '" + bfaflag.toString() + "' where dr = 0 and cinvoiceid in ( '";
    
      for (int i = 0; i < iLen - 1; i++) {
          if (PuPubVO.getString_TrimZeroLenAsNull(strCinvoiceid[i].toString()) != null) {
            sql += strCinvoiceid[i].toString() + "'" + strOperator;
          }
        }
        if (PuPubVO.getString_TrimZeroLenAsNull(strCinvoiceid[iLen - 1]) != null) {
          sql += strCinvoiceid[iLen - 1].toString() + "')";
        }
        else {
          sql = sql.substring(0, sql.length() - strOperator.length()) + ")";
        }
    
      Connection con = null;
      PreparedStatement stmt = null;
      try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        stmt.executeUpdate();
      }catch(SQLException e){
        SCMEnv.out(e);
        throw new BusinessException(e);
      }finally {
        try {
          if (stmt != null) {
            stmt.close();
          }
        }
        catch (Exception e) {
        }
        try {
          if (con != null) {
            con.close();
          }
        }
        catch (Exception e) {
        }
      }
  }
  /**
   * 父类方法重写
   * 
   * @see nc.vo.pf.change.IChangeVOCheck#checkValidOrNeed(nc.vo.pub.AggregatedValueObject, java.lang.String, java.lang.String, java.lang.String)
   * 
   *<p> V55增加如下检查：
   *<p> 1、审批：V55开始，不再支持从发票审批直接配置应付的保存组件[SAVE]。只能配置采购发票的传应付组件[CRTAPBILL]
   *<p> 2、审批：驱动配置的完整性检查:要使用采购发票审批自动传应付功能，还需要调整业务类型{0}下采购发票的流程配置，
   *<p>    在采购发票[25]的传应付组件［CRTAPBILL］的被驱动动作列表里配置应付的保存组件[SAVE]。
   *<p> 3、弃审：采购发票[25]的弃审组件[]的被驱动动作里，只支持采购发票[25]的取消传应付组件［DELAPBILL］
   *<p> 4、弃审：采购发票弃审驱动取消传应付功能，必须在配置了采购发票审批驱动传应付功能时才可用
   */
  public boolean checkValidOrNeed(AggregatedValueObject srcBillVo, 
      String srcAction, String destBilltype, String drivedAction) throws BusinessException {
    //业务类型
    String strBizTypeId = ((InvoiceVO) srcBillVo).getHeadVO().getCbiztype();
    BusitypeVO voBusitype = null;
    String strBizTypeName = "";     
    //审批驱动的检查,配置了目标单据类型时才有必要检查
    if ("APPROVE".equalsIgnoreCase(srcAction) && destBilltype != null && destBilltype.trim().length() > 0){ 
        InvoiceImpl invoiceImpl = new InvoiceImpl();
        //V55开始，不再支持从发票审批直接配置应付的保存组件[SAVE]。只能配置采购发票的传应付组件[CRTAPBILL]
        if(!"25".equalsIgnoreCase(destBilltype) || !"CRTAPBILL".equalsIgnoreCase(destBilltype)) {
          voBusitype = invoiceImpl.getBusitypeVO(strBizTypeId);
          if(voBusitype != null){
            strBizTypeName = voBusitype.getBusiname();
          }
          throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
              "40040401","UPP40040401-000263", null, new String[]{strBizTypeName})
              /*@res "V55开始，不再支持从发票审批直接配置应付的保存组件[SAVE]。只能配置采购发票的传应付组件[CRTAPBILL]
             * 采购发票审批自动传应付流程配置方法：调整业务类型{0}下采购发票的流程配置，先将采购发票审批组件[APPROVE]的被驱动动作配置为采购发票[25]的传应付组件［CRTAPBILL］ ，
             * 再在采购发票[25]的传应付组件［CRTAPBILL］的被驱动动作列表里，配置应付的保存组件[SAVE]。"*/);
        }
        //驱动配置的完整性检查:要使用采购发票审批自动传应付功能，还需要调整业务类型{0}下采购发票的流程配置，在采购发票[25]的传应付组件［CRTAPBILL］的被驱动动作列表里配置应付的保存组件[SAVE]。
        if(!invoiceImpl.isValidActionDrive(strBizTypeId, "25", "CRTAPBILL", "SAVE")){
          voBusitype = invoiceImpl.getBusitypeVO(strBizTypeId);
          if(voBusitype != null){
            strBizTypeName = voBusitype.getBusiname();
          }
          throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
              "40040401","UPP40040401-000264", null, new String[]{strBizTypeName})
              /*@res "要使用采购发票审批自动传应付功能，还需要调整业务类型{0}下采购发票的流程配置，在采购发票[25]的传应付组件［CRTAPBILL］的被驱动动作列表里配置应付的保存组件[SAVE]。"*/);
        }
    }
    //弃审驱动的检查, 配置了目标单据类型时才有必要检查
    if ("UNAPPROVE".equalsIgnoreCase(srcAction) && destBilltype != null && destBilltype.trim().length() > 0){
      InvoiceImpl invoiceImpl = new InvoiceImpl();
      //采购发票[25]的弃审组件[]的被驱动动作里，只支持采购发票[25]的取消传应付组件［DELAPBILL］
      if(!"25".equalsIgnoreCase(destBilltype) || !"DELAPBILL".equalsIgnoreCase(destBilltype)) {
        voBusitype = invoiceImpl.getBusitypeVO(strBizTypeId);
        if(voBusitype != null){
          strBizTypeName = voBusitype.getBusiname();
        }
        throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
          "40040401","UPP40040401-000265", null, new String[]{strBizTypeName})
          /*@res "采购发票[25]的弃审组件[UNAPPROVE]的被驱动动作里，只支持采购发票[25]的取消传应付组件［DELAPBILL］,请调整业务类型{0}下采购发票的流程配置。"*/);
      }
      //采购发票弃审驱动取消传应付功能，必须在配置了采购发票审批驱动传应付功能时才可用。
      if(!invoiceImpl.isValidActionDrive(strBizTypeId, "25", "APPROVE", "CRTAPBILL")){
        voBusitype = invoiceImpl.getBusitypeVO(strBizTypeId);
        if(voBusitype != null){
          strBizTypeName = voBusitype.getBusiname();
        }
        throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
            "40040401","UPP40040401-000266", null, new String[]{strBizTypeName})
            /*@res "采购发票弃审驱动取消传应付功能，必须在配置了采购发票审批驱动传应付功能时才可用。
             * 发票审批自动传应付流程配置方法：调整业务类型{0}下采购发票的流程配置，先将采购发票审批组件[APPROVE]的被驱动动作配置为采购发票[25]的传应付组件［CRTAPBILL］ ，
             * 再在采购发票[25]的传应付组件［CRTAPBILL］的被驱动动作列表里，配置应付的保存组件[SAVE]。"*/);
      }
    }
    return true;
  }
  
  public HashMap findOrderBIDByInvoiceBID(String[] invoiceBID) throws Exception {
    if (invoiceBID == null || invoiceBID.length < 1)
      return null;
    HashMap h = new PubDMO().queryArrayValues("po_invoice_b", "cinvoice_bid", new String[] { "cinvoice_bid,cupsourcebillrowid" }, invoiceBID, "dr=0 and cupsourcebilltype = '21'");
    if (h == null || h.size() == 0) {
      return null;
    }
    return h;
  }
  
  /**
   * ｌｉｙｃ
   */
  public HashMap findOrderBIDByInvoiceBIDByLiyc(String[] invoiceBID) throws BusinessException {
	  if (invoiceBID == null || invoiceBID.length < 1)
	      return null;
	  HashMap hData = new HashMap();
	  try {
	  nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
	    String strIdsSet = tmpTblDmo.insertTempTable(invoiceBID,
	        nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI016,
	        nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
	    
	    String sql = "select csourcebillrowid,cinvoice_bid from po_invoice_b where cinvoice_bid in " + strIdsSet + " and dr = 0 and csourcebilltype = '21'";
	  Connection con = null;
	    PreparedStatement stmt = null;
	      con = getConnection();
	      stmt = con.prepareStatement(sql);
	      ResultSet rs = stmt.executeQuery();
	      while(rs.next()){
	    	  String sInvoicebid = rs.getString("cinvoice_bid");
	    	  String sOrderbid = rs.getString("csourcebillrowid");
	    	  hData.put(sInvoicebid, sOrderbid);
	      }
	      } catch (Exception e) {
	  		throw new BusinessException(e.getMessage(), e);
	  	}
	      return hData;
  }
  public HashMap findInvoiceBIDByOrderBID(String[] orderBID) throws BusinessException {
    if (orderBID == null || orderBID.length < 1)
      return null;
    HashMap<String,Set<String>> hData = new HashMap<String,Set<String>>();
    try {
      nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
      String strIdsSet = tmpTblDmo.insertTempTable(orderBID,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PI016,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);

      String sql = "select csourcebillrowid,cinvoice_bid from po_invoice_b where csourcebillrowid in " + strIdsSet + " and dr = 0 and csourcebilltype = '21'";
      Connection con = null;
      PreparedStatement stmt = null;
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      while(rs.next()){
        String sInvoicebid = rs.getString("cinvoice_bid");
        String sOrderbid = rs.getString("csourcebillrowid");
        Set<String> invItems=new HashSet<String>();
        if(hData.containsKey(sOrderbid)){
          invItems=hData.get(sOrderbid);
        }
        invItems.add(sInvoicebid);
        hData.put(sOrderbid, invItems);
      }
    } catch (Exception e) {
      throw new BusinessException(e.getMessage(), e);
    }
    return hData;
  }
  /**
   * 
   * 送审之后，设置状态为审批中状态
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param vos
   * @throws java.sql.SQLException
   * @throws BusinessException
   * <p>
   * @author donggq
   * @time 2008-8-20 下午04:03:23
   * @modify by zhaoyha at 2009.8
   * 修改为批量处理，并过滤掉不可送审的单据
   */
  public void setCheckGoing(InvoiceVO[] vos)
  	throws java.sql.SQLException, BusinessException {
    vos=new InvoiceImpl().getNeedSendAuditVos(vos);
	  if(null==vos || vos.length<1){
		  return;
	  }
	  String strSql = "update po_invoice set  ibillstatus = 2 where cinvoiceid = ? and dr = 0";
	  Connection con = null;
	  PreparedStatement stmt = null;
	  try {
		  con = getConnection();
		  stmt = prepareStatement(con, strSql);
		  for(InvoiceVO vo:vos){
		    stmt.setString(1, vo.getPrimaryKey());
		    executeUpdate(stmt);
		  }
		  executeBatch(stmt);
	  } finally {
		  try {
			  if (stmt != null) {
				  stmt.close();
			  }
		  } catch (Exception e) {//
		  }
		  try {
			  if (con != null) {
				  con.close();
			  }
		  } catch (Exception e) {//
		  }
	  }
  }

  /**
   * 
   * 方法功能描述：过滤掉发票行VO中的资产存货行。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param itemVos 非资产存货的发票行VO(永远非NULL,长度可能为零)
   * @return
   * @throws BusinessException
   * <p>
   * @author zhaoyha
   * @time 2008-12-29 下午01:50:10
   */
  public InvoiceItemVO[] filteAssetInv(InvoiceItemVO[] itemVos) throws BusinessException{
    //保存所有暂估VO的<存货基本ID,暂估VO>
    Map<String,InvoiceItemVO> allVos=new HashMap<String,InvoiceItemVO>();
    ArrayList<String> invBasIDs=new ArrayList<String>();
    for(InvoiceItemVO vo:itemVos){
      allVos.put(vo.getCbaseid(), vo);
      invBasIDs.add(vo.getCbaseid());
    }
    Map assetInvs=null;
    try{
      PubDMO dmo=new PubDMO();
      assetInvs=dmo.queryArrayValues("bd_invbasdoc", 
          "pk_invbasdoc", new String[]{"asset"}, invBasIDs.toArray(new String[0]),"asset='Y' ");
    }catch(Exception e){
      PubDMO.throwBusinessException(e);
    }
    if(assetInvs==null || assetInvs.size()==0) return itemVos;
    //将资产存货过滤掉
    for(Object key:assetInvs.keySet())
      allVos.remove(key);
    return allVos.values().toArray(new InvoiceItemVO[0]);
  }
  
  public void setStockBodyVendorBasID(GeneralBillVO[] vos) 
  throws BusinessException{
    if(ArrayUtils.isEmpty(vos)) return;
    List<String> vendorManIdList=new ArrayList<String>();
    for(GeneralBillVO vo:vos)
      for(GeneralBillItemVO item:vo.getItemVOs()){
        String vendorManId=item.getCvendorid();
        if(StringUtil.isEmptyWithTrim(vendorManId)) continue;
        vendorManIdList.add(vendorManId);
      }
    Map vendorBasIdMap=null;
    try{
      PubDMO dmo=new PubDMO();
      vendorBasIdMap=dmo.queryArrayValues("bd_cumandoc", 
          "pk_cumandoc", new String[]{"pk_cubasdoc"}, 
          vendorManIdList.toArray(new String[0]),"");
    }catch(Exception e){
      PubDMO.throwBusinessException(e);
    }
    if(null==vendorBasIdMap || 0==vendorBasIdMap.size()) return;
    for(GeneralBillVO vo:vos)
      for(GeneralBillItemVO item:vo.getItemVOs())
        item.setPk_cubasdoc(
            (String) ((Object[])vendorBasIdMap.get(item.getCvendorid()))[0]);
  }
  /**
 * @function 费用发票处理
 *
 * @author QuSida
 *
 * @param vBid
 * @param hSettle
 * @param vOverItemVo
 * @param tZGYF
 * @throws Exception 
 *
 * @return IAdjuestVO[]
 *
 * @date 2010-9-27 上午11:12:12
 */
private IAdjuestVO[] getReturnVOsToWashFeeZGYF(Vector vBid,HashMap hSettle, Vector vOverItemVo, HashMap tZGYF) throws Exception{
    	Vector v2 = new Vector();
    	UFDouble d1 = null, d2 = null;
    	Object data = null, d[] = null;
    	ArrayList list = null;
		//sinve v502,
    	HashMap<String, String> mapHid = new HashMap<String, String>();
    	//add by ouyangzhb 2011-05-09 把ddh保存到tempVO中  begin
    	HashMap<String, String> mapddh = new HashMap<String, String>();
    	
    	//add by ouyangzhb 2013-10-21 本次开票数量
    	HashMap<String, UFDouble> mapshl = new HashMap<String, UFDouble>();
    	if(vOverItemVo != null && vOverItemVo.size() > 0){
    		InvoiceItemVO bodyVO = null;
	      	for(int i=0; i<vOverItemVo.size(); i++){
	      		bodyVO = (InvoiceItemVO) vOverItemVo.elementAt(i);
	      		if(bodyVO != null
	      				&& bodyVO.getCinvoiceid() != null
	      				&& bodyVO.getCinvoice_bid() != null){
	      			mapHid.put(bodyVO.getCinvoice_bid(), bodyVO.getCinvoiceid());
	      			mapddh.put(bodyVO.getCinvoice_bid(), bodyVO.getCupsourcebillrowid());
	      			mapshl.put(bodyVO.getCinvoice_bid(), bodyVO.getNinvoicenum());
	      		}
	      	}
    	}
    	//
    	for(int i = 0; i < vBid.size(); i++){
//     		data = hSettle.get(vBid.elementAt(i));
//     		if(data == null) continue;
//     		list = (ArrayList)data;
//    		for(int j = 0; j < list.size(); j++){
//	     		d = (Object[])list.get(j);
	     		  //since V55, 支持消耗汇总 
//	      		if((d[0] == null || tZGYF.get(d[0]) == null)
//              &&(d[3] == null || tZGYF.get(d[3]) == null)){
//            continue;
//          }
	      		//
	      		IAdjuestVO tempVO = new IAdjuestVO();
	      		tempVO.setCinvoice_bid((String)vBid.elementAt(i));
//          if(d[0] == null){
//            tempVO.setDdhh((String)d[3]);
//            tempVO.setVmiFlag(true);
//          }else{
//            tempVO.setDdhh((String)d[0]);
//          }
	      		//sinve v502,
	      		if(tempVO.getCinvoice_bid() != null
	      				&& PuPubVO.getString_TrimZeroLenAsNull(tempVO.getCinvoiceid()) == null){
	      			tempVO.setCinvoiceid(mapHid.get(tempVO.getCinvoice_bid()));
	      		}
	      		//
	      		d1 = new UFDouble(0);
//	      		d2 = new UFDouble(0);
//	      		if(d[1] != null) d1 = new UFDouble(d[1].toString());
//	      		if(d[2] != null) d2 = new UFDouble(d[2].toString());
	      		tempVO.setShl(mapshl.get(tempVO.getCinvoice_bid()));
	      		tempVO.setDdhh(mapddh.get(tempVO.getCinvoice_bid()));
	      		//add 2011-05-09 end
	      		
	      		      		
	      		v2.addElement(tempVO);	
    		
     	}
    	//
    	if(v2.size() == 0) return null;
    	//
    	IAdjuestVO VOs[] = new IAdjuestVO[v2.size()];
    	v2.copyInto(VOs);
      //
    	return VOs;  	
  }
  /**
 * @function 费用发票处理   确定哪些发票行需要回冲: vBid={发票行ID}
 *
 * @author QuSida
 *
 * @param hSettle
 * @param tZGYF
 * @param vOver
 * @throws Exception 
 *
 * @return Vector
 *
 * @date 2010-9-27 上午11:11:36
 */
private Vector getInvoicesToWashFeeZGYF(HashMap hSettle,HashMap tZGYF,Vector vOver) throws Exception{
    	//确定哪些发票行需要回冲:
    	//已与入库单结算, 而且入库单已暂估应付
    	Vector v1 = new Vector();
    	Object data = null, d[] = null, dd[] = null, oTemp = null;
    	ArrayList list = null;
    	for(int i = 0; i < vOver.size(); i++){
    		InvoiceItemVO bodyVO = (InvoiceItemVO) vOver.elementAt(i);
//    		data = hSettle.get(bodyVO.getCinvoice_bid());
//    		if(data == null) continue;
//    		list = (ArrayList)data;
//    		for(int j = 0; j < list.size(); j++){
//	      		d = (Object[])list.get(j);
//	      		if(d[0] != null || d[3] != null){
//	      			oTemp = tZGYF.get(d[0]);
//	      			if(oTemp != null){
//	      				dd = (Object[])oTemp;
//	      				if(dd[0] != null && !v1.contains(bodyVO.getCinvoice_bid())) 
//	      					v1.addElement(bodyVO.getCinvoice_bid());     				
//	      			}
            //since v55, 支持消耗汇总ID
//            oTemp = tZGYF.get(d[3]);
//            if(oTemp != null){
//              dd = (Object[])oTemp;
//              if(dd[0] != null && !v1.contains(bodyVO.getCinvoice_bid())) 
            	  v1.addElement(bodyVO.getCinvoice_bid());            
//            }
//	      		}
//    		}
    	}
    	if(v1.size() == 0) return null;
 	
    	return v1;
  }

/*
 *  add by  ouyangzhb 2011-07-06
 * 手工结算的时候冲减暂估应付调用
 * 获取调整VO[]
 *
 */
public IAdjuestVO[] washDataForSettle(InvoiceVO invoiceVOs[],SettlebillVO settleVO) throws Exception{
	Vector vBid = new Vector(), v2 = new Vector();
	String sUnitCode = null;
	
	//发票归类
	for(int i = 0; i < invoiceVOs.length; i++){
		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
		sUnitCode = headVO.getPk_corp();
		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
 		for(int j = 0; j < bodyVO.length; j++){
			if(!vBid.contains(bodyVO[j].getCbaseid())) vBid.addElement(bodyVO[j].getCbaseid());
		}
	}
	String sTemp[] = new String[vBid.size()];
	vBid.copyInto(sTemp);
	
	ISysInitQry myService = (ISysInitQry) NCLocator.getInstance().lookup(ISysInitQry.class.getName());
	String sZGYF = myService.getParaString(sUnitCode,"PO52");
	if(sZGYF.equals("N") || sZGYF.equals("否")) return null;

	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp," dr = 0 ");
	vBid = new Vector();
	Object oTemp = null, invFlag[] = null;
	for(int i = 0; i < invoiceVOs.length; i++){
		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
		for(int j = 0; j < bodyVO.length; j++){
				oTemp = hInv.get(bodyVO[j].getCbaseid());
    			if(oTemp != null){
    				invFlag = (Object[]) oTemp;
    				if(invFlag[0].equals("Y") || invFlag[1].equals("Y")) vBid.addElement(bodyVO[j]);
    				else 
    					v2.addElement(bodyVO[j]);
    			}
		}
	}
  	if(v2.size() == 0){
  		//审批的发票行全部为劳务或者折扣,直接返回
  		return null;
  	}
  	
	//核算规则
Vector vVerifyRule = new Vector();
	for(int i = 0; i < v2.size(); i++){
		InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
		if(!vVerifyRule.contains(bodyVO.getCinvoiceid())) {
			vVerifyRule.addElement(bodyVO.getCinvoiceid());
		}
	}
	String cinvoiceid[] = new String[vVerifyRule.size()];
	vVerifyRule.copyInto(cinvoiceid);
	Hashtable hVerifyRule = queryVerifyRuleAndBillStatus(cinvoiceid);
	if (hVerifyRule == null || hVerifyRule.size() == 0) {
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000072")/*@res "未找到该单据业务类型对应核算规则!"*/);
	}

	Vector<InvoiceItemVO> vOver = new Vector<InvoiceItemVO>(); //全部结算完毕
Vector<InvoiceItemVO> vPart = new Vector<InvoiceItemVO>(); //部分未结算
Vector<InvoiceItemVO> vNo = new Vector<InvoiceItemVO>(); //未结算
  	
for(int i = 0; i < v2.size(); i++){
  InvoiceItemVO bodyVO = (InvoiceItemVO) v2.elementAt(i);
  		
		oTemp = hVerifyRule.get(bodyVO.getCinvoiceid());
		if(oTemp == null) continue;
		Object data[] = (Object[])oTemp;
		String verifyrule = (String)data[1];
		//if(verifyrule.equals("N") || verifyrule.equals("V")) continue;
		//since v55, 支持消耗汇总的冲暂估应付
  if(verifyrule.equals("N")) continue;
  	vOver.addElement(bodyVO);
  	}
  
  /**
   * 2008.12.29有以下需求变更:
   * 1.采购入库单中如果存货为资产类存货,则不允许作暂估应付,也就是针对该行作暂估时即使暂估应付参数为是也不生成暂估应付单.
   * 2.采购发票中存货为资产类存货的行,则不受暂估应付参数的控制,只要审核就可以传应付.
   */
		if(filteAssetInv(vPart.toArray(new InvoiceItemVO[0])).length > 0){
			//发票部分未结算完毕
      	//判断是否可以冲减暂估应付	      	
      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
		}
		if(filteAssetInv(vNo.toArray(new InvoiceItemVO[0])).length > 0){
			//发票均未结算完毕
      	//判断是否可以冲减暂估应付	      	
      	throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000243")/*@res "发票未结算完毕,不能冲减暂估应付!"*/); 		
		}

		if(vOver.size() > 0){
      	//发票均结算完毕
      	//判断是否可以冲减暂估应付
      	
      	//以发票行ID, 获取入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
      	HashMap hSettle = getSettle(settleVO);
      	if(hSettle == null || hSettle.size() == 0){
      		//发票未与入库单或消耗汇总结算过,直接返回
      		return null;
      	}
      	
      	//查询入库单行是否已暂估应付 {入库单行ID或消耗汇总ID=Object[]{应付单据ID}}
      	HashMap tZGYF = isStockZGYF(hSettle);
      	if(tZGYF == null || tZGYF.size() == 0){
      		//入库单未暂估应付,直接返回
      		return null;
      	}
      	
      	//确定哪些发票行需要回冲: vBid={发票行ID}
      	//已与入库单或消耗汇总结算, 而且入库单或消耗汇总已暂估应付
      	vBid = getInvoicesToWashZGYF(hSettle,tZGYF,vOver);
      	if(vBid == null || vBid.size() == 0) return null;
      	
      	//返回冲减VO(不含是否红冲完毕的处理)
      	IAdjuestVO VOs[] = getReturnVOsToWashZGYF(vBid,hSettle,vOver,tZGYF);
      
      	return VOs;
		}
		
		return null;
}


/*
 * add by ouyangzhb 2011-07-07
 * 为手工结算单删除时获取需要删除的红冲单据
 * 冲减暂估应付调用
 * 
 * 获取调整VO[]
 * 同washDataForZGYF（）的差别仅在于支持虚拟发票
 * 2006-03-23 xhq
 * 
 */
public IAdjuestVO[] antiWashDataForSettle(InvoiceVO[] invoiceVOs,SettlebillVO settleVO) throws Exception{
	Vector vecCbaseid = new Vector(), vecItemVo2 = new Vector(), vecItemVo22 = new Vector();
	String sUnitCode = null;
	
	//发票归类
	for(int i = 0; i < invoiceVOs.length; i++){
		InvoiceHeaderVO headVO = invoiceVOs[i].getHeadVO();
		sUnitCode = headVO.getPk_corp();
		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();   		
 		for(int j = 0; j < bodyVO.length; j++){
			if(!vecCbaseid.contains(bodyVO[j].getCbaseid())) vecCbaseid.addElement(bodyVO[j].getCbaseid());
		}
	}
	String sTemp[] = new String[vecCbaseid.size()];
	vecCbaseid.copyInto(sTemp);
	HashMap hInv = new PubDMO().queryArrayValues("bd_invbasdoc","pk_invbasdoc",new String[]{"laborflag","discountflag"},sTemp,"dr=0");
	vecCbaseid = new Vector();
	Object oTemp = null, invFlag[] = null;
  	for(int i = 0; i < invoiceVOs.length; i++){
		InvoiceItemVO bodyVO[] = invoiceVOs[i].getBodyVO();
		InvoiceHeaderVO headerVO = (InvoiceHeaderVO)invoiceVOs[i].getParentVO();
		for(int j = 0; j < bodyVO.length; j++){
			oTemp = hInv.get(bodyVO[j].getCbaseid());
			if(oTemp != null){
				invFlag = (Object[]) oTemp;
				if(invFlag[0].equals("Y") 
            || invFlag[1].equals("Y") 
            || headerVO.getIinvoicetype().intValue() == 3) {
            vecCbaseid.addElement(bodyVO[j]);//同washDataForZGYF（）的差别仅在于支持虚拟发票
        }else{
            vecItemVo2.addElement(bodyVO[j]);
        }
			}
				vecItemVo22.addElement(bodyVO[j]);
			
		}
  	}
  	if(vecItemVo2.size() == 0 || vecItemVo22.size() == 0) return null;
  	
  	//以发票行ID, 获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量, 消耗总ID
  	HashMap hSettle = getSettle(settleVO);
  	
  	
  	if(hSettle == null || hSettle.size() == 0) return null;
  	
  	//查询入库单行是否已暂估应付
  	vecCbaseid = new Vector();
  	Object key = null, data = null, d[] = null, dd[] = null;
  	Set keys = hSettle.keySet();
  	Object kKeys[] = new Object[keys.size()];
  	keys.toArray(kKeys);
  	for(int j = 0; j < kKeys.length; j++){
  		key = kKeys[j];
  		data = hSettle.get(key);
  		if(data != null){
  			ArrayList list = (ArrayList)data;
  			if(list == null || list.size() == 0) continue;
  			for(int k = 0; k < list.size(); k++){
      			d = (Object[]) list.get(k);
            if(d[0] != null && !vecCbaseid.contains(d[0])){
              vecCbaseid.addElement(d[0]);              
            }
      			if(d[3]!= null && !vecCbaseid.contains(d[3])){
              vecCbaseid.addElement(d[3]);              
            }
  			}
  		}
  	}
  	if(vecCbaseid.size() == 0) return null;
  	sTemp = new String[vecCbaseid.size()];
  	vecCbaseid.copyInto(sTemp);
  	HashMap tZGYF = new PubDMO().queryArrayValues("arap_djfb","ckdid",new String[]{"vouchid"},sTemp,"dr=0");
  	if(tZGYF == null || tZGYF.size() == 0) return null;
  	
  	//确定哪些发票行需要回冲
  	vecCbaseid = new Vector();
  	Vector vv = null;
  	for(int i = 0; i < vecItemVo22.size(); i++){
  		InvoiceItemVO bodyVO = (InvoiceItemVO) vecItemVo22.elementAt(i);
  		data = hSettle.get(bodyVO.getCinvoice_bid());
  		if(data == null) continue;
  		ArrayList list = (ArrayList)data;
  		if(list == null || list.size() == 0) continue;
  		for(int k = 0; k < list.size(); k++){
      		d = (Object[])list.get(k);
      		if(d[0] != null){
      			oTemp = tZGYF.get(d[0]);
      			if(oTemp != null){
      				dd = (Object[])oTemp;
      				if(dd[0] != null && !vecCbaseid.contains(bodyVO.getCinvoice_bid())) vecCbaseid.addElement(bodyVO.getCinvoice_bid());
      			}
      		}
        if(d[3] != null){
          oTemp = tZGYF.get(d[3]);
          if(oTemp != null){
            dd = (Object[])oTemp;
            if(dd[0] != null && !vecCbaseid.contains(bodyVO.getCinvoice_bid())) vecCbaseid.addElement(bodyVO.getCinvoice_bid());
          }
        }
  		}
  	}
  	if(vecCbaseid.size() == 0) return null;
  	
  	//返回冲减VO
  	vecItemVo2 = new Vector();
  	UFDouble d1 = null, d2 = null;
  	for(int i = 0; i < vecCbaseid.size(); i++){
  		data = hSettle.get(vecCbaseid.elementAt(i));
  		if(data == null) continue;
  		ArrayList list = (ArrayList)data;
  		if(list == null || list.size() == 0) continue;
  		
  		for(int k = 0; k < list.size(); k++){
     		d = (Object[])list.get(k);
      		if((d[0] == null || tZGYF.get(d[0]) == null)
            && (d[3] == null || tZGYF.get(d[3]) == null)) {
          continue;
        }
      		//
      		IAdjuestVO tempVO = new IAdjuestVO();
      		tempVO.setCinvoice_bid((String)vecCbaseid.elementAt(i));
        if(PuPubVO.getString_TrimZeroLenAsNull(d[3]) != null){
          tempVO.setVmiFlag(true); 
          tempVO.setDdhh((String)d[3]);
        }else if(PuPubVO.getString_TrimZeroLenAsNull(d[0]) != null){
          tempVO.setDdhh((String)d[0]);
        }
      		
      		d1 = new UFDouble(0);
      		d2 = new UFDouble(0);
      		if(d[1] != null) d1 = new UFDouble(d[1].toString());
      		if(d[2] != null) d2 = new UFDouble(d[2].toString());
      		tempVO.setShl(d1);      	      		
      		      		
      		vecItemVo2.addElement(tempVO);	
  		}
  	}
  	
  	IAdjuestVO VOs[] = new IAdjuestVO[vecItemVo2.size()];
  	vecItemVo2.copyInto(VOs);
	return VOs;
}


/*
 * add by ouyangzhb  2011-07-07
 *  获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
 */
private HashMap getSettle(SettlebillVO settleVO) throws Exception{
  	// 获取结算单行中的如下信息: 入库单行ID, 结算数量, 合理损耗数量,消耗汇总ID
	HashMap hSettle = new HashMap();
	String cinvoice_bid = null;
	String cstockrow = null;
	String cvmiid = null;
	Object nsettlenum = null;
	Object nreasonalwastnum = null;
	
	SettlebillItemVO[] settlebvo = settleVO.getBodyVO();
	
	for(int i =0;i<settlebvo.length;i++){
		cinvoice_bid = settlebvo[i].getCinvoice_bid();
		cstockrow = settlebvo[i].getCstockrow();
		nsettlenum = settlebvo[i].getNsettlenum();
		nreasonalwastnum = settlebvo[i].getNreasonalwastnum();
		//since v55, 支持消耗汇总处理
		cvmiid = settlebvo[i].getCvmiid();
			ArrayList list = new ArrayList();   			
			if(hSettle.get(cinvoice_bid) == null){
				list.add(new Object[]{cstockrow,nsettlenum,nreasonalwastnum,cvmiid});
			}else{
				list = (ArrayList)hSettle.get(cinvoice_bid);
				list.add(new Object[]{cstockrow,nsettlenum,nreasonalwastnum,cvmiid});
			}
			hSettle.put(cinvoice_bid, list);
		}
	
	return hSettle;
}
 
  
}