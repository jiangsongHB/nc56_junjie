/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.impl.uap.bd.corp;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

import nc.bs.bd.cache.BDDelLog;
import nc.bs.bd.cache.CacheProxy;
import nc.bs.bd.pub.BDOperateContextObject;
import nc.bs.bd.pub.CheckSealCanChg;
import nc.bs.bd.pub.IBDBaseDoc;
import nc.bs.bd.pub.IBDOperateContextObject;
import nc.bs.bd.service.BDOperateServ;
import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.InvocationInfoProxy;
import nc.bs.framework.common.NCLocator;
import nc.bs.framework.exception.ComponentException;
import nc.bs.logging.Logger;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.pub.pflock.IPfBusinessLock;
import nc.bs.pub.pflock.PfBusinessLock;
import nc.bs.trade.lock.BDConsistenceCheck;
import nc.bs.trade.lock.BDLockData;
import nc.bs.uap.bd.BDException;
import nc.bs.uap.bd.BDRuntimeException;
import nc.bs.uap.lock.PKLock;
import nc.itf.uap.IUAPQueryBS;
import nc.itf.uap.bd.corp.ICorp;
import nc.itf.uap.bd.corp.ICorpQry;
import nc.itf.uap.bd.corp.ISettleCenterQueryForCorp;
import nc.itf.uap.bd.dept.IDeptdocQry;
import nc.itf.uap.bd.innercode.IInnerCodeService;
import nc.itf.uap.bd.refcheck.IReferenceCheck;
import nc.itf.uap.cil.ICilService;
import nc.itf.uap.rbac.function.IFuncPower;
import nc.itf.uap.sf.IConfigFileService;
import nc.jdbc.framework.SQLParameter;
import nc.jdbc.framework.processor.ColumnListProcessor;
import nc.jdbc.framework.processor.ColumnProcessor;
import nc.vo.bd.ConditionVO;
import nc.vo.bd.CorpVO;
import nc.vo.bd.CorphistoryVO;
import nc.vo.bd.InnerCorpCode;
import nc.vo.bd.MultiLangTrans;
import nc.vo.pub.BusinessException;
import nc.vo.pub.IErrorDict;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.sm.config.Account;
import nc.vo.trade.pub.HYBillVO;
import nc.vo.trade.voutils.VOUtil;
import nc.vo.util.tree.IOPCreator;
import nc.vo.util.tree.IOPolicy;
import nc.vo.util.tree.MethodGroup;
import nc.vo.util.tree.TreeDetail;
import nc.vo.util.tree.TreeOperationException;
import nc.vo.util.tree.TreeUtil;
import nc.vo.util.tree.XTreeModel;
import nc.vo.util.tree.XTreeNode;

/**
 * Corp的BO类
 * 
 * 创建日期：(2001-5-16)
 * 
 * @author：童志杰
 */
public class CorpImpl implements ICorpQry, ICorp {
	private final static String CORPKIND_BALANCE = "0001KHH00000000A0002"; // 结算中心

	private BaseDAO m_baseDAO;

	/**
	 * CorpBO 构造子注解。
	 */
	public CorpImpl() {
		super();
	}

	/**
	 * 增加内部码
	 * 
	 * @param vo
	 * @throws BusinessException
	 */
	private void addInnerCode(CorpVO vo) throws BusinessException {
		try {
			InnerCorpCode innercode = new InnerCorpCode();
			IInnerCodeService iInnerCodeService = (IInnerCodeService) NCLocator
					.getInstance().lookup(IInnerCodeService.class.getName());
			String[] innercodes = null;

			innercodes = iInnerCodeService.getCodes(innercode, vo
					.getFathercorp(), "bd_corp", 1);
			vo.setInnercode(innercodes[0]);
		} catch (Exception e) {
			Logger.error(e.getMessage(), e);
			throw new BDException(e.getMessage());
		}
	}

	/**
	 * 用VO对象的属性值更新数据库。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @param corp
	 *            nc.vo.bd.CorpVO
	 */
	public void cancelCorp(CorpVO corp) throws BusinessException {

		// Check whether the corp has departments
		IDeptdocQry deptQuery = null;
		deptQuery = (IDeptdocQry) NCLocator.getInstance().lookup(
				IDeptdocQry.class.getName());

		nc.vo.bd.b04.DeptdocVO filter = new nc.vo.bd.b04.DeptdocVO();
		filter.setPk_corp(corp.getPk_corp());
		filter.setCanceled(new UFBoolean(false));// How about null?
		nc.vo.bd.b04.DeptdocVO[] voArray = deptQuery.queryByVO(filter,
				new Boolean(true));
		if (voArray != null || voArray.length != 0)
			throw new BusinessException(MultiLangTrans.getTransStr("MO2",
					new String[] { NCLangResOnserver.getInstance().getStrByID(
							"100406", "UPP100406-000001") /* @res "撤销" */})); // 已存在下级节点,不能封存
		update(corp);
	}

	/**
	 * 此处插入方法说明。
	 * 
	 * 该方法检查单位编码和单位名称的唯一性，如果是新建公司时的检查，isInsert为true, 如果是修改公司时的检查，isInsert为false;
	 * 
	 * 创建日期：(2001-11-23 15:37:01) 作者：李充蒲
	 * 
	 * @return boolean
	 * @param corpVO
	 *            nc.vo.bd.CorpVO
	 * @param isInsert
	 *            boolean
	 * @exception BDException
	 *                异常说明。 230修改
	 */
	public boolean checkIsOnly(CorpVO condCorpVO, boolean isInsert)
			throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		/** ********************************************************** */
		IUAPQueryBS iquery = (IUAPQueryBS) NCLocator.getInstance().lookup(
				IUAPQueryBS.class.getName());

		StringBuilder sbCode = new StringBuilder(
				"select count(1) from bd_corp where unitcode='").append(
				condCorpVO.getUnitcode()).append("'");
		StringBuilder sbName = new StringBuilder(
				"select count(1) from bd_corp where unitname='").append(
				condCorpVO.getUnitname()).append("'");
		if (!isInsert) {
			sbCode.append(" and pk_corp!='").append(condCorpVO.getPrimaryKey())
					.append("'");
			sbName.append(" and pk_corp!='").append(condCorpVO.getPrimaryKey())
					.append("'");
		}
		Integer repeatCodeNum = (Integer) iquery.executeQuery(
				sbCode.toString(), new ColumnProcessor());
		Integer repeatNameNum = (Integer) iquery.executeQuery(
				sbName.toString(), new ColumnProcessor());

		if (repeatCodeNum > 0) {
			String errCodeStr = MultiLangTrans.getTransStr("MC1",
					new String[] { NCLangResOnserver.getInstance().getStrByID(
							"100406", "UC000-0000417") /*
														 * @res "公司编码"
														 */
					});
			throw new BusinessException(errCodeStr,
					IErrorDict.ERR_BUSI_BILL_CODE_ALREADYEXIST);
		} else if (repeatNameNum > 0) {
			String errNameStr = MultiLangTrans.getTransStr("MC1",
					new String[] { NCLangResOnserver.getInstance().getStrByID(
							"100406", "UC000-0000414") /*
														 * @res "公司名称"
														 */});
			throw new BusinessException(errNameStr,
					IErrorDict.ERR_BUSI_BILL_NAME_ALREADYEXIST);
		}
		return false;
	}

	private void checkBeforeDelete(CorpVO vo) throws BusinessException {
		// 检查是否是上级公司
		CorpVO[] vos = getChildCorp(vo.getPk_corp());
		if (vos != null && vos.length > 0) {
			throw new BDException(MultiLangTrans.getTransStr("MO2",
					new String[] { NCLangResOnserver.getInstance().getStrByID(
							"100406", "UC001-0000039") /* @res "删除" */})); // 已经存在下级,不能删除
		}
		// 检查是否建帐
		if (isHasAccount(vo.getPk_corp()))
			throw new BDException(NCLangResOnserver.getInstance().getStrByID(
					"100406", "UPP100406-000041")/* @res "公司已经建帐" */
					+ ","
					+ MultiLangTrans.getTransStr("MP1",
							new String[] { NCLangResOnserver.getInstance()
									.getStrByID("100406", "UC001-0000039") /*
																			 * @res
																			 * "删除"
																			 */})); // 不能删除

		checkSettelCenterAndUnitIssues(vo);
		checkRef(vo);
	}
	
	/**
	 * 校验公司是否被引用
	 * @author lixa1
	 * @created on 2008.7.11
	 * @param vo
	 */
	private void checkRef(CorpVO vo) throws BusinessException{
		IReferenceCheck ref = (IReferenceCheck) NCLocator.getInstance().lookup(IReferenceCheck.class.getName());
		if (ref.isReferenced("bd_corp", vo.getPrimaryKey())) {
			throw new BDException(nc.vo.bd.BDMsg.MSG_REF_NOT_DELETE());
		}
	}

	private void checkSettelCenterAndUnitIssues(CorpVO vo)
			throws BusinessException {
		// 检查结算中心是否已经引用公司
		ISettleCenterQueryForCorp iISettleCenterQueryForCorp = null;
		try {
			iISettleCenterQueryForCorp = (ISettleCenterQueryForCorp) NCLocator
					.getInstance().lookup(
							ISettleCenterQueryForCorp.class.getName());
		} catch (ComponentException e) {
			Logger.error(e.getMessage(), e);
			Logger.error("警告:未安装UAPBD模块,找不到ISettleCenterQueryForCorp");
			return;
		}
		boolean corpIsSetterCenter = iISettleCenterQueryForCorp
				.corpIsSettlerCenter(vo.getPk_corp());
		if (corpIsSetterCenter) {
			// 公司已被结算中心引用,不能删除!
			throw new BDException(
					MultiLangTrans.getTransStr("MC8", new String[] {
							NCLangResOnserver.getInstance().getStrByID(
									"common", "UC000-0000404"/* 公司 */),
							NCLangResOnserver.getInstance().getStrByID(
									"common", "UC000-0003234"/* 结算中心 */) })
							+ ","
							+ MultiLangTrans
									.getTransStr(
											"MP1",
											new String[] { NCLangResOnserver
													.getInstance().getStrByID(
															"common",
															"UC001-0000039") /* 删除 */}));
		}

		// 检查结算单位是否已经引用公司

		boolean corpIsSetterUnit = iISettleCenterQueryForCorp
				.corpIsSettlerUnit(vo.getPk_corp());
		if (corpIsSetterUnit) {
			// 公司已被结算单位引用,不能删除!
			throw new BDException(
					MultiLangTrans.getTransStr("MC8", new String[] {
							NCLangResOnserver.getInstance().getStrByID(
									"100406", "UC000-0000404"/* 公司 */),
							NCLangResOnserver.getInstance().getStrByID(
									"100406", "UC000-0003242"/* 结算单位 */) })
							+ ","
							+ MultiLangTrans
									.getTransStr(
											"MP1",
											new String[] { NCLangResOnserver
													.getInstance().getStrByID(
															"common",
															"UC001-0000039") /* 删除 */}));
		}
	}

	/**
	 * 根据主键在数据库中删除一个VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @param key
	 *            String
	 */
	public int delete(CorpVO vo) throws BusinessException {
		//boolean isLocked = false;
		IPfBusinessLock bdLock = new PfBusinessLock();
		try {
//			isLocked = PKLock.getInstance().acquireLock(vo.getPrimaryKey(),
//					getUserID(), null);
//			if (!isLocked)
//				throw new BDException(BDMsg.MSG_LOCKED());

			HYBillVO billVo = new HYBillVO();
			billVo.setParentVO(vo);
			if (vo.getTs() != null)
				bdLock.lock(new BDLockData(billVo), new BDConsistenceCheck(
						billVo));
			// 删除前的检查
			checkBeforeDelete(vo);
			
			nc.bs.bd.service.BDOperateServ bdOS = new nc.bs.bd.service.BDOperateServ();
			bdOS.beforeOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_DEL, null, null, vo);


			// 删除公司
			getBaseDAO().deleteVO(vo);
			
			bdOS.afterOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_DEL, vo.getPrimaryKey(), null, vo);
			
			CacheProxy.fireDataDeleted(vo.getTableName(), vo.getPrimaryKey());
			new BDDelLog().delPKs("bd_corp",
					new String[] { vo.getPrimaryKey() });


			// -- V5中只有已建账公司才可以设置用户,而已建账公司不能删除.因此此操作可取消
			// 删除该公司的用户（sm_user)
			// String pkcorp=vo.getPrimaryKey();
			// UserDMO userdmo = new UserDMO();
			// userdmo.deleteByCorp(pkcorp);//该接口还没有提供，提供后取消注释
		} finally {
//			if (isLocked)
//				PKLock.getInstance().releaseLock(vo.getPrimaryKey(),
//						getUserID(), null);
			bdLock.unLock();
		}
			
		return 1;
	}

	/**
	 * 通过主键查找一个VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO
	 * @param key
	 *            String
	 * @exception BDException
	 *                异常说明。 修改：李充蒲 增加三个字段
	 */
	public CorpVO[] findByPrimaryKey(String[] keys) throws BusinessException {

		if(keys==null||keys.length==0)
			return null;
		List<CorpVO> corps = new ArrayList<CorpVO>();
		CorpVO[] tempvos = null;
		Hashtable h = new Hashtable();
		StringBuffer strWhere =new StringBuffer();
		strWhere.append(" pk_corp in(");
		for (int i = 0; i < keys.length; i++) {
			strWhere .append("'" + keys[i] + "',");
		}
		strWhere.deleteCharAt(strWhere.length()-1);
		strWhere.append(")");


		Collection c = getBaseDAO().retrieveByClause(CorpVO.class, strWhere.toString());
		if (c != null && c.size() > 0) {
			tempvos = new CorpVO[c.size()];
			c.toArray(tempvos);
		}

		// 调整顺序
		for (int i = 0; i < (tempvos == null ? 0 : tempvos.length); i++) {
			h.put(tempvos[i].getPrimaryKey(), tempvos[i]);
		}
		for (int i = 0; i < keys.length; i++) {
			if(h.containsKey(keys[i]))
			 corps.add((CorpVO) h.get(keys[i]));
		}

		// added by Chenwei at 2004-03-12 增加总结算中心
		//corps = getTopSettleCenter(corps);

		return getTopSettleCenter(corps.toArray(new CorpVO[corps.size()]));

	}

	/**
	 * 通过主键获得VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO
	 * @param key
	 *            String
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO findCorpVOByPK(String key) throws BusinessException {

		if ("0001".equals(key)) {
			CorpVO groupCorp = new CorpVO();
			groupCorp.setPk_corp("0001");
			return groupCorp;
		}

		CorpVO corp = (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class, key);

		// added by Chenwei at 2004-03-12 增加总结算中心
		getTopSettleCenter(corp);

		return corp;
	}

	/**
	 * 通过主键获得VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO
	 * @param key
	 *            String
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO findCorpVOByPK(String key, String dbName)
			throws BusinessException {
		CorpVO corp = (CorpVO) new BaseDAO(dbName).retrieveByPK(CorpVO.class,
				key);
		return corp;
	}

	/**
	 * 通过主键获得VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO
	 * @param key
	 *            String
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO[] findCorpVOByPK(String[] keys, String t, String t1)
			throws BusinessException {
		return findByPrimaryKey(keys);
	}

	/**
	 * 此处插入方法说明。 创建日期：(02-3-19 9:40:26)
	 * 
	 * @return int
	 */
	public int getAccountedCorpNumber() throws BusinessException {
		IConfigFileService iConfigFileService = null;
		nc.vo.sm.config.ConfigParameter cp;

		iConfigFileService = (IConfigFileService) NCLocator.getInstance()
				.lookup(IConfigFileService.class.getName());
		cp = iConfigFileService.getAccountConfigPara();

		Account[] accounts = cp.getAryAccounts();
		if (accounts == null) {
			return 0;
		}
		// 声明
		HashSet hs = new HashSet();
		for (int i = 0; i < accounts.length; i++) {
			String dsName = accounts[i].getDataSourceName();
			if (dsName == null || dsName.trim().length() == 0)
				continue;
			Collection c = getBaseDAO().retrieveByClause(CorpVO.class, "1=1",
					"innercode");
			if (c == null || c.size() == 0)
				continue;
			CorpVO[] corps = (CorpVO[]) c.toArray(new CorpVO[c.size()]);

			if (corps != null) {
				for (int j = 0; j < corps.length; j++) {
					boolean bHashAccounted = (corps[j].getIshasaccount() == null ? false
							: corps[j].getIshasaccount().booleanValue());
					if (bHashAccounted)
						hs.add(corps[j].getUnitcode());
				}
			}
		}
		return hs.size();
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-12-18 12:45:47) 作者：李充蒲
	 * 
	 * @return java.lang.String[]
	 * @exception BDException
	 *                异常说明。
	 */
	public String[] getAccountedCorpPKs() throws BusinessException {
		String where = "ishasaccount='Y' ";
		String order = "pk_corp ";
		Collection c = getBaseDAO().retrieveByClause(CorpVO.class, where,
				order, new String[] { "pk_corp" });
		String[] keys = null;
		if (c != null && c.size() > 0) {
			List list = VOUtil.extractFieldValues((CorpVO[]) c
					.toArray(new CorpVO[c.size()]), "pk_corp", null);
			if (list != null && list.size() > 0) {
				keys = new String[list.size()];
				list.toArray(keys);
			}
		}
		return keys;
	}

	/**
	 * 该方法根据公司unitcode返回其所有的子公司，不包括自身,不过滤未建账公司
	 * 
	 * @param pkcorp
	 * @return
	 * @throws BusinessException
	 */
	public CorpVO[] getAllChildCorp(String pkcorp) throws BusinessException {
		return getAllChildCorp(pkcorp, new UFBoolean(false));
	}

	/**
	 * 根据内部编码查询
	 * 
	 * @param pkcorp
	 * @param isAccounted
	 * @return
	 * @throws BusinessException
	 */
	public CorpVO[] getAllChildCorp(String pkcorp, UFBoolean isAccounted)
			throws BusinessException {
		CorpVO[] children = null;
		if ("0001".equals(pkcorp)) {
			CorpVO[] vos = null;
			if (isAccounted != null && isAccounted.booleanValue()) {
				vos = queryCorpVOByWhereSQL("ishasaccount = 'Y'");
			} else {
				vos = queryAllCorpVO(null);
			}
			if (vos != null) {
				VOUtil.ascSort(vos, new String[] { "innercode" });
			}
			return vos;
		}

		IInnerCodeService codeManager = (IInnerCodeService) NCLocator
				.getInstance().lookup(IInnerCodeService.class.getName());
		;
		String where = " 1=1 ";
		if (isAccounted != null && isAccounted.booleanValue()) {
			where += " and ishasaccount = 'Y' ";
		}
		children = (CorpVO[]) codeManager.findChildByFatherID(
				new InnerCorpCode(), pkcorp, where);

		return children;
	}

	/**
	 * 此处插入方法说明。 创建日期：(02-3-19 9:46:47)
	 * 
	 * @return int
	 */
	public int getAvailableLicenses() throws BusinessException {
//		int accountedCorps = getAccountedCorpNumber();
//		Logger.info("已经建立帐套公司：：" + accountedCorps);
//		ICilService iILicenseService = (ICilService) NCLocator
//				.getInstance().lookup(ICilService.class.getName());
//		int licenses = iILicenseService.getProductLicense("corp");
//		Logger.info("授权建立帐套公司：：" + licenses);
//		return licenses - accountedCorps;
		return Integer.MAX_VALUE;
	}

	/**
	 * 此处插入方法说明。 该方法返回公司unitCode的下一级子公司； 创建日期：(2001-8-30 11:40:48)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param unitCode
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。 作者：李充蒲
	 */
	public CorpVO[] getChildCorp(String pkcorp) throws BusinessException {
		CorpVO[] corps = null;
		Collection c = getBaseDAO().retrieveByClause(CorpVO.class,
				"fathercorp = '" + pkcorp + "'", "pk_corp");
		if (c != null && c.size() > 0) {
			corps = new CorpVO[c.size()];
			c.toArray(corps);
		}

		// added by Chenwei at 2004-03-12 增加总结算中心
		corps = getTopSettleCenter(corps);

		return corps;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-12-3 13:08:56) 作者：李充蒲
	 * 
	 * @return java.lang.String[]
	 * @param pkCorps
	 *            java.lang.String[]
	 * @exception BDException
	 *                异常说明。
	 */
	public String[] getCorpNames(String[] pkcorp) throws BusinessException {
		int num = (pkcorp == null ? 0 : pkcorp.length);
		if (num == 0)
			return null;

		String names[] = new String[num];
		CorpVO vo = null;

		for (int i = 0; i < num; i++) {
			if (pkcorp[i] == null || pkcorp[i].trim().length() == 0) {
				names[i] = "";
			} else if (pkcorp[i].equals("0001")) {
				names[i] = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
						"100406", "UPP100406-000000")/* @res "集团" */;
			} else {
				try {
					vo = (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class,
							pkcorp[i], new String[] { "unitname" });
					names[i] = vo == null ? null : vo.getUnitname();
				} catch (Exception e) {
					throw new BDException(
							"findByPrimaryKey(String key) Exception: "
									+ e.getMessage());
				}
			}
		}

		return names;
	}

	/**
	 * 此处插入方法说明。 返回包含指定公司的历代祖先公司和兄弟公司的vo数组 每个corpvo只包含了pk,code ,name三个字段
	 * 创建日期：(2001-12-1 12:36:01) 作者：李充蒲
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param pkcorp
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO[] getFABCorps(String pkCorp) throws BusinessException {
		CorpVO[] corps = null;
		CorpVO vo = null;
		String pkFatherCorp = null;
		ArrayList al = new ArrayList();

		Object o = getBaseDAO().retrieveByPK(CorpVO.class, pkCorp,
				new String[] { "fathercorp" });
		pkFatherCorp = (o == null ? null : ((CorpVO) o).getFathercorp());

		// 得到所有兄弟公司（包含自身）
		if (pkFatherCorp != null) {
			al.addAll(getBaseDAO().retrieveByClause(
					CorpVO.class,
					"fathercorp = '" + pkFatherCorp + "'",
					new String[] { "pk_corp", "unitcode", "unitname",
							"fathercorp" }));
		} else {
			al.addAll(getBaseDAO().retrieveByClause(
					CorpVO.class,
					"fathercorp is null ",
					new String[] { "pk_corp", "unitcode", "unitname",
							"fathercorp" }));
		}

		// 得到历代祖先
		while (pkFatherCorp != null && pkFatherCorp.length() > 0) {
			vo = (CorpVO) getBaseDAO().retrieveByPK(
					CorpVO.class,
					pkFatherCorp,
					new String[] { "pk_corp", "unitcode", "unitname",
							"fathercorp" });
			al.add(vo);
			pkFatherCorp = vo.getFathercorp();
		}

		if (al.size() > 0) {
			corps = new CorpVO[al.size()];
			al.toArray(corps);
		}

		return corps;
	}

	/**
	 * 返回下一个可用的公司主键 创建日期：(2001-5-16)
	 * 
	 * @String
	 * @exception BDException
	 *                异常说明。
	 */
	public String getNextPkCorp() throws BusinessException {
		String sql = "select max(pk_corp) from bd_corp ";
		String maxPk = null;

		IUAPQueryBS iquery = (IUAPQueryBS) NCLocator.getInstance().lookup(
				IUAPQueryBS.class.getName());

		ColumnProcessor p = new ColumnProcessor();
		Object o = iquery.executeQuery(sql, p);
		if (o != null)
			maxPk = o.toString();
		if (maxPk == null)
			maxPk = "1000";
		String newPk = String.valueOf(Integer.parseInt(maxPk) + 1);
		while (newPk.length() < 4) {
			newPk = "0" + newPk;
		}
		return newPk;
	}

	/**
	 * 返回下一个可用的公司主键 创建日期：(2001-5-16)
	 * 
	 * @String
	 * @exception BDException
	 *                异常说明。
	 */
	public String getNextPkCorp(String dataSourceName) throws BusinessException {
		return getNextPkCorp();

	}

	/**
	 * 此处插入方法说明。 查询指定公司的所有下级及其自身,不过滤未建账公司 创建日期：(2001-8-30 12:37:23)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param unitcode
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。 作者：李充蒲
	 */
	public CorpVO[] getSelfAndAllChildCorp(String pkcorp)
			throws BusinessException {
		return getSelfAndAllChildCorp(pkcorp, new UFBoolean(false));
	}

	/**
	 * 查询指定公司的所有下级及其自身,可指定是否过滤未建账公司
	 * 
	 * @param pkcorp
	 * @param isAccounted
	 *            是否过滤未建账公司
	 * @return
	 * @throws BusinessException
	 */
	public CorpVO[] getSelfAndAllChildCorp(String pkcorp, UFBoolean isAccounted)
			throws BusinessException {
		ArrayList al = new ArrayList();
		CorpVO[] vos = null;

		// 获得自身
		CorpVO vo = findCorpVOByPK(pkcorp);
		if (vo != null)
			al.add(vo);
		// 获得所有子公司
		CorpVO[] cvos = getAllChildCorp(pkcorp, isAccounted);
		if (cvos != null && cvos.length > 0)
			for (int i = 0; i < cvos.length; i++) {
				al.add(cvos[i]);
			}

		if (al.size() > 0) {
			vos = new CorpVO[al.size()];
			al.toArray(vos);
		}
		return vos;
	}

	private BaseDAO getBaseDAO() throws BusinessException {
		if (m_baseDAO == null) {
			m_baseDAO = new BaseDAO();
		}
		return m_baseDAO;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-12 10:47:09)
	 * 
	 * @return java.lang.String
	 * @param pk_corp
	 *            java.lang.String
	 */
	private void getTopSettleCenter(CorpVO vo) throws BusinessException {

		String pk_settlecenter = null;

		// added by Chenwei at 2004-03-23 测试
		if (vo == null)
			return;
		if (vo.getpkCorpkind() == null || vo.getpkCorpkind().length() == 0)
			return;
		if (!vo.getpkCorpkind().equals(CORPKIND_BALANCE))
			return;

		CorpVO[] vos = queryByWhereSQL1("pk_corpkind = '" + CORPKIND_BALANCE
				+ "'");

		Hashtable ht = new Hashtable();
		if (vos == null || vos.length == 0) {
			vo.setPkTopSettleCenter(vo.getPk_corp());
			return;
		}
		for (int i = 0; i < vos.length; i++)
			ht.put(vos[i].getPk_corp(), vos[i]);
		pk_settlecenter = vo.getPk_corp();
		String fkey = vo.getFathercorp();
		while (fkey != null && fkey.length() > 0) {
			pk_settlecenter = ht.get(fkey) == null ? pk_settlecenter : fkey;
			fkey = ht.get(fkey) == null ? null : ((CorpVO) ht.get(fkey))
					.getFathercorp();
		}

		vo.setPkTopSettleCenter(pk_settlecenter);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-27 10:47:09)
	 * 
	 * @return java.lang.String
	 * @param pk_corp
	 *            java.lang.String
	 */
	private CorpVO[] getTopSettleCenter(CorpVO[] corps)
			throws BusinessException {

		// 如果没有数据,返回
		if (corps == null || corps.length == 0)
			return corps;

		// 查询所有结算中心
		CorpVO[] vos = queryByWhereSQL1("pk_corpkind = '" + CORPKIND_BALANCE
				+ "'");
		// 如果没有结算中心,返回
		if (vos == null || vos.length == 0)
			return corps;

		Hashtable ht = new Hashtable(); // 保存结算中心及对应主键
		for (int i = 0; i < vos.length; i++)
			ht.put(vos[i].getPk_corp(), vos[i]); // 保存结算中心及对应主键

		String pk_settlecenter = null;
		String fkey = null;
		for (int i = 0; i < corps.length; i++) {

			if (corps[i].getpkCorpkind() == null
					|| corps[i].getpkCorpkind().length() == 0)
				continue;
			if (!corps[i].getpkCorpkind().equals(CORPKIND_BALANCE))
				continue;

			pk_settlecenter = corps[i].getPk_corp();
			fkey = corps[i].getFathercorp();
			while (fkey != null && fkey.length() > 0) {
				pk_settlecenter = ht.get(fkey) == null ? pk_settlecenter : fkey;
				fkey = ht.get(fkey) == null ? null : ((CorpVO) ht.get(fkey))
						.getFathercorp();
			}

			corps[i].setPkTopSettleCenter(pk_settlecenter);
		}

		return corps;
	}

	/**
	 * 向数据库插入一个VO对象。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @param node
	 *            nc.vo.bd.CorpVO
	 */
	public String insert(CorpVO corp) throws BusinessException {
		new CheckSealCanChg(corp, "pk_corp", "fathercorp", "isseal")
				.checkCanChgSeal();
		addInnerCode(corp); // 设置内部编码
		corp.setPrimaryKey(getNextPkCorp());
		checkIsOnly(corp, true);
		nc.bs.bd.service.BDOperateServ bdOS = new nc.bs.bd.service.BDOperateServ();
		//bdOS.beforeOperate("100406",
		//		nc.vo.bd.service.IBDOperate.BDOPERATION_INSERT, null, null, corp);
		
		String key = getBaseDAO().insertVOWithPK(corp);
		corp.setPrimaryKey(key);
		//bdOS.afterOperate("100406",
		//		nc.vo.bd.service.IBDOperate.BDOPERATION_INSERT, key, null, corp);
		
		nc.bs.bd.cache.CacheProxy.fireDataInserted("bd_corp", key);
		return key;

	}

	private String getUserID() throws BusinessException {
		return InvocationInfoProxy.getInstance().getUserCode();
	}

	/**
	 * 如果父PK不为空,检查父PK对应的公司VO是否存在 如不存在,抛出指定父结点不存在异常
	 * 
	 * @param fatherPk
	 * @throws BusinessException
	 */
	private void checkFatherExist(String fatherPk) throws BusinessException {
		if (fatherPk != null) {
			CorpVO father = findCorpVOByPK(fatherPk);
			if (father == null) {
				throw new BDException(MultiLangTrans.getTransStr("MC7",
						new String[] {
								NCLangResOnserver.getInstance().getStrByID(
										"100406", "UPT100406-000004")/*
																		 * @res
																		 * "上级公司"
																		 */, null })); // 上级公司不存在
			}
		}
	}

	/**
	 * 增加公司和插入公司的第一个管理员 创建日期：(01-6-12 11:29:35)
	 * 
	 * @param corpVO
	 *            公司信息
	 * @param accountMsgInfo
	 *            公司管理员信息 修改：李充蒲 2002.7.3 licp modify lockpk invoke
	 */
	public String insertCorp(CorpVO corp, String[] accountMsgInfo)
			throws BusinessException {
		boolean isCodeLocked = false;
		boolean isNameLocked = false;
		try {
			// 检查公司编码和公司名称是否唯一
			isCodeLocked = PKLock.getInstance().acquireLock(
					corp.getUnitcode() + "unitcode", getUserID(), null);
			isNameLocked = PKLock.getInstance().acquireLock(
					corp.getUnitname() + "unitname", getUserID(), null);

			checkIsOnly(corp, true);
			// 检查父公司是否存在
			checkFatherExist(corp.getFathercorp());

			// corp.setCancel(new UFBoolean(false)); //2002-04-17 tzj Add
			// corp.setCreatedate(new UFDate(System.currentTimeMillis()));
			String corpid = insert(corp);
//			nc.bs.bd.cache.CacheProxy.fireDataInserted("bd_corp", corpid);

			return corp.getPrimaryKey();
		} finally {
			if (isCodeLocked)
				PKLock.getInstance().releaseLock(
						corp.getUnitcode() + "unitcode", getUserID(), null);
			if (isNameLocked)
				PKLock.getInstance().releaseLock(
						corp.getUnitname() + "unitname", getUserID(), null);
		}
	}

	/**
	 * 建帐时增加默认公司和插入公司的第一个管理员 创建日期：(01-6-12 11:29:35)
	 * 
	 * @param corpVO
	 *            公司信息
	 * @param accountMsgInfo
	 *            公司管理员信息 修改：李充蒲
	 */
	public String insertDefaultCorp(String dsName, CorpVO corp,
			String[] accountMsgInfo) throws BusinessException {
		throw new RuntimeException("should not run into this");
	}

	/**
	 * 向历史表插入记录
	 */
	public String insertHistory(CorpVO corp) throws BusinessException {
		String rs = null;
		// SuperDMO dmo = getBaseDAO();

		// 当前时间
		UFDate currtime = new UFDate(System.currentTimeMillis());

		// 查找该公司在历史记录表的上一次记录,并将其"业务结束时间"设置为当前时间
		CorphistoryVO oldvo = null; // 上一次记录
		String strWhere = "pk_corp = '" + corp.getPrimaryKey() + "' and enddate is null";
		String orderby = "begindate desc,ts desc";

		Collection c = getBaseDAO().retrieveByClause(CorphistoryVO.class,
				strWhere, orderby);
		CorphistoryVO[] oldvos = (c == null || c.size() == 0) ? null
				: (CorphistoryVO[]) c.toArray(new CorphistoryVO[c.size()]);
		if (oldvos != null && oldvos.length > 0) {
			oldvo = oldvos[0];
			oldvo.setEnddate(currtime);
			getBaseDAO().updateVO(oldvo);
		}

		// 构造新的CorphistoryVO,并将其"业务开始时间"设置为当前时间
		CorphistoryVO history = new CorphistoryVO(corp);
		history.setBegindate(currtime);
		rs = getBaseDAO().insertVO(history);

		return rs;
	}

	/**
	 * 此处插入方法说明。 根据公司编码查询此公司是否建帐, 如果unitcode为空，则返回false 创建日期：(2001-8-28
	 * 11:45:29)
	 * 
	 * @return boolean
	 * @param unitcode
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。
	 */
	public boolean isHasAccount(String pkcorp) throws BusinessException {
		CorpVO corp = (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class, pkcorp,
				new String[] { "ishasaccount" });
		UFBoolean isHasAcc = (corp == null ? null : corp.getIshasaccount());
		if (isHasAcc != null) {
			return isHasAcc.booleanValue();
		}

		return false;
	}

	// private void handleException(Exception e) throws BusinessException {
	// String msg = e.getMessage();
	// Logger.error(msg,e);
	// throw new BDException(msg);
	// }

	/**
	 * author:qsx 根据 数据权限、公司级次、编码进行选择. 查询处所有的公司 1、根据级次过滤 2、根据编码过滤 3、根据数据权限过滤
	 */
	public CorpVO[] multiCorpSelect(ConditionVO condition)
			throws BusinessException {
		/*
		 * 整理查询条件
		 */
		int bl = condition.getAttributeValue("BeginLevel") == null ? -1
				: ((Integer) condition.getAttributeValue("BeginLevel"))
						.intValue();
		int el = condition.getAttributeValue("EndLevel") == null ? -1
				: ((Integer) condition.getAttributeValue("EndLevel"))
						.intValue();
		String where = condition.getAttributeValue("where") == null ? null
				: (String) condition.getAttributeValue("where");
		String user = condition.getAttributeValue("useid") == null ? null
				: (String) condition.getAttributeValue("useid").toString();
		String node = condition.getAttributeValue("node") == null ? null
				: condition.getAttributeValue("node").toString();
		CorpVO[] vos = null;

		/*
		 * 构造一个合适的树模型
		 */

		TreeDetail detail = null;
		// 指定树的详细配置
		detail = new TreeDetail();
		{
			// 指定隶属不规则树
			detail.setPolicy(IOPolicy.Policy_Anomaly);
			// 公司数据类型的指定
			MethodGroup mg = new MethodGroup();

			try {
				mg.setKeyField(CorpVO.class.getMethod("getPk_corp", null));
				mg
						.setAssKeyField(CorpVO.class.getMethod("getFathercorp",
								null));
				mg.setNameField(CorpVO.class.getMethod("getUnitname", null));
				mg
						.setSortCodeFiled(CorpVO.class.getMethod("getUnitcode",
								null));
			} catch (SecurityException e) {
				Logger.error(e.getMessage(), e);
				throw new BDRuntimeException("Fatal error!");
			} catch (NoSuchMethodException e) {
				Logger.error(e.getMessage(), e);
				throw new BDRuntimeException("Fatal error!");
			}

			mg.setHowDisplay(new boolean[] { false, true, true }); // 显示排序码和名称
			mg.setAimClass(CorpVO.class);
			// 必要
			detail.setMg(new MethodGroup[] { mg });
		}

		XTreeModel model = null;
		try {
			model = IOPCreator.createTreeModel(detail);
		} catch (TreeOperationException e) {
			Logger.error(e.getMessage(), e);
			throw new BDException(e.getMessage());
		}
		// 查询所有的公司
		CorpVO[] total = queryAllInfo(null);
		// 出口1、如果没有建立公司，直接退出
		if (total == null || total.length == 0) {
			return null;
		}
		try {
			model.createTree(total);
		} catch (TreeOperationException e) {
			Logger.error(e.getMessage(), e);
			throw new BDException(e.getMessage());
		}
		int level = TreeUtil.getSubTreeLevel((XTreeNode) model.getRoot());
		bl = bl == -1 ? 0 : bl;
		el = el == -1 ? level : (el > level ? level : el);
		// 根据级次进行过滤
		Object[] tadata = TreeUtil.getSubTreeValue((XTreeNode) model.getRoot(),
				bl, el); // add 1 for root;
		// 出口，没有符合级此要求的数据
		if (tadata != null) {
			total = new CorpVO[tadata.length];
			System.arraycopy(tadata, 0, total, 0, tadata.length);
		} else {
			total = null;
			return null;
		}

		/*
		 * 至此可以抛开树的关系，进行过滤
		 */

		// 出口2 : 没有合法数据
		if (total.length == 0) {
			return null;
		}
		Hashtable hash = new Hashtable();
		Hashtable temp = new Hashtable();
		int size = total.length;
		for (int i = 0; i < size; i++) {
			hash.put(total[i].getPk_corp(), total[i]);
		}

		// 根据数据权限过滤
		// IUserPowerService
		// impl=(IUserPowerService)NCLocator.getInstance().lookup(IUserPowerService.class.getName());
		IFuncPower iIFuncPower = (IFuncPower) NCLocator.getInstance().lookup(
				IFuncPower.class.getName());

		String[] pk_corps = iIFuncPower.queryCorpByUserAndFunc(user, node);
		// 出口3 ：没有权限
		if (pk_corps == null || pk_corps.length == 0) {
			hash.clear();
			return null;
		}

		int psize = pk_corps.length;
		for (int i = 0; i < psize; i++) {
			if (hash.containsKey(pk_corps[i])) {
				temp.put(pk_corps[i], hash.get(pk_corps[i]));
			}
		}
		hash.clear();
		// 根据编码过滤
		CorpVO[] cvos = queryInfoByWhereSQL(where);
		int csize = cvos == null ? 0 : cvos.length;
		if (csize == 0) {
			hash.clear();
			temp.clear();
			return null;
		}
		Vector v = new Vector();
		for (int i = 0; i < csize; i++) {
			if (temp.containsKey(cvos[i].getPk_corp())) {
				v.addElement(temp.get(cvos[i].getPk_corp()));
			}
		}
		temp.clear();
		if (v.size() != 0) {
			vos = new CorpVO[v.size()];
			v.copyInto(vos);
		}

		return vos;
	}

	/**
	 * 此处插入方法描述。 创建日期：(2004-6-15 20:15:15)
	 * 
	 * @return java.lang.String[]
	 */
	public String[] queryAllCenterPKs() throws BusinessException {

		String corpPKs[] = null;

		Collection c = getBaseDAO().retrieveByClause(CorpVO.class,
				"pk_corpkind = '" + CORPKIND_BALANCE + "'",
				new String[] { "pk_corpkind" });
		CorpVO[] corps = c == null || c.size() == 0 ? null : (CorpVO[]) c
				.toArray(new CorpVO[c.size()]);
		if (corps != null && corps.length > 0) {
			corpPKs = new String[corps.length];
			for (int i = 0; i < corps.length; i++) {
				corpPKs[i] = (corps[i] == null || corps[i].getPrimaryKey() == null) ? null
						: corps[i].getPrimaryKey();
			}
		}

		return corpPKs;
	}

	/**
	 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO[] queryAllCorpVO(String unitCode) throws BusinessException {
		Collection c = getBaseDAO().retrieveByClause(CorpVO.class, "1=1",
				"innercode");
		CorpVO[] corps = c == null || c.size() == 0 ? null : (CorpVO[]) c
				.toArray(new CorpVO[c.size()]);
		// added by Chenwei at 2004-03-12 增加总结算中心
		corps = getTopSettleCenter(corps);
		return corps;
	}

	/**
	 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
	 * 
	 * 创建日期：(2004-7-9)
	 * 
	 * @return nc.vo.bd.CorpVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception BDException
	 *                异常说明。
	 */
	public CorpVO[] queryAllInfo(String unitCode) throws BusinessException {
		return queryAllCorpVO(unitCode);
	}

	/**
	 * 此方法与queryByWhereSQL,但不包含对总结算中心字段的赋值,它只作为内部方法。 根据whereSQL返回满足条件的corpvo数组
	 * 如果whereSQL为null，返回所有的corpvo 创建日期：(2004-3-12 13:38:26)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param whereSQL
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。 作者：李充蒲
	 */
	private CorpVO[] queryByWhereSQL1(String whereSQL) throws BusinessException {
		Collection c = getBaseDAO().retrieveByClause(CorpVO.class, whereSQL);
		return c == null || c.size() == 0 ? null : (CorpVO[]) c
				.toArray(new CorpVO[c.size()]);
	}

	/**
	 * 根据VO中所设定的条件返回所有符合条件的VO数组
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param corpVO
	 *            nc.vo.bd.CorpVO
	 * @param isAnd
	 *            boolean 以与条件查询还是以或条件查询
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public CorpVO[] queryCorpVOByVO(CorpVO condCorpVO, Boolean isAnd)
			throws BusinessException {

		Collection c = getBaseDAO().retrieve(condCorpVO,
				isAnd == null ? true : isAnd.booleanValue());
		CorpVO[] corps = c == null || c.size() == 0 ? null : (CorpVO[]) c
				.toArray(new CorpVO[c.size()]);

		// added by Chenwei at 2004-03-12 增加总结算中心
		corps = getTopSettleCenter(corps);

		return corps;
	}

	/**
	 * 此处插入方法说明。 根据whereSQL返回满足条件的corpvo数组 如果whereSQL为null，返回所有的corpvo
	 * 创建日期：(2001-8-28 13:48:10)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param whereSQL
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。 作者：李充蒲
	 */
	public CorpVO[] queryCorpVOByWhereSQL(String whereSQL)
			throws BusinessException {

		Collection c = getBaseDAO().retrieveByClause(CorpVO.class, whereSQL);
		CorpVO[] corps = c == null || c.size() == 0 ? null : (CorpVO[]) c
				.toArray(new CorpVO[c.size()]);

		// added by Chenwei at 2004-03-12 增加总结算中心
		corps = getTopSettleCenter(corps);

		return corps;
	}

	/**
	 * 此方法与queryByWhereSQL,但不包含对总结算中心字段的赋值,它只作为内部方法。 根据whereSQL返回满足条件的corpvo数组
	 * 如果whereSQL为null，返回所有的corpvo 创建日期：(2004-7-9 13:38:26)
	 * 
	 * @return nc.vo.bd.CorpVO[]
	 * @param whereSQL
	 *            java.lang.String
	 * @exception BDException
	 *                异常说明。 作者：陈伟
	 */
	public CorpVO[] queryInfoByWhereSQL(String whereSQL)
			throws BusinessException {
		IUAPQueryBS iquery = (IUAPQueryBS) NCLocator.getInstance().lookup(
				IUAPQueryBS.class.getName());

		Collection col = iquery
				.retrieveByClause(CorpVO.class, whereSQL, new String[] {
						"pk_corp", "unitcode", "unitname", "fathercorp" });
		if (col == null || col.size() == 0)
			return null;
		else {
			CorpVO[] vos = (CorpVO[]) col.toArray(new CorpVO[0]);
			VOUtil.ascSort(vos, new String[] { "pk_corp" });
			return vos;
		}
	}

	private boolean isSeal(CorpVO vo, CorpVO oldVO) {
		boolean isSeal = false; // 是否封存
		if (vo.getIsseal().booleanValue()) {
			if (oldVO.getIsseal().booleanValue()) {
				vo.setSealeddate(oldVO.getSealeddate());
			} else {
				isSeal = true;
			}
		} else {
			vo.setSealeddate(null);
		}
		return isSeal;
	}

	private void beforeSeal(boolean isSeal, CorpVO corp, BDOperateServ bdOS)
			throws BusinessException {
		if (isSeal) {
			corp.setSealeddate(new UFDate(System.currentTimeMillis())); // 设置封存时间
			bdOS.beforeOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_SEAL, corp
							.getPrimaryKey(), null, null);
			// } else {
			// corp.setSealeddate(null);
		}
	}

	private void afterSeal(boolean isSeal, CorpVO corp, BDOperateServ bdOS)
			throws BusinessException {
		if (isSeal) { // 如果执行了封存
			bdOS.afterOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_SEAL, corp
							.getPrimaryKey(), null, null);
		}
	}

	/**
	 * 用VO对象的属性值更新数据库。
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @param corp
	 *            nc.vo.bd.CorpVO
	 */
	public String update(CorpVO corp) throws BusinessException {
		new CheckSealCanChg(corp, "pk_corp", "fathercorp", "isseal")
				.checkCanChgSeal();
		IPfBusinessLock bdLock = new PfBusinessLock();
		try {

			HYBillVO billVo = new HYBillVO();
			billVo.setParentVO(corp);
			if (corp.getTs() != null)
				bdLock.lock(new BDLockData(billVo), new BDConsistenceCheck(
						billVo));

			//校验是否存在上级循环引用
			checkIsCycleForFathercorp(corp);
			// 检查唯一性
			checkIsOnly(corp, false);
            
			// chenwei 040522 封存
			CorpVO oldVO = findCorpVOByPK(corp.getPrimaryKey());
			nc.bs.bd.service.BDOperateServ bdOS = new nc.bs.bd.service.BDOperateServ();
			boolean isSeal = isSeal(corp, oldVO); // 是否封存
			beforeSeal(isSeal, corp, bdOS);
			
			IBDOperateContextObject contextObj = new BDOperateContextObject(corp, oldVO, new IBDBaseDoc() {
				public String getCode() {
					return "unitcode";
				}
				public String getName() {
					return "unitname";
				}
				public String getPk() {
					return "pk_corp";
				}});
			bdOS.beforeOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_ALTER, corp
							.getPrimaryKey(), null, contextObj);
			

			updateInnerCode(corp);
			getBaseDAO().updateVO(corp); // 数据库操作
			
			bdOS.afterOperate("100406",
					nc.vo.bd.service.IBDOperate.BDOPERATION_ALTER, corp
							.getPrimaryKey(), null, contextObj);
			
			nc.bs.bd.cache.CacheProxy.fireDataUpdated("bd_corp", corp
					.getPrimaryKey());

			afterSeal(isSeal, corp, bdOS);

			// 添加历史记录
			if (corp.isBackup())
				insertHistory(oldVO);
			return "ok";
		} finally {
			bdLock.unLock();
		}
	}

   /**
    * 
    * @param corp
    * @throws BusinessException
    */
	private void checkIsCycleForFathercorp(CorpVO corp) throws BusinessException {
		if (corp==null||corp.getFathercorp()==null)
			return;
		List pks = getFathercorp(corp.getPk_corp());
		for(Object pk:pks){
			if (corp.getFathercorp().equals(pk))
				throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("100406", "UPP100406-000075"));//上级公司存在循环引用
		}
	}

	private List getFathercorp(String fathercorp) throws BusinessException {
		String sql="select pk_corp from bd_corp where fathercorp=?";
		SQLParameter param=new SQLParameter();
		param.addParam(fathercorp);
		List list=(List)new BaseDAO().executeQuery(sql, param, new ColumnListProcessor());
		return list;
	}

	/**
	 * 根据OID更新字段isHasAccount的值
	 * 
	 * 创建日期：(2001-5-16)
	 * 
	 * @param corp
	 *            nc.vo.bd.CorpVO
	 */
	public void updateAccountFlag(String pkCorp, boolean bHasAccount)
			throws BusinessException {

		CorpVO corp = new CorpVO();
		corp.setPk_corp(pkCorp);
		corp.setIshasaccount(new UFBoolean(bHasAccount));

		getBaseDAO().updateVO(corp, new String[] { "ishasaccount" });

	}

	/**
	 * 更新内部编码
	 * 
	 * @param vo
	 * @throws Exception
	 */
	private void updateInnerCode(CorpVO vo) throws BusinessException {
		InnerCorpCode innercode = new InnerCorpCode();
		IInnerCodeService iInnerCodeService = (IInnerCodeService) NCLocator
				.getInstance().lookup(IInnerCodeService.class.getName());
		String[] innercodes = null;

		CorpVO oldvo = (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class,
				vo.getPrimaryKey());
		String oldFather = oldvo.getFathercorp() == null
				|| oldvo.getFathercorp().trim().length() == 0 ? null : oldvo
				.getFathercorp().trim();
		String newFather = vo.getFathercorp() == null
				|| vo.getFathercorp().trim().length() == 0 ? null : vo
				.getFathercorp().trim();

		// 因待保存的VO从界面读取时没有内部编码信息，这里进行恢复
		vo.setInnercode(oldvo.getInnercode());
		vo.setMaxinnercode(oldvo.getMaxinnercode());

		// 如果父结点未变化，则不做其它处理
		if ((oldFather != null && oldFather.equalsIgnoreCase(newFather))
				|| (oldFather == null && newFather == null))
			return;

		String oldInnercode = oldvo.getInnercode();
		innercodes = iInnerCodeService.getCodes(innercode, vo.getFathercorp(),
				"bd_corp", 1);
		vo.setInnercode(innercodes[0]);
		if (oldInnercode != null
				&& !oldInnercode.equalsIgnoreCase(innercodes[0])) {
			iInnerCodeService.updateAllChildrenCodes(innercode, oldInnercode,
					innercodes[0], "bd_corp");
		}
	}

	public CorpVO insertCorpReturnSelf(CorpVO corp, String[] accountMsgInfo)
			throws BusinessException {
		String pk = insert(corp);

		return (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class, pk);
	}

	public CorpVO updateReturnSelf(CorpVO corp) throws BusinessException {
		update(corp);
		return (CorpVO) getBaseDAO().retrieveByPK(CorpVO.class,
				corp.getPrimaryKey());
	}

	/**
	 * 根据封存结果查询
	 */
	@SuppressWarnings("unchecked")
	public CorpVO[] findCorpVoBySealFlag(boolean isSeal)
			throws BusinessException {
		BaseDAO dao=new BaseDAO();
		String sqlCon=null;
		SQLParameter sqlParameter=new SQLParameter();
		if(isSeal){
			sqlCon="1=1";//显示所有公司记录
		}
		else {
			sqlCon="isseal=?";
			sqlParameter.addParam("N");
		}
		Collection collection = dao.retrieveByClause(CorpVO.class, sqlCon, sqlParameter);
		return (CorpVO[])collection.toArray(new CorpVO[0]);
	}
}