/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.bs.ic.ic211;

import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bs.framework.common.NCLocator;
import nc.bs.ic.pub.GenMethod;
import nc.bs.ic.pub.ICCommonBusiImpl;
import nc.bs.ic.pub.ICDbVisitor;
import nc.bs.ic.pub.ICTempTableConst;
import nc.bs.ic.pub.ModuleEnable;
import nc.bs.ic.pub.bill.GeneralBillDMO;
import nc.bs.ic.pub.bill.GeneralSqlString;
import nc.bs.ic.pub.bill.ICLockBO;
import nc.bs.ic.pub.check.CheckDMO;
import nc.bs.ic.pub.check.RebuildDMO;
import nc.bs.ic.pub.vmi.ICSmartToolsDmo;
import nc.bs.pub.SystemException;
import nc.bs.scm.pub.redun.IRedunSource;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.impl.ic.CRM.IcToCRM;
import nc.itf.ic.service.IIC211GeneralHDMO;
import nc.itf.scm.crm.ICRMService;
import nc.itf.scm.pub.ICoopwithForVO;
import nc.itf.so.service.ISOToIC_DRP;
import nc.itf.so.so120.IBillInvokeCreditManager;
import nc.vo.ic.ic700.Bill53Const;
import nc.vo.ic.ic700.ICDataSet;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.ic.pub.ICGenVO;
import nc.vo.ic.pub.SmartVOUtilExt;
import nc.vo.ic.pub.bill.DynamicJoinSql;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ic.pub.bill.IItemKey;
import nc.vo.ic.pub.billtype.IBillType;
import nc.vo.ic.pub.check.CheckTools;
import nc.vo.jcom.lang.StringUtil;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.query.ConditionVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.ic.bill.WhVO;
import nc.vo.scm.pub.bill.CreditConst;
import nc.vo.scm.pub.redun.RedunUtil;
import nc.vo.scm.pub.smart.SmartFieldMeta;
import nc.vo.so.credit.BillCreditOriginVO;

/**
 * BO进行数据库的控制类 作者：张欣
 * 
 * @version 2001-07-17
 * @see 需要参见的其它类
 * @since 从产品的那一个版本，此类被添加进来。（可选）
 * @deprecated该类从产品的那一个版本后，已经被其它类替换。（可选）
 */

public class GeneralHDMO extends nc.bs.ic.pub.bill.GeneralBillDMO implements
		nc.bs.pub.pf.IQueryData2, IIC211GeneralHDMO, IRedunSource ,ICRMService{

	/**
	 * GeneralHDMO 构造子注解。
	 * 
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public GeneralHDMO() throws javax.naming.NamingException, SystemException {
		super();
	}

	/**
	 * GeneralHDMO 构造子注解。
	 * 
	 * @param dbName
	 *            java.lang.String 在EJB Server中配置的数据库DataSource名称。
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public GeneralHDMO(String dbName) throws javax.naming.NamingException,
			SystemException {
		super(dbName);
	}

	/**
	 * 方法说明：新增、修改单据更新客商应收款
	 * 
	 * update Account Receivable 销售出库单对业务应收的更新
	 * 
	 * 
	 * 客商档案中的业务应收
	 * 
	 * =客商档案中的业务应收+
	 * 
	 * （异动后实发数量-异动前实发数量）*订单含税单价
	 * 
	 * 
	 * 
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	private void __updateCustArMny(String pk_corp, String pk_cumandoc,
			UFDouble nmny) throws BusinessException {
		//
		if (pk_cumandoc == null || nmny == null || nmny.doubleValue() == 0.0) {
			nc.vo.scm.pub.SCMEnv.out("mny=0,not update.");
			return;
		}

		String sql = "UPDATE bd_cumandoc  SET  busawmny = COALESCE(busawmny,0.0)+(?)  WHERE pk_cumandoc = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setBigDecimal(1, nmny.toBigDecimal());
			stmt.setString(2, pk_cumandoc);

			stmt.executeUpdate();
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}

	/**
	 * 生产同步删除材料出库单的方法 功能：备料计划的单据类型为 A3 参数：公司主键 String pk_corp,
	 * 表体来源单据的表头ID：String csourcebillhid 返回： 例外： 日期：(2001-11-24 11:02:40)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void delOut(String pk_corp, String csourcebillhid)
			throws nc.vo.pub.BusinessException {
		if (pk_corp == null || csourcebillhid == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi", "UPP4008busi-000103")/*
																				 * @res
																				 * "外系统单据传入了空参数。公司PK和外系统单据的表头ID不能为空！"
																				 */);

		String sSourceType = "A3"; // depends on what kind of bill you want to
		// save.
		Boolean bIsSourceSigned = null;
		try {

			bIsSourceSigned = isSourceBillSigned(pk_corp, csourcebillhid,
					sSourceType);
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}

		ArrayList alResult = null;

		if (bIsSourceSigned == null) {
			// 如果没有对应的来源单据则返回。
			return;
		} else if (bIsSourceSigned.booleanValue()) {
			// 如果来源单据已经签字则抛出异常。
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi", "UPP4008busi-000104")/*
																				 * @res
																				 * "因为关联生成的库存单据已经签字，不能取消审核！"
																				 */);
		} else {
			// //如果来源单据，尚未签字，同步删除单据。
			// nc.bs.pub.pf.PfUtil remote = null;
			nc.bs.pub.pf.PfUtilBO pfBO = null;
			try {

				/** 根据传入的来源单据表头ID, 查询出删除时需要的,出库单的表头ID和操作员ID,公司ID */
				// 根据来源单据查询出来的材料出库单，可以有多张
				alResult = queryBillsBySourceHID(csourcebillhid);
				if (alResult != null && alResult.size() > 0) {
					// 应该同时删除多张同时生产的材料出库单。
					for (int i = 0; i < alResult.size(); i++) {
						String[] aryParams = (String[]) alResult.get(i);
						// 表头ID
						String[] aryTemp = { aryParams[0] };
						RebuildDMO redmo = new RebuildDMO();
						ArrayList altemp = redmo.getBills(aryTemp);
						if (altemp != null && altemp.get(0) != null) {
							GeneralBillVO bvo = (GeneralBillVO) altemp.get(0);
							// /** 调用单据删除方法 */
							// deleteBillsWithNoLock(aryTemp, aryParams[1],
							// aryParams[2]);

							// nc.vo.scm.pub.SCMEnv.error(e);
							// throw new BusinessException(e.getMessage());

							// 通过BO调用BO
							// nc.bs.pub.pf.PfUtilHome home =
							// (nc.bs.pub.pf.PfUtilHome)
							// getBeanHome(nc.bs.pub.pf.PfUtilHome.class,
							// "nc.bs.pub.pf.PfUtilBO");

							// remote = home.create();
							pfBO = new nc.bs.pub.pf.PfUtilBO();
							// 删除单据
							pfBO.processAction(
									"DELETE",
									nc.vo.ic.pub.BillTypeConst.m_saleOut, // depends
									// on
									// your
									// bill
									// type
									bvo.getHeaderValue("dbilldate").toString(),
									null, bvo, null);

							// 保存单据
							// insertBillsWithNoLock(arybvo);

						}
					}

				}
			} catch (Exception ex) {
				throw new BusinessException(ex.getMessage());
			}
			// finally {
			// try {
			// if (remote != null)
			// remote.remove();
			// } catch (Exception e) {
			// nc.vo.scm.pub.SCMEnv.error(e);

			// }
			// }
		}
	}

	/**
	 * 方法说明：根据订单上的客商，表体id,算金额
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	private Hashtable getCustTotalMny(Hashtable htCust, Hashtable htPrice,
			GeneralBillItemVO[] voaItem) throws BusinessException {
		Hashtable htPP = new Hashtable();

		if (htCust != null && htCust.size() > 0) {
			UFDouble ufdTotalMny = null; // 总金额
			final UFDouble d0 = new UFDouble(0.0);
			Enumeration enumKey = htCust.keys();
			String sHid = null; // 订单表头id
			String pk_cumandoc = null; // 客商管理ID
			ufdTotalMny = d0;
			while (enumKey.hasMoreElements()) {
				sHid = (String) enumKey.nextElement();
				pk_cumandoc = (String) htCust.get(sHid);
				if (htPrice != null && voaItem != null) {
					UFDouble ufdPrice = null; // 单价
					// ufdTotalMny = d0; //总金额
					for (int i = 0; i < voaItem.length; i++) {
						// 此客商的订单，指定表体的单价
						// 注意hid和bid别搞混了。
						if (voaItem[i] != null
								&& voaItem[i].getNoutnum() != null
								&& voaItem[i].getCfirstbillbid() != null
								&& sHid.equals(voaItem[i].getCfirstbillhid())
								&& (voaItem[i].getFlargess() != null
										&& !voaItem[i].getFlargess()
												.booleanValue() || voaItem[i]
										.getFlargess() == null)) {
							ufdPrice = (UFDouble) htPrice.get(voaItem[i]
									.getCfirstbillbid());
							// 有单价的话。
							if (ufdPrice != null) {
								ufdTotalMny = ufdTotalMny.add(voaItem[i]
										.getNoutnum().multiply(ufdPrice));
								nc.vo.scm.pub.SCMEnv.out("num="
										+ voaItem[i].getNoutnum() + "&pr="
										+ ufdPrice + "&t=" + ufdTotalMny);
							}
						}
					}
					htPP.put(pk_cumandoc, ufdTotalMny);
				}
			}
		}
		return htPP;
	}

	/**
	 * 方法说明：根据源头单据表体id查询订单单价，客商
	 * 
	 * 返回两个hashtable:[单价][客商]
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	private Hashtable[] getOrderInfo(GeneralBillItemVO[] voaItem)
			throws BusinessException {
		// [0]key=order body id,value=price,[1]key=hid,value=custid
		Hashtable htOrderInfos[] = new Hashtable[2];
		try {

			Object obj = null;
			try {
				// obj=InterServTool.getInterInstance(
				// ProductCode.PROD_SO,
				// InterRegister.SO0301//接口编号，注册在InterRegister中
				// );
				obj = NCLocator.getInstance().lookup(
						ISOToIC_DRP.class.getName());
			} catch (Exception e) {
				throw new RemoteException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008busi",
								"UPP4008busi-000069")/* @res "销售产品没有启用！" */);
			}

			if (voaItem != null && voaItem.length > 0) {
				Vector vBid = new Vector(); // 源头表体id
				Vector vHid = new Vector(); // 源头表头id
				for (int i = 0; i < voaItem.length; i++) {
					// 传过去保持唯一
					if (voaItem[i] != null) {
						if (voaItem[i].getCfirstbillbid() != null
								&& !vBid
										.contains(voaItem[i].getCfirstbillbid()))
							vBid.addElement(voaItem[i].getCfirstbillbid());
						if (voaItem[i].getCfirstbillhid() != null
								&& !vHid
										.contains(voaItem[i].getCfirstbillhid()))
							vHid.addElement(voaItem[i].getCfirstbillhid());
					}

				}
				// 查单价
				if (vBid.size() > 0) {
					String[] arIDs = new String[vBid.size()];
					vBid.copyInto(arIDs);
					if (obj != null)
						htOrderInfos[0] = ((ISOToIC_DRP) obj)
								.getSaleOrderPrice(arIDs);

				}
				// 查客户
				if (vHid.size() > 0) {
					String[] arIDs = new String[vHid.size()];
					vHid.copyInto(arIDs);
					if (obj != null)
						htOrderInfos[1] = ((ISOToIC_DRP) obj)
								.getSaleOrderCust(arIDs);
				}
			}
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		}
		return htOrderInfos;
	}

	/**
	 * 塞格查销售订单单据号获得出库单 创建日期：(2004-1-9 16:03:10)
	 * 
	 * @return java.lang.String
	 * @param sSource
	 *            java.lang.String
	 */
	private String getSaleBillCode(String sSource) throws BusinessException {
		String sReplance = "body.vsourcebillcode = '";
		int index1 = sSource.indexOf(sReplance);
		String sRet = sSource;
		if (index1 > 0) {
			StringBuffer s2 = new StringBuffer(sSource.substring(0, index1));
			int index2 = sSource.indexOf("'", index1 + sReplance.length());
			StringBuffer s3 = new StringBuffer(sSource.substring(index1
					+ sReplance.length(), index2));
			StringBuffer s4 = new StringBuffer(sSource.substring(index2,
					sSource.length()));
			nc.vo.scm.pub.SCMEnv.out("s2:" + s2);
			nc.vo.scm.pub.SCMEnv.out("salebillcode=" + s3);
			nc.vo.scm.pub.SCMEnv.out("s4:" + s4);
			if (s3.length() > 0) {
				String saleID = getSaleID(s3.toString());
				if (saleID == null || saleID.length() == 0)
					return sRet;
				sRet = s2.append("body.cfirstbillhid = '" + saleID + s4)
						.toString();
			}
		}
		return sRet;
	}

	/**
	 * 
	 * 创建日期：(2001-10-25 14:08:29)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 * @param getSaleDetailPrice
	 *            java.lang.String
	 */
	private String getSaleID(String sCode) throws BusinessException {
		String csaleid = null;
		String strSQL = "Select csaleid From so_sale where vreceiptcode = ?";
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(strSQL);
			stmt.setString(1, sCode);
			ResultSet rs = stmt.executeQuery();
			//
			if (rs.next()) {
				csaleid = rs.getString(1);
			}
		} catch (Exception e) {
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		return csaleid;
	}

	/**
	 * 方法说明：是否需要回写客户应收。
	 * 
	 * 创建日期：(2003-1-7 12:07:40) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @return boolean
	 * @param vo
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	private boolean isNeedUpdateCustAr(GeneralBillVO voBill) {
		boolean bNeed = false;
		// 单据,是销售订单来的
		if (voBill != null && voBill.isFromFirst("30")) {
			GeneralBillItemVO[] voaItem = voBill.getItemVOs();
			// 只检查第一行有数量即可。
			if (voaItem != null && voaItem.length > 0 && voaItem[0] != null
					&& voaItem[0].getNoutnum() != null) {
				for (int i = 0; i < voaItem.length; i++) {
					// 有来源单据id，找到一个就足够了。
					if (voaItem[i] != null
							&& voaItem[i].getCfirstbillhid() != null
							&& voaItem[i].getCfirstbillhid().trim().length() > 0
							&& voaItem[i].getCfirstbillbid() != null
							&& voaItem[i].getCfirstbillbid().trim().length() > 0) {
						bNeed = true;
						break;
					}
				}
			}
		}
		nc.vo.scm.pub.SCMEnv.out("need update cust=" + bNeed);
		return bNeed;
	}

	/**
	 * 此处方法说明为根据主表的关键字段进行查询子表的数据。 创建日期：(2001-7-9 20:06:40)
	 * 
	 * @return nc.vo.pub.CircularlyAccessibleValueObject
	 * @param sBillPK
	 *            java.lang.String
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllBodyData(
			java.lang.String sBillPK) throws BusinessException {
		if (sBillPK == null)
			return null;

		return queryAllBodyData(sBillPK, null);
	}

	/**
	 * 此处方法说明为根据主表的关键字段进行查询子表的数据。 创建日期：(2001-7-9 20:06:40)
	 * 
	 * @return nc.vo.pub.CircularlyAccessibleValueObject
	 * @param sBillPK
	 *            java.lang.String 发票条件： invman.iscansaleinvoice = 'Y' AND
	 *            (COALESCE(body.noutnum,0.0)-COALESCE(bb3.nsignnum,0.0))<>0
	 * 
	 * 
	 * 
	 * 
	 */

	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllBodyData(
			java.lang.String sBillPK, String sBodyWhere)
			throws BusinessException {

		if (sBillPK == null)
			return null;
		StringBuffer sbSql = new StringBuffer("SELECT ");
		try {
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					"body"));
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
		sbSql
				.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
		sbSql
				.append(",(coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) as nleftastnum");
		sbSql
				.append(",bb3.nsignnum as naccinvoicenum,bb3.naccountnum1 as naccountnum1,bb3.nrushnum as nrushnum ");
		sbSql.append(",bb3.naccumoutbacknum  ");

		sbSql
				.append(" from ic_general_b body left outer join ic_general_bb3 bb3 on body.cgeneralbid=bb3.cgeneralbid and bb3.dr=0 ");
		// sbSql.append(" inner join bd_invmandoc invman on body.cinventoryid =
		// invman.pk_invmandoc ");

		if (sBodyWhere != null) {
			DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
			ConditionVO[] voCondition = GenMethod.getConditionVO(sBodyWhere);
			String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
			// 动态关联：
			if (sUnionSQL != null && sUnionSQL.length() > 0)
				sbSql.append(sUnionSQL);
		}

		sbSql.append(" where body.cgeneralhid='");
		sbSql.append(sBillPK);
		sbSql.append("' ");
		if (sBodyWhere != null)
			sbSql.append(" and (").append(sBodyWhere + ")");
		sbSql
				.append(" and body.dr=0 order by body.cgeneralhid,cast(body.crowno as numeric(20,8)) \n");

		GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());

		try {
			voaItem = getFreeItemData(voaItem);
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}

		return voaItem;

	}

	/**
	 * 李俊 功能：价格改判引起销售出库单的重新保存。接口由退库调用 参数：Hashtable: htSourceBillBidToPrices:
	 * csourcebillbid-> UFDouble[2]: 0位置存放含税单价ntaxprice,1存放非含税单价nsaleprice
	 * String m_user: userid logDate,pkCorp
	 * 
	 * 返回： 例外： 日期：(2004-12-1 13:57:59) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param htSourceBillBidToPrices
	 *            java.util.Hashtable
	 * @exception java.lang.Exception
	 *                异常说明。
	 * 
	 * 调用的更改动作CHANGEPRICE: 首先单锁(签字锁). 直接更改价格 揭锁.
	 */
	public void changeSalePrices_bak(Hashtable htSourceBillBidToPrices,
			String m_user, String m_logDate, String pk_corp, String sourceType)
			throws BusinessException {

		if (htSourceBillBidToPrices == null
				|| htSourceBillBidToPrices.size() <= 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi", "UPP4008busi-000105")/*
																				 * @res
																				 * "没有传入价格变动参数"
																				 */);
		int iAlterLen = htSourceBillBidToPrices.size();

		String[] saSourceBIDs = new String[iAlterLen];
		Set setSourceBIDs = htSourceBillBidToPrices.keySet();
		setSourceBIDs.toArray(saSourceBIDs);

		Hashtable htHID = null;

		// 1 查询sourceBillBID对应的HID
		htHID = queryCgeneralHIDBySourceBID(saSourceBIDs, pk_corp, sourceType);

		if (htHID == null || htHID.size() <= 0) {
			return;
		}
		int iHIDLen = htHID.size();
		String[] saHID = new String[iHIDLen];
		htHID.keySet().toArray(saHID);
		// 2 循环获得普通单据GeneralBillVO
		GeneralBillVO voBill = null;
		GeneralBillVO voNewBill = null;
		GeneralBillHeaderVO voHead = null;
		GeneralBillItemVO[] voaItem = null;
		GeneralBillItemVO[] voaNewItem = null;

		for (int i = 0; i < saHID.length; i++) {
			// 查询纯字段
			voHead = queryBillHead(saHID[i]);
			voaItem = queryBillItemByBillPk(saHID[i], true, true);
			queryBillItemBarCode(voaItem);
			// 构造voBill
			voBill = new GeneralBillVO();
			voBill.setParentVO(voHead);
			voBill.setChildrenVO(voaItem);
			if (voHead == null || voaItem == null)
				continue;
			// 查询仓库信息
			nc.bs.ic.pub.bill.MiscDMO dmoMisc;
			try {
				dmoMisc = new nc.bs.ic.pub.bill.MiscDMO();
				String sWhID = voHead.getCwarehouseid();
				WhVO whvo = dmoMisc.getWhInfo(sWhID);
				voBill.setWh(whvo);
			} catch (Exception e) {
				// 日志异常
				nc.vo.scm.pub.SCMEnv.out(e);
				// 库存组异常抛出规范
				throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
			}
			// clone
			voNewBill = (GeneralBillVO) voBill.clone();
			voaNewItem = (GeneralBillItemVO[]) voNewBill.getChildrenVO();
			// 更改价格
			String sSourceBillBidTemp = null;
			for (int j = 0; j < voaNewItem.length; j++) {
				if (voaNewItem[j] == null)
					continue;
				// 读取存货信息
				String sInvID = voaNewItem[j].getCinventoryid();
				InvVO invvo = dmoMisc.getInvInfo(sInvID);
				voaNewItem[j].setInv(invvo);
				voaItem[j].setInv(invvo);

				sSourceBillBidTemp = voaNewItem[j].getCsourcebillbid();
				if (sSourceBillBidTemp == null
						|| sSourceBillBidTemp.trim().length() == 0)
					continue;

				if (htSourceBillBidToPrices.containsKey(sSourceBillBidTemp)) {
					UFDouble[] aufprice = (UFDouble[]) htSourceBillBidToPrices
							.get(sSourceBillBidTemp);
					if (aufprice.length != 2 || aufprice[0] == null
							|| aufprice[1] == null)
						throw new BusinessException(nc.bs.ml.NCLangResOnserver
								.getInstance().getStrByID("4008busi",
										"UPP4008busi-000135")/*
																 * @res
																 * "价格参数传入不对！"
																 */);
					UFDouble noutnum = voaNewItem[j].getNoutnum();
					if (noutnum == null)
						noutnum = new UFDouble(0);
					// 改变单价
					voaNewItem[j].setAttributeValue("ntaxprice", aufprice[0]);
					voaNewItem[j].setAttributeValue("nsaleprice", aufprice[1]);
					// 改变含税金额，非含税金额
					voaNewItem[j].setAttributeValue("ntaxmny", aufprice[0]
							.multiply(noutnum));
					voaNewItem[j].setAttributeValue("nsalemny", aufprice[1]
							.multiply(noutnum));
				}
			}
			// 更改vo状态等信息
			voNewBill.setStatus(nc.vo.pub.VOStatus.UPDATED);
			voNewBill.setSaveBarcodeDelFirst(true);
			// set other info
			// 帐期、信用信息
			voNewBill.m_iActionInt = nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_MODIFY;
			voNewBill.m_sActionCode = "SAVEBASE";
			voNewBill.m_voOld = voBill;
			// set vo flag to pass barcode num check
			voNewBill.setAutoSendBarcodes(true);
			voBill.setAutoSendBarcodes(true);
			// set current operator
			GeneralBillHeaderVO headVOCur = (GeneralBillHeaderVO) voNewBill
					.getParentVO();
			headVOCur.setCoperatoridnow(m_user);
			headVOCur.setAttributeValue("clogdatenow", m_logDate);
			GeneralBillHeaderVO headVOPre = (GeneralBillHeaderVO) voBill
					.getParentVO();
			headVOPre.setCoperatoridnow(m_user);
			headVOPre.setAttributeValue("clogdatenow", m_logDate);
			// 3 执行平台保存
			try {
				nc.bs.pub.pf.PfUtilBO boWFlow = new nc.bs.pub.pf.PfUtilBO();
				boWFlow.processAction("WRITE", voBill.getBillTypeCode(),
						m_logDate, null, voNewBill, voBill);
			} catch (Exception e11) {
				nc.vo.scm.pub.SCMEnv.error(e11);
				// 库存组异常抛出规范
				throw nc.bs.ic.pub.GenMethod.handleException(e11.getMessage(),
						e11);
			}
		}
	}

	/**
	 * 李俊 功能：价格改判 /** 传入属性：
	 * 
	 * 
	 * 订单或退货申请单表体id csourcebillbid 币种 cquotecurrency 报价含税净价 nquoteprice 本币含税净单价
	 * ntaxprice 本币无税净单价 nsaleprice 报价计量单位ID cquoteunitid 报价计量单位换算率
	 * nquoteunitrate
	 * 
	 * 是否价保 bsafeprice 是否返利 breturnprofit
	 * 
	 * 报价单位无税净价 nquotentprice
	 * 
	 * 返回： 例外： 日期：(2004-12-1 13:57:59) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param htSourceBillBidToPrices
	 *            java.util.Hashtable
	 * @exception java.lang.Exception
	 *                异常说明。
	 * 
	 * 调用的更改动作CHANGEPRICE: 首先单锁(签字锁). 直接更改价格 揭锁.
	 */
	public String changeSalePrices(GeneralBillItemVO[] itemvos, String m_user,
			String m_logDate, String pk_corp, String sourceType)
			throws BusinessException {
		if (itemvos == null || itemvos.length <= 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi", "UPP4008busi-000105")/*
																				 * @res
																				 * "没有传入价格变动参数"
																				 */);

		Hashtable haparam = new Hashtable();
		// 3V 0--ntaxprice,1--nsaleprice,2--nquoteprice
		if (sourceType.equals("3V")) {
			UFDouble[] row = null;
			for (GeneralBillItemVO vo : itemvos) {
				if (vo.getCsourcebillbid() == null)
					continue;
				// 3V 0--ntaxprice,1--nsaleprice,2--nquoteprice
				row = new UFDouble[3];
				row[0] = CheckTools.toUFDouble(vo
						.getAttributeValue("ntaxprice"));
				row[1] = CheckTools.toUFDouble(vo
						.getAttributeValue("nsaleprice"));
				row[2] = CheckTools.toUFDouble(vo
						.getAttributeValue("nquoteprice"));
				haparam.put(vo.getCsourcebillbid(), row);
			}
		} else if (sourceType.equals("30")) {
			Object[] row = null;
			for (GeneralBillItemVO vo : itemvos) {
				if (vo.getCsourcebillbid() == null)
					continue;
				// 30
				// 0--ntaxprice,1--nsaleprice,2--bsafeprice,3--breturnprofit,4--cquoteunitid,5--nquoteunitrate,6--cquotecurrency,7--nquoteprice,8--nquotentprice
				row = new Object[9];
				row[0] = vo.getAttributeValue("ntaxprice");
				row[1] = vo.getAttributeValue("nsaleprice");
				row[2] = vo.getAttributeValue("bsafeprice");
				row[3] = vo.getAttributeValue("breturnprofit");
				row[4] = vo.getAttributeValue("cquoteunitid");
				row[5] = vo.getAttributeValue("nquoteunitrate");
				row[6] = vo.getAttributeValue("cquotecurrency");
				row[7] = vo.getAttributeValue("nquoteprice");
				row[8] = vo.getAttributeValue("nquotentprice");
				haparam.put(vo.getCsourcebillbid(), row);
			}
		} else {
			throw new BusinessException("单据类型不支持");
		}

		return changeSalePrices(haparam, m_user, m_logDate, pk_corp, sourceType);

	}

	/**
	 * 李俊 功能：价格改判 参数：Hashtable: htSourceBillBidToPrices: csourcebillbid->
	 * UFDouble[2]: 0位置存放含税单价ntaxprice,1存放非含税单价nsaleprice String m_user: userid
	 * logDate,pkCorp
	 * 
	 * 返回： 例外： 日期：(2004-12-1 13:57:59) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param htSourceBillBidToPrices
	 *            java.util.Hashtable
	 * @exception java.lang.Exception
	 *                异常说明。
	 * 
	 * 调用的更改动作CHANGEPRICE: 首先单锁(签字锁). 直接更改价格 揭锁.
	 */
	public String changeSalePrices(Hashtable htSourceBillBidToPrices,
			String m_user, String m_logDate, String pk_corp, String sourceType)
			throws BusinessException {

		if (htSourceBillBidToPrices == null
				|| htSourceBillBidToPrices.size() <= 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi", "UPP4008busi-000105")/*
																				 * @res
																				 * "没有传入价格变动参数"
																				 */);
		int iAlterLen = htSourceBillBidToPrices.size();

		String[] saSourceBIDs = new String[iAlterLen];
		Set setSourceBIDs = htSourceBillBidToPrices.keySet();
		setSourceBIDs.toArray(saSourceBIDs);

		Hashtable htHID = null;
		// 1 查询sourceBillBID对应的HID
		// ydy 0628 已经结算和途损,不能修改价格
		SmartDMO sdmo = null;
		try {
			htHID = queryCgeneralHIDBySourceBID(saSourceBIDs, pk_corp,
					sourceType);
			sdmo = new SmartDMO();
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

		if (htHID == null || htHID.size() <= 0) {
			return null;
		}
		int iHIDLen = htHID.size();
		String[] saHID = new String[iHIDLen];
		htHID.keySet().toArray(saHID);
		// 2 循环获得普通单据GeneralBillVO
		GeneralBillVO voBill = null;
		GeneralBillVO voNewBill = null;
		GeneralBillHeaderVO voHead = null;
		GeneralBillItemVO[] voaItem = null;
		GeneralBillItemVO[] voaNewItem = null;
		String err = null;
		// String sbb3sql = " select cgeneralbid from ic_general_bb3 where
		// coalesce(naccountnum1,0)<>0 and cgeneralhid = ? ";
		// ArrayList typevaluelist = new ArrayList(1);
		// typevaluelist.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
		// ArrayList idvaluelist = new ArrayList(1);

		// 已签收定价，不能修改单价
		HashMap<String, UFBoolean> hsSignPrice = null;
		for (int i = 0; i < saHID.length; i++) {

			// 查询纯字段
			try {
				// idvaluelist.clear();
				// idvaluelist.add(saHID[i]);
				// Object[] retq = sdmo.selectBy2(sbb3sql, idvaluelist,
				// typevaluelist);
				// if(retq!=null && retq.length>0)
				// continue;
				voHead = queryBillHead(saHID[i]);
				voaItem = queryBillItemByBillPk(saHID[i], true, true);

				ICSmartToolsDmo tooldmo = new ICSmartToolsDmo();

				tooldmo.fillVOValuesBy(voaItem,
						new String[] { "naccountnum1" },
						new int[] { SmartFieldMeta.JAVATYPE_UFDOUBLE },
						"cgeneralbid", "ic_general_bb3",
						new String[] { "naccountnum1" }, "cgeneralbid", null);

				ArrayList<String> bidlist = new ArrayList<String>(
						voaItem.length);
				bidlist.addAll(Arrays.asList(SmartVOUtilExt.getVOsValues(
						voaItem, "cgeneralbid")));
				hsSignPrice = new CheckDMO().checkSignPrice(bidlist);
			} catch (Exception e) {
				throw GenMethod.handleException(null, e);
			}
			// 构造voBill
			voBill = new GeneralBillVO();
			voBill.setParentVO(voHead);
			voBill.setChildrenVO(voaItem);
			if (voHead == null || voaItem == null)
				continue;
			// clone
			voNewBill = (GeneralBillVO) voBill.clone();
			voaNewItem = (GeneralBillItemVO[]) voNewBill.getChildrenVO();
			// 更改价格
			String sSourceBillBidTemp = null;

			ArrayList procvolist = new ArrayList();
			for (int j = 0; j < voaNewItem.length; j++) {
				if (hsSignPrice != null
						&& hsSignPrice.get(voaNewItem[j].getCgeneralbid()) != null
						&& hsSignPrice.get(voaNewItem[j].getCgeneralbid())
								.booleanValue())
					continue;
				if (voaNewItem[j] == null)
					continue;
				if (sourceType.equalsIgnoreCase("3V"))
					sSourceBillBidTemp = voaNewItem[j].getCsourcebillbid();
				else
					sSourceBillBidTemp = voaNewItem[j].getCfirstbillbid();

				if (sSourceBillBidTemp == null
						|| sSourceBillBidTemp.trim().length() == 0)
					continue;

				if (htSourceBillBidToPrices.containsKey(sSourceBillBidTemp)) {

					if (sourceType.equalsIgnoreCase("3V")) {
						UFDouble[] aufprice = (UFDouble[]) htSourceBillBidToPrices
								.get(sSourceBillBidTemp);
						if (aufprice.length < 3 || aufprice[0] == null
								|| aufprice[1] == null || aufprice[2] == null)
							throw new BusinessException(
									nc.bs.ml.NCLangResOnserver.getInstance()
											.getStrByID("4008busi",
													"UPP4008busi-000135")/*
																			 * @res
																			 * "价格参数传入不对！"
																			 */);
						UFDouble noutnum = voaNewItem[j].getNoutnum();
						if (noutnum == null)
							noutnum = new UFDouble(0);
						// 改变单价
						voaNewItem[j].setAttributeValue("ntaxprice",
								aufprice[0]);
						voaNewItem[j].setAttributeValue("nsaleprice",
								aufprice[1]);
						voaNewItem[j].setAttributeValue("nquoteprice",
								aufprice[2]);

						// 改变含税金额，非含税金额
						voaNewItem[j].setAttributeValue("ntaxmny", aufprice[0]
								.multiply(noutnum));
						voaNewItem[j].setAttributeValue("nsalemny", aufprice[1]
								.multiply(noutnum));
						voaNewItem[j].setAttributeValue("nquotemny",
								aufprice[2].multiply(noutnum));
					} else if (sourceType.equalsIgnoreCase("30")) {
						Object[] aufprice = (Object[]) htSourceBillBidToPrices
								.get(sSourceBillBidTemp);
						if (aufprice.length < 8)
							throw new BusinessException(
									nc.bs.ml.NCLangResOnserver.getInstance()
											.getStrByID("4008busi",
													"UPP4008busi-000135")/*
																			 * @res
																			 * "销售参数传入不对！"
																			 */);
						UFDouble noutnum = voaNewItem[j].getNoutnum();
						if (noutnum == null)
							noutnum = new UFDouble(0);

						// 是否价保是否返利
						voaNewItem[j].setAttributeValue("bsafeprice",
								aufprice[2]);
						voaNewItem[j].setAttributeValue("breturnprofit",
								aufprice[3]);

						// 报价单位
						if (aufprice[4] != null
								&& aufprice[4].toString().trim().length() > 0)
							voaNewItem[j].setAttributeValue("cquoteunitid",
									aufprice[4]);

						// 报价数量
						UFDouble nquoteunitnum_bak = (UFDouble) voaNewItem[j]
								.getAttributeValue("nquoteunitnum");
						if (!ICGenVO.equalsForNullAsZero(
								(UFDouble) voaNewItem[j]
										.getAttributeValue("nquoteunitrate"),
								(UFDouble) aufprice[5])) {
							voaNewItem[j].setAttributeValue("nquoteunitnum",
									ICGenVO
											.div(noutnum,
													(UFDouble) aufprice[5]));
						}
						// 报价换算率
						voaNewItem[j].setAttributeValue("nquoteunitrate",
								aufprice[5]);

						// ydy 0628 已经结算和途损,不能修改价格
						// 修改人：刘家清 修改时间：2008-5-27 上午09:00:42
						// 修改原因：金冬梅和谢阳讨论后确定，已经结算和途损，也要支持修改价格。
						/*
						 * if((voaNewItem[j].getAttributeValue("naccumwastnum")!=null &&
						 * ((UFDouble)voaNewItem[j].getAttributeValue("naccumwastnum")).doubleValue()!=0.0 ) ||
						 * (voaNewItem[j].getAttributeValue("naccountnum1")!=null &&
						 * ((UFDouble)voaNewItem[j].getAttributeValue("naccountnum1")).doubleValue()!=0.0 ) ){
						 * //报价金额
						 * if(!ICGenVO.equalsForNullAsZero((UFDouble)voaNewItem[j].getAttributeValue("nquoteunitnum"),nquoteunitnum_bak)){
						 * 
						 * voaNewItem[j].setAttributeValue("nquotemny",ICGenVO.mult((UFDouble)voaNewItem[j].getAttributeValue("nquoteunitnum"),
						 * (UFDouble)voaNewItem[j].getAttributeValue("nquoteprice")
						 * ));
						 * 
						 * if(!procvolist.contains(voaNewItem[j]))
						 * procvolist.add(voaNewItem[j]); }
						 * 
						 * }else{
						 */
						// 改变含税金额，非含税金额
						if (!ICGenVO.equalsForNullAsZero(
								(UFDouble) voaNewItem[j]
										.getAttributeValue("ntaxprice"),
								(UFDouble) aufprice[0])) {
							voaNewItem[j].setAttributeValue("ntaxmny",
									((UFDouble) aufprice[0]).multiply(noutnum));
							if (!procvolist.contains(voaNewItem[j]))
								procvolist.add(voaNewItem[j]);
						}
						if (!ICGenVO.equalsForNullAsZero(
								(UFDouble) voaNewItem[j]
										.getAttributeValue("nsaleprice"),
								(UFDouble) aufprice[1])) {
							voaNewItem[j].setAttributeValue("nsalemny",
									((UFDouble) aufprice[1]).multiply(noutnum));
							if (!procvolist.contains(voaNewItem[j]))
								procvolist.add(voaNewItem[j]);
						}

						// 改变单价
						voaNewItem[j].setAttributeValue("ntaxprice",
								aufprice[0]);
						voaNewItem[j].setAttributeValue("nsaleprice",
								aufprice[1]);

						// 报价币种
						if (aufprice[6] != null
								&& aufprice[6].toString().trim().length() > 0)
							voaNewItem[j].setAttributeValue("cquotecurrency",
									aufprice[6]);
						// 报价金额
						if (!ICGenVO.equalsForNullAsZero(
								(UFDouble) voaNewItem[j]
										.getAttributeValue("nquoteprice"),
								(UFDouble) aufprice[7])
								|| !ICGenVO
										.equalsForNullAsZero(
												(UFDouble) voaNewItem[j]
														.getAttributeValue("nquoteunitnum"),
												nquoteunitnum_bak)) {

							voaNewItem[j]
									.setAttributeValue(
											"nquotemny",
											ICGenVO
													.mult(
															(UFDouble) voaNewItem[j]
																	.getAttributeValue("nquoteunitnum"),
															(UFDouble) aufprice[7]));

							if (!procvolist.contains(voaNewItem[j]))
								procvolist.add(voaNewItem[j]);

						}
						// 报价单价
						voaNewItem[j].setAttributeValue("nquoteprice",
								aufprice[7]);
						voaNewItem[j].setAttributeValue("nquotentprice",
								aufprice[8]);

						// }
					}
				}
			}
			// 更改vo状态等信息
			voNewBill.setStatus(nc.vo.pub.VOStatus.UPDATED);
			voNewBill.setSaveBarcodeDelFirst(true);
			// set other info
			// 帐期、信用信息
			voNewBill.m_iActionInt = nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_MODIFY;
			voNewBill.m_sActionCode = "CHANGEPRICE";
			voNewBill.m_voOld = voBill;
			// set vo flag to pass barcode num check
			voNewBill.setAutoSendBarcodes(false);
			voBill.setAutoSendBarcodes(false);
			// set current operator
			GeneralBillHeaderVO headVOCur = (GeneralBillHeaderVO) voNewBill
					.getParentVO();
			headVOCur.setCoperatoridnow(m_user);
			headVOCur.setAttributeValue("clogdatenow", m_logDate);
			GeneralBillHeaderVO headVOPre = (GeneralBillHeaderVO) voBill
					.getParentVO();
			headVOPre.setCoperatoridnow(m_user);
			headVOPre.setAttributeValue("clogdatenow", m_logDate);
			// 库存单据加锁
			ICLockBO boLock = new ICLockBO();

			// 以下两行是支持动作约束配置使用的。
			try {
				nc.bs.pub.pf.PfUtilBO pf = new nc.bs.pub.pf.PfUtilBO();
				pf.processAction("CHANGEPRICE", "4C", m_logDate, null,
						voNewBill, null);
			} catch (Exception e) {
				throw GenMethod.handleException(null, e);
			}

			if (voNewBill.m_sErr != null && voNewBill.m_sErr.length() > 0) {
				if (err != null)
					err = err + "\n" + voNewBill.m_sErr;
				else
					err = voNewBill.m_sErr;
			}
			boolean isSO6Enble = false;
			try {
				ModuleEnable me = new ModuleEnable();
	
				if (me.isSOEnble(pk_corp) && me.isSO6Enble(pk_corp))
					isSO6Enble = true;;
			} catch (Exception e) {
				throw GenMethod.handleException(null, e);
			}
			
			if (isSO6Enble){
				// 4.更新应收
				IBillInvokeCreditManager invoker = (IBillInvokeCreditManager) NCLocator
						.getInstance().lookup(
								IBillInvokeCreditManager.class.getName());
				// nc.bs.so.so120.BillInvokeCreditManager invoker = new
				// nc.bs.so.so120.BillInvokeCreditManager();
				ArrayList alKey = null;
				try {
	
					
					alKey = boLock.lockICBill(voNewBill);
	
					if (voNewBill != null && voBill == null) {
						voNewBill.setBillaction(CreditConst.ICREDIT_ACT_ADD);
					} else if (voNewBill != null && voBill != null) {
						voNewBill
								.setBillaction(CreditConst.ICREDIT_ACT_OUTCHGPRCBYORD);
					} else if (voNewBill == null && voBill != null) {
						voNewBill.setBillaction(CreditConst.ICREDIT_ACT_DEL);
					}
	
					voNewBill.setProcessid(invoker.caculateProcessid());
	
					invoker.renovateARByHidsBegin(voNewBill);
	
					// 3 执行价格改判(直接改库)
					exeUpdateSaleChg(voNewBill, sourceType);
					// 处理金额尾差
					if (procvolist.size() > 0) {
						(new nc.bs.ic.pub.RewriteDMO()).processOutBillMny(
								(GeneralBillItemVO[]) procvolist
										.toArray(new GeneralBillItemVO[procvolist
												.size()]), new String[] {
										"ntaxmny", "nsalemny", "nquotemny" }, true);
					}
	
					/*
					 * BillCreditOriginVO creditvo = new BillCreditOriginVO();
					 * creditvo.m_iBillType = CreditConst.ICREDIT_BILL_OUTGENERAL;
					 * if (voNewBill != null && voBill == null) {
					 * creditvo.m_iBillAct = CreditConst.ICREDIT_ACT_ADD;
					 * creditvo.m_voBill = voNewBill.getParentVO();
					 * creditvo.m_voBill_b = voNewBill.getChildrenVO(); } else if
					 * (voNewBill != null && voBill != null) { creditvo.m_iBillAct =
					 * CreditConst.ICREDIT_ACT_OUTCHGPRCBYORD; creditvo.m_voBill =
					 * voNewBill.getParentVO(); creditvo.m_voBill_b =
					 * voNewBill.getChildrenVO(); creditvo.m_voBill_init =
					 * voBill.getParentVO(); creditvo.m_voBill_init_b =
					 * voBill.getChildrenVO(); } else if (voNewBill == null &&
					 * voBill != null) { creditvo.m_iBillAct =
					 * CreditConst.ICREDIT_ACT_DEL; creditvo.m_voBill =
					 * voBill.getParentVO(); creditvo.m_voBill_b =
					 * voBill.getChildrenVO(); }
					 */
					invoker.renovateARByHidsEnd(voNewBill);
	
					// invoker.renovateAR(creditvo);
				} catch (Exception e) {
					throw GenMethod.handleException(nc.bs.ml.NCLangResOnserver
							.getInstance().getStrByID("4008busi",
									"UPP4008busi-000372")/* @res "错误：更新应收" */
							+ e.getMessage(), e);
					// throw new java.rmi.RemoteException("Remote Call", new
					// nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008busi","UPP4008busi-000372")/*@res
					// "错误：更新应收"*/ + e.getMessage()));
				} finally {
					// 更新应收后解锁
					String sLockKey = voNewBill.getLockKey();
					invoker.unlockExamAR(sLockKey, m_user);
					if (alKey != null)
						boLock.unlockBill(voNewBill, alKey);
	
				}
			}else{
				ArrayList alKey = null;
				try {
					alKey = boLock.lockICBill(voNewBill);
					// 3 执行价格改判(直接改库)
					exeUpdateSaleChg(voNewBill, sourceType);
					// 处理金额尾差
					if (procvolist.size() > 0) {
						(new nc.bs.ic.pub.RewriteDMO()).processOutBillMny(
								(GeneralBillItemVO[]) procvolist
										.toArray(new GeneralBillItemVO[procvolist
												.size()]), new String[] {
										"ntaxmny", "nsalemny", "nquotemny" }, true);
					}
				} catch (Exception e) {
					throw GenMethod.handleException(null, e);
				} finally {
					if (alKey != null)
						boLock.unlockBill(voNewBill, alKey);
	
				}
			}
		}
		return err;
	}

	private void exeUpdateSaleChg(GeneralBillVO voBill, String sourceType)
			throws BusinessException {
		// ntaxprice,nsaleprice,ntaxmny,nsalemny
		// String sql = "update ic_general_b b set
		// ntaxprice=?,nsaleprice=?,ntaxmny=?,nsalemny=? where b.cgeneralbid=?";
		// String ntaxprice = voBill.getChildrenVO();
		GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
				.getChildrenVO();
		try {
			SmartDMO dmo = new SmartDMO();
			if (sourceType.equalsIgnoreCase("3V")) {
				dmo.executeUpdateBatch(voItems, new String[] { "ntaxprice",
						"nsaleprice", "ntaxmny", "nsalemny", "nquoteprice",
						"nquotemny" }, new String[] { "cgeneralbid" });
			} else if (sourceType.equalsIgnoreCase("30")) {
				dmo.executeUpdateBatch(voItems, new String[] { "ntaxprice",
						"nsaleprice", "ntaxmny", "nsalemny", "bsafeprice",
						"breturnprofit", "cquoteunitid", "nquoteunitrate",
						"nquoteunitnum", "cquotecurrency", "nquoteprice",
						"nquotemny" }, new String[] { "cgeneralbid" });
			}

			dmo = null;
		} catch (Exception e) {
			if (e instanceof SQLException)
				// 库存组异常抛出规范
				throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
			else
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000365")/* @res "更新表体错误！" */);
		}

	}

	/**
	 * 李俊 功能：查询销售出库单sourcebillbid对应的generalbillhid 参数： 返回： 例外： 日期：(2004-12-1
	 * 15:26:57) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param sFirstbillBID
	 *            java.lang.String
	 * @param vbillCode
	 *            java.lang.String
	 */
	private Hashtable queryCgeneralHIDBySourceBID(String[] saSourcebillBID,
			String pk_corp, String sourceType) throws BusinessException {
		if (sourceType == null)
			return null;

		StringBuffer sql = new StringBuffer();
		if (sourceType.equals("30") || sourceType.equals("3U")) {
			sql
					.append("select h.cgeneralhid from ic_general_h h inner join ic_general_b b on h.cgeneralhid = b.cgeneralhid  where b.dr=0 AND h.dr=0 and h.pk_corp = ? AND b.cfirstbillbid in ");
			sql.append(nc.bs.ic.pub.bill.GeneralSqlString.formSubSql(
					"cfirstbillbid", saSourcebillBID));
		} else if (sourceType.equals("3V")) {
			sql
					.append("select h.cgeneralhid from ic_general_h h inner join ic_general_b b on h.cgeneralhid = b.cgeneralhid where b.dr=0 AND h.dr=0 AND h.pk_corp = ? AND b.corder_bb1id in ");
			sql.append(nc.bs.ic.pub.bill.GeneralSqlString.formSubSql(
					"corder_bb1id", saSourcebillBID));
		} else {
			return null;
		}

		Hashtable htResult = new Hashtable();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());

			stmt.setString(1, pk_corp);

			rs = stmt.executeQuery();
			//
			String strTemp = null;
			while (rs.next()) {

				strTemp = rs.getString(1);
				if (strTemp == null)
					continue;
				htResult.put(strTemp, strTemp);
			}
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return htResult;
	}

	/*
	 * （非 Javadoc）
	 * 
	 * @see nc.bs.ic.ic211.IIC211GeneralHDMO#queryAllHeadData(java.lang.String)
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllHeadData(
			java.lang.String whereString) throws BusinessException {
		nc.vo.scm.pub.SCMEnv.out("@@@@NEWMODEL211" + whereString);
		try {
			// mwj040109塞格查订单号找出库单
			if (whereString != null && whereString.length() != 0)
				whereString = getSaleBillCode(whereString);
			// addied by liuzy 2008-09-20 v5.5需求，发票参照销售出库单查询条件增加开票客户
			Boolean bUnionSO_sale = false;// 是否包含销售订单的开票客户条件
			if (whereString.indexOf("so_sale.creceiptcorpid") > -1)
				bUnionSO_sale = true;
			//发票参照由退货申请生成的销售出库单增加退货开票客户 陈倪娜 2009-10-09
			Boolean bUnionSo_apply=false;
			if(whereString.indexOf("so_apply.ccustomerid")>-1)
				bUnionSo_apply=true;  
			Boolean bUnionSO_saleorder_b = false;
			// 修改人：刘家清 修改时间：2009-9-24 下午06:44:54 修改原因：发票录入时，在参照销售出库单时能按发货公司来过滤
			if (whereString.indexOf("so_saleorder_b.cconsigncorpid") > -1)
				bUnionSO_saleorder_b = true;

			nc.vo.scm.pub.SCMEnv.out("@@@@NEWMODEL211" + whereString);
			// 从voConds中得到关联语句：
			DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
			ConditionVO[] voCondition = GenMethod.getConditionVO(whereString);
			String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
			StringBuffer sbSQL = new StringBuffer("select ");
			sbSQL.append(" distinct ");

			sbSQL.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,
					"head"));

			sbSQL.append(" from ic_general_h head");
			sbSQL
					.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
			sbSQL
					.append("  left outer join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid  AND bb3.dr=0 ");
			// 动态关联：
			if (sUnionSQL != null && sUnionSQL.length() > 0)
				sbSQL.append(sUnionSQL);
			if (bUnionSO_sale)
				sbSQL
						.append(" inner join so_sale so_sale on body.cfirstbillhid = so_sale.csaleid AND so_sale.dr = 0 ");
			if (bUnionSO_saleorder_b)
				sbSQL.append(" inner join so_saleorder_b so_saleorder_b on body.cfirstbillbid = so_saleorder_b.corder_bid and so_saleorder_b.dr = 0 ");
			 if(bUnionSo_apply){
				  sbSQL.append(" inner join so_apply  on body.cfirstbillhid = so_apply.pk_apply AND so_apply.dr = 0");
			 }

			sbSQL.append(" where head.dr=0");
			sbSQL.append(" and body.dr=0 ");
			if (whereString != null && whereString.length() > 0) {
				sbSQL.append(" and (");
				sbSQL.append(whereString + ")");
			}
			return queryHeadDataBySql(sbSQL.toString());

		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
	}

	/**
	 * 
	 * 功能：查询出指定销售订单的销售出库单号数组
	 * 
	 * 参数： 订单id数组
	 * 
	 * 返回： get(0) = saSaleOrderID[0]----〉ArrayList
	 * [billcode1,billcode2,...]get(1) = saSaleOrderID[1]----〉ArrayList
	 * [billcode21,billcode22,...]
	 * 
	 * 例外： 日期：(2002-5-29 7:30:13) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param saSaleOrderID
	 *            java.lang.String[]
	 */
	public ArrayList queryBillCode(String[] saSaleOrderID)
			throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBillCode",
				new Object[] { saSaleOrderID });
		/** ********************************************************** */
		if (saSaleOrderID == null || saSaleOrderID.length == 0) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(
				"SELECT DISTINCT b.cfirstbillhid,h.vbillcode FROM ic_general_h h INNER JOIN  ic_general_b b ON h.cgeneralhid = b.cgeneralhid WHERE b.dr=0 AND h.dr=0 AND  h.cbilltypecode =? ");
		// AND (b.cfirstbillhid IN ( ");
		// 使用临时表
		sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"b.cfirstbillhid", saSaleOrderID));
		// 循环写入条件
		// for (int i = 0; i < saSaleOrderID.length; i++) {
		// if (saSaleOrderID[i] != null && saSaleOrderID[i] != null) {
		// sbSql.append("'");
		// sbSql.append(saSaleOrderID[i]);
		// sbSql.append("',");
		// }
		// //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
		// if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT
		// == 0) {
		// sbSql.append(" '' ) OR cfirstbillhid IN ( ");
		// }
		// }
		// 加''是为了上面循环结果中最后的","
		// 因为ID不可能为'',所以可行。
		// sbSql.append(" '' ) )");

		sbSql.append(" ORDER BY b.cfirstbillhid,h.vbillcode ");

		ArrayList alBillCode = null; // result data
		Hashtable htResult = new Hashtable(); // key=saSaleOrderID[],value is
		// ArrayList
		String sPK = null, sBillCode = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, BillTypeConst.m_saleOut);
			rs = stmt.executeQuery();
			//
			String sPrePk = ""; // 上一个pk
			alBillCode = new ArrayList();
			while (rs.next()) {
				sPK = rs.getString(1);
				sBillCode = rs.getString(2);

				if (sPrePk != null && !sPrePk.equals(sPK)) { // 是下一个订单的数据了
					if (!htResult.containsKey(sPrePk)) // 置入hashtable
						htResult.put(sPrePk, alBillCode);
					alBillCode = new ArrayList();
				}
				sPrePk = sPK;
				alBillCode.add(sBillCode);
			}
			// last one
			if (!htResult.isEmpty() && !htResult.containsKey(sPK)) // 置入hashtable
				htResult.put(sPrePk, alBillCode);

		} catch (SQLException e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBillCode",
				new Object[] { saSaleOrderID });
		/** ********************************************************** */
		ArrayList alRet = new ArrayList(); // return data
		ArrayList alTemp = null;
		for (int i = 0; i < saSaleOrderID.length; i++) {
			alTemp = new ArrayList();
			if (htResult.containsKey(saSaleOrderID[i]))
				alTemp.add(htResult.get(saSaleOrderID[i]));
			// qry result
			else
				alTemp.add(null);
			// no billcode
			alRet.add(alTemp);
		}
		return alRet;
	}

	/**
	 * 
	 * 功能：查询出指定销售订单的销售出库单号 参数： 订单id子查询
	 * 
	 * 返回： hashtable : key:csaleid value:albillcode
	 * 
	 * 例外： 日期：(2002-5-29 7:30:13) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param saSaleOrderID
	 *            java.lang.String[]
	 */
	public Hashtable queryBillCodeByFirstbillhid(String sSubQry)
			throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBillCode",
				new Object[] { sSubQry });
		/** ********************************************************** */
		Hashtable htResult = new Hashtable();
		if (sSubQry == null) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return htResult;
		}
		StringBuffer sbSql = new StringBuffer(
				"SELECT DISTINCT b.cfirstbillhid,h.vbillcode FROM ic_general_h h INNER JOIN  ic_general_b b ON h.cgeneralhid = b.cgeneralhid WHERE b.dr=0 AND h.dr=0 AND  h.cbilltypecode =?  ");
		// //循环写入条件
		// for (int i = 0; i < saSaleOrderID.length; i++) {
		// if (saSaleOrderID[i] != null && saSaleOrderID[i] != null) {
		// sbSql.append("'");
		// sbSql.append(saSaleOrderID[i]);
		// sbSql.append("',");
		// }
		// //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
		// if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT
		// == 0) {
		// sbSql.append(" '' ) OR cfirstbillhid IN ( ");
		// }
		// }
		// 加''是为了上面循环结果中最后的","
		// 因为ID不可能为'',所以可行。
		// sbSql.append(" '' ) )");
		sbSql.append(" and b.cfirstbillhid in (").append(sSubQry).append(") ");
		// sbSql.append(" ORDER BY b.cfirstbillhid ");

		ArrayList alBillCode = null; // result data
		// key=saSaleOrderID[],value is ArrayList
		String sPK = null, sBillCode = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, BillTypeConst.m_saleOut);
			rs = stmt.executeQuery();

			while (rs.next()) {
				sPK = rs.getString(1);
				sBillCode = rs.getString(2);
				if (sPK != null && sBillCode != null) {
					if (htResult.containsKey(sPK))
						alBillCode = (ArrayList) htResult.get(sPK);
					else {
						alBillCode = new ArrayList();
						htResult.put(sPK, alBillCode);
					}
					alBillCode.add(sBillCode);

				}
			}

		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBillCode",
				new Object[] { sSubQry });
		/** ********************************************************** */
		if (htResult != null && !htResult.isEmpty()) {
			AbstractList rst = null;
			String[] saRst = null;
			Enumeration e = htResult.keys();
			while (e.hasMoreElements()) {
				Object o = e.nextElement();
				// v = (new Vector( htResult.get(o));
				// rst

				rst = (AbstractList) htResult.get(o);

				if (rst != null) {

					saRst = new String[rst.size()];
					rst.toArray(saRst);

				}
				htResult.put(o, saRst);
			}

		}
		return htResult;
	}

	/**
	 * 对于传入的单据信息，如果源头单据是销售订单或退货申请单，返回匹配的订单表体本币含税净价数据 创建日期：(2004-3-2 10:02:15)
	 * 
	 * @return ArrayList ArrayList 0:不含税 1：含税 2:是否价保 3：是否返利
	 * @param voBillCredit
	 *            nc.vo.so.so120.BillCreditVO[] 信用单据数组（出库单的，或其他单据）
	 *            调用者：BillCreditConvertor.getBillCreditVOFromGeneral(GeneralBillHeaderVO,
	 *            GeneralBillItemVO [], int)
	 */
	public ArrayList queryOrderPrice(String sBillType, ArrayList alBid)
			throws BusinessException {
		/*
		 * sql语句： select corder_bid, ntaxnetprice from so_saleorder_b where
		 * csaleid='' select pk_apply_b,ntaxnetprice from so_apply_b where
		 * pk_apply='wehroi'
		 * 
		 * 剩下的都是数据整理算法了 虽然传入的是数组，但是根据调用者的数据特点，应该都属于同一个订单或退货申请单主表，
		 * 数据整理需要根据源头单据为订单或退货申请单的附表主键进行位置匹配 这种方式应该比较高效 如果未找到，本币价税合计给空
		 * 
		 * ‘30’销售订单‘3U’为退货申请单
		 */
		if (sBillType == null
				|| (!sBillType.equals("30") && !sBillType.equals("3U"))
				|| alBid == null)
			return null;

		StringBuffer sql = new StringBuffer();
		if (sBillType.equals("30")) {
			sql
					.append("select corder_bid,nnetprice,ntaxnetprice,bsafeprice,breturnprofit from so_saleorder_b where dr=0 ");
			sql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
					"corder_bid", alBid));
		} else {
			sql
					.append("select pk_apply_b,nnetprice,ntaxnetprice,bsafeprice,breturnprofit from so_apply_b where dr=0 ");
			sql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
					"pk_apply_b", alBid));

		}

		// 数据查询*********************************************************************
		Connection con = null;
		PreparedStatement stmt = null;
		HashMap htOrder = new HashMap();

		ArrayList alrow = null;
		UFDouble ZERO = new UFDouble(0);
		try {
			con = getConnection();

			stmt = con.prepareStatement(sql.toString());

			ResultSet rs = stmt.executeQuery();
			Object oValue = null;

			while (rs.next()) {
				alrow = new ArrayList();
				oValue = rs.getString(1);
				if (oValue != null)
					htOrder.put(oValue, alrow);

				oValue = rs.getBigDecimal(2);
				alrow.add(oValue == null ? ZERO : new UFDouble(
						(BigDecimal) oValue));
				oValue = rs.getBigDecimal(3);
				alrow.add(oValue == null ? ZERO : new UFDouble(
						(BigDecimal) oValue));

				oValue = rs.getString(4);
				alrow.add(oValue == null ? new UFBoolean("N") : new UFBoolean(
						oValue.toString()));
				oValue = rs.getString(5);
				alrow.add(oValue == null ? new UFBoolean("N") : new UFBoolean(
						oValue.toString()));

			}

		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		// 数据整理***************************************************************************
		String bid = null;
		ArrayList alRet = new ArrayList();
		for (int i = 0; i < alBid.size(); i++) {
			bid = (String) alBid.get(i);
			if (htOrder.containsKey(bid)) {
				alrow = (ArrayList) htOrder.get(bid);
			} else {
				alrow = new ArrayList();
				alrow.add(ZERO);
				alrow.add(ZERO);
			}
			alRet.add(alrow);
		}

		return alRet;
	}

	/**
	 * 创建者：程起伍 功能：读指定单据PK的单据行数据，无还回等数据 参数： String saBillPK[]，单据pk
	 * 
	 * 
	 * 返回： 例外： 日期：(2003-2-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO[] queryPureItemData(String saBillPK[])
			throws BusinessException {
		if (saBillPK == null || saBillPK.length == 0 || saBillPK[0] == null
				|| saBillPK[0].trim().length() == 0)
			return null;
		StringBuffer sbSql = new StringBuffer("SELECT ");
		// sbSql.append(GeneralSqlString.getSQL_PURE_BODY_FIELD());
		try {
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					"body"));
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
		sbSql.append(",bb3.nsignnum as naccinvoicenum");
		sbSql
				.append(",bb3.naccumoutsignnum,bb3.norisignsummny,bb3.norisigntaxsummny,bb3.nsignsummny,bb3.nsigntaxsummny ");
		sbSql
				.append(" from ic_general_b body inner join ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid AND bb3.dr=0 and ");
		if (saBillPK.length == 1) {
			sbSql.append("body.cgeneralhid='");
			sbSql.append(saBillPK[0]);
			sbSql.append("' ");
		} else {
			sbSql.append("1=1 ");
			// 使用临时表
			sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
					"body.cgeneralhid", saBillPK));
		}
		// 使用临时表
		sbSql
				.append(" AND body.dr=0 ORDER BY body.cgeneralhid,cast(body.crowno as numeric(20,8)) \n");

		// return value
		GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
		// ------
		voaItem = getFreeItemData(voaItem);
		return voaItem;
	}

	/**
	 * 置单据表体ID为传入ArrayList 中，的表体行标志为已经配套（nc.vo.ic.pub.BillRowType.afterConvert）！
	 * 功能： 参数： 返回： 例外： 日期：(2002-06-03 15:39:00) 修改日期，修改人，修改原因，注释标志：
	 */
	public void setDispense(String cgeneralhid)
			throws nc.vo.pub.BusinessException {

		StringBuffer sbSql = new StringBuffer(
				" update ic_general_b set fbillrowflag ="
						+ nc.vo.ic.pub.BillRowType.afterConvert
						+ " where dr =0 and cgeneralbid in (select csourcebillbid from ic_general_b where cgeneralhid=?  and idesatype<>4 and dr=0 and (csourcetype in ("
						+ IBillType.SALE_OUT + " , " + IBillType.PURCHASE_IN
						+ ")))");

		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, cgeneralhid);
			stmt.executeUpdate();
			//

		} catch (SQLException e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {

			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}

	/**
	 * 置单据表体ID为传入ArrayList 中，的表体行标志为已经配套（nc.vo.ic.pub.BillRowType.afterConvert）！
	 * 功能： 参数： 返回： 例外： 日期：(2002-06-03 15:39:00) 修改日期，修改人，修改原因，注释标志：
	 */
	void setDispense(ArrayList alBid) throws nc.vo.pub.BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO", "setDispense",
				new Object[] { alBid });
		/** ********************************************************** */
		if (alBid == null || alBid.size() == 0) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return;
		}
		StringBuffer sbSql = new StringBuffer(
				" update ic_general_b set fbillrowflag ="
						+ nc.vo.ic.pub.BillRowType.afterConvert
						+ " where dr =0 ");
		// and cgeneralbid IN ( ");
		// 使用临时表
		sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"cgeneralbid", alBid));
		// 循环写入条件
		// for (int i = 0; i < alBid.size(); i++) {
		// if (alBid.get(i) != null && alBid.get(i) != null) {
		// sbSql.append("'");
		// sbSql.append(alBid.get(i));
		// sbSql.append("',");
		// }
		// //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
		// if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT
		// == 0) {
		// sbSql.append(" '' ) OR csourcebillhid IN ( ");
		// }
		// }
		// 加''是为了上面循环结果中最后的","
		// 因为ID不可能为'',所以可行。
		// sbSql.append(" '' ) ");

		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.executeUpdate();
			//

		} catch (SQLException e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {

			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.ic211.GeneralHDMO", "setDispense",
				new Object[] { alBid });
		/** ********************************************************** */

	}

	/**
	 * 方法说明：新增、修改单据更新客商应收款
	 * 
	 * update Account Receivable 销售出库单对业务应收的更新
	 * 
	 * 
	 * 客商档案中的业务应收
	 * 
	 * =客商档案中的业务应收+
	 * 
	 * （异动后实发数量-异动前实发数量）*订单含税单价
	 * 
	 * 
	 * 
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	private void updateCustArMny(String pk_corp, String pk_cumandoc,
			UFDouble nmny) throws BusinessException {
		try {
			__updateCustArMny(pk_corp, pk_cumandoc, nmny);
			// nc.bs.bd.b09.CumandocHome home =
			// (nc.bs.bd.b09.CumandocHome)
			// getBeanHome(nc.bs.bd.b09.CumandocHome.class,
			// "nc.bs.bd.b09.CumandocBO");
			// nc.bs.bd.b09.Cumandoc boCu = home.create();
			// nc.bs.bd.b09.CumandocBO bo = new nc.bs.bd.b09.CumandocBO();
			// bo.updateMny(pk_cumandoc, null, nmny, null);
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException(e.getMessage());

		}

	}

	/**
	 * 方法说明：更新客商应收/应付款
	 * 
	 * update Account Receivable
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	private void updateCustArMny(GeneralBillVO voBill) throws BusinessException {
		// 新增单据
		if (voBill != null && voBill.getHeaderVO() != null
				&& voBill.getItemVOs() != null
				&& voBill.getItemVOs().length > 0) {
			GeneralBillHeaderVO voHeader = voBill.getHeaderVO();
			GeneralBillItemVO[] voaItem = voBill.getItemVOs();
			// 读订单上的客商、单价信息
			Hashtable htCustPrice[] = getOrderInfo(voaItem);
			if (htCustPrice != null && htCustPrice.length > 1) {
				// 读单价
				Hashtable htCustMny = getCustTotalMny(htCustPrice[1],
						htCustPrice[0], voaItem);
				if (htCustMny != null && htCustMny.size() > 0) {
					Enumeration enumKey = htCustMny.keys();
					String pk_cumandoc = null; // 客商管理ID
					UFDouble ufdMny = null; // 金额
					while (enumKey.hasMoreElements()) {
						pk_cumandoc = (String) enumKey.nextElement();
						ufdMny = (UFDouble) htCustMny.get(pk_cumandoc);
						// 执行修改
						updateCustArMny(voHeader.getPk_corp(), pk_cumandoc,
								ufdMny);
					}
				}
			}
		}
	}

	/**
	 * 方法说明：修改单据更新客商应收款
	 * 
	 * update Account Receivable
	 * 
	 * 创建日期：(2003-1-6 14:29:11) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明： private 未检查参数合法性
	 * 
	 */
	public void updateCustBusiMny(GeneralBillVO voParamNewBill,
			GeneralBillVO voParamOldBill) throws BusinessException {
		GeneralBillVO voNewBill = null;
		GeneralBillVO voOldBill = null;

		if (voParamNewBill != null) {
			voNewBill = (GeneralBillVO) voParamNewBill.clone(); // 修改了vo，所以要保留原来的备份。
			voNewBill.setUseUkSetup(true);
			voNewBill.setUkUseAstUOM(false);
			voNewBill.setUkUseCorrbid(false);
			voNewBill.setUkUseCorrhid(false);
			voNewBill.setUkUseFirstbid(true);
			voNewBill.setUkUseFirsthid(true);
			voNewBill.setUkUseFreeItem(false);
			voNewBill.setUkUseInvID(false);
			voNewBill.setUkUseLot(false);
			voNewBill.setUkUseSourcebid(false);
			voNewBill.setUkUseSourcehid(false);
			voNewBill.sumInvQtyNotUseDelRow();
		}
		if (voParamOldBill != null) {
			voOldBill = (GeneralBillVO) voParamOldBill.clone(); // 修改了vo，所以要保留原来的备份。
			voOldBill.setUseUkSetup(true);
			voOldBill.setUkUseAstUOM(false);
			voOldBill.setUkUseCorrbid(false);
			voOldBill.setUkUseCorrhid(false);
			voOldBill.setUkUseFirstbid(true);
			voOldBill.setUkUseFirsthid(true);
			voOldBill.setUkUseFreeItem(false);
			voOldBill.setUkUseInvID(false);
			voOldBill.setUkUseLot(false);
			voOldBill.setUkUseSourcebid(false);
			voOldBill.setUkUseSourcehid(false);
			// 删除的情况下应该当作未修改来汇总
			voOldBill.setStatus(VOStatus.UNCHANGED);
			voOldBill.sumInvQtyNotUseDelRow();
			// ----------------------------------
		}

		// 新增单据
		if (voNewBill != null) {
			// 有原单据
			if (voOldBill != null) {
				voNewBill.sub(voOldBill.getItemVOs());
				updateCustArMny(voNewBill);
			} // new bill only
			else {
				if (isNeedUpdateCustAr(voNewBill))
					updateCustArMny(voNewBill);
			}
		} else if (voOldBill != null) { // 删除单据
			if (isNeedUpdateCustAr(voOldBill)) {
				voOldBill.neg(); // 取反
				updateCustArMny(voOldBill);
			}
		} else {
			nc.vo.scm.pub.SCMEnv.out("no any bills.");
		}
		voNewBill = null;
		voOldBill = null;

	}
	

	  public boolean isInvoiceBySign(String cbusitype)  throws BusinessException {
	    UFBoolean bret = UFBoolean.FALSE;
	    if (cbusitype == null)
	      return bret.booleanValue();
	    try {
	      String sql = " select fgeninvtype from so_busitypeset where pk_busitype ='"
	          + cbusitype + "' ";
	      ICDataSet set = (new ICDbVisitor()).query(sql);
	      if (set == null || set.getRowCount() <= 0
	          || set.getUFDoubleValueAt(0, 0) == null) {
	        bret = UFBoolean.FALSE;
	      } else {
	        // 0基于出库数量开票 1基于签收数量开票
	        if (set.getUFDoubleValueAt(0, 0).intValue() == 1)
	          bret = UFBoolean.TRUE;
	        else
	          bret = UFBoolean.FALSE;
	      }

	    } catch (Exception e) {
	    	throw GenMethod.handleException(null, e);
	      
	    }
	    return bret.booleanValue();
	  }
	  
	  /**
	   * 修改人：刘家清  修改时间：2009-12-4 上午11:06:26 修改原因：表头条件里不要有表体的条件，因为这个查询接口里会把表头条件+表体条件查询表头，这样影响效率。
	   * @param cbiztypeid
	   * @param ifContainNegative
	   * @param sHead
	   * @param sBody
	   * @param scorpid
	   * @param userid
	   * @return
	   * @throws BusinessException
	   */
		public Object[] queryAllBillDatasFor32New(String cbiztypeid,Boolean ifContainNegative,String sHead,String sBody,
				String scorpid, String userid) throws BusinessException {
			String sHeadCondition = "";
			String sBodyCondition = "";
		      // 如果基于出库开票，则可开票数量逻辑不变
		      if (!isInvoiceBySign(cbiztypeid)) {
		        // 加上公司，和签字标志
		        if (scorpid != null && scorpid.trim().length() > 0) {
		          sHeadCondition = " head.cbiztype = '" + cbiztypeid
		              + "' AND  head.pk_corp = '" + scorpid.trim()
		              + "' AND  (head.fbillflag = 3 OR head.fbillflag = 4) ";
		          //if (!ifContainNegative)
		            //sHeadCondition += " and COALESCE(body.noutnum,0.0) > 0 and (ABS(COALESCE(body.noutnum,0.0))-ABS(COALESCE(body.naccumwastnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0))) > 0 ";
		        }
		        else {
		          sHeadCondition = " head.cbiztype = '" + cbiztypeid
		              + "' AND (head.fbillflag = 3 OR head.fbillflag = 4) ";
		          //if (!ifContainNegative)
		            //sHeadCondition += " and COALESCE(body.noutnum,0.0) > 0 and (ABS(COALESCE(body.noutnum,0.0))-ABS(COALESCE(body.naccumwastnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0))) > 0 ";
		          /*sHeadCondition += " and ( body.cfirsttype = '3U' or ( body.cfirsttype = '30' and "
		              + " exists ( select 1 from so_saleexecute where so_saleexecute.csale_bid = body.cfirstbillbid and so_saleexecute.creceipttype='30' and so_saleexecute.dr = 0 and COALESCE(so_saleexecute.bifinvoicefinish,'N') = 'N' ) ) "
		              + " ) ";*/
		        }
		      }
		      else {
		        // 如果基于签收开票
		        // 加上公司，和签字标志
		        if (scorpid != null && scorpid.trim().length() > 0) {
		          sHeadCondition = " head.cbiztype = '"
		              + cbiztypeid
		              + "' AND  head.pk_corp = '"
		              + scorpid.trim()
		              + "' AND  (head.fbillflag = 3 OR head.fbillflag = 4) AND COALESCE(head.boutretflag,'N')='N' ";
		          //if (!ifContainNegative)
		            /*sHeadCondition += " AND  (  ( body.noutnum>0 AND ABS(COALESCE(bb3.naccumoutsignnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) or "
		                + " ( body.noutnum<0 AND ABS(COALESCE(body.noutnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) ) ";*/
		        }
		        else {
		          sHeadCondition = " head.cbiztype = '"
		              + cbiztypeid
		              + "' AND (head.fbillflag = 3 OR head.fbillflag = 4) AND COALESCE(head.boutretflag,'N')='N' ";
	/*	          if (!ifContainNegative)
		            sHeadCondition += " AND (  ( body.noutnum>0 AND ABS(COALESCE(bb3.naccumoutsignnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) or "
		                + " ( body.noutnum<0 AND ABS(COALESCE(body.noutnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) ) ";
		          sHeadCondition += " and ( body.cfirsttype = '3U' or ( body.cfirsttype = '30' and "
		              + " exists ( select 1 from so_saleexecute where so_saleexecute.csale_bid = body.cfirstbillbid and so_saleexecute.creceipttype='30' and so_saleexecute.dr = 0 and COALESCE(so_saleexecute.bifinvoicefinish,'N') = 'N' ) ) "
		              + " ) ";*/
		        }
		      }
		      
		      

		      // 如果基于出库开票，则可开票数量逻辑不变
		      if (!isInvoiceBySign(cbiztypeid)) {
//		        sBodyCondition = " man.iscansaleinvoice = 'Y' AND (ABS(COALESCE(body.noutnum,0.0))"
//		            + " -ABS(COALESCE(body.naccumwastnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0))) > 0 "
//		            + " and ( body.cfirsttype = '3U' or ( body.cfirsttype = '30' and "
//		            + " exists ( select 1 from so_saleexecute where so_saleexecute.csale_bid = body.cfirstbillbid and so_saleexecute.creceipttype='30' and so_saleexecute.dr = 0 and COALESCE(so_saleexecute.bifinvoicefinish,'N') = 'N' ) ) "
//		            + " ) ";

		        sBodyCondition = " man.iscansaleinvoice = 'Y' ";
		        if (!ifContainNegative)
		          sBodyCondition += "AND (ABS(COALESCE(body.noutnum,0.0)) -ABS(COALESCE(body.naccumwastnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0))) > 0 ";
		        sBodyCondition += " and ( body.cfirsttype = '3U' or ( body.cfirsttype = '30' and "
		            + " exists ( select 1 from so_saleexecute where so_saleexecute.csale_bid = body.cfirstbillbid and so_saleexecute.creceipttype='30' and so_saleexecute.dr = 0 and COALESCE(so_saleexecute.bifinvoicefinish,'N') = 'N' ) ) "
		            + " ) ";
		      
		      }
		      else {
		        // 如果基于签收开票
		        // 修改人：刘家清 修改日期：2008-4-25上午10:54:34
		        // 修改原因：基于签收开票的业务类型，参照销售销售出库单开票时，修改限制条件为：只有该出库单做了签收途损单，并且该签收途损单审核了，才可以被参照到用来生成销售发票。
		        sBodyCondition = " man.iscansaleinvoice = 'Y' AND "
		            + " (  ( body.noutnum>0 AND ABS(COALESCE(bb3.naccumoutsignnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) or "
		            + " ( body.noutnum<0 AND ABS(COALESCE(body.noutnum,0.0))-ABS(COALESCE(bb3.nrushnum,0.0))-ABS(COALESCE(bb3.nsignnum,0.0)) > 0 ) ) "
		            + " and ( body.cfirsttype = '3U' or ( body.cfirsttype = '30' and "
		            + " exists ( select 1 from so_saleexecute where so_saleexecute.csale_bid = body.cfirstbillbid and so_saleexecute.creceipttype='30' and so_saleexecute.dr = 0 and COALESCE(so_saleexecute.bifinvoicefinish,'N') = 'N' ) ) "
		            + " and exists ( select 1 from ic_wastagebill_b wb ,ic_wastagebill wl where wb.cwastagebillid = wl.cwastagebillid and wl.fstatusflag = 1 and wl.dr = 0 and ( isnull(norisignsummny,0) != 0  or isnull(norisignmny,0) != 0 ) and wb.csourcetypecode in ("
		            + IBillType.SALE_OUT
		            + ") and wb.csourcebillbid = body.cgeneralbid) " + " ) ";
		      }
		    
		      sHeadCondition = nc.vo.ic.pub.GenMethod.andTowWhere(sHeadCondition,sHead);
		      sBodyCondition = nc.vo.ic.pub.GenMethod.andTowWhere(sBodyCondition,sBody);
		      Object[] retObjects = queryAllBillDatasFor32(sHeadCondition, sBodyCondition, scorpid, userid);
		      
		      if (retObjects != null && retObjects.length > 2
		              && retObjects[1] != null) {
		            GeneralBillItemVO[] itemvos = (GeneralBillItemVO[]) retObjects[1];
		            if (itemvos.length > 0) {
		                if (!isInvoiceBySign(cbiztypeid)) {
		                	for (GeneralBillItemVO itemvo : itemvos )
		                		itemvo.setNavlinvoicenum((null == itemvo.getNoutnum() ? UFDouble.ZERO_DBL : itemvo.getNoutnum()).sub((null == itemvo.getNaccumwastnum() ? UFDouble.ZERO_DBL : itemvo.getNaccumwastnum())).sub((null == itemvo.getNrushnum() ? UFDouble.ZERO_DBL : itemvo.getNrushnum())).sub((null == itemvo.getNaccinvoicenum() ? UFDouble.ZERO_DBL : itemvo.getNaccinvoicenum())));
		                		
		                }else{
		                	for (GeneralBillItemVO itemvo : itemvos )
		                		itemvo.setNavlinvoicenum((null == itemvo.getNaccumoutsignnum() ? UFDouble.ZERO_DBL : itemvo.getNaccumoutsignnum()).sub((null == itemvo.getNrushnum() ? UFDouble.ZERO_DBL : itemvo.getNrushnum())).sub((null == itemvo.getNaccinvoicenum() ? UFDouble.ZERO_DBL : itemvo.getNaccinvoicenum())));
	
		                }
		                    //formulas = new String[] { "navlinvoicenum->iif(noutnum==null,0,noutnum)-iif(naccumwastnum==null,0,naccumwastnum)-iif(nrushnum==null,0,nrushnum)-iif(naccinvoicenum==null,0,naccinvoicenum)" };
		              
		                    // 如果基于签收开票
		                    //formulas = new String[] { "navlinvoicenum->iif(naccumoutsignnum==null,0,naccumoutsignnum)-iif(nrushnum==null,0,nrushnum)-iif(naccinvoicenum==null,0,naccinvoicenum)" };
		              
		            }
		      }
		    
			return retObjects;
		}

	/**
	 * 接口函数功能:新单据参照查询源头单据使用，包括表头，表体数据， 需要在平台注册的单据DMO实现
	 * 
	 * 参数: String sheadsql ----- 主查询条件 String sbodysql ----- 辅查询条件
	 * 
	 * 
	 * 返回值:Object[3] 0 ------ 查询的单据主VO数组 CircularlyAccessibleValueObject[] 1
	 * ------ 查询的单据子VO数组 CircularlyAccessibleValueObject[] 2 ------ 查询数据量过大的提示
	 * String 实现注意：在查询的单据数据量过大时，如子表，可以仅返回前1000条数据， 此时必须返回数据量过大的提示，以便提示给用户！！！
	 * 异常:SQLException,RemoteException
	 * 
	 */
	public Object[] queryAllBillDatasFor32(String sheadsql, String sbodysql,
			String corp, String userid) throws BusinessException {

		if (sheadsql == null && sheadsql.trim().length() <= 0)
			return null;

		try {

			String sheadsqlnew = sheadsql;

			if (sbodysql != null && sbodysql.trim().length() > 0)
				if (sbodysql.trim().startsWith("and")
						|| sbodysql.trim().startsWith("AND"))
					sheadsqlnew += " " + sbodysql;
				else
					sheadsqlnew += " and " + sbodysql;
			// addied by liuzy 2008-09-20 v5.5需求，发票参照销售出库单查询条件增加开票客户
			Boolean bUnionSO_sale = false;// 是否包含销售订单的开票客户条件
			if (sheadsqlnew.indexOf("so_sale.creceiptcorpid") > -1)
				bUnionSO_sale = true;
			//发票参照由退货申请生成的销售出库单增加退货开票客户 陈倪娜 2009-10-09
			Boolean bUnionSo_apply=false;
			if(sheadsqlnew.indexOf("so_apply.ccustomerid")>-1)
				bUnionSo_apply=true;
			Boolean bUnionSO_saleorder_b = false;
			// 修改人：刘家清 修改时间：2009-9-24 下午06:44:54 修改原因：发票录入时，在参照销售出库单时能按发货公司来过滤
			if (sheadsqlnew.indexOf("so_saleorder_b.cconsigncorpid") > -1)
				bUnionSO_saleorder_b = true;

			String cpowerarea = ICCommonBusiImpl.getWhereAreaclDataPowerByUser(
					userid, corp);
			if (!nc.vo.ic.pub.GenMethod.isSEmptyOrNull(cpowerarea))
				sheadsqlnew = sheadsqlnew + cpowerarea;

			CircularlyAccessibleValueObject[] headvos = queryAllHeadData(sheadsqlnew);

			if (headvos == null || headvos.length <= 0)
				return null;

			Object[] retobjs = new Object[3];

			retobjs[0] = headvos;

			if (headvos != null && headvos.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = headvos;
				headvos = new GeneralBillHeaderVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, headvos, 0, headvos.length);
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			StringBuffer sbSql = new StringBuffer("SELECT ");
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					"body"));
			sbSql
					.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
			sbSql
					.append(",(coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) as nleftastnum");
			sbSql
					.append(",bb3.nsignnum as naccinvoicenum,bb3.naccountnum1 as naccountnum1,bb3.nrushnum as nrushnum ");
			sbSql
					.append(",bb3.naccumoutbacknum,bb3.naccumoutsignnum,bb3.nsignsummny,bb3.nsigntaxsummny,bb3.norisignsummny,bb3.norisigntaxsummny ");

			sbSql.append(" from ic_general_h head ");
			sbSql
					.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
			sbSql
					.append(" inner  join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid ");

			if (sheadsqlnew != null) {
				DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
				ConditionVO[] voCondition = GenMethod
						.getConditionVO(sheadsqlnew);
				String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
				// 动态关联：
				if (sUnionSQL != null && sUnionSQL.length() > 0)
					sbSql.append(sUnionSQL);
			}

			if (bUnionSO_sale)
				sbSql
						.append(" inner join so_sale so_sale on body.cfirstbillhid = so_sale.csaleid AND so_sale.dr = 0 ");
			if (bUnionSO_saleorder_b)
				sbSql.append(" inner join so_saleorder_b so_saleorder_b on body.cfirstbillbid = so_saleorder_b.corder_bid and so_saleorder_b.dr = 0 ");
			if(bUnionSo_apply){
		    	 sbSql.append(" inner join so_apply  on body.cfirstbillhid = so_apply.pk_apply AND so_apply.dr = 0");
		     }

			sbSql.append(" where head.dr=0");
			sbSql.append(" and body.dr=0 AND bb3.dr=0 ");
			sbSql.append(GeneralSqlString.formInSQL("head.cgeneralhid",
					SmartVOUtilExt.getVOsValues(headvos, "cgeneralhid")));

			if (sheadsqlnew != null && sheadsqlnew.trim().length() > 0)
				if (sheadsqlnew.trim().startsWith("and")
						|| sheadsqlnew.trim().startsWith("AND"))
					sbSql.append(" " + sheadsqlnew);
				else
					sbSql.append(" and " + sheadsqlnew);

			GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
			voaItem = getFreeItemData(voaItem);

			retobjs[1] = voaItem;
			if (voaItem != null && voaItem.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = voaItem;
				voaItem = new GeneralBillItemVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, voaItem, 0, voaItem.length);
				retobjs[0] = nc.vo.ic.pub.GenMethod.filterHeadVosByBodyVos(
						(GeneralBillHeaderVO[]) headvos,
						(GeneralBillItemVO[]) voaItem);
				retobjs[1] = voaItem;
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			return retobjs;

		} catch (Exception ee) {

			throw GenMethod.handleException(null, ee);
		}
	}

	/**
	 * 接口函数功能:新单据参照查询源头单据使用，包括表头，表体数据， 需要在平台注册的单据DMO实现
	 * 
	 * 参数: String sheadsql ----- 主查询条件 String sbodysql ----- 辅查询条件
	 * 
	 * 
	 * 返回值:Object[3] 0 ------ 查询的单据主VO数组 CircularlyAccessibleValueObject[] 1
	 * ------ 查询的单据子VO数组 CircularlyAccessibleValueObject[] 2 ------ 查询数据量过大的提示
	 * String 实现注意：在查询的单据数据量过大时，如子表，可以仅返回前1000条数据， 此时必须返回数据量过大的提示，以便提示给用户！！！
	 * 异常:SQLException,RemoteException
	 * 
	 */
	public Object[] queryAllBillDatas(String sheadsql, String sbodysql)
			throws BusinessException {
		if (sheadsql == null && sheadsql.trim().length() <= 0)
			return null;

		try {

			String sheadsqlnew = sheadsql;

			if (sbodysql != null && sbodysql.trim().length() > 0)
				if (sbodysql.trim().startsWith("and")
						|| sbodysql.trim().startsWith("AND"))
					sheadsqlnew += " " + sbodysql;
				else
					sheadsqlnew += " and " + sbodysql;

			CircularlyAccessibleValueObject[] headvos = queryAllHeadData(sheadsqlnew);

			if (headvos == null || headvos.length <= 0)
				return null;

			// 表头查询后对查询条件进行处理
			sheadsqlnew = dealWhereAfterHeaderQryed(sheadsqlnew);

			Object[] retobjs = new Object[3];

			retobjs[0] = headvos;

			if (headvos != null && headvos.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = headvos;
				headvos = new GeneralBillHeaderVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, headvos, 0, headvos.length);
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			StringBuffer sbSql = new StringBuffer("SELECT ");
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					"body"));
			sbSql
					.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
			sbSql
					.append(",(coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) as nleftastnum");
			sbSql
					.append(",bb3.nsignnum as naccinvoicenum,bb3.naccountnum1 as naccountnum1,bb3.nrushnum as nrushnum ");
			sbSql
					.append(",bb3.naccumoutbacknum,bb3.naccumoutsignnum,bb3.nsignsummny,bb3.nsigntaxsummny,bb3.norisignsummny,bb3.norisigntaxsummny ");

			sbSql.append(" from ic_general_h head ");
			sbSql
					.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
			sbSql
					.append(" inner  join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid ");

			if (sheadsqlnew != null) {
				DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
				ConditionVO[] voCondition = GenMethod
						.getConditionVO(sheadsqlnew);
				String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
				// 动态关联：
				if (sUnionSQL != null && sUnionSQL.length() > 0)
					sbSql.append(sUnionSQL);
			}

			sbSql.append(" where head.dr=0");
			sbSql.append(" and body.dr=0 AND bb3.dr=0 ");
			sbSql.append(GeneralSqlString.formInSQL("head.cgeneralhid",
					SmartVOUtilExt.getVOsValues(headvos, "cgeneralhid")));

			if (sheadsqlnew != null && sheadsqlnew.trim().length() > 0)
				if (sheadsqlnew.trim().startsWith("and")
						|| sheadsqlnew.trim().startsWith("AND"))
					sbSql.append(" " + sheadsqlnew);
				else
					sbSql.append(" and " + sheadsqlnew);

			GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
			voaItem = getFreeItemData(voaItem);

			retobjs[1] = voaItem;
			if (voaItem != null && voaItem.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = voaItem;
				voaItem = new GeneralBillItemVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, voaItem, 0, voaItem.length);
				retobjs[0] = nc.vo.ic.pub.GenMethod.filterHeadVosByBodyVos(
						(GeneralBillHeaderVO[]) headvos,
						(GeneralBillItemVO[]) voaItem);
				retobjs[1] = voaItem;
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			return retobjs;

		} catch (Exception ee) {

			throw GenMethod.handleException(null, ee);
		}
	}

	private String dealWhereAfterHeaderQryed(String sheadsqlnew) {
		while (sheadsqlnew.toLowerCase().indexOf("so_sale.creceiptcorpid") > -1) {
			int pos = sheadsqlnew.toLowerCase().indexOf("and") + 3;
			sheadsqlnew = sheadsqlnew.substring(pos, sheadsqlnew.length());
		}
		return sheadsqlnew;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-5-20 10:41:37)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 * @param voOrder
	 *            nc.vo.so.so001.SaleOrderVO
	 */
	public UFDouble examOverCreditGeneral(AggregatedValueObject voGeneral)
			throws BusinessException {
		if (voGeneral != null
				&& voGeneral.getParentVO().getAttributeValue("freplenishflag") != null
				&& voGeneral.getParentVO().getAttributeValue("freplenishflag")
						.toString().trim().equalsIgnoreCase("Y"))
			return new UFDouble(-1000.0);
		try {
			IBillInvokeCreditManager invoke = (IBillInvokeCreditManager) NCLocator
					.getInstance().lookup(
							IBillInvokeCreditManager.class.getName());
			return invoke.examOverCreditGeneral(voGeneral);
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-5-20 10:41:37)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 * @param voOrder
	 *            nc.vo.so.so001.SaleOrderVO
	 */
	public UFDouble examOverPeriodGeneral(AggregatedValueObject voGeneral)
			throws BusinessException {
		if (voGeneral != null
				&& voGeneral.getParentVO().getAttributeValue("freplenishflag") != null
				&& voGeneral.getParentVO().getAttributeValue("freplenishflag")
						.toString().trim().equalsIgnoreCase("Y"))
			return new UFDouble(-1000.0);
		try {
			IBillInvokeCreditManager invoke = (IBillInvokeCreditManager) NCLocator
					.getInstance().lookup(
							IBillInvokeCreditManager.class.getName());
			return invoke.examOverPeriodGeneral(voGeneral);
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
	}

	/**
	 * 销售出库单保存时检查客户不能为空业务约束。
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean checkCustNotNull(AggregatedValueObject vo)
			throws BusinessException {

		return checkIsNull(true, "ccustomerid", vo, "客户不能为空");
	}

	/**
	 * 销售出库单保存时检查vo的一些字段不能为空业务约束。
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean checkIsNull(boolean bhead, String key,
			AggregatedValueObject vo, String sErrMsg) throws BusinessException {

		GeneralBillVO bill = (GeneralBillVO) vo;
		UFBoolean rets = new UFBoolean(true);
		try {
			if (bhead) {
				if (bill == null || bill.getHeaderVO() == null || key == null)
					return rets;
				Object ovalue = bill.getHeaderValue(key);
				if (ovalue == null || ovalue.toString().trim().length() <= 0)
					throw new java.rmi.RemoteException(sErrMsg);
			} else {
				if (bill == null || key == null || bill.getItemVOs() == null
						|| bill.getItemVOs().length <= 0)
					return rets;
				Object ovalue = null;
				for (int i = 0, loop = bill.getChildrenVO().length; i < loop; i++) {
					ovalue = bill.getItemValue(i, key);
					if (ovalue == null
							|| ovalue.toString().trim().length() <= 0)
						throw new java.rmi.RemoteException(sErrMsg);
				}
			}
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}

		return rets;
	}

	/**
	 * 销售出库单客户应与订单一致
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean checkCustAndAddrForOrder(AggregatedValueObject vo)
			throws nc.vo.pub.BusinessException {

		return checkHeadForOrder((GeneralBillVO) vo, new String[] {
				"ccustomerid", "vreceiveaddress" }, new String[] {
				"ccustomerid", "vdiliveraddress" },
				new String[] { "客户", "发运地址" });
	}

	/**
	 * 销售出库单客户应与订单一致
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean checkCustForOrder(AggregatedValueObject vo)
			throws nc.vo.pub.BusinessException {

		return checkHeadForOrder((GeneralBillVO) vo,
				new String[] { "ccustomerid" }, new String[] { "ccustomerid" },
				new String[] { "客户" });
	}

	/**
	 * 表头与订单的一致性
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean checkHeadForOrder(GeneralBillVO icvo, String[] ordkeys,
			String[] checkkeys, String[] checkitemnames)
			throws nc.vo.pub.BusinessException {

		UFBoolean rets = new UFBoolean(true);
		if (icvo == null || icvo.getHeaderVO() == null || ordkeys == null
				|| checkkeys == null || ordkeys.length != checkkeys.length
				|| checkitemnames == null || icvo.getItemVOs() == null
				|| icvo.getItemVOs().length <= 0)
			return rets;

		GeneralBillItemVO[] bodyvos = icvo.getItemVOs();
		ArrayList saleids = new ArrayList();
		String firstbillid = null, firsttype = null;
		for (int i = 0, loop = bodyvos.length; i < loop; i++) {
			if (bodyvos[i].getStatus() == VOStatus.DELETED)
				continue;
			firsttype = bodyvos[i].getCfirsttype();
			if (firsttype == null || !firsttype.trim().equals("30"))
				continue;
			firstbillid = bodyvos[i].getCfirstbillhid();
			if (firstbillid != null && !saleids.contains(firstbillid))
				saleids.add(firstbillid);
		}

		if (saleids.size() <= 0)
			return rets;

		StringBuffer sql = new StringBuffer(" select ");
		for (int i = 0, loop = ordkeys.length; i < loop; i++) {
			if (i > 0)
				sql.append(",");
			sql.append("so_sale." + ordkeys[i]);

		}
		sql.append(" from so_sale ");
		sql.append(" where so_sale.dr = 0 ");
		sql.append(GeneralSqlString.formInSQL("so_sale.csaleid", saleids));

		Object[] rows;
		try {
			SmartDMO sdmo = new SmartDMO();

			rows = sdmo.selectBy2(sql.toString());
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
		if (rows == null || rows.length <= 0)
			return rets;

		String icobj = null, soobj = null;
		Object obj = null;
		Object[] row = null;
		String msg = "";

		for (int k = 0, loopk = checkkeys.length; k < loopk; k++) {
			obj = icvo.getHeaderValue(checkkeys[k]);
			icobj = obj == null ? "" : obj.toString().trim();
			for (int i = 0, loop = rows.length; i < loop; i++) {
				row = (Object[]) rows[i];
				if (row == null)
					continue;
				obj = null;
				if (k < row.length)
					obj = row[k];
				soobj = obj == null ? "" : obj.toString().trim();
				if (!icobj.equals(soobj)) {
					if (msg.trim().length() > 0)
						msg += ",";
					msg += checkitemnames[k];
					break;
				}
			}
		}

		if (msg.trim().length() > 0) {
			throw new nc.vo.pub.BusinessException("销售出库单与订单出现不一致的项目：" + msg);
		}
		return rets;
	}

	/**
	 * 销售出库单保存时检查失效日期是否小于当前日期业务约束。
	 * 
	 * @param 参数说明
	 * @return 返回值
	 * @exception 异常描述
	 * @see 需要参见的其它内容
	 * @since 从类的那一个版本，此方法被添加进来。（可选）
	 * 
	 * @param bill
	 *            nc.vo.pub.AggregatedValueObject
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public UFBoolean check4CDvalidate(AggregatedValueObject vo)
			throws nc.vo.pub.BusinessException {

		GeneralBillVO bill = (GeneralBillVO) vo;
		UFBoolean rets = new UFBoolean(true);
		if (bill == null || bill.getHeaderVO() == null
				|| bill.getItemVOs() == null || bill.getItemVOs().length <= 0)
			return rets;
		// if(!bill.isBcheckBusiContrist())
		// return rets;
		String slogdate = bill.getHeaderVO().getClogdatenow();
		if (slogdate == null || slogdate.trim().length() <= 0)
			return rets;

		UFDate logdate = new UFDate(slogdate.trim());

		GeneralBillItemVO[] bodyvos = bill.getItemVOs();
		UFDouble dzero = new UFDouble(0);
		Object isValidateMgt = null;
		UFDate dvalidate = null;
		// SmartDMO sdmo = new SmartDMO();
		// ArrayList ids = new ArrayList();
		// for(int i=0,loop=bodyvos.length;i<loop;i++){
		// String cinventoryid =
		// (String)bodyvos[i].getAttributeValue("cinventoryid");
		// if(cinventoryid==null)
		// continue;
		// if(!ids.contains(cinventoryid))
		// ids.add(cinventoryid);
		// }
		// HashMap hsIsValidateMgt = null;

		for (int i = 0, loop = bodyvos.length; i < loop; i++) {
			if (bodyvos[i].getNoutnum() == null
					|| bodyvos[i].getNoutnum().equals(dzero))
				continue;
			isValidateMgt = bodyvos[i].getAttributeValue("isValidateMgt");
			if (isValidateMgt == null) {
				// if(hsIsValidateMgt==null && ids.size()>0){
				// Object[] vals = sdmo.selectBy2(" select
				// pk_invmandoc,qualitymanflag from bd_invmandoc where dr = 0 "+
				// GeneralSqlString.formInSQL("pk_invmandoc",ids));
				// hsIsValidateMgt = new HashMap();
				// if(vals!=null)
				// for(int k=0,loopk=vals.length;k<loopk;k++){
				// Object[] row = (Object[])vals[k];
				// if(row!=null && row[0]!=null && row[1]!=null)
				// hsIsValidateMgt.put(row[0].toString().trim(),row[1].toString().trim());
				// }
				// }
				// String cinventoryid =
				// (String)bodyvos[i].getAttributeValue("cinventoryid");
				// if(cinventoryid!=null){
				// String ss = (String)hsIsValidateMgt.get(cinventoryid);
				// if(ss!=null){
				// if("Y".equals(ss))
				// isValidateMgt = "1" ;
				// else
				// isValidateMgt = ss ;
				// }
				// }
				// if(isValidateMgt==null)
				continue;
			}
			if (isValidateMgt.toString().trim().equals("1")) {
				dvalidate = (UFDate) bodyvos[i].getAttributeValue("dvalidate");
				if (dvalidate != null && dvalidate.before(logdate))
					throw new nc.vo.pub.BusinessException("失效日期小于当前日期");
			}
		}
		return rets;
	}

	/**
	 * 更新应收
	 * 
	 * @param hsNum：
	 *            key--存放销售出库单表体id String value--存放本次修改的差值 UFDouble
	 * 
	 * @param soparam
	 *            超出库开票比例，so参数，为20或10
	 * @throws java.lang.Exception
	 */
	public nc.itf.so.so120.IBillInvokeCreditManager renovateAR(
			GeneralBillVO inCurVO, GeneralBillVO inPreVO, int iact)
			throws BusinessException {

		// 更新应收
		try {

			String pk_corp = null;

			if (inCurVO != null && inCurVO.getHeaderVO() != null)
				pk_corp = inCurVO.getHeaderVO().getPk_corp();

			if (pk_corp == null && inPreVO != null
					&& inPreVO.getHeaderVO() != null)
				pk_corp = inPreVO.getHeaderVO().getPk_corp();

			ModuleEnable me = new ModuleEnable();

			if (!(me.isSOEnble(pk_corp) && me.isSO6Enble(pk_corp)))
				return null;

			/*
			 * nc.vo.so.credit.BillCreditOriginVO creditvo = new
			 * nc.vo.so.credit.BillCreditOriginVO(); creditvo.m_iBillType =
			 * nc.vo.scm.pub.bill.CreditConst.ICREDIT_BILL_OUTGENERAL; switch
			 * (iact) { case nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_ADD:
			 * creditvo.m_iBillAct =
			 * nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_ADD; creditvo.m_voBill =
			 * inCurVO.getParentVO(); creditvo.m_voBill_b =
			 * inCurVO.getChildrenVO(); creditvo.sOperatorid = (String)
			 * inCurVO.getParentVO() .getAttributeValue("coperatoridnow"); if
			 * (creditvo.sOperatorid == null) creditvo.sOperatorid = (String)
			 * inCurVO.getParentVO() .getAttributeValue("coperatorid"); break;
			 * case nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_MODIFY:
			 * creditvo.m_iBillAct =
			 * nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_MODIFY;
			 * creditvo.m_voBill = inCurVO.getParentVO(); creditvo.m_voBill_b =
			 * inCurVO.getChildrenVO(); creditvo.m_voBill_init =
			 * inPreVO.getParentVO(); creditvo.m_voBill_init_b =
			 * inPreVO.getChildrenVO(); creditvo.sOperatorid = (String)
			 * inCurVO.getParentVO() .getAttributeValue("coperatoridnow"); if
			 * (creditvo.sOperatorid == null) creditvo.sOperatorid = (String)
			 * inCurVO.getParentVO() .getAttributeValue("coperatorid"); break;
			 * case nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_DEL:
			 * creditvo.m_iBillAct =
			 * nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_DEL; creditvo.m_voBill =
			 * inPreVO != null ? inPreVO.getParentVO() : inCurVO.getParentVO();
			 * creditvo.m_voBill_b = inPreVO != null ? inPreVO.getChildrenVO() :
			 * inCurVO.getChildrenVO(); creditvo.sOperatorid = inPreVO != null ?
			 * (String) inPreVO
			 * .getParentVO().getAttributeValue("coperatoridnow") : (String)
			 * inCurVO.getParentVO().getAttributeValue( "coperatoridnow"); if
			 * (creditvo.sOperatorid == null) creditvo.sOperatorid = inPreVO !=
			 * null ? (String) inPreVO
			 * .getParentVO().getAttributeValue("coperatorid") : (String)
			 * inCurVO.getParentVO().getAttributeValue( "coperatorid"); break;
			 * default: break; }
			 */

			if (iact == nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_DEL) {
				if (inPreVO != null
						&& inPreVO.getItemVOs() != null
						&& 0 < inPreVO.getItemVOs().length
						&& !(null != inPreVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE) && (ScmConst.SO_Order
								.equals((String) inPreVO.getItemVOs()[0]
										.getAttributeValue(IItemKey.CFIRSTTYPE)) || ScmConst.SO5_ReturnApp
								.equals((String) inPreVO.getItemVOs()[0]
										.getAttributeValue(IItemKey.CFIRSTTYPE)))))
					return null;
				inPreVO.setBillaction(iact);
				nc.itf.so.so120.IBillInvokeCreditManager invoker = (nc.itf.so.so120.IBillInvokeCreditManager) nc.bs.framework.common.NCLocator
						.getInstance().lookup(
								nc.itf.so.so120.IBillInvokeCreditManager.class
										.getName());
				inPreVO.setProcessid(invoker.caculateProcessid());
				invoker.renovateARByHidsBegin(inPreVO);
				return invoker;
			} else {
				if (inCurVO != null
						&& inCurVO.getItemVOs() != null
						&& 0 < inCurVO.getItemVOs().length
						&& !(null != inCurVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE) && (ScmConst.SO_Order
								.equals((String) inCurVO.getItemVOs()[0]
										.getAttributeValue(IItemKey.CFIRSTTYPE)) || ScmConst.SO5_ReturnApp
								.equals((String) inCurVO.getItemVOs()[0]
										.getAttributeValue(IItemKey.CFIRSTTYPE)))))
					return null;
				inCurVO.setBillaction(iact);
				nc.itf.so.so120.IBillInvokeCreditManager invoker = (nc.itf.so.so120.IBillInvokeCreditManager) nc.bs.framework.common.NCLocator
						.getInstance().lookup(
								nc.itf.so.so120.IBillInvokeCreditManager.class
										.getName());
				inCurVO.setProcessid(invoker.caculateProcessid());
				invoker.renovateARByHidsBegin(inCurVO);
				return invoker;
			}
			// invoker.renovateARByHidsEnd(inCurVO);
			// invoker.renovateAR(creditvo);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}

	/**
	 * 更新应收
	 * 
	 * @param hsNum：
	 *            key--存放销售出库单表体id String value--存放本次修改的差值 UFDouble
	 * 
	 * @param soparam
	 *            超出库开票比例，so参数，为20或10
	 * @throws java.lang.Exception
	 */
	public nc.itf.so.so120.IBillInvokeCreditManager renovateARWhenSave(
			GeneralBillVO inCurVO, GeneralBillVO inPreVO)
			throws BusinessException {

		if (inCurVO != null && inPreVO == null) {
			return renovateAR(inCurVO, inPreVO,
					nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_ADD);
		} else if (inCurVO != null && inPreVO != null) {
			return renovateAR(inCurVO, inPreVO,
					nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_MODIFY);
		} else if (inCurVO == null && inPreVO != null) {
			return renovateAR(inCurVO, inPreVO,
					nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_DEL);
		}
		return null;
	}

	public void renovateARWhenSaveEnd(GeneralBillVO inCurVO,
			GeneralBillVO inPreVO, Object invoker) throws BusinessException {
		if (inCurVO != null
				&& inCurVO.getItemVOs() != null
				&& 0 < inCurVO.getItemVOs().length
				&& !(null != inCurVO.getItemVOs()[0]
						.getAttributeValue(IItemKey.CFIRSTTYPE) && (ScmConst.SO_Order
						.equals((String) inCurVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE)) || ScmConst.SO5_ReturnApp
						.equals((String) inCurVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE)))))
			return;
		try {
			String pk_corp = null;

			if (inCurVO != null && inCurVO.getHeaderVO() != null)
				pk_corp = inCurVO.getHeaderVO().getPk_corp();

			if (pk_corp == null && inPreVO != null
					&& inPreVO.getHeaderVO() != null)
				pk_corp = inPreVO.getHeaderVO().getPk_corp();

			ModuleEnable me = new ModuleEnable();

			if (!(me.isSOEnble(pk_corp) && me.isSO6Enble(pk_corp)))
				return;
			if (invoker != null
					&& invoker instanceof nc.itf.so.so120.IBillInvokeCreditManager) {
				nc.itf.so.so120.IBillInvokeCreditManager invokerUse = (nc.itf.so.so120.IBillInvokeCreditManager) invoker;
				invokerUse.renovateARByHidsEnd(inCurVO);
			} else
				throw new BusinessException("更新三个应收出错！");
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}
	}

	/**
	 * 更新应收
	 * 
	 * @param hsNum：
	 *            key--存放销售出库单表体id String value--存放本次修改的差值 UFDouble
	 * 
	 * @param soparam
	 *            超出库开票比例，so参数，为20或10
	 * @throws java.lang.Exception
	 */
	public nc.itf.so.so120.IBillInvokeCreditManager renovateARWhenDelete(
			GeneralBillVO inPreVO) throws BusinessException {

		return renovateAR(null, inPreVO,
				nc.vo.scm.pub.bill.CreditConst.ICREDIT_ACT_DEL);
	}

	public void renovateARWhenDeleteEnd(GeneralBillVO inPreVO, Object invoker)
			throws BusinessException {
		if (inPreVO != null
				&& inPreVO.getItemVOs() != null
				&& 0 < inPreVO.getItemVOs().length
				&& !(null != inPreVO.getItemVOs()[0]
						.getAttributeValue(IItemKey.CFIRSTTYPE) && (ScmConst.SO_Order
						.equals((String) inPreVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE)) || ScmConst.SO5_ReturnApp
						.equals((String) inPreVO.getItemVOs()[0]
								.getAttributeValue(IItemKey.CFIRSTTYPE)))))
			return;
		try {
			String pk_corp = null;

			if (pk_corp == null && inPreVO != null
					&& inPreVO.getHeaderVO() != null)
				pk_corp = inPreVO.getHeaderVO().getPk_corp();

			ModuleEnable me = new ModuleEnable();

			if (!(me.isSOEnble(pk_corp) && me.isSO6Enble(pk_corp)))
				return;

			if (invoker != null
					&& invoker instanceof nc.itf.so.so120.IBillInvokeCreditManager) {
				nc.itf.so.so120.IBillInvokeCreditManager invokerUse = (nc.itf.so.so120.IBillInvokeCreditManager) invoker;
				GeneralBillVO billVO = (GeneralBillVO) inPreVO.clone();
				billVO.getHeaderVO().setCgeneralhid(null);
				invokerUse.renovateARByHidsEnd(billVO);
			} else
				throw new BusinessException("更新三个应收出错！");
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}

	/**
	 * 回写销售出库单累计开票数量
	 * 
	 * @param hsNum：
	 *            key--存放销售出库单表体id String value--存放本次修改的差值 UFDouble
	 * 
	 * @param soparam
	 *            超出库开票比例，so参数，为20或10
	 * @throws java.lang.Exception
	 */
	public void reWrite4CInvoiceNum(Hashtable hsNum, UFDouble soparam)
			throws BusinessException {
		if (hsNum == null || hsNum.size() <= 0)
			return;
		if (soparam == null)
			soparam = new UFDouble(1);
		else
			soparam = soparam.div(new UFDouble(100)).add(new UFDouble(1));

		try {
			ICSmartToolsDmo tooldmo = new ICSmartToolsDmo();
			String[] bids = (String[]) hsNum.keySet().toArray(
					new String[hsNum.size()]);
			ICLockBO lock = new ICLockBO();
			lock.lockDynamicPks(bids);
			// modify by liuzy 2007-10-22 销售发票需要返回明确的错误信息
			/*
			 * String selectsql = " select
			 * icb.cgeneralbid,icb.noutnum,icb.naccumwastnum,icbb3.nsignnum,icbb3.nrushnum
			 * from ic_general_b icb,ic_general_bb3 icbb3 " + " where
			 * icb.cgeneralbid = icbb3.cgeneralbid and icb.dr = 0 "+
			 * GeneralSqlString.formInSQL("icb.cgeneralbid",bids);
			 */
			StringBuilder selectsql = new StringBuilder();
			selectsql
					.append("select icb.cgeneralbid,")
					.append(" icb.noutnum,")
					.append(" icb.naccumwastnum,")
					.append(" icbb3.nsignnum,")
					.append(" icbb3.nrushnum,")
					.append(" ich.vbillcode,")
					.append(" invbd.invcode,")
					.append(" invbd.invname")
					.append(" from ic_general_b   icb,")
					.append(" ic_general_bb3 icbb3,")
					.append(" ic_general_h   ich,")
					.append(" bd_invbasdoc   invbd")
					.append(" where icb.cgeneralbid = icbb3.cgeneralbid")
					.append(" and icb.cgeneralhid = ich.cgeneralhid")
					.append(" and invbd.pk_invbasdoc = icb.cinvbasid")
					.append(" and icb.dr = 0 ")
					.append(GeneralSqlString.formInSQL("icb.cgeneralbid", bids));

			ICDataSet info = tooldmo.getDataSet(new String[] { "cgeneralbid" },
					null, null, selectsql.toString());
			if (info == null || info.getRowCount() <= 0)
				return;

			String bid = null;
			UFDouble noutnum = null, nsignnum = null, naccumwastnum = null, dtemp = null, ninvoicenum = null, nrushnum = null;
			ArrayList updatelist = new ArrayList(info.getRowCount());

			// add by liuzy
			String sVBillCode = null;
			String sInvCode = null;
			String sInvName = null;
			boolean haveError = false;
			StringBuilder sb_throwmsg = new StringBuilder(
					nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
							"4008bill", "UPP4008bill-000546")
			/* @res "开票数量大于出库单据数量" */).append("\n");
			for (int i = 0, loop = info.getRowCount(); i < loop; i++) {
				haveError = false;
				bid = info.getValueAt(i, 0).toString();
				ninvoicenum = (UFDouble) hsNum.get(bid);
				if (ninvoicenum == null)
					continue;

				noutnum = info.getUFDoubleValueAt(i, 1);
				noutnum = noutnum == null ? nc.vo.ic.pub.GenMethod.ZERO
						: noutnum;
				naccumwastnum = info.getUFDoubleValueAt(i, 2);
				naccumwastnum = naccumwastnum == null ? nc.vo.ic.pub.GenMethod.ZERO
						: naccumwastnum;
				nsignnum = info.getUFDoubleValueAt(i, 3);
				nsignnum = nsignnum == null ? nc.vo.ic.pub.GenMethod.ZERO
						: nsignnum;
				nrushnum = info.getUFDoubleValueAt(i, 4);
				nrushnum = nrushnum == null ? nc.vo.ic.pub.GenMethod.ZERO
						: nrushnum;

				dtemp = noutnum.multiply(soparam).sub(ninvoicenum).sub(
						naccumwastnum).sub(nsignnum).sub(nrushnum);
				if (noutnum.compareTo(nc.vo.ic.pub.GenMethod.ZERO) >= 0) {
					if (dtemp.compareTo(nc.vo.ic.pub.GenMethod.ZERO) < 0)
						haveError = true;
					// throw new BusinessException("开票数量超出出库数量范围");
				} else {
					if (dtemp.compareTo(nc.vo.ic.pub.GenMethod.ZERO) > 0)
						haveError = true;
					// throw new BusinessException("开票数量超出出库数量范围");
				}
				// 出库数量与累计开票数量符号不能相反
				if (noutnum.multiply(nsignnum.add(ninvoicenum)).compareTo(
						nc.vo.ic.pub.GenMethod.ZERO) < 0)
					haveError = true;
				if (haveError) {
					sVBillCode = null == info.getValueAt(i, 5) ? null : info
							.getValueAt(i, 5).toString();
					sInvCode = null == info.getValueAt(i, 6) ? null : info
							.getValueAt(i, 6).toString();
					sInvName = null == info.getValueAt(i, 7) ? null : info
							.getValueAt(i, 7).toString();
					if (null != sVBillCode)
						sb_throwmsg.append(
								nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000320")/*
																		 * @res
																		 * "单据号："
																		 */).append(sVBillCode).append(";");
					if (null != sInvCode)
						sb_throwmsg.append(
								nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000456")/*
																		 * @res
																		 * "存货编码"
																		 */
										+ ":").append(sInvCode).append(";");
					if (null != sInvName)
						sb_throwmsg.append(
								nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000455")/*
																		 * @res
																		 * "存货名称"
																		 */
										+ ":").append(sInvName).append(";");
					sb_throwmsg.append(
							nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000545")/*
																	 * @res
																	 * "出库单数量"
																	 */
									+ ":").append(noutnum).append(";");
					throw new BusinessException(sb_throwmsg.toString());
				}
				ArrayList rowlist = new ArrayList(2);
				rowlist.add(nsignnum.add(ninvoicenum));
				rowlist.add(bid);
				updatelist.add(rowlist);
			}

			if (updatelist.size() <= 0)
				return;

			String updatesql = " update ic_general_bb3 set nsignnum=? where cgeneralbid = ? ";
			SmartDMO sdmo = new SmartDMO();
			ArrayList typelist = new ArrayList();
			typelist.add(new Integer(SmartFieldMeta.JAVATYPE_UFDOUBLE));
			typelist.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));

			sdmo.executeUpdateBatch(updatesql, updatelist, typelist);

		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}

	/**
	 * 协同生成采购入库单
	 * 
	 * @param al_splitItems
	 * @throws BusinessException
	 */
	public GeneralBillVO[] coopSave45(GeneralBillVO[] vo4Cs)
			throws BusinessException {
		String pk_corp = null;
		GeneralBillItemVO[] items = null;
		String[] s30bids = null;
		HashMap<String, String[]> hm_30bid_4Cinfos = null;
		int i = 0;
		String msg = "";
		String sSaleOrderHID = null;
		String sCsalecorpid = null;// 销售组织
		ArrayList<ICoopwithForVO[]> al_vos = new ArrayList<ICoopwithForVO[]>();
		GeneralBillVO[] retvos = null;
		try {
			for (GeneralBillVO vo : vo4Cs) {
				vo.setCoopBIDItemkey(nc.vo.ic.pub.bill.IItemKey.CGENERALBID);// 设置来源单据BID的字段名
				vo.setCoopBilltypecode(ScmConst.SO_Order);// 来源的协同订单类型
				pk_corp = vo.getPk_corp();
				items = vo.getItemVOs();
				s30bids = new String[items.length];
				hm_30bid_4Cinfos = new HashMap<String, String[]>();
				i = 0;
				for (GeneralBillItemVO item : items) {
					if (null == sSaleOrderHID
							|| sSaleOrderHID.trim().length() == 0)
						// modified by liuzy 2008-10-31 上午09:05:29
						// 销售订单与销售出库单之间可能会有其它单据，如：发货单、销售发票
						// 与需求谢阳、开发经理杨波确认，一般情况下可认为销售出库单的源头单据是销售订单
						sSaleOrderHID = item.getCfirstbillhid();// 获得销售订单头ID，以获得销售组织
					s30bids[i] = item.getCfirstbillbid();
					String[] s4Cinfos = new String[8];
					s4Cinfos[0] = vo.getCbilltypecode();
					s4Cinfos[1] = vo.getVBillCode();
					s4Cinfos[2] = item.getCgeneralhid();
					s4Cinfos[3] = item.getCrowno();
					s4Cinfos[4] = item.getCgeneralbid();
					if (null != item.getNoutnum())
						s4Cinfos[5] = String.valueOf(item.getNoutnum());// 销售出库单行实发数量
					if (null != item.getNoutassistnum())
						s4Cinfos[6] = String.valueOf(item.getNoutassistnum());// 销售出库单行实发辅数量
					hm_30bid_4Cinfos.put(s30bids[i], s4Cinfos);
					s4Cinfos[7] = vo.getOperatorid();
					//从上游的销售订单，获得报价计量单位id 
					//by huzy1
//					String bodyid=item.getCfirstbillbid();
//					s4Cinfos[8]=getFirstReceiptBodyNquoteunitByBID(bodyid);
					i++;
				}

				// 调用销售接口，以sSaleOrderHID为参数，查得销售订单headerVO，获得销售组织，放置于vo4Cs.getParentVO.setAttribute("coopOrgPK",销售组织);
				if (null == sCsalecorpid || "".equals(sCsalecorpid.trim()))
					sCsalecorpid = fillSOOrgID(pk_corp, sSaleOrderHID,
							sCsalecorpid);
				// 为销售出库单VO设置销售组织
				vo.getHeaderVO().setAttributeValue("coopOrgPK", sCsalecorpid);

				// 此处调用采购接口返回采购订单VO数组
				nc.vo.po.OrderVO[] orders = null;
				nc.vo.po.OrderVO[] orders_temp = null;

				if (new ModuleEnable().isModuleEnble(pk_corp,
						ProductCode.PROD_PO)) {
					nc.itf.po.IOrder iorder = (nc.itf.po.IOrder) NCLocator
							.getInstance().lookup(
									nc.itf.po.IOrder.class.getName());
					orders = iorder.queryOrderVO(s30bids);
					if (null == orders || orders.length == 0)
						throw new BusinessException(nc.bs.ml.NCLangResOnserver
								.getInstance().getStrByID("40080802",
										"UPT40080802-000326"));// "未找到协同的采购订单，不能协同生成采购入库单");
					ArrayList<nc.vo.po.OrderVO> al_orders = new ArrayList<nc.vo.po.OrderVO>();
					ArrayList<String> al_order30bids = new ArrayList<String>();
					HashMap<String, String[]> hm_21bid_4Cinfos = new HashMap<String, String[]>();
					// 处理返回的采购订单，过滤不能协同的行，找到多行的报错
					msg = dealPOOrders(hm_30bid_4Cinfos, msg, orders,
							al_orders, al_order30bids, hm_21bid_4Cinfos);

					GeneralBillVO[] vos = fill4CInfoTO45(al_orders,
							hm_21bid_4Cinfos);
					// 取第一个，因为分单后的销售出库单对应为一个推出的采购入库单
					al_vos.add(vos);
				} else
					throw new BusinessException(nc.bs.ml.NCLangResOnserver
							.getInstance().getStrByID("40080802",
									"UPT40080802-000330"));// "系统没有起用采购管理模块，不能完成协同");

			}

			// 调用协同设置接口对VO（协同）信息进行补全
			nc.itf.scm.coopwith.ICoopwithOut icoop = (nc.itf.scm.coopwith.ICoopwithOut) NCLocator
					.getInstance().lookup(
							nc.itf.scm.coopwith.ICoopwithOut.class);
			icoop.coopwith(vo4Cs, al_vos);
			//
			ArrayList<GeneralBillVO> al_temp = new ArrayList<GeneralBillVO>();
			GeneralBillItemVO[] genitems = null;
			String errMsg = nc.bs.ml.NCLangResOnserver.getInstance()
					.getStrByID("40080802", "UPT40080802-000331")
					+ "\n";// "协同后的采购入库单，下列存货对应的行仓库为空：\n";
			int errMsgLength = errMsg.length();
			for (ICoopwithForVO[] vos : al_vos) {
				for (GeneralBillVO vo : (GeneralBillVO[]) vos) {
					genitems = vo.getItemVOs();
					for (GeneralBillItemVO item : genitems) {
						if ((null == item.getAttributeValue("cbodywarehouseid")
								|| "".equals(((String) item
										.getAttributeValue("cbodywarehouseid"))
										.trim()))
								&&vo.getHeaderVO().getAttributeValue("cwarehouseid")==null) {
							throw new BusinessException(
									nc.bs.ml.NCLangResOnserver.getInstance()
											.getStrByID("40080802",
													"UPT40080802-000332"));// "协同失败，协同后的采购入库单部分存货行仓库为空，请检查对应采购订单的收货仓库与协同设置中的默认仓库，二者不能同时为空");
						}
					}
					al_temp.add(vo);
				
			   }
			}

			retvos = new GeneralBillVO[al_temp.size()];
			retvos = al_temp.toArray(retvos);

		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// throw new BusinessException(e.getMessage(), e);
			throw nc.vo.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}

		return retvos;
	}

	private GeneralBillVO[] fill4CInfoTO45(
			ArrayList<nc.vo.po.OrderVO> al_orders,
			HashMap<String, String[]> hm_21bid_4Cinfos)
			throws BusinessException {
		GeneralBillVO[] vos;
		nc.vo.po.OrderVO[] orderVOs = new nc.vo.po.OrderVO[al_orders.size()];
		orderVOs = al_orders.toArray(orderVOs);
		// 执行VO交换
		vos = (GeneralBillVO[]) nc.bs.pub.pf.PfUtilTools.runChangeDataAry(
				ScmConst.PO_Order, ScmConst.m_purchaseIn, orderVOs);
		if (null == vos || vos.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("40080802", "UPT40080802-000333"));// "采购订单到采购入库单VO交换出错");
		// 补全对应销售出库单信息
		String sCfirstBillbid = null;
		String[] s4Cinfos = null;
		int i = 0;
		for (GeneralBillVO gen45vo : vos) {
			gen45vo.setCoopBIDItemkey(nc.vo.ic.pub.bill.IItemKey.csignwastbid);// 设置目的单据记录来源单据的BID的字段名
			gen45vo.setCoopBilltypecode(ScmConst.PO_Order);
			for (GeneralBillItemVO item : gen45vo.getItemVOs()) {
				sCfirstBillbid = item.getCfirstbillbid();
				s4Cinfos = hm_21bid_4Cinfos.get(sCfirstBillbid);
				item.setCsignwasttype(s4Cinfos[0]);// 其它来源单据类型
				item.setVsignwastcode(s4Cinfos[1]);// 其它来源单据号
				item.setCsignwasthid(s4Cinfos[2]);// 其它来源单据头ID
				item.setVsignwastrowno(s4Cinfos[3]);// 其它来源单据行号
				item.setCsignwastbid(s4Cinfos[4]);// 其它来源单据行ID
				if (null != s4Cinfos[5] && !"".equals(s4Cinfos[5].trim()))
					item.setNshouldinnum(new UFDouble(s4Cinfos[5]));// 设置应入数量
				if (null != s4Cinfos[6] && !"".equals(s4Cinfos[6].trim()))
					item.setNneedinassistnum(new UFDouble(s4Cinfos[6]));// 设置应入辅数量
				//设置报价计量单位 by huzy
//				item.setAttributeValue("cquoteunitid",s4Cinfos[8]);
			}
			vos[i].getHeaderVO().setCoperatorid(s4Cinfos[7]);// 设置采购入库单制单人为当前操作员
		}
		return vos;
	}

	private String dealPOOrders(HashMap<String, String[]> hm_30bid_4Cinfos,
			String msg, nc.vo.po.OrderVO[] orders,
			ArrayList<nc.vo.po.OrderVO> al_orders,
			ArrayList<String> al_order30bids,
			HashMap<String, String[]> hm_21bid_4Cinfos)
			throws BusinessException {
		for (nc.vo.po.OrderVO ordervo : orders) {
			if (null == ordervo || ordervo.getChildrenVO().length == 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("40080802",
								"UPT40080802-000327"));// "发现为空的采购订单VO");
			nc.vo.po.OrderItemVO[] oItemVOs = ordervo.getBodyVO();
			ArrayList<nc.vo.po.OrderItemVO> al_items = new ArrayList<nc.vo.po.OrderItemVO>();
			for (nc.vo.po.OrderItemVO orderitemvo : oItemVOs) {
				// 如果采购订单的来源单据bid不在hm_30bid_4Cinfos的key中则删掉该行，该行不形成采购入库单行
				if (hm_30bid_4Cinfos.containsKey(orderitemvo
						.getCupsourcebillrowid())) {
					al_items.add(orderitemvo);
					hm_21bid_4Cinfos.put(orderitemvo.getCorder_bid(),
							hm_30bid_4Cinfos.get(orderitemvo
									.getCupsourcebillrowid()));
					if (!al_order30bids.contains(orderitemvo
							.getCupsourcebillrowid()))
						al_order30bids.add(orderitemvo.getCupsourcebillrowid());
					else {
						msg = nc.bs.ml.NCLangResOnserver
								.getInstance()
								.getStrByID(
										"40080802",
										"UPT40080802-000334",
										null,
										new String[] { hm_30bid_4Cinfos
												.get(orderitemvo
														.getCupsourcebillrowid())[3] });// "与行{0}对应的销售订单行找到多余1行的采购订单行，无法完成协同";
					}

				}
			}
			if (al_items.size() > 0) {
				nc.vo.po.OrderItemVO[] orderItemvos = new nc.vo.po.OrderItemVO[al_items
						.size()];
				orderItemvos = al_items.toArray(orderItemvos);
				ordervo.setChildrenVO(orderItemvos);
				al_orders.add(ordervo);
				al_items.clear();
			}
		}
		// 如果有没找到采购订单的销售出库单行，报错
		if (al_order30bids.size() != hm_30bid_4Cinfos.size()) {
			HashMap hm = (HashMap) hm_30bid_4Cinfos.clone();
			for (int j = 0; j < hm.size(); j++)
				hm.remove(al_order30bids.get(j));
			if (hm.size() > 0) {

				for (Map.Entry<String, String[]> entry : (Set<Map.Entry<String, String[]>>) hm
						.entrySet()) {
					msg += entry.getValue()[3] + "、";
				}
				msg = msg.substring(0, msg.length() - 1);
				msg += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
						"40080802", "UPT40080802-000328");// "行没有找到对应采购订单，协同失败";
				throw new BusinessException(msg);
			}
		}
		return msg;
	}

	private String fillSOOrgID(String pk_corp, String sSaleOrderHID,
			String sCsalecorpid) throws BusinessException, NamingException,
			SystemException {

		if (new ModuleEnable().isModuleEnble(pk_corp, ProductCode.PROD_SO)) {
			nc.itf.scm.so.so001.ISaleOrderQuery isaleOrderQuery = (nc.itf.scm.so.so001.ISaleOrderQuery) NCLocator
					.getInstance().lookup(
							nc.itf.scm.so.so001.ISaleOrderQuery.class);
			CircularlyAccessibleValueObject saleHeaderVO = isaleOrderQuery
					.queryHeadData(sSaleOrderHID);
			if (null == saleHeaderVO
					|| null == saleHeaderVO.getAttributeValue("csalecorpid")
					|| "".equals(((String) saleHeaderVO
							.getAttributeValue("csalecorpid")).trim()))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("40080802",
								"UPT40080802-000335"));// "未找到开源销售订单信息，不能协同");
			sCsalecorpid = (String) saleHeaderVO
					.getAttributeValue("csalecorpid");
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("40080802", "UPT40080802-000336"));// "系统没有起用销售管理模块，不能完成协同");

		return sCsalecorpid;
	}

	/* 获得来源单据的表体 报价计量单位 */
	public String getFirstReceiptBodyNquoteunitByBID(String sSaleOrderBID) throws BusinessException {
		String nquoteunit = "";
		nc.itf.scm.so.so001.ISaleOrder isaleOrderQuery = (nc.itf.scm.so.so001.ISaleOrder) NCLocator
				.getInstance()
				.lookup(nc.itf.scm.so.so001.ISaleOrder.class);
		CircularlyAccessibleValueObject[] saleBodyVOs = isaleOrderQuery.queryBodyAllDataByIDs(new String[]{sSaleOrderBID});
		nquoteunit=String.valueOf(saleBodyVOs[0].getAttributeValue("cquoteunitid"));
		return nquoteunit;
	}

	public void setCoopFlag(GeneralBillVO vo) throws BusinessException {
		if ("4C".equals(vo.getCbilltypecode().trim()))
			// 协同生成是置Y
			setCoopFlagY(vo);
		else if ("45".equals(vo.getCbilltypecode().trim()))
			// 删采购入时置N
			setCoopFlagN(vo);
	}

	private void setCoopFlagY(GeneralBillVO vo) throws BusinessException {

		String sql = "UPDATE IC_GENERAL_H SET BSALECOOPPUR = 'Y' WHERE CGENERALHID = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, vo.getHeaderVO().getCgeneralhid());

			stmt.executeUpdate();
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
	}

	private void setCoopFlagN(GeneralBillVO vo) throws BusinessException {
		GeneralBillItemVO[] items = vo.getItemVOs();
		if (null == items || items.length == 0)
			return;
		String sCotherSourceType = null;
		String sCotherSourceHid = null;
		// 一张采购入库单上如果有协同的行，那么整单所有协同行都应来自于同一张销售出库单
		if (vo.getStatus() == VOStatus.DELETED) {
			// 整单删除
			for (GeneralBillItemVO item : items) {
				sCotherSourceType = item.getCsignwasttype();
				sCotherSourceHid = item.getCsignwasthid();
				if (null == sCotherSourceType
						|| !"4C".equals(sCotherSourceType)
						|| null == sCotherSourceHid) {
					sCotherSourceType = null;
					sCotherSourceHid = null;
					continue;
				} else
					break;
			}

		} else {
			for (GeneralBillItemVO item : items) {
				// 删行
				if (item.getStatus() != VOStatus.DELETED)
					continue;
				sCotherSourceType = item.getCsignwasttype();
				sCotherSourceHid = item.getCsignwasthid();
				if (null == sCotherSourceType
						|| !"4C".equals(sCotherSourceType)
						|| null == sCotherSourceHid) {
					sCotherSourceType = null;
					sCotherSourceHid = null;
					continue;
				} else
					break;
			}
		}

		if (null == sCotherSourceType || "".equals(sCotherSourceType.trim())
				|| null == sCotherSourceHid
				|| "".equals(sCotherSourceHid.trim()))
			return;

		String sql = "UPDATE IC_GENERAL_H SET BSALECOOPPUR = 'N' WHERE NOT EXISTS (SELECT 1 FROM IC_GENERAL_B WHERE  CSIGNWASTHID = ? AND DR = 0) AND CGENERALHID = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sCotherSourceHid);
			stmt.setString(2, sCotherSourceHid);
			stmt.executeUpdate();
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}

	/*
	 * 运输单参照调拨出库
	 */
	private boolean isHave4331Condition(ConditionVO[] vossand)
			throws BusinessException {
		if (vossand == null || vossand.length <= 0)
			return false;
		for (int i = 0; i < vossand.length; i++) {
			if (vossand[i].getFieldCode() != null
					&& (vossand[i].getFieldCode().startsWith("so_rev") || vossand[i]
							.getFieldCode().startsWith("so_rev_b")))
				return true;
		}
		return false;
	}

	/*
	 * 运输单参照调拨出库
	 */
	private String getBizTypeWhere(String cdeliverytype)
			throws BusinessException {
		if (StringUtil.isEmpty(cdeliverytype))
			return null;
		// ModuleEnable.isModuleEnabled(pk_corp, ModuleCode)
		try {
			nc.itf.dm.service.dm.IDeliveryBizType dmi = (nc.itf.dm.service.dm.IDeliveryBizType) NCLocator
					.getInstance().lookup(
							nc.itf.dm.service.dm.IDeliveryBizType.class
									.getName());
			String[] biztypeids = dmi.getBizTypeID(cdeliverytype,
					BillTypeConst.m_saleOut);
			if (biztypeids == null || biztypeids.length <= 0)
				return null;
			return GeneralSqlString.formInSQL("head.cbiztype", biztypeids);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}
	}

	/*
	 * 根据当前的运输组织和运输类型得到它所代理的公司+库存组织
	 */
	private boolean addDeliveryOrgForOutJoin(StringBuffer sbSQL,
			String cdeliveryorgid) throws BusinessException {
		if (sbSQL == null || StringUtil.isEmpty(cdeliveryorgid))
			return false;
		try {
			nc.itf.dm.service.dm.IDeliveryOrgService dmi = (nc.itf.dm.service.dm.IDeliveryOrgService) NCLocator
					.getInstance().lookup(
							nc.itf.dm.service.dm.IDeliveryOrgService.class
									.getName());
			String[][] corpandcals = dmi.queryDeliveryOrgForOut(cdeliveryorgid);
			if (corpandcals == null || corpandcals.length <= 0)
				return false;
			String[] col1 = new String[corpandcals.length];
			String[] col2 = new String[corpandcals.length];
			for (int i = 0; i < corpandcals.length; i++) {
				col1[i] = corpandcals[i][0];
				col2[i] = corpandcals[i][1];
			}
			String temptable = new ICSmartToolsDmo()
					.getICCheckInvBatchTempTable(col1, col2);
			if (StringUtil.isEmpty(temptable))
				return false;
			sbSQL.append(" inner join " + temptable + " tm on (");
			sbSQL.append(" head.pk_corp= tm."
					+ ICTempTableConst.ic_temp_col_id1name);
			sbSQL.append(" and (head.pk_calbody= tm."
					+ ICTempTableConst.ic_temp_col_id2name);
			sbSQL.append(" or tm." + ICTempTableConst.ic_temp_col_id2name
					+ " is null ) ");
			sbSQL.append(" ) ");

			return true;
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}
	}

	/*
	 * 运输单参照调拨出库
	 */
	public Object[] queryAllBillDatasFor4804(String sheadsql, String sbodysql,
			Object[] otherparam) throws BusinessException {
		if (sheadsql == null && sheadsql.trim().length() <= 0)
			return null;
		ConditionVO[] vosand = null;
		Map otherattributes = null;
		if (otherparam != null && otherparam.length >= 2) {
			vosand = (ConditionVO[]) otherparam[0];
			otherattributes = (Map) otherparam[1];
		}
		String cdelivorgid = null;
		String cdelivtype = null;
		if (otherattributes != null) {
			cdelivorgid = (String) otherattributes.get("cdelivorgid");
			cdelivtype = (String) otherattributes.get("cdelivtype");
		}

		try {

			String sheadsqlnew = sheadsql;

			if (sbodysql != null && sbodysql.trim().length() > 0)
				if (nc.vo.ic.pub.GenMethod.isStartWithAndOr(sbodysql))
					sheadsqlnew += " " + sbodysql;
				else
					sheadsqlnew += " and " + sbodysql;

			String inner4331type = " left outer join ";
			if (isHave4331Condition(vosand))
				inner4331type = " inner join ";

			// 从whereString中得到关联语句：
			DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");

			String sUnionSQL = dynamicSQL.getUnionSQL(vosand);
			StringBuffer sbSQL = new StringBuffer("select ");
			sbSQL.append(" distinct ");
			sbSQL.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,
					"head"));
			sbSQL.append(" ,so_rev.ctransportcorpid,body.csourcetype ");

			sbSQL.append(" from ic_general_h head");
			sbSQL
					.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
			sbSQL
					.append(" inner  join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid ");
			sbSQL
					.append(inner4331type
							+ " so_salereceive_b so_rev_b on body.csourcebillbid=so_rev_b.csalereceiveid_bid and so_rev_b.dr=0 ");
			sbSQL
					.append(inner4331type
							+ " so_salereceive so_rev on so_rev_b.csalereceiveid=so_rev.csalereceiveid and so_rev.dr=0 ");

			// 没有设置代理的库存组织，公司 返回 null
			if (!addDeliveryOrgForOutJoin(sbSQL, cdelivorgid))
				return null;

			// 动态关联：
			if (sUnionSQL != null && sUnionSQL.length() > 0)
				sbSQL.append(sUnionSQL);
			sbSQL.append(" WHERE head.cbilltypecode='4C' ");

			// 在超订单出库时,调拨订单的数量会小于已调入主数量
			// sbSQL.append(" and abs(coalesce(tobill.nnum,0)) >
			// abs(coalesce(tobill.norderinnum,0))");
			// sbSQL.append(" and abs(coalesce(body.noutnum,0)) >
			// abs(coalesce(body.ntranoutnum,0))");
			sbSQL.append(" and head.dr=0 and body.dr=0 AND bb3.dr=0 ");

			String sbizwhere = getBizTypeWhere(cdelivtype);
			// 没有设匹配的业务类型 返回 null
			if (sbizwhere == null)
				return null;
			sbSQL.append(sbizwhere);

			if (sheadsqlnew != null && sheadsqlnew.length() > 0) {
				if (nc.vo.ic.pub.GenMethod.isStartWithAndOr(sheadsqlnew))
					sbSQL.append(sheadsqlnew);
				else
					sbSQL.append(" and " + sheadsqlnew);
			}

			CircularlyAccessibleValueObject[] headvos = queryHeadDataBySql(sbSQL
					.toString());

			if (headvos == null || headvos.length <= 0)
				return null;
			ArrayList<GeneralBillHeaderVO> list = new ArrayList<GeneralBillHeaderVO>();
			for (CircularlyAccessibleValueObject headvo : headvos) {
				if (nc.vo.ic.pub.GenMethod.isStringEqual("4331",
						(String) headvo.getAttributeValue("csourcetype"))
						&& !nc.vo.ic.pub.GenMethod
								.isSEmptyOrNull((String) headvo
										.getAttributeValue("ctransportcorpid"))
						&& !nc.vo.ic.pub.GenMethod.isStringEqual(cdelivorgid,
								(String) headvo
										.getAttributeValue("ctransportcorpid")))

					continue;
				list.add((GeneralBillHeaderVO) headvo);
			}
			if (list.size() <= 0)
				return null;
			headvos = (GeneralBillHeaderVO[]) list
					.toArray(new GeneralBillHeaderVO[list.size()]);

			Object[] retobjs = new Object[3];

			retobjs[0] = headvos;

			if (headvos != null && headvos.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = headvos;
				headvos = new GeneralBillHeaderVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, headvos, 0, headvos.length);
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			StringBuffer sbSql = new StringBuffer("SELECT ");
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					"body"));
			sbSql
					.append(",bb3.ntotaltrannum,bb3.btranendflag,so_rev.ctransportrouteid,so_rev_b.csendareaid ");
			sbSql
					.append(",so_rev_b.csendpointid,so_rev_b.vsendaddress,so_rev_b.cvehicletypeid,so_rev_b.cvehicleid,so_rev_b.csupercargoid ");

			sbSql.append(" from ic_general_h head ");
			sbSql
					.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
			sbSql
					.append(" inner  join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid ");
			sbSql
					.append(inner4331type
							+ " so_salereceive_b so_rev_b on body.csourcebillbid=so_rev_b.csalereceiveid_bid and so_rev_b.dr=0 ");
			sbSql
					.append(inner4331type
							+ " so_salereceive so_rev on so_rev_b.csalereceiveid=so_rev.csalereceiveid and so_rev.dr=0 ");
			if (sheadsqlnew != null) {
				DynamicJoinSql dynamicSQL1 = new DynamicJoinSql("head", "body");
				String sUnionSQL1 = dynamicSQL1.getUnionSQL(vosand);
				// 动态关联：
				if (sUnionSQL1 != null && sUnionSQL1.length() > 0)
					sbSql.append(sUnionSQL1);
			}

			sbSql.append(" where head.dr=0 and body.dr=0 AND bb3.dr=0  ");
			sbSql.append(GeneralSqlString.formInSQL("head.cgeneralhid",
					SmartVOUtilExt.getVOsValues(headvos, "cgeneralhid")));

			if (sheadsqlnew != null && sheadsqlnew.trim().length() > 0)
				if (sheadsqlnew.trim().startsWith("and")
						|| sheadsqlnew.trim().startsWith("AND"))
					sbSql.append(" " + sheadsqlnew);
				else
					sbSql.append(" and " + sheadsqlnew);

			GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
			voaItem = getFreeItemData(voaItem);

			retobjs[1] = voaItem;
			if (voaItem != null && voaItem.length > RedunUtil.MAXREC) {
				CircularlyAccessibleValueObject[] bakvos = voaItem;
				voaItem = new GeneralBillItemVO[RedunUtil.MAXREC];
				System.arraycopy(bakvos, 0, voaItem, 0, voaItem.length);
				retobjs[0] = nc.vo.ic.pub.GenMethod.filterHeadVosByBodyVos(
						(GeneralBillHeaderVO[]) headvos,
						(GeneralBillItemVO[]) voaItem);
				retobjs[1] = voaItem;
				retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
			}

			return retobjs;

		} catch (Exception ee) {
			throw GenMethod.handleException(null, ee);
		}

	}
	/**
	 * ICRMService
	 * 作者：lirr
	 * 日期：2009-7-23上午11:15:16
	 * 修改日期 2009-7-23上午11:15:16 修改人，lirr 修改原因，注释标志：
		@param billtype
		@param scmvo
		@param vostatus
		@throws BusinessException
	 */
	public void synchronizeSCM(String billtype,AggregatedValueObject scmvo,int vostatus) throws BusinessException{
		IcToCRM ictocrmDmo;
		try {
			ictocrmDmo = new IcToCRM();
			ictocrmDmo.synchronizeSO((GeneralBillVO)scmvo,vostatus);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}
		
	}
	/**
	 * ICRMService
	 * 作者：lirr
	 * 日期：2009-7-29下午03:37:55
	 * 修改日期 2009-7-29下午03:37:55 修改人，lirr 修改原因，注释标志：
		@param billtype
		@param billid
		@return
		@throws BusinessException
	 */
	public AggregatedValueObject CRMQueryBillByID(String billtype,String billid) throws BusinessException{
		GeneralBillVO retvo = null ;
		GeneralBillDMO dmo;
		try {
			dmo = new GeneralBillDMO();
		
		ArrayList alVo = dmo.queryBillByPks(new String[]{billid});
		if(alVo != null && alVo.size() > 0)
			retvo = (GeneralBillVO)dmo.queryBillByPks(new String[]{billid}).get(0);
		else{
			GeneralBillHeaderVO headvo = new GeneralBillHeaderVO();
			headvo.setPrimaryKey(billid);
			retvo.setParentVO(headvo);
		}
			
		} catch (Exception e) {
	          // 日志异常
	          nc.vo.scm.pub.SCMEnv.out(e);
	          // 库存组异常抛出规范
	          throw nc.bs.ic.pub.GenMethod.handleException(
	              e.getMessage(), e);
	    }
		return retvo;
	}

	public AggregatedValueObject CRMQueryBillByID(String billid) throws BusinessException {
		// TODO 自动生成方法存根
		return CRMQueryBillByID("4C",billid);
	}

	public void synchronizeSCM(AggregatedValueObject scmvo, int vostatus) throws BusinessException {
		// TODO 自动生成方法存根
		synchronizeSCM("4C",scmvo,vostatus);
	}
	
	/**
	 * add by ouyangzhb 2012-12-08 出库单取消签字时，需要检查推出的销售发票是否已经删除
	 * @param icvo
	 * @return
	 * @throws nc.vo.pub.BusinessException
	 */
	public UFBoolean checkInvoiceDel(GeneralBillVO icvo)
			throws nc.vo.pub.BusinessException {
		UFBoolean rets = new UFBoolean(true);
		String csourcebillhid = null ;

		GeneralBillItemVO[] bodyvos = (GeneralBillItemVO[]) icvo.getChildrenVO();
		for(int i=0;bodyvos != null && i<bodyvos.length;i++){
			if(bodyvos[i].getCsourcebillhid() != null &&"30".equals(bodyvos[i].getCsourcetype())){
				csourcebillhid = bodyvos[i].getCsourcebillhid();
				break ;
			}
		}
		StringBuffer sql = new StringBuffer(" select csaleid ");
		sql.append(" from so_saleinvoice_b ");
		sql.append(" where so_saleinvoice_b.dr = 0 ");
		sql.append(" and cupsourcebillid = '"+csourcebillhid+"'");
		Object[] rows;
		try {
			SmartDMO sdmo = new SmartDMO();

			rows = sdmo.selectBy2(sql.toString());
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
		if (rows == null || rows.length <= 0){
			return rets;
		}else{
			throw new nc.vo.pub.BusinessException("对应销售订单下游存在发票，不能取消签字！" );
		}
	}
	
	
	

}