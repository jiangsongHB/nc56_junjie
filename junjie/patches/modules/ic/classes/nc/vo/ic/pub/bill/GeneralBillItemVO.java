/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.vo.ic.pub.bill;

import nc.vo.ic.ic001.BatchcodeVO;
import nc.vo.ic.pub.DesassemblyVO;
import nc.vo.ic.pub.GenMethod;
import nc.vo.ic.pub.IBillItemBarcodeVO;
import nc.vo.ic.pub.IBillItemBatchcodeVO;
import nc.vo.ic.pub.SmartVOUtilExt;
import nc.vo.ic.pub.bc.BarCodeVO;
import nc.vo.ic.pub.check.CheckTools;
import nc.vo.ic.pub.locator.LocatorVO;
import nc.vo.ic.pub.settlement.SettlementVO;
import nc.vo.ic.pub.sn.SerialVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.lang.UFTime;
import nc.vo.scm.bd.SmartVODataUtils;
import nc.vo.scm.constant.ic.InOutFlag;
import nc.vo.scm.ic.IBillItemVO;
import nc.vo.scm.ic.bill.FreeItemDeal;
import nc.vo.scm.ic.bill.FreeVO;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.pub.TimeAttributeName;
import nc.vo.scm.pub.smart.SmartVO;
import nc.vo.transfer.IEqualValueUpBill;

public class GeneralBillItemVO extends SmartVO implements IBillItemVO,
		IBillItemBarcodeVO, FreeItemDeal, IBillItemBatchcodeVO,IEqualValueUpBill {

	private static final long serialVersionUID = -6598472894122343346L;

	// 比较应收发数量和实收发数量
	// 等于
	public static final int EQUAL = 0;

	// 小于
	public static final int LESSTHEN = 2;

	// 大于
	public static final int MORETHEN = 1;

	// 不检查
	public static final int NOT_CHECK = 100;

	// 实发数量为空
	public static final int NUM_NULL = 5;

	// 实发数量为零
	public static final int NUM_ZERO = 4;

	// 符号相反。
	public static final int OPPOSITE = 3;

	// 只初始化一次，多次用到的UFDouble.
	public static final UFDouble ZERO = new UFDouble(0.0);

	// 数据类型处理类
	// private SmartVODataUtils m_SVODataUtils = new SmartVODataUtils();
	private nc.vo.ic.pub.bc.BarCodeVO[] m_barcode = null;

	private nc.vo.ic.pub.bc.BarCodeVO[] m_sourceBarcode = null;

	public static final UFBoolean uffalse = UFBoolean.FALSE;

	// private UFBoolean uftrue = new UFBoolean(true);
	// 辅计量拆解信息
	private DesassemblyVO m_voDesassem = null;
  
  private transient boolean isYetExecBatchFormulas = false;

	/**
	 * 使用主键字段进行初始化的构造子。
	 * 
	 * 创建日期：(2001-6-16)
	 */
	public GeneralBillItemVO() {
		super();
	}
  
  public boolean isYetExecBatchFormulas() {
    if(getVbatchcode()==null || getVbatchcode().trim().length()<=0)
      return true;
    return isYetExecBatchFormulas;
  }
  
  public void setIsYetExecBatchFormulas(boolean b) {
    isYetExecBatchFormulas = b;
  }

	public void calculateMny() {
		UFDouble nnum = null;
		if (getNinnum() != null)
			nnum = getNinnum();
		else if (getNoutnum() != null)
			nnum = getNoutnum();

		if (nnum != null) {
			if (getNprice() != null)
				setNmny(nnum.multiply(getNprice()));
			if (getNsaleprice() != null)
				setNsalemny(nnum.multiply(getNsaleprice()));
			if (getNtaxprice() != null)
				setNtaxmny(nnum.multiply(getNtaxprice()));
			if (getNplannedprice() != null)
				setNplannedmny(nnum.multiply(getNplannedprice()));
		} else {
			setNmny(null);
			setNsalemny(null);
			setNtaxmny(null);
			setNplannedmny(null);
		}

	}

	/**
	 * 使用主键进行初始化的构造子。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param ??fieldNameForMethod??
	 *            主键值
	 */
	public GeneralBillItemVO(String newCgeneralbid) {
		super();
		setAttributeValue("cgeneralbid", newCgeneralbid);

	}

	/**
	 * 追加货位数据。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public void addLocator(LocatorVO[] newLocator) {
		if (newLocator != null && newLocator.length > 0) {
			LocatorVO[] locator = (LocatorVO[]) super
					.getAttributeValue("locator");
			if (locator == null)
				locator = (LocatorVO[]) newLocator.clone();
			else {
				LocatorVO[] voaLocator = new LocatorVO[locator.length
						+ newLocator.length];
				// 原有的vo
				for (int i = 0; i < locator.length; i++)
					voaLocator[i] = locator[i];
				// 新加的vo
				for (int i = locator.length; i < (locator.length + newLocator.length); i++)
					voaLocator[i] = newLocator[i - locator.length];
				locator = voaLocator;
			}
		}
	}

	/**
	 * 张欣IC 功能： 参数： 返回： 例外： 日期：(2004-10-11 16:34:35) 修改日期，修改人，修改原因，注释标志：
	 * 
	 */
	public void calBarcodeNum() {
		if (this.getBarcodeClose() != null
				|| this.getBarcodeClose().booleanValue() != true) {

			int ibarcodenums = 0;
			nc.vo.ic.pub.bc.BarCodeVO[] barcodevo = getBarCodeVOs();
			if (barcodevo == null || barcodevo.length == 0) {
				ibarcodenums = 0;
			} else {
				for (int j = 0; j < barcodevo.length; j++) {
					if (barcodevo[j] != null
							&& (barcodevo[j].getStatus() != nc.vo.pub.VOStatus.DELETED)) {
						if (barcodevo[j].getNnumber() == null
								|| barcodevo[j].getNnumber().intValue() == 1)
							ibarcodenums++;
						else
							ibarcodenums = ibarcodenums
									+ barcodevo[j].getNnumber().intValue();

					}
				}
			}

			int iNum = 0;
			if (getNinnum() != null)
				iNum = getNinnum().intValue();
			else if (getNoutnum() != null)
				iNum = getNoutnum().intValue();

			iNum = Math.abs(iNum);

			setListnbarcodenum(new UFDouble(ibarcodenums));

			UFBoolean bBarcodeClose = new UFBoolean("N");
			if (iNum > 0 && ibarcodenums > 0 && iNum == ibarcodenums) {

				bBarcodeClose = new UFBoolean("Y");
			}

			setBarcodeClose(bBarcodeClose);
		}
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-12-13 14:19:15) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBsourcelargess() {
		if (getAttributeValue("bsourcelargess") != null)
			return new UFBoolean(getAttributeValue("bsourcelargess").toString());
		else
			return new UFBoolean(false);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-12-13 14:19:15) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_bsourcelargess
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBsourcelargess(nc.vo.pub.lang.UFBoolean newM_bsourcelargess) {
		setAttributeValue("bsourcelargess", newM_bsourcelargess);
	}

	/**
	 * 此处插入方法说明。 功能：如果是非固定换算率，根据辅数量/数量重算换算率。
	 * 
	 * 未考虑精度
	 * 
	 * 参数： void 返回：void 例外： 日期：(2002-7-4 10:10:25) 修改日期，修改人，修改原因，注释标志：
	 */
	public void calConvRate() {
		if (getIsSolidConvRate() != null
				&& getIsSolidConvRate().intValue() != 1
				&& getCastunitid() != null) {
			UFDouble nnum = null, nastnum = null;
			// 辅数量/数量优先
			if (getNinnum() != null && getNinassistnum() != null
					&& getNinnum().doubleValue() != 0.0
					&& getNinassistnum().doubleValue() != 0.0) {
				nnum = getNinnum();
				nastnum = getNinassistnum();
			} else if (getNoutnum() != null && getNoutassistnum() != null
					&& getNoutnum().doubleValue() != 0.0
					&& getNoutassistnum().doubleValue() != 0.0) {
				nnum = getNoutnum();
				nastnum = getNoutassistnum();
			}
			// 应辅数量/数量其次
			else if (getNshouldinnum() != null && getNneedinassistnum() != null
					&& getNshouldinnum().doubleValue() != 0.0
					&& getNneedinassistnum().doubleValue() != 0.0) {
				nnum = getNshouldinnum();
				nastnum = getNneedinassistnum();
			} else if (getNshouldoutnum() != null
					&& getNshouldoutassistnum() != null
					&& getNshouldoutnum().doubleValue() != 0.0
					&& getNshouldoutassistnum().doubleValue() != 0.0) {
				nnum = getNshouldoutnum();
				nastnum = getNshouldoutassistnum();
			}

			// ------------- 有合法的数量的话就计算 -----------
			if (nnum != null && nastnum != null && nnum.doubleValue() != 0.0
					&& nastnum.doubleValue() != 0.0)
				setHsl(nnum.div(nastnum));// use div only one time.

			// 那就不用麻烦了
		}
	}

	/**
	 * 此处插入方法说明。 功能：根据保质期、失效日期计算生产日期
	 * 
	 * //只有没有时才计算
	 * 
	 * 参数： 返回： 例外： 日期：(2002-7-4 10:12:39) 修改日期，修改人，修改原因，注释标志：
	 */
	public void calPrdDate() {
		// 只有没有时才计算
		if ((getScrq() == null || getScrq().toString().trim().length() == 0)
				&& getDvalidate() != null && getQualityDay() != null) {
			setScrq(getDvalidate().getDateBefore(getQualityDay().intValue()));
		}
	}

	/**
	 * 创建者：王乃军 功能：清无关的数量 参数：入还是出 返回： 例外： 日期：(2001-7-16 21:48:42)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void clearRedundantQty(int iInOut) {
		// 清入数量
		if (iInOut == InOutFlag.IN) {
			setNinnum(null);
			setNinassistnum(null);
			// 应数量
			setNshouldinnum(null);
			setNneedinassistnum(null);
		} else // 清出数量
		if (iInOut == InOutFlag.OUT) {
			setNoutnum(null);
			setNoutassistnum(null);
			// 应数量
			setNshouldoutnum(null);
			setNshouldoutassistnum(null);
		}
	}

	/**
	 * 创建日期：(2003-3-6 17:31:27) 作者：程起伍 修改日期： 修改人： 修改原因： 算法说明：
	 * 功能：比较应收发数量和实收发数量的大小，返回整形的比较结果。[绝对值之间的比较]
	 * 
	 * @return int：MORETHEN 应收发数量 > 实收发数量 EQUAL 应收发数量 = 实收发数量 LESSTHEN 应收发数量 <
	 *         实收发数量 NUM_NULL 实收发数量为空 NUM_ZERO 实收发数量为零 OPPOSITE 应收发数量 与
	 *         实收发数量符号相反
	 */
	public int compareNum() {
		UFDouble ufdShouldNum = null; // 应收发数量
		UFDouble ufdNum = null; // 实收发数量
		UFDouble ufdShouldAstNum = null; // 应收发数量
		UFDouble ufdAstNum = null; // 实收发数量

		int iRet = NOT_CHECK;
		if (getNinnum() != null) {
			ufdShouldNum = getNshouldinnum();
			ufdNum = getNinnum();
			ufdShouldAstNum = getNneedinassistnum();
			ufdAstNum = getNinassistnum();

		} else if (getNoutnum() != null) {
			ufdShouldNum = getNshouldoutnum();
			ufdNum = getNoutnum();
			ufdShouldAstNum = getNshouldoutassistnum();
			ufdAstNum = getNoutassistnum();

		}

		// 预防ufdShouldNum为空
		// if(ufdShouldNum == null)
		// ufdShouldNum=ZERO;
		// if(ufdShouldAstNum == null)
		// ufdShouldAstNum=ZERO;
		if (ufdAstNum == null)
			ufdAstNum = ZERO;

		if (ufdNum == null)
			iRet = NUM_NULL;
		else if (ufdNum.compareTo(ZERO) == 0 && ufdAstNum.compareTo(ZERO) == 0)
			iRet = NUM_ZERO;
		else if ((ufdShouldNum != null && ufdNum.multiply(ufdShouldNum)
				.compareTo(ZERO) < 0)
				|| (ufdShouldAstNum != null && ufdAstNum.multiply(
						ufdShouldAstNum).compareTo(ZERO) < 0))
			iRet = OPPOSITE;
		else if (ufdShouldNum != null
				&& ufdNum.abs().compareTo(ufdShouldNum.abs()) == 0
				&& ufdShouldAstNum != null
				&& ufdAstNum.abs().compareTo(ufdShouldAstNum.abs()) == 0)
			iRet = EQUAL;
		else if ((ufdShouldNum != null && ufdNum.abs().compareTo(
				ufdShouldNum.abs()) > 0)
				|| (ufdShouldAstNum != null && ufdAstNum.abs().compareTo(
						ufdShouldAstNum.abs()) > 0))
			iRet = MORETHEN;
		else if ((ufdShouldNum != null && ufdNum.abs().compareTo(
				ufdShouldNum.abs()) < 0)
				|| (ufdShouldAstNum != null && ufdAstNum.abs().compareTo(
						ufdShouldAstNum.abs()) < 0))
			iRet = LESSTHEN;
		return iRet;
	}

	/**
	 * 属性m_account的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getAccount() {
		return (String) getAttributeValue("account");
	}

	/**
	 * <p>
	 * 需要在一个循环中访问的属性的名称数组。
	 * <p>
	 * 创建日期：(??Date??)
	 * 
	 * @return java.lang.String[]
	 */
	public java.lang.String[] getAttributeNames() {
		return super.getAttributeNames();
	}

	/**
	 * 获得value 创建日期：(2001-6-16)
	 * 
	 * @param key
	 *            java.lang.String
	 */
	public Object getAttributeValue(String sKey) {
		if ("vfree0".equals(sKey)) {
			if (getFreeItemVO() != null)
				return getFreeItemVO().getWholeFreeItem();
			else
				return null;
		} else if ("freevo".equals(sKey)) {
			return getFreeItemVO();
		} else if (sKey.equals("idesatype")) {
			return getDesaType();
		} else if (sKey.equals("desainfo")) {
			return getDesassemVO();
		}

		// 凡是自由项取值必须从invvo中获得，因为自由项参照修改的是invvo
		Object oValue = null;

		if (sKey.indexOf("vfree") != -1) {
			if (getFreeItemVO() != null)
				oValue = getFreeItemVO().getAttributeValue(sKey);
			else
				oValue = super.getAttributeValue(sKey);
		} else if (sKey.equals("noutassistnum") || sKey.equals("ninassistnum")
				|| sKey.equals("nshouldoutassistnum")
				|| sKey.equals("nneedinassistnum")) {
			// 如果辅计量是空，那么辅数量等都是空
			oValue = super.getAttributeValue(sKey);
			if (getCastunitid() == null && oValue != null
					&& new UFDouble(oValue.toString()).compareTo(ZERO) == 0)
				oValue = null;
		} else
			oValue = super.getAttributeValue(sKey);

		if (sKey.equals("cinvmanid")) {
			oValue = super.getAttributeValue("cinvbasid");
		}

		if (sKey.equals(TimeAttributeName.FIRSTBILLID))
			oValue = super.getAttributeValue("cfirstbillhid");

		if (oValue == null && SettlementVO.getHashKey().containsKey(sKey)) {
			oValue = getBB3Value(sKey);
		}

		// Integer特殊处理，UFBoolean->Integer
		if (oValue == null || (oValue != null && !(oValue instanceof Integer))) {
			if (sKey.equalsIgnoreCase("isAstUOMmgt"))
				oValue = getIsAstUOMmgt();
			else if (sKey.equalsIgnoreCase("isFreeItemMgt"))
				oValue = getIsFreeItemMgt();
			else if (sKey.equalsIgnoreCase("isLotMgt"))
				oValue = getIsLotMgt();
			else if (sKey.equalsIgnoreCase("isSellProxy"))
				oValue = getIsSellProxy();
			else if (sKey.equalsIgnoreCase("isSerialMgt"))
				oValue = getIsSerialMgt();
			else if (sKey.equalsIgnoreCase("isSet"))
				oValue = getIsSet();
			else if (sKey.equalsIgnoreCase("isSolidConvRate"))
				oValue = getIsSolidConvRate();
			else if (sKey.equalsIgnoreCase("isValidateMgt"))
				oValue = getIsValidateMgt();
			else if (sKey.equalsIgnoreCase("isstorebyconvert"))
				oValue = getIsStoreByConvert();
			else if (sKey.equalsIgnoreCase("ismngstockbygrswt"))
				oValue = getIsmngstockbygrswt();

		}

		// v5:ljun提供给采购扣吨计算使用
		if (sKey.equalsIgnoreCase("nkoudunnum")) {
			UFDouble ufd1 = (UFDouble) getAttributeValue("ningrossnum");
			if (ufd1 == null)
				return null;
			UFDouble ufd2 = (UFDouble) getAttributeValue("ntarenum");
			return ufd1.sub(ufd2 == null ? 0 : ufd2.doubleValue());
		}
		return oValue;

	}

	/**
	 * 功能：判断条码是否关闭 参数： 返回： 例外： 日期：(2004-9-30 12:14:05) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBarcodeClose() {
		Object value = getAttributeValue("bbarcodeclose");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-13 20:16:49)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBarcodeManagerflag() {
		if (getIsprimarybarcode().booleanValue()
				|| getIssecondarybarcode().booleanValue()) {
			return new nc.vo.pub.lang.UFBoolean("Y");
		} else {
			return new nc.vo.pub.lang.UFBoolean("N");
		}

	}

	/**
	 * 属性m_barcode的Getter方法。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @return String
	 */
	public BarCodeVO[] getBarCodeVOs() {
		// 获得货位数据
		return m_barcode;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public Object getBB3Value(String name) {
		SettlementVO[] voaBB3 = (SettlementVO[]) getAttributeValue("settlevo");
		if (voaBB3 != null && voaBB3.length > 0 && voaBB3[0] != null) {
			return voaBB3[0].getAttributeValue(name);
		}
		return null;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @return nc.vo.ic.pub.settlement.SettlementVO[]
	 */
	public nc.vo.ic.pub.settlement.SettlementVO[] getBB3VO() {
		return (SettlementVO[]) super.getAttributeValue("settlevo");
	}

	/**
	 * 功能：得到原行辅单位和对应的库存单位的换算率 参数： 返回： 例外： 日期：(2005-1-21 17:00:21)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public UFDouble getBillSotreHsl() {
		if (m_voDesassem != null) {
			return m_voDesassem.getBillSotreHsl();
		} else
			return new UFDouble(1);
	}

	/**
	 * 功能：获得对应行辅单位的库存单位 参数： 返回： 例外： 日期：(2005-1-21 17:09:08) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 * @param cAstUnitID
	 *            java.lang.String
	 */
	public String getStorUnitID(String cAstUnitID) {
		if (m_voDesassem != null)
			return m_voDesassem.getStorUnitID(cAstUnitID);
		return null;
	}

	/**
	 * 此处插入方法说明。 功能：存货唯一键是否包含来源单据表体ID,缺省不包含， 参数： 返回： 例外： 日期：(2002-5-31 10:05:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean getBisIUK_SourceBodyidOnly() {
		if (getAttributeValue("bIUK_SourceBodyidOnly") == null)
			return false;
		return ((UFBoolean) getAttributeValue("bIUK_SourceBodyidOnly"))
				.booleanValue();
	}

	/**
	 * 属性m_bkxcl的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getBkxcl() {
		return (UFDouble) getAttributeValue("bkxcl");
	}

	/**
	 * 获得属性 <是否返利/breturnprofit>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBreturnprofit() {
		Object value = getAttributeValue("breturnprofit");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 获得属性 <是否价保/bsafeprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBsafeprice() {
		Object value = getAttributeValue("bsafeprice");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 获得属性 <自动补货标志/bsupplyflag>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBsupplyflag() {
		Object value = getAttributeValue("bsupplyflag");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 获得属性 <暂估标志/bzgflag>的值。 Y:已暂估 N:未暂估(缺省) 采购入库单上标示该入库单是否是暂估单据
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBzgflag() {
		Object value = getAttributeValue("bzgflag");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 属性m_caccountunitid的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCaccountunitid() {
		return (String) getAttributeValue("caccountunitid");
	}

	/**
	 * 获得属性 <辅计量单位ID/castunitid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCastunitid() {
		return (String) getAttributeValue("castunitid");
	}

	/**
	 * 获得属性 <辅计量单位/castunitname>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCastunitname() {
		return (String) getAttributeValue("castunitname");
	}

	/**
	 * 获得属性 <质检状态ID/ccheckstateid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcheckstateid() {
		return (String) getAttributeValue("ccheckstateid");
	}

	/**
	 * 获得属性 <对应入库单据表体序列号/ccorrespondbid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcorrespondbid() {
		return (String) getAttributeValue("ccorrespondbid");
	}

	/**
	 * 获得属性 <对应入库单单据号/ccorrespondcode>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcorrespondcode() {
		return (String) getAttributeValue("ccorrespondcode");
	}

	/**
	 * 获得属性 <对应入库单序列号/ccorrespondhid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcorrespondhid() {
		return (String) getAttributeValue("ccorrespondhid");
	}

	/**
	 * 获得属性 <对应入库单类型/ccorrespondtype>的值。 40 库存期初余额 41 库存期初借入单 44 库存期初来料加工单 45
	 * 库存采购入库单 46 库存产成品入库单 47 库存委外加工入库单 48 库存来料加工入库单 49 库存借入单 4A 库存其它入库单 4B
	 * 库存借出还回单
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcorrespondtype() {
		return (String) getAttributeValue("ccorrespondtype");
	}

	/**
	 * 获得属性 <对应入库单类型/ccorrespondtypename>的值。 40 库存期初余额 41 库存期初借入单 44 库存期初来料加工单
	 * 45 库存采购入库单 46 库存产成品入库单 47 库存委外加工入库单 48 库存来料加工入库单 49 库存借入单 4A 库存其它入库单 4B
	 * 库存借出还回单
	 */
	public String getCcorrespondtypename() {
		return (String) super.getAttributeValue("ccorrespondtypename");
	}

	/**
	 * 获得属性 <成本对象ID/ccostobject>的值。 对于销售出库单、其他出库单，目前用于存储收货单位
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcostobject() {
		return (String) getAttributeValue("ccostobject");
	}

	/**
	 * 获得属性 <成本对象ID/ccostobjectname>的值。 对于销售出库单、其他出库单，目前用于存储收货单位
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public java.lang.String getCcostobjectName() {
		return (String) getAttributeValue("ccostobjectname");
	}

	/**
	 * 获得属性 <源头单据表体ID/cfirstbillbid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfirstbillbid() {
		return (String) getAttributeValue("cfirstbillbid");
	}

	/**
	 * 获得属性 <源头单据表头ID/cfirstbillhid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfirstbillhid() {
		return (String) getAttributeValue("cfirstbillhid");
	}

	/**
	 * 获得属性 <源头单据类型/cfirsttype>的值。 30 销售订单 31 销售发货单 32 销售发票 21 采购订单 23 采购到货
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfirsttype() {
		return (String) getAttributeValue("cfirsttype");
	}

	/**
	 * 获得属性 <源头单据类型/cfirsttypename>的值。 30 销售订单 31 销售发货单 32 销售发票 21 采购订单 23 采购到货
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public java.lang.String getCfirsttypename() {
		return (String) getAttributeValue("cfirsttypename");
	}

	/**
	 * 获得属性 <锁定来源/cfreezeid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfreezeid() {
		return (String) getAttributeValue("cfreezeid");
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCgeneralbb3() {
		return (String) getAttributeValue("cgeneralbb3");
	}

	/**
	 * 获得属性 <出入库单表体ID/cgeneralbid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCgeneralbid() {
		return (String) getAttributeValue("cgeneralbid");
	}

	/**
	 * 获得属性 <出入库单表头ID/cgeneralhid>的值。 用于和单据表头关联
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCgeneralhid() {
		return (String) getAttributeValue("cgeneralhid");
	}

	/**
	 * 属性m_chzl的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getChzl() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("chzl"));
	}

	/**
	 * 获得属性 <存货基本ID/cinvbasid>的值。 材料出库单配比出库时生产的产品 委托加工发料单时的生产产品 期初来料加工的加工品
	 * 来料加工入库的加工品 来料加工出库的加工品
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCinvbasid() {
		return (String) getAttributeValue("cinvbasid");
	}

	/**
	 * 属性m_cinventorycode的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCinventorycode() {
		return (String) getAttributeValue("cinventorycode");
	}

	/**
	 * 获得属性 <存货ID/cinventoryid>的值。 材料出库单配比出库时生产的产品 委托加工发料单时的生产产品 期初来料加工的加工品
	 * 来料加工入库的加工品 来料加工出库的加工品
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCinventoryid() {
		return (String) getAttributeValue("cinventoryid");
	}

	public java.lang.String getCinvmanid() {
		return (String) getAttributeValue("cinvmanid");
	}

	/**
	 * 获得属性 <采购单据到货计划ID/corder_bb1id>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCorder_bb1id() {
		return (String) getAttributeValue("corder_bb1id");
	}

	/**
	 * 属性m_cprojectcode的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCprojectcode() {
		return (String) getAttributeValue("cprojectcode");
	}

	/**
	 * 获得属性 <项目ID/cprojectid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCprojectid() {
		return (String) getAttributeValue("cprojectid");
	}

	/**
	 * 获得属性 <项目/cprojectname>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCprojectname() {
		return (String) getAttributeValue("cprojectname");
	}

	/**
	 * 属性m_cprojectphasecode的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCprojectphasecode() {
		return (String) getAttributeValue("cprojectphasecode");
	}

	/**
	 * 获得属性 <项目阶段ID/cprojectphaseid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCprojectphaseid() {
		return (String) getAttributeValue("cprojectphaseid");
	}

	/**
	 * 获得属性 <项目阶段/cprojectphasename>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCprojectphasename() {
		return (String) getAttributeValue("cprojectphasename");
	}

	/**
	 * 获得属性 <收货单位/creceieveid>的值。 2003-02-18增加，主要用于销售出库单、其他出库单，逐步替换写到 成本对象 上的信息。
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCreceieveid() {
		return (String) getAttributeValue("creceieveid");
	}

	/**
	 * 创建者：王乃军 功能：得到需保存的ID数据 参数： 返回： 例外： 日期：(2001-6-12 19:49:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO getIDItems() {

		GeneralBillItemVO voI = new GeneralBillItemVO();

		voI.setCgeneralbid(getCgeneralbid());
		// m_caccountunitid;
		voI.setCastunitid(getCastunitid());
		// m_castunitnamenull;
		voI.setCcorrespondbid(getCcorrespondbid());
		voI.setCcorrespondcode(getCcorrespondcode());
		voI.setCcorrespondhid(getCcorrespondhid());
		voI.setCcorrespondtype(getCcorrespondtype());
		voI.setCcostobject(getCcostobject());
		// m_cinventorycodenull;
		// m_cinventoryid voI.setCinventoryid();
		// m_isLotMgt;
		// m_isSerialMgt;
		// m_isValidateMgt;
		// m_isAstUOMmgt;
		// m_isFreeItemMgt;
		// m_isSet;
		// m_standStoreUOM;
		// m_defaultAstUOM;
		// m_isSellProxy;
		// m_qualityDay;
		// m_invReservedPty;
		// m_isSolidConvRate;
		voI.setCprojectid(getCprojectid());
		// m_cprojectnamenull;
		// m_csnamenull;
		voI.setCsourcebillbid(getCsourcebillbid());
		voI.setCsourcebillhid(getCsourcebillhid());
		voI.setCsourcetype(getCsourcetype());
		// first id s
		voI.setCfirstbillbid(getCfirstbillbid());
		voI.setCfirstbillhid(getCfirstbillhid());
		voI.setCfirsttype(getCfirsttype());

		voI.setCspaceid(getCspaceid()); // not table field
		voI.setDbizdate(getDbizdate());
		voI.setDstandbydate(getDstandbydate());
		voI.setDvalidate(getDvalidate());
		voI.setFaccflag(getFaccflag());
		voI.setFchecked(getFchecked());
		voI.setFlargess(getFlargess());
		// m_hsl;
		// m_invname;
		// m_invspec;
		// m_invtype;
		voI.setIsok(getIsok());
		// m_jggx; //加工工序
		// 累计转销售辅数量 ljzxsslassist
		// 累计已还回辅数量 ljyhhslassist
		// 累计已还回数量 ljyhhsl
		// 累计转销售数量 ljzxssl
		// 累计已还出数量 ljyhc
		// m_ljyhc;
		// m_ljyhhsl;
		// m_ljyhhslassist;
		// m_ljzxssl;
		// m_ljzxsslassist;
		// m_measdocname;
		voI.setNaccountmny(getNaccountmny());
		voI.setNaccountnum1(getNaccountnum1());
		voI.setNaccountnum2(getNaccountnum2());
		voI.setNinassistnum(getNinassistnum());
		voI.setNinnum(getNinnum());
		// voI.setNleftsum(m_nleftnum);
		voI.setNleftastnum(getNleftastnum());
		voI.setNleftgrsnum(getNleftgrsnum());
		voI.setNretgrossnum(getNretgrossnum());
		voI.setNmny(getNmny());
		voI.setNneedinassistnum(getNneedinassistnum());
		voI.setNoutassistnum(getNoutassistnum());
		voI.setNoutnum(getNoutnum());
		voI.setNplannedmny(getNplannedmny());
		voI.setNplannedprice(getNplannedprice());
		voI.setNprice(getNprice());
		voI.setNretastnum(getNretastnum());
		voI.setNshouldinnum(getNshouldinnum());
		voI.setNshouldoutassistnum(getNshouldoutassistnum());
		voI.setNshouldoutnum(getNshouldoutnum());
		voI.setNsignnum(getNsignnum());
		voI.setNtranoutnum(getNtranoutnum());
		voI.setNtranoutastnum(getNtranoutastnum());
		voI.setPk_measdoc(getPk_measdoc());
		voI.setScrq(getScrq());
		// m_sydhsl;//剩余待还数量
		// m_sydhslassist; //剩余待还辅数量
		voI.setVbatchcode(getVbatchcode());
		// not need m_freevovoI.setFreeItemVO();
		voI.setVproductbatch(getVproductbatch());
		voI.setVsourcebillcode(getVsourcebillcode());

		// voI.setVuserdef1(getVuserdef1());
		// voI.setVuserdef2(getVuserdef2());
		// voI.setVuserdef3(getVuserdef3());
		// voI.setVuserdef4(getVuserdef4());
		// voI.setVuserdef5(getVuserdef5());
		// voI.setVuserdef6(getVuserdef6());
		// voI.setVuserdef7(getVuserdef7());
		// voI.setVuserdef8(getVuserdef8());
		// voI.setVuserdef9(getVuserdef9());
		// voI.setVuserdef10(getVuserdef10());

		for (int i = 1; i <= 20; i++) {
			voI.setAttributeValue("vuserdef" + String.valueOf(i),
					getAttributeValue("vuserdef" + String.valueOf(i)));
			voI.setAttributeValue("pk_defdoc" + String.valueOf(i),
					getAttributeValue("pk_defdoc" + String.valueOf(i)));

		}

		voI.setCreceieveid(getCreceieveid());
		// from 2.30
		voI.setCworkcenterid(getCworkcenterid());
		voI.setCworksiteid(getCworksiteid());

		// if(voI.setLocator()!null)
		// m_locator (LocatorVO[])voI.setLocator().clone();
		// else
		// m_locatornull;
		// if(voI.setSerial()!null)
		// m_serial (SerialVO[])voI.setSerial().clone();
		// else
		// m_serial null;
		voI.setAccount(getAccount());
		voI.setCgeneralhid(getCgeneralhid());
		voI.setCvendorid(getCvendorid());
		voI.setTs(getTs());
		voI.setNingrossnum(getNingrossnum());
		voI.setNoutgrossnum(getNoutgrossnum());
		// 自由项
		if (getAttributeValue("freevo") != null) {
			FreeVO voFreeItem = new FreeVO();
			FreeVO vofree = (FreeVO) getAttributeValue("freevo");
			for (int i = 1; i <= 10; i++)
				voFreeItem.setAttributeValue("vfree" + i, vofree
						.getAttributeValue("vfree" + i));
			voI.setFreeItemVO(voFreeItem);
		}
		// row status????????????????????
		return voI;
	}

	/**
	 * hanwei 功能：获得条码数量 参数： 返回： 例外： 日期：(2004-5-25 14:02:34) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNBarcodenum() {
		nc.vo.pub.lang.UFDouble barcodenum = new nc.vo.pub.lang.UFDouble(0.0);

		if (m_barcode != null && m_barcode.length > 0) {
			for (int i = 0; i < m_barcode.length; i++) {
				if (m_barcode[i].getNnumber() == null)
					barcodenum = barcodenum.add(1.0);
				else
					barcodenum = barcodenum.add(m_barcode[i].getNnumber());
			}
		}
		return barcodenum;
	}

	/**
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-7-16 21:48:42) 修改日期，修改人，修改原因，注释标志：
	 */
	void newMethod() {
	}

	/**
	 * 创建者：王乃军 功能：设置需保存的ID数据 参数： 返回： 例外： 日期：(2001-6-12 19:49:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void setIDItems(GeneralBillItemVO voI) {
		if (voI == null)
			return;

		setCgeneralbid(voI.getCgeneralbid());
		setCrowno(voI.getCrowno());
		// m_caccountunitid;
		setCastunitid(voI.getCastunitid());
		// add below to fix no Astname in LocatorDlg. 2001/11/07
		setCastunitname(voI.getCastunitname());
		// ------------------------------------d
		setCcorrespondbid(voI.getCcorrespondbid());
		setCcorrespondcode(voI.getCcorrespondcode());
		setCcorrespondhid(voI.getCcorrespondhid());
		setCcorrespondtype(voI.getCcorrespondtype());

		setCcostobject(voI.getCcostobject());

		setCprojectid(voI.getCprojectid());
		setCprojectname(voI.getCprojectname());
		// v5: nkdsl
		setAttributeValue("nkdnum", voI.getAttributeValue("nkdnum"));

		setCsourcebillbid(voI.getCsourcebillbid());
		setCsourcebillhid(voI.getCsourcebillhid());
		setCsourcetype(voI.getCsourcetype());
		setVsourcebillcode(voI.getVsourcebillcode());

		// first id s
		setCfirstbillbid(voI.getCfirstbillbid());
		setCfirstbillhid(voI.getCfirstbillhid());
		setCfirsttype(voI.getCfirsttype());

		setCspaceid(voI.getCspaceid()); // not table field
		setVspacename(voI.getVspacename()); 
		setVspacecode(voI.getVspacecode()); 
		setDbizdate(voI.getDbizdate());
		setDstandbydate(voI.getDstandbydate());
		setDvalidate(voI.getDvalidate());
		setFaccflag(voI.getFaccflag());
		setFchecked(voI.getFchecked());
		setFlargess(voI.getFlargess());

		setIsok(voI.getIsok());
		setCwp(voI.getCwp()); // 加工工序

		setNaccoutnum(voI.getNaccountmny());
		setNaccountnum1(voI.getNaccountnum1());
		setNaccountnum2(voI.getNaccountnum2());
		setNinassistnum(voI.getNinassistnum());
		setNinnum(voI.getNinnum());
		setNleftastnum(voI.getNleftastnum());
		setNleftgrsnum(voI.getNleftgrsnum());
		setNretgrossnum(voI.getNretgrossnum());
		setNmny(voI.getNmny());
		setNneedinassistnum(voI.getNneedinassistnum());
		setNoutassistnum(voI.getNoutassistnum());
		setNoutnum(voI.getNoutnum());
		setNplannedmny(voI.getNplannedmny());
		setNplannedprice(voI.getNplannedprice());
		setNprice(voI.getNprice());
		setNsaleprice(voI.getNsaleprice());
		setNsalemny(voI.getNsalemny());
		setNtaxprice(voI.getNtaxprice());
		setNtaxmny(voI.getNtaxmny());
		setNretastnum(voI.getNretastnum());
		setNshouldinnum(voI.getNshouldinnum());
		setNshouldoutassistnum(voI.getNshouldoutassistnum());
		setNshouldoutnum(voI.getNshouldoutnum());
		setNsignnum(voI.getNsignnum());
		setNtranoutnum(voI.getNtranoutnum());
		setNtranoutastnum(voI.getNtranoutastnum());
		setPk_measdoc(voI.getPk_measdoc());
		setScrq(voI.getScrq());
		setNweight(voI.getNweight());
		setNvolume(voI.getNvolume());
		// m_sydhsl;//剩余待还数量
		// m_sydhslassist; //剩余待还辅数量
		setVbatchcode(voI.getVbatchcode());
		// 修改人：刘家清 修改日期：2007-10-29下午01:19:09 修改原因：yangb
		BatchcodeVO voIBatchcode = voI.getBatchCodeVO();
		if (null != voIBatchcode)
			setBatchCodeVO(voIBatchcode);
		else
			setBatchCodeVO(null);

		// not need m_freevo=voI.getFreeItemVO();
		setVproductbatch(voI.getVproductbatch());
		for (int i = 1; i <= 20; i++) {
			setAttributeValue("vuserdef" + String.valueOf(i), voI
					.getAttributeValue("vuserdef" + String.valueOf(i)));
			setAttributeValue("pk_defdoc" + String.valueOf(i), voI
					.getAttributeValue("pk_defdoc" + String.valueOf(i)));

		}

		if (voI.getLocator() != null)
			setLocator((LocatorVO[]) voI.getLocator().clone());
		else
			setLocator(null);
		if (voI.getSerial() != null)
			setSerial((SerialVO[]) voI.getSerial().clone());
		else
			setSerial(null);
		// BarCodeVOs
		if (voI.getBarCodeVOs() != null && voI.getBarCodeVOs().length > 0) {
			m_barcode = (BarCodeVO[]) voI.getBarCodeVOs().clone();

		}

		setAccount(voI.getAccount());
		setCfreezeid(voI.getCfreezeid());
		setCgeneralhid(voI.getCgeneralhid());

		setCvendorid(voI.getCvendorid());
		setVvendorname(voI.getVvendorname());

		setCreceieveid(voI.getCreceieveid());
		setVreceievename(voI.getVreceievename());
		// from 2.30
		// 工作中心
		setCworkcenterid(voI.getCworkcenterid());
		setCworkcentername(voI.getCworkcentername());
		// 投料点
		setCworksiteid(voI.getCworksiteid());
		setCworksitename(voI.getCworksitename());
		// 退货备注
		setVbodynote2(voI.getVbodynote2());
		setVnotebody(voI.getVnotebody());

		// 行状态
		setStatus(voI.getStatus());
		
//		2008.03.12 cy 增加毛重处理 begin
		setNingrossnum(voI.getNingrossnum());
		setNoutgrossnum(voI.getNoutgrossnum());
//		2008.03.12 cy 增加毛重处理 end

		setDesaType(voI.getDesaType());
		setAttributeValue("bonroadflag", voI.getAttributeValue("bonroadflag"));
		setAttributeValue("vvehiclecode", voI.getAttributeValue("vvehiclecode"));
		setAttributeValue("vtransfercode", voI
				.getAttributeValue("vtransfercode"));
		setAttributeValue("nquoteunitnum", voI
				.getAttributeValue("nquoteunitnum"));
		setAttributeValue("ncountnum", voI.getAttributeValue("ncountnum"));

		// v5 lj 支持集中采购
		setAttributeValue("naccumtonum", voI.getAttributeValue("naccumtonum"));// 累积调拨数量
		setAttributeValue("pk_reqcorp", voI.getAttributeValue("pk_reqcorp"));
		setAttributeValue("pk_reqstoorg", voI.getAttributeValue("pk_reqstoorg"));
		setAttributeValue("pk_creqwareid", voI
				.getAttributeValue("pk_creqwareid"));
		setAttributeValue("pk_invoicecorp", voI
				.getAttributeValue("pk_invoicecorp"));

		setAttributeValue("cquotecurrency", voI
				.getAttributeValue("cquotecurrency"));
		setAttributeValue("nquoteprice", voI.getAttributeValue("nquoteprice"));
		setAttributeValue("nquotemny", voI.getAttributeValue("nquotemny"));
		setAttributeValue("nquotentmny", voI.getAttributeValue("nquotentmny"));

		setAttributeValue(IItemKey.bcloseord, voI
				.getAttributeValue(IItemKey.bcloseord));
    
    if(GeneralBillItemVOMeta.extField!=null && GeneralBillItemVOMeta.extField.length>0){
       for(String key : GeneralBillItemVOMeta.extField)
         setAttributeValue(key, voI.getAttributeValue(key));
    }
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2005-2-5 17:01:59) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUpdateCorrespondInfo
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsUpdateCorrespondInfo(
			nc.vo.pub.lang.UFBoolean newUpdateCorrespondInfo) {
		setAttributeValue("isUpdateCorrespondInfo", newUpdateCorrespondInfo);
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2005-1-24 16:25:38) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newSelAstUnitID
	 *            java.lang.String
	 */
	public void setSelAstUnitID(java.lang.String newSelAstUnitID) {
		setAttributeValue("cselastunitid", newSelAstUnitID);
	}

	/**
	 * 属性freeitem的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setVfree0(String sNewValue) {
		FreeVO freevo = (FreeVO) getAttributeValue("freevo");
		if (freevo == null)
			freevo = new FreeVO();
		freevo.setVfree0(sNewValue);
		setAttributeValue("freevo", freevo);
	}

	/**
	 * 此处插入方法说明。 更新序列号出入日期 创建日期：(2003-11-6 14:08:12) 作者：韩卫
	 * 
	 * @param arySerial
	 *            nc.vo.ic.pub.sn.SerialVO[]
	 */
	public void updateSerialDate(SerialVO[] arySerial) {
		int iInOutPty = getInOutFlag();
		UFDate ufDate = getDbizdate();
		if (ufDate == null)
			return;

		if (arySerial == null || arySerial.length == 0)
			return;

		String sDate = ufDate.toString();

		if (iInOutPty == InOutFlag.IN) // 入库
		{
			for (int i = 0; i < arySerial.length; i++) {
				arySerial[i].setDbillindate(sDate);
			}
		}

		if (iInOutPty == InOutFlag.OUT) // 出库
		{
			for (int i = 0; i < arySerial.length; i++) {
				arySerial[i].setDbilloutdate(sDate);
			}
		}

	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @exception nc.vo.pub.ValidationException
	 *                如果验证失败，抛出 ValidationException，对错误进行解释。
	 */
	public void validate() {

		// ArrayList errFields = new ArrayList(); // errFields record those null
		// fields that cannot be null.
		// // 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
		// if (m_cgeneralbid == null) {
		// errFields.add(new String("m_cgeneralbid"));
		// }
		// if (m_cgeneralhid == null) {
		// errFields.add(new String("m_cgeneralhid"));
		// }
		// // construct the exception message:
		// StringBuffer message = new StringBuffer();
		// message.append("下列字段不能为空：");
		// if (errFields.size() > 0) {
		// String[] temp = (String[]) errFields.toArray(new String[0]);
		// message.append(temp[0]);
		// for ( int i= 1; i < temp.length; i++ ) {
		// message.append("、");
		// message.append(temp[i]);
		// }
		// // throw the exception:
		// throw new NullFieldException(message.toString());
		// }
	}

	/**
	 * 给属性 <自定义项1/vuserdef1>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef1(String value) {
		setAttributeValue("vuserdef1", value);
	}

	/**
	 * 获得属性 <行号/crowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCrowno() {
		return (String) getAttributeValue("crowno");
	}

	/**
	 * 获得属性 <来源单据表体序列号/csourcebillbid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsourcebillbid() {
		return (String) getAttributeValue("csourcebillbid");
	}

	/**
	 * 获得属性 <来源单据表头序列号/csourcebillhid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsourcebillhid() {
		return (String) getAttributeValue("csourcebillhid");
	}

	/**
	 * 属性 m_csourceheadts 的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsourcebodyts() {
		return (String) getAttributeValue("csourcebodyts");
	}

	/**
	 * 属性 m_csourceheadts 的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsourceheadts() {
		return (String) getAttributeValue("csourceheadts");
	}

	/**
	 * 获得属性 <来源单据类型/csourcetype>的值。 4K 转库单 4L 库存组装单 4M 库存拆卸单 4N 库存形态转换单 4U 调拨订单
	 * 30 销售订单 31 销售发货单 32 销售发票 21 采购订单 23 采购到货 A3 备料计划 A4 完工报告
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsourcetype() {
		return (String) getAttributeValue("csourcetype");
	}

	/**
	 * 属性m_cspaceid的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCspace2id() {
		return (String) getAttributeValue("cspace2id");
	}

	/**
	 * 属性m_cspaceid的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCspaceid() {
		return (String) getAttributeValue("cspaceid");
	}

	/**
	 * 
	 * 方法功能描述：序列号的ID。
	 * <p>
	 * <b>参数说明</b>
	 * @return
	 * <p>
	 * @author duy
	 * @time 2008-5-29 上午10:01:30
	 */
	public String getCserialid() {
	    return (String) getAttributeValue("cserialid");
	}

	/**
	 * 获得属性 <VMI汇总ID/csumid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsumid() {
		return (String) getAttributeValue("csumid");
	}

	/**
	 * 获得属性 <供应商ID/cvendorid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCvendorid() {
		return (String) getAttributeValue("cvendorid");
	}

	/**
	 * 获得属性 <工作中心主键/cworkcenterid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCworkcenterid() {
		return (String) getAttributeValue("cworkcenterid");
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-16 11:47:45)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCworkcentername() {
		return (String) getAttributeValue("cworkcentername");
	}

	/**
	 * 获得属性 <投料点主键/cworksiteid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCworksiteid() {
		return (String) getAttributeValue("cworksiteid");
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-16 11:47:45)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCworksitename() {
		return (String) getAttributeValue("cworksitename");
	}

	/**
	 * 获得属性 <加工工序/cwp>的值。 材料领用单标示材料使用工序
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCwp() {
		return (String) getAttributeValue("cwp");
	}

	/**
	 * 获得属性 <业务日期/dbizdate>的值。 填实收发数量的日期，或此业务实际发生的日期。
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDbizdate() {
		Object value = getAttributeValue("dbizdate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 属性m_defaultAstUOM的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getDefaultAstUOM() {
		return (String) getAttributeValue("defaultAstUOM");
	}

	/**
	 * 获得属性 <源头单据制单日期/dfirstbilldate>的值。 调拨出入库单据可以根据调拨订单日期查询
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDfirstbilldate() {
		Object value = getAttributeValue("dfirstbilldate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 属性m_pk的Getter方法。
	 * 
	 * 创建日期：(2001-6-19)
	 * 
	 * @return String
	 */
	public UFBoolean getDiscountflag() {
		return SmartVODataUtils.getUFBoolean(getAttributeValue("discountflag"));
	}

	/**
	 * 获得属性 <需求日期/drequiredate>的值。 来源备料计划
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDrequiredate() {
		Object value = getAttributeValue("drequiredate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 获得属性 <需求时间/drequiretime>的值。 来源备料计划
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFTime
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFTime getDrequiretime() {
		Object value = getAttributeValue("drequiretime");
		return SmartVODataUtils.getUFTime(value);
	}

	/**
	 * 获得属性 <备用日期/dstandbydate>的值。 仅用于借入、借出单、期初借入、期初借出作为预还日期。
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDstandbydate() {
		Object value = getAttributeValue("dstandbydate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 获得属性 <失效日期/dvalidate>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDvalidate() {
		Object value = getAttributeValue("dvalidate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 获得属性 <暂估日期/dzgdate>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDzgdate() {
		Object value = getAttributeValue("dzgdate");
		return SmartVODataUtils.getUFDate(value);
	}

	/**
	 * 功能：获得拆解信息VO 参数： 返回： 例外： 日期：(2005-1-20 12:05:45) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.DesassemblyVO
	 */
	public nc.vo.ic.pub.DesassemblyVO getDesassemVO() {
		if (m_voDesassem == null) {
			m_voDesassem = new nc.vo.ic.pub.DesassemblyVO();
		}
		m_voDesassem.setBillAstUnitID(getCastunitid());
		m_voDesassem.setSelAstUnitID(getSelAstUnitID());
		return m_voDesassem;
	}

	/**
	 * 功能：获得拆包方式 参数： 返回： 例外： 日期：(2005-1-20 16:09:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return Integer
	 */
	public Integer getDesaType() {
		Integer iDesatype = CheckTools.toInteger(super.getAttributeValue("idesatype"));
		if (iDesatype == null)
			return new Integer(DesassemblyVO.TYPE_NO);
		return iDesatype;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2005-2-5 17:01:59) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsUpdateCorrespondInfo() {
		Object oisUpdateCorrespondInfo = getAttributeValue("isUpdateCorrespondInfo");
		if (oisUpdateCorrespondInfo != null
				&& oisUpdateCorrespondInfo instanceof UFBoolean)
			return (UFBoolean) oisUpdateCorrespondInfo;
		else
			return new UFBoolean(false);
		// return m_isUpdateCorrespondInfo;
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2005-1-24 16:25:38) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSelAstUnitID() {
		return (String) getAttributeValue("cselastunitid");
	}

	/**
	 * 返回数值对象的显示名称。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return java.lang.String 返回数值对象的显示名称。
	 */
	public String getEntityName() {

		return "GeneralBillBody";
	}

	/**
	 * 属性m_faccflag的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getFaccflag() {
		return SmartVODataUtils.getInteger(getAttributeValue("faccflag"));
	}

	/**
	 * 获得属性 <表体行状态/fbillrowflag>的值。 5已经生成配套单据 其它为未生成配套
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return Integer
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Integer getFbillrowflag() {
		Object value = getAttributeValue("fbillrowflag");
		return SmartVODataUtils.getInteger(value);
	}

	/**
	 * 获得属性 <待检标志/fchecked>的值。 1待检 0非待检 在销售出库单为发运标志：配送系统回写，表示已生成发运清单。
	 * 采购入库单表明该存货是否已检验
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return Integer
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Integer getFchecked() {
		Object value = getAttributeValue("fchecked");
		return SmartVODataUtils.getInteger(value);
	}

	/**
	 * 获得属性 <是否赠品/flargess>的值。 Y:赠品 N:非赠品 采购入库、销售出库使用
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getFlargess() {
		Object value = getAttributeValue("flargess");
		return SmartVODataUtils.getUFBoolean(value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-11-3 20:44:28)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFlargessEdit() {
		return (String) getAttributeValue("isflargessedit");
	}

	/**
	 * 
	 * 创建者：王乃军 功能：此方法是实现FreeItemDeal接口.为后台处理自由项服务. 参数： 返回： 例外： 日期：(2001-6-20
	 * 23:58:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.scm.ic.bill.FreeVO
	 */
	public nc.vo.scm.ic.bill.FreeVO getFreeItemVO() {
		InvVO invvo = (InvVO) super.getAttributeValue("invvo");
		if (invvo != null) {
			// 一般情况下前台不会走到这个地方,因为是为FreeItemDeal接口服务的,而此时后台不会产生InvVO.
			FreeVO voFree = invvo.getFreeItemVO();
			if (voFree != null
					&& (voFree.getVfree0() == null || (voFree.getVfree0() != null && voFree
							.getVfree0().length() <= 0))) {
				String[] vfree = new String[] { "vfree1", "vfree2", "vfree3",
						"vfree4", "vfree5", "vfree6", "vfree7", "vfree8",
						"vfree9", "vfree10" };
				for (int i = 0; i < vfree.length; i++)
					voFree.setAttributeValue(vfree[i], super
							.getAttributeValue(vfree[i]));
			}
			return voFree;
		} else {
			// 由GenMethod来处理自由项.所以如果有自由项[vfree1...vfree10]有值的话,那么要返回一个FreeVO
			FreeVO voFree = null;
			voFree = (FreeVO) super.getAttributeValue("freevo");
			if (voFree == null)
				voFree = new FreeVO();
			String[] vfree = new String[] { "vfree1", "vfree2", "vfree3",
					"vfree4", "vfree5", "vfree6", "vfree7", "vfree8", "vfree9",
					"vfree10" };
			int icount = 0;
			int itemp = 0;
			for (int i = 0; i < vfree.length; i++) {
				if (super.getAttributeValue(vfree[i]) != null
						&& super.getAttributeValue(vfree[i]).toString()
								.length() > 0) {
					voFree.setAttributeValue(vfree[i], super
							.getAttributeValue(vfree[i]));
					icount++;
				}
				itemp = i + 1;
				if (super.getAttributeValue("vfreevalue" + itemp) != null)
					voFree.setAttributeValue("vfreevalue" + itemp, super
							.getAttributeValue("vfreevalue" + itemp));
				if (!GenMethod.isNull((String)super.getAttributeValue("vfreeid" + itemp)))
					voFree.setAttributeValue("vfreeid" + itemp, super
							.getAttributeValue("vfreeid" + itemp));
        if (!GenMethod.isNull((String)voFree.getAttributeValue("vfreeid" + itemp)))
          icount++;
				if (!GenMethod.isNull((String)super.getAttributeValue("vfreename" + itemp)))
					voFree.setAttributeValue("vfreename" + itemp, super
							.getAttributeValue("vfreename" + itemp));
			}
			if (icount > 0) {
				super.setAttributeValue("freevo", voFree);
				return voFree;
			} else
				return null;
		}
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public Object getFreeValue(String name) {
		FreeVO voFree = (FreeVO) super.getAttributeValue("freevo");
		if (voFree != null) {

			return voFree.getAttributeValue(name);
		}
		return null;
	}

	/**
	 * 获得属性 <换算率/hsl>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getHsl() {
		Object value = getAttributeValue("hsl");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 创建者：王乃军 功能：加根据ninnum/noutnum判断出入库属性。 参数： 返回： 例外： 日期：(2001-7-16 21:48:42)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public int getInOutFlag() {
		int iInOut = InOutFlag.SPECIAL;
		// 入数量大于0，或出数量小于0是入库
		if (getNinnum() != null && getNinnum().doubleValue() > 0.0
				|| getNoutnum() != null && getNoutnum().doubleValue() < 0.0)
			iInOut = InOutFlag.IN;
		else // 出数量大于0，或入数量小于0是入库
		if (getNinnum() != null && getNinnum().doubleValue() < 0.0
				|| getNoutnum() != null && getNoutnum().doubleValue() > 0.0)
			iInOut = InOutFlag.OUT;
		return iInOut;
	}

	/**
	 * 功能：设置存货的显示、控制信息 将有可能变的数据从ItemVO中从新得到。 参数： 返回： 例外： 日期：(2001-6-14 15:27:44)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voInv
	 *            nc.vo.scm.ic.bill.InvVO
	 */
	public nc.vo.scm.ic.bill.InvVO getInv() {
		InvVO voInv = (InvVO) super.getAttributeValue("invvo");

		if (voInv == null) {
			voInv = new InvVO();
			voInv.setCinventorycode(getCinventorycode());
			voInv.setInvname(getInvname());
			voInv.setInvspec(getInvspec());
			voInv.setInvtype(getInvtype());
			voInv.setIsLotMgt(getIsLotMgt());
			voInv.setIsSerialMgt(getIsSerialMgt());
			voInv.setIsValidateMgt(getIsValidateMgt());
			voInv.setIsAstUOMmgt(getIsAstUOMmgt());
			voInv.setIsFreeItemMgt(getIsFreeItemMgt());
			voInv.setIsSet(getIsSet());
			voInv.setStandStoreUOM(getStandStoreUOM());
			voInv.setDefaultAstUOM(getDefaultAstUOM());
			voInv.setIsSellProxy(getIsSellProxy());
			voInv.setQualityDay(getQualityDay());
			voInv.setIsSolidConvRate(getIsSolidConvRate());
			voInv.setIscancalculatedinvcost(getIscancalculatedinvcost());
			voInv.setOutpriority(getOutpriority());
			voInv.setOuttrackin(getOuttrackin());
			voInv.setNegallowed(getNegallowed());
			voInv.setIsprimarybarcode(getIsprimarybarcode());
			voInv.setIssecondarybarcode(getIssecondarybarcode());
			voInv.setPk_packsort(getPk_packsort());
			voInv.setVpacktypename((String) getAttributeValue("vpacktypename"));
			voInv.setNunitvolume(getNunitvolume());
			voInv.setNunitweight(getNunitweight());
			voInv.setAttributeValue("issupplierstock",
					getAttributeValue("issupplierstock"));
			voInv.setAttributeValue("ismngstockbygrswt",
					getAttributeValue("ismngstockbygrswt"));
			voInv.setAttributeValue("isstorebyconvert",
					getAttributeValue("isstorebyconvert"));

		}
		voInv.setCinventoryid(getCinventoryid());
		voInv.setCinvmanid(getCinvmanid());
		voInv.setCselastunitid((String) getAttributeValue("cselastunitid"));

		// voInv.setCinventorycode(getCinventorycode());
		// voInv.setInvname(getInvname());
		// voInv.setInvspec(getInvspec());
		// voInv.setInvtype(getInvtype());
		// voInv.setPk_measdoc(getPk_measdoc());
		// voInv.setMeasdocname(getMeasdocname());
		voInv.setCastunitid(getCastunitid());
		voInv.setCastunitname(getCastunitname());
		voInv.setHsl(getHsl());

		voInv.setFreeItemVO(getFreeItemVO());

		// voInv.setIsLotMgt(getIsLotMgt());
		// voInv.setIsSerialMgt(getIsSerialMgt());
		// voInv.setIsValidateMgt(getIsValidateMgt());
		// voInv.setIsAstUOMmgt(getIsAstUOMmgt());
		// voInv.setIsFreeItemMgt(getIsFreeItemMgt());
		// voInv.setIsSet(getIsSet());
		// voInv.setStandStoreUOM(getStandStoreUOM());
		// voInv.setDefaultAstUOM(getDefaultAstUOM());
		// voInv.setIsSellProxy(getIsSellProxy());
		// voInv.setQualityDay(getQualityDay());
		// voInv.setIsSolidConvRate(getIsSolidConvRate());

		// add by ljun
		// voInv.setIscancalculatedinvcost(getIscancalculatedinvcost());

		voInv.setVbatchcode(getVbatchcode());
		voInv.setDvalidate(getDvalidate());
		voInv.setDproducedate(getScrq());

		voInv.setNinnum(getNinnum());
		voInv.setNinassistnum(getNinassistnum());
		voInv.setNoutnum(getNoutnum());
		voInv.setNoutassistnum(getNoutassistnum());
		voInv.setNplannedprice(getNplannedprice());
		// m_flargess;
		// m_faccflag;
		// m_fchecked;
		// voInv.setBkxcl(getBkxcl());
		// voInv.setXczl(getXczl());
		// voInv.setNmaxstocknum(getNmaxstocknum());
		// voInv.setNminstocknum(getNminstocknum());
		// voInv.setNorderpointnum(getNorderpointnum());
		// voInv.setNsafestocknum(getNsafestocknum());
		// voInv.setChzl(getChzl());
		// 表头主键
		voInv.setCgeneralhid(getCgeneralhid());
		// 表体主键
		voInv.setCgeneralbid(getCgeneralbid());
		// 对应入库单据属性
		voInv.setCcorrespondbid(getCcorrespondbid());
		voInv.setCcorrespondcode(getCcorrespondcode());
		voInv.setCcorrespondhid(getCcorrespondhid());
		voInv.setCcorrespondtype(getCcorrespondtype());
		voInv.setCcorrespondtypename(getCcorrespondtypename());
		voInv.setDiscountflag(getDiscountflag());
		voInv.setLaborflag(getLaborflag());

		if (getFreeItemVO() != null)
			voInv.setFreeItemValue("vfree0",
					getFreeItemVO().getWholeFreeItem() == null ? null
							: getFreeItemVO().getWholeFreeItem().toString());
		// voInv.setInvReservedPty(getInvReservedPty());
/*		if (getCfreezeid() == null) {
			if ("A3".equals(getCsourcetype()))
				voInv.setCfreezeid(getCsourcebillbid());
			else
				voInv.setCfreezeid(getCfirstbillbid());
		}*/
		voInv.setCfreezeid(getCfreezeid());

		// voInv.setOutpriority(getOutpriority());
		// voInv.setOuttrackin(getOuttrackin());
		// voInv.setNegallowed(getNegallowed());
		// voInv.setIsprimarybarcode(getIsprimarybarcode());
		// voInv.setIssecondarybarcode(getIssecondarybarcode());
		voInv.setNPacknum(getNpacknum());
		// voInv.setPk_packsort(getPk_packsort());
		// voInv.setVpacktypename((String) getAttributeValue("vpacktypename"));
		// voInv.setNunitvolume(getNunitvolume());
		// voInv.setNunitweight(getNunitweight());
		// public String m_csumid=null;//汇总
		// voInv.setCsumid(m_csumid);
		// voInv.setCvendorid(m_cvendorid);
		// public UFDate m_dzgdate = null; //暂估日期
		// voInv.setDzgdate(m_dzgdate);
		// public boolean
		// m_bIUK_IncludeSourceBodyid=false;//存货唯一键是否包含来源单据表体ID,缺省不包含，用于回写。
		// new inv properties
		// public Integer m_outpriority=null;//出库优先级：先进先出0、后进先出1、按保质期顺序2
		voInv
				.setAttributeValue("ningrossnum",
						getAttributeValue("ningrossnum"));
		voInv.setAttributeValue("noutgrossnum",
				getAttributeValue("noutgrossnum"));
		voInv.setcVendorid(getCvendorid());
		//added by lirr 2009-02-25
		//v56 新需求临时去掉 lirr 2009-03-03
		  voInv.setM_isAsset(getIsAsset());
		return voInv;
	}

	/**
	 * 属性m_invname的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getInvname() {
		return (String) getAttributeValue("invname");
	}

	/**
	 * 属性m_invReservedPty的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getInvReservedPty() {
		return SmartVODataUtils.getInteger(getAttributeValue("invReservedPty"));
	}

	/**
	 * 属性m_invspec的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getInvspec() {
		return (String) getAttributeValue("invspec");
	}

	/**
	 * 属性m_invtype的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getInvtype() {
		return (String) getAttributeValue("invtype");
	}

	/**
	 * 获得存货唯一键,注意和现存量的同名方法一致
	 * 
	 * 创建日期：(2002-4-16)
	 * 
	 * @return String
	 */
	public String getInvUniqueKey() {
		StringBuffer sbKey = new StringBuffer();
		if (isUseUkSetup()) { // 用配置字段 new code of 2002-09-26 .by wnj.
			// ------
			if (isUkUseInvID())
				sbKey.append(getCinventoryid());
			// ==============
			if (isUkUseFreeItem()) {
				String sFreeItem0 = null;
				FreeVO freevo = getFreeItemVO();
				if (freevo == null) {
					freevo = new nc.vo.scm.ic.bill.FreeVO();
				}
				// 叠加
				sFreeItem0 = freevo.getWholeFreeItemValue();
				sbKey.append(sFreeItem0);
			}
			// ------
			if (isUkUseLot())
				sbKey.append(getVbatchcode());
			// ------
			if (isUkUseAstUOM())
				sbKey.append(getCastunitid());
			// --------- 来源单
			if (isUkUseSourcehid())
				sbKey.append(getCsourcebillhid());
			// ---------
			if (isUkUseSourcebid())
				sbKey.append(getCsourcebillbid());
			// --------- 源头单
			if (isUkUseFirsthid())
				sbKey.append(getCfirstbillhid());
			// ---------
			if (isUkUseFirstbid())
				sbKey.append(getCfirstbillbid());
			// --------- 对应单
			if (isUkUseCorrhid())
				sbKey.append(getCcorrespondhid());
			// ---------
			if (isUkUseCorrbid())
				sbKey.append(getCcorrespondbid());
			// add by zhx 表体供应商
			if (getAttributeValue("bUkUseVendorid") != null
					&& ((UFBoolean) getAttributeValue("bUkUseVendorid"))
							.booleanValue())
				sbKey.append(getCvendorid());
		} else { // old code reserved.
			if (getBisIUK_SourceBodyidOnly())
				sbKey.append(getCsourcebillbid());
			else {
				String sFreeItem0 = null;
				FreeVO freevo = getFreeItemVO();
				if (freevo == null) {
					freevo = new nc.vo.scm.ic.bill.FreeVO();
				}
				sFreeItem0 = freevo.getWholeFreeItemValue();
				// 叠加
				sbKey.append(getCinventoryid()).append(sFreeItem0).append(
						getVbatchcode()).append(getCastunitid());
				// 存货唯一键是否包含来源单据表体ID,缺省不包含，用于回写。
				if (getBisIUK_SourceBodyidOnly() && getCsourcebillbid() != null)
					sbKey.append(getCsourcebillbid());
			}
		}
		return sbKey.toString();
	}

	/**
	 * 属性m_isAstUOMmgt的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsAstUOMmgt() {
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isAstUOMmgt"));
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-16 9:55:06)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIscancalculatedinvcost() {
		if (getAttributeValue("iscancalculatedinvcost") == null)
			return new UFBoolean("Y");
		return SmartVODataUtils.getUFBoolean(super
				.getAttributeValue("iscancalculatedinvcost"));
	}

	/**
	 * 属性m_isFreeItemMgt的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsFreeItemMgt() {
		// 如果是否自由项管理属性未赋值并且有自由项vo
		FreeVO freevo = getFreeItemVO();
		if (freevo != null && freevo.hasFreeItem())
			return new Integer(1);
		return new Integer(0);
	}

	/**
	 * 属性m_isLotMgt的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsLotMgt() {
		return SmartVODataUtils.getInteger(super.getAttributeValue("isLotMgt"));
	}

	/**
	 * 获得属性 <结算完毕标志/isok>的值。 Y:结算完毕 N:未结算完(缺省) 采购入库单上表示该入库单已经采购结算完毕。
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getIsok() {
		Object value = super.getAttributeValue("isok");
		return SmartVODataUtils.getUFBoolean(value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-2 14:40:14)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsprimarybarcode() {
		if (super.getAttributeValue("isprimarybarcode") == null)
			return new nc.vo.pub.lang.UFBoolean(false);
		return SmartVODataUtils
				.getUFBoolean(getAttributeValue("isprimarybarcode"));
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-2 14:41:19)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIssecondarybarcode() {
		if (super.getAttributeValue("issecondarybarcode") == null)
			return new nc.vo.pub.lang.UFBoolean(false);
		return SmartVODataUtils
				.getUFBoolean(getAttributeValue("issecondarybarcode"));
	}

	/**
	 * 属性m_isSellProxy的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsSellProxy() {
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isSellProxy"));
	}

	/**
	 * 属性m_isSerialMgt的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsSerialMgt() {
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isSerialMgt"));
	}

	/**
	 * 属性m_isSet的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsSet() {
		return SmartVODataUtils.getInteger(super.getAttributeValue("isSet"));
	}

	/**
	 * 属性m_isSolidConvRate的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsSolidConvRate() {
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isSolidConvRate"));
	}

	/**
	 * 属性m_isValidateMgt的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getIsValidateMgt() {
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isValidateMgt"));
	}

	/**
	 * 此处插入方法说明。 功能：得到当前行的信息。 参数： 返回： 例外： 日期：(2002-9-28 8:44:19)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public String getItemInfo() {
		StringBuffer sbKey = new StringBuffer(nc.vo.ml.NCLangRes4VoTransl
				.getNCLangRes().getStrByID("4008vo", "UPP4008vo-000063")/*
																		 * @res
																		 * "存货："
																		 */);
		sbKey.append(getCinventorycode());
		if (getInvname() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000064")/* @res "，名称：" */);
			sbKey.append(getInvname());
		}
		if (getInvspec() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000065")/* @res "，规格：" */);
			sbKey.append(getInvspec());
		}
		if (getInvtype() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000066")/* @res "，型号：" */);
			sbKey.append(getInvtype());
		}
		if (getFreeItemVO() != null && getFreeItemVO().getVfree0() != null
				&& getFreeItemVO().getVfree0().trim().length() > 0) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000067")/* @res "，自由项：" */);
			sbKey.append(getFreeItemVO().getVfree0().trim());
		}
		if (getVbatchcode() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000068")/* @res "，批次：" */);
			sbKey.append(getVbatchcode());
		}
		if (getCastunitname() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000069")/* @res "，辅单位：" */);
			sbKey.append(getCastunitname());
		}
		if (getMeasdocname() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000070")/* @res "，单位：" */);
			sbKey.append(getMeasdocname());
		}
		if (getNinassistnum() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000071")/* @res "，辅数量：" */);
			sbKey.append(getNinassistnum());
		} else if (getNoutassistnum() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000071")/* @res "，辅数量：" */);
			sbKey.append(getNoutassistnum());
		}
		if (getNinnum() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000072")/* @res "，数量：" */);
			sbKey.append(getNinnum());
		} else if (getNoutnum() != null) {
			sbKey.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
					"4008vo", "UPP4008vo-000072")/* @res "，数量：" */);
			sbKey.append(getNoutnum());
		}

		return sbKey.toString();
	}

	/**
	 * 属性m_jggx的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getJggx() {
		return (String) getAttributeValue("jggx");
	}

	/**
	 * 属性m_pk的Getter方法。
	 * 
	 * 创建日期：(2001-6-19)
	 * 
	 * @return String
	 */
	public UFBoolean getLaborflag() {
		return SmartVODataUtils.getUFBoolean(getAttributeValue("laborflag"));
	}

	/**
	 * 王乃军 功能：获得单据行上冗余的条码数量字段 参数： 返回： 例外： 日期：(2004-9-30 12:03:04)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getListbarcodenums() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nbarcodenum"));
	}

	/**
	 * 属性m_locator的Getter方法。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @return String
	 */
	public LocatorVO[] getLocator() {
		// 获得货位数据
		return (LocatorVO[]) super.getAttributeValue("locator");
		// return m_locator;
	}

	/**
	 * 根类Object的方法,克隆这个VO对象。
	 * 
	 * 创建日期：(2001-6-16)
	 */
	public LocatorVO[] getLocatorClone() {

		// 你在下面复制本VO对象的所有属性：
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		if (locator != null) {
			LocatorVO[] newloc = new LocatorVO[locator.length];
			for (int i = 0; i < locator.length; i++) {
				if (locator[i] != null)
					newloc[i] = (LocatorVO) locator[i].clone();
			}
			return newloc;
		}

		return null;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @return int
	 */
	public int getLocStatus() {
		if (getAttributeValue("iLocStatus") != null)
			return ((Integer) getAttributeValue("iLocStatus")).intValue();
		else
			return 0;
	}

	/**
	 * 属性m_measdocname的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getMeasdocname() {
		return (String) getAttributeValue("measdocname");
	}

	/**
	 * 累计开票数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNaccinvoicenum() {
		return SmartVODataUtils
				.getUFDouble(getAttributeValue("naccinvoicenum"));
	}

	/**
	 * 属性m_naccountmny的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNaccountmny() {

		if (getBB3VO() != null && getBB3VO()[0] != null) {
			return getBB3VO()[0].getNaccountmny();
		}
		return SmartVODataUtils.getUFDouble(getAttributeValue("naccountmny"));
	}

	/**
	 * 属性m_naccountnum1的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNaccountnum1() {

		if (getBB3VO() != null && getBB3VO()[0] != null) {
			return getBB3VO()[0].getNaccountnum1();
		}

		return SmartVODataUtils.getUFDouble(getAttributeValue("naccountnum1"));
	}

	/**
	 * 属性ntoaccountnum的Getter方法。 调出出货结算数量
	 * 
	 * 创建日期：(2005-6-29)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtoaccountnum() {

		if (getBB3VO() != null && getBB3VO()[0] != null) {
			return getBB3VO()[0].getNtoaccountnum();
		}
		return SmartVODataUtils.getUFDouble(getAttributeValue("ntoaccountnum"));
	}

	/**
	 * 属性m_naccountnum2的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNaccountnum2() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("naccountnum2"));
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 14:02:34) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNaccoutnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("naccoutnum"));
	}

	/**
	 * 可开票数量=累计出库数量-已开票数量. 日期：(2004-5-25 14:02:34) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNavlinvoicenum() {
		return SmartVODataUtils
				.getUFDouble(getAttributeValue("navlinvoicenum"));
	}

	/**
	 * 获得属性 <条码数量/nbarcodenum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNbarcodenum() {
		Object value = getAttributeValue("nbarcodenum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <件数/ncountnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNcountnum() {
		Object value = getAttributeValue("ncountnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 属性m_neconomicnum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNeconomicnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("neconomicnum"));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:40:52) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public UFBoolean getNegallowed() {
		if (getAttributeValue("negallowed") == null)
			return new UFBoolean("N");
		return SmartVODataUtils.getUFBoolean(getAttributeValue("negallowed"));
	}

	/**
	 * 获得属性 <实入数量/ninnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNinnum() {
		Object value = getAttributeValue("ninnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <实入辅数量/ninassistnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNinassistnum() {
		Object value = getAttributeValue("ninassistnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <实入数量/ninnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoutgrossnum() {
		Object value = getAttributeValue("noutgrossnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <实入数量/ninnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNingrossnum() {
		Object value = getAttributeValue("ningrossnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 属性m_nleftastsum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNleftastnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nleftastnum"));
	}

	public UFDouble getNleftgrsnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nleftgrsnum"));
	}

	public UFDouble getNretgrossnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nretgrossnum"));
	}

	/**
	 * 属性m_nleftsum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNleftnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nleftnum"));
	}

	/**
	 * 属性m_nmaxstocknum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNmaxstocknum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nmaxstocknum"));
	}

	/**
	 * 属性m_nminstocknum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNminstocknum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nminstocknum"));
	}

	/**
	 * 获得属性 <金额/nmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNmny() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;

		Object value = getAttributeValue("nmny");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <应入辅数量/nneedinassistnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNneedinassistnum() {
		Object value = getAttributeValue("nneedinassistnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 属性m_norderpointnum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNorderpointnum() {
		return SmartVODataUtils
				.getUFDouble(getAttributeValue("norderpointnum"));
	}

	/**
	 * 获得属性 <实出辅数量/noutassistnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoutassistnum() {
		Object value = getAttributeValue("noutassistnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <实出数量/noutnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoutnum() {
		Object value = getAttributeValue("noutnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-17 18:45:19) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNpacknum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("npacknum"));
	}

	/**
	 * 获得属性 <计划金额/nplannedmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNplannedmny() {
		Object value = getAttributeValue("nplannedmny");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <计划单价/nplannedprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNplannedprice() {
		Object value = getAttributeValue("nplannedprice");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <单价/nprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNprice() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;
		Object value = getAttributeValue("nprice");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <已退货辅数量/nreplenishedastnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNreplenishedastnum() {
		Object value = getAttributeValue("nreplenishedastnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <已退货数量/nreplenishednum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNreplenishednum() {
		Object value = getAttributeValue("nreplenishednum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <还回辅数量/nretastnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNretastnum() {
		Object value = getAttributeValue("nretastnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <还回数量/nretnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNretnum() {
		Object value = getAttributeValue("nretnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 属性m_nsafestocknum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNsafestocknum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nsafestocknum"));
	}

	/**
	 * 获得属性 <不含税金额/nsalemny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNsalemny() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;
		Object value = getAttributeValue("nsalemny");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <销售价格/nsaleprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNsaleprice() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;
		Object value = getAttributeValue("nsaleprice");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <应入数量/nshouldinnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNshouldinnum() {
		Object value = getAttributeValue("nshouldinnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <应出辅数量/nshouldoutassistnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNshouldoutassistnum() {
		Object value = getAttributeValue("nshouldoutassistnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <应出数量/nshouldoutnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNshouldoutnum() {
		Object value = getAttributeValue("nshouldoutnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 属性m_nsignnum的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNsignnum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("nsignnum"));
	}

	/**
	 * 获得属性 <含税金额/ntaxmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxmny() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;
		Object value = getAttributeValue("ntaxmny");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <含税单价/ntaxprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxprice() {
		// 修改人：刘家清 修改日期：2007-04-18 修改原因：对于赠品也应该把售价等信息带过来
		// if(getFlargess() != null && getFlargess().booleanValue())
		// return null;
		Object value = getAttributeValue("ntaxprice");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <转出辅数量/ntranoutastnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtranoutastnum() {
		Object value = getAttributeValue("ntranoutastnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性 <转出数量/ntranoutnum>的值。 转采购、转销售数量
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtranoutnum() {
		Object value = getAttributeValue("ntranoutnum");
		return SmartVODataUtils.getUFDouble(value);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNunitvolume() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("unitvolume"));
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNunitweight() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("unitweight"));
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNvolume() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("volume"));
	}

	/**
	 * ?user> 功能：
	 * 
	 * 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNweight() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("weight"));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:38:38) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public Integer getOutpriority() {
		if (getAttributeValue("outpriority") == null)
			return null;
		return new Integer(0);
	}

	/**
	 * 生成价格结算单次数
	 * 
	 * @return
	 */
	public Integer getNpricesettlebill() {
		if (getAttributeValue("npricesettlebill") == null)
			return new Integer(0);
		return SmartVODataUtils
				.getInteger(getAttributeValue("npricesettlebill"));
	}

	/**
	 * 生成价格结算单次数
	 * 
	 * @return
	 */
	public void setNpricesettlebill(Integer inte) {
		super.setAttributeValue("npricesettlebill", inte);
	}

	/**
	 * 此处插入方法说明。 功能：//出库是否跟踪入库单 参数： 返回： 例外： 日期：(2002-4-20 17:39:57)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public UFBoolean getOuttrackin() {
		if (getAttributeValue("outtrackin") == null)
			return new UFBoolean("N");
		return SmartVODataUtils.getUFBoolean(getAttributeValue("outtrackin"));
	}

	public Integer getIsStoreByConvert() {
		if (super.getAttributeValue("isstorebyconvert") == null
				&& super.getAttributeValue("invvo") != null)
			return getInv().getIsStoreByConvert();
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("isstorebyconvert"));
	}

	public Integer getIsmngstockbygrswt() {
		if (super.getAttributeValue("ismngstockbygrswt") == null
				&& super.getAttributeValue("invvo") != null)
			return getInv().getIsmngstockbygrswt();
		return SmartVODataUtils.getInteger(super
				.getAttributeValue("ismngstockbygrswt"));
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-17 14:42:04)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_calbody() {
		return (String) getAttributeValue("pk_calbody");
	}

	/**
	 * 属性m_pk_measdoc的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getPk_measdoc() {
		return (String) getAttributeValue("pk_measdoc");
	}

	/**
	 * 获得属性 <包装类型/pk_packsort>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getPk_packsort() {
		return (String) getAttributeValue("pk_packsort");
	}

	/**
	 * 返回对象标识，用来唯一定位对象。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getPrimaryKey() {

		return (String) getAttributeValue("cgeneralbid");
	}

	/**
	 * 属性m_qualityDay的Getter方法。 保质期 创建日期：(2001-6-16)
	 * 
	 * @return Integer
	 */
	public Integer getQualityDay() {

		return SmartVODataUtils.getInteger(getAttributeValue("qualityDay"));
	}

	/**
	 * 属性m_scrq的Getter方法。 生产日期 创建日期：(2001-6-16)
	 * 
	 * @return UFDate
	 */
	public UFDate getScrq() {
		return SmartVODataUtils.getUFDate(getAttributeValue("scrq"));
	}

	/**
	 * 属性m_serial的Getter方法。
	 * 
	 * 创建日期：(2001-6-15)
	 * 
	 * @return String
	 */
	public nc.vo.ic.pub.sn.SerialVO[] getSerial() {
		return (SerialVO[]) super.getAttributeValue("serial");
	}

	/**
	 * 属性m_serial的Getter方法。
	 * 
	 * 创建日期：(2001-6-15)
	 * 
	 * @return String
	 */
	public nc.vo.ic.pub.sn.SerialVO[] getSerialClone() {
		SerialVO[] serial = (SerialVO[]) super.getAttributeValue("serial");
		if (serial != null) {
			nc.vo.ic.pub.sn.SerialVO[] newSerialVO = new nc.vo.ic.pub.sn.SerialVO[serial.length];
			for (int i = 0; i < serial.length; i++) {
				if (serial[i] != null)
					newSerialVO[i] = (nc.vo.ic.pub.sn.SerialVO) serial[i]
							.clone();
			}
			return newSerialVO;
		} else
			return null;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @return int
	 */
	public int getSnStatus() {
		if ((Integer) getAttributeValue("iSnStatus") != null)
			return ((Integer) getAttributeValue("iSnStatus")).intValue();
		return nc.vo.pub.VOStatus.UNCHANGED;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-21 15:34:42)
	 * 
	 * @return nc.vo.ic.pub.bc.BarCodeVO[]
	 */
	public nc.vo.ic.pub.bc.BarCodeVO[] getSourceBarcode() {
		return m_sourceBarcode;
	}

	/**
	 * 属性m_standStoreUOM的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public UFDouble getStandStoreUOM() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("standStoreUOM"));
	}

	/**
	 * 属性 m_timestamp 的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getTimeStamp() {
		return (String) getAttributeValue("ts");
	}

	/**
	 * 属性 m_timestamp 的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getTs() {
		if (getAttributeValue("ts") != null)
			return getAttributeValue("ts").toString();
		return null;
	}

	/**
	 * 获得属性 <批次号/vbatchcode>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVbatchcode() {
		/*	String vbatchcode=(String) getAttributeValue("vbatchcode");
		if(vbatchcode != null)
			return vbatchcode.trim();
		else
			return null;*/
	   return (String) getAttributeValue("vbatchcode");
	}

	/**
	 * 获得属性 <表体备注2/vbodynote2>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVbodynote2() {
		return (String) getAttributeValue("vbodynote2");
	}

	/**
	 * 获得属性 <对应入库单行号/vcorrespondrowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVcorrespondrowno() {
		return (String) getAttributeValue("vcorrespondrowno");
	}

	/**
	 * 获得属性 <源头单据号/vfirstbillcode>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfirstbillcode() {
		return (String) getAttributeValue("vfirstbillcode");
	}

	/**
	 * 获得属性 <源头单据行号/vfirstrowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfirstrowno() {
		return (String) getAttributeValue("vfirstrowno");
	}

	/**
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getVfree0() {
		return (String) getAttributeValue("vfree0");
	}

	/**
	 * 获得属性 <自由项1/vfree1>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree1() {
		return (String) getAttributeValue("vfree1");
	}

	/**
	 * 获得属性 <自由项10/vfree10>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree10() {
		return (String) getAttributeValue("vfree10");
	}

	/**
	 * 获得属性 <自由项2/vfree2>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree2() {
		return (String) getAttributeValue("vfree2");
	}

	/**
	 * 获得属性 <自由项3/vfree3>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree3() {
		return (String) getAttributeValue("vfree3");
	}

	/**
	 * 获得属性 <自由项4/vfree4>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree4() {
		return (String) getAttributeValue("vfree4");
	}

	/**
	 * 获得属性 <自由项5/vfree5>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree5() {
		return (String) getAttributeValue("vfree5");
	}

	/**
	 * 获得属性 <自由项6/vfree6>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree6() {
		return (String) getAttributeValue("vfree6");
	}

	/**
	 * 获得属性 <自由项7/vfree7>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree7() {
		return (String) getAttributeValue("vfree7");
	}

	/**
	 * 获得属性 <自由项8/vfree8>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree8() {
		return (String) getAttributeValue("vfree8");
	}

	/**
	 * 获得属性 <自由项9/vfree9>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVfree9() {
		return (String) getAttributeValue("vfree9");
	}

	/**
	 * 获得属性 <行备注/vnotebody>的值。 2003-02-18增加 2003-02-20修改字段名称
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVnotebody() {
		return (String) getAttributeValue("vnotebody");
	}

	/**
	 * 声明Meta类
	 * 
	 * 
	 * 无返回值
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Class getVOMetaClass() {
		return GeneralBillItemVOMeta.class;
	}

	/**
	 * 获得属性 <包装类型/vpacksortname>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVpacksortname() {
		return (String) getAttributeValue("vpacksortname");
	}

	/**
	 * 获得属性 <生产订单号/vproductbatch>的值。 仅用于产成品入库
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVproductbatch() {
		return (String) getAttributeValue("vproductbatch");
	}

	/**
	 * 获得属性 <收货单位/vreceievename>的值。 2003-02-18增加，主要用于销售出库单、其他出库单，逐步替换写到 成本对象
	 * 上的信息。
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVreceievename() {
		return (String) getAttributeValue("vreceievename");
	}

	/**
	 * 获得属性 <来源单据号/vsourcebillcode>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVsourcebillcode() {
		return (String) getAttributeValue("vsourcebillcode");
	}

	/**
	 * 获得属性 <来源单据行号/vsourcerowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVsourcerowno() {
		return (String) getAttributeValue("vsourcerowno");
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVspace2code() {
		return (String) getAttributeValue("vspace2code");
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVspace2name() {
		return (String) getAttributeValue("vspace2name");
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVspacecode() {
		return (String) getAttributeValue("vspacecode");
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVspacename() {
		return (String) getAttributeValue("vspacename");
	}

	/**
	 * 
	 * 方法功能描述：序列号。
	 * <p>
	 * <b>参数说明</b>
	 * @return
	 * <p>
	 * @author duy
	 * @time 2008-5-29 上午10:03:36
	 */
	public java.lang.String getVserialcode() {
	    return (String) getAttributeValue("vserialcode");
	}

	/**
	 * 获得属性 <自定义项1/vuserdef1>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef1() {
		return (String) getAttributeValue("vuserdef1");
	}

	/**
	 * 获得属性 <自定义项10/vuserdef10>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef10() {
		return (String) getAttributeValue("vuserdef10");
	}

	/**
	 * 获得属性 <自定义项2/vuserdef2>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef2() {
		return (String) getAttributeValue("vuserdef2");
	}

	/**
	 * 获得属性 <自定义项3/vuserdef3>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef3() {
		return (String) getAttributeValue("vuserdef3");
	}

	/**
	 * 获得属性 <自定义项4/vuserdef4>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef4() {
		return (String) getAttributeValue("vuserdef4");
	}

	/**
	 * 获得属性 <自定义项5/vuserdef5>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef5() {
		return (String) getAttributeValue("vuserdef5");
	}

	/**
	 * 获得属性 <自定义项6/vuserdef6>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef6() {
		return (String) getAttributeValue("vuserdef6");
	}

	/**
	 * 获得属性 <自定义项7/vuserdef7>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef7() {
		return (String) getAttributeValue("vuserdef7");
	}

	/**
	 * 获得属性 <自定义项8/vuserdef8>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef8() {
		return (String) getAttributeValue("vuserdef8");
	}

	/**
	 * 获得属性 <自定义项9/vuserdef9>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVuserdef9() {
		return (String) getAttributeValue("vuserdef9");
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:11:31) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVvendorname() {
		return (String) getAttributeValue("vvendorname");
	}

	/**
	 * 属性m_xczl的Getter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getXczl() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("xczl"));
	}

	/**
	 * 
	 * 方法功能描述：获得客商基本档案ID。
	 * <p>
	 * 
	 * @return 客商基本档案ID
	 *         <p>
	 * @author duy
	 * @time 2007-3-16 下午12:24:30
	 */
	public String getPk_cubasdoc() {
		return (String) getAttributeValue("pk_cubasdoc");
	}

	/**
	 * 货位数据 all zero。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public boolean is0Num() {

		return (getNinnum() == null || getNinnum().equals(ZERO))
				&& (getNinassistnum() == null || getNinassistnum().equals(ZERO))
				&& (getNoutnum() == null || getNoutnum().equals(ZERO))
				&& (getNoutassistnum() == null || getNoutassistnum().equals(
						ZERO));
	}

	/**
	 * 功能：条码是否有修改编辑（在条码编辑框中使用该属性） 参数： 返回： 例外： 日期：(2004-5-24 16:02:19)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isBarcodeUpdate() {
		if (getAttributeValue("bBarcodeUpdate") == null)
			return false;
		else
			return (SmartVODataUtils
					.getUFBoolean(getAttributeValue("bBarcodeUpdate"))
					.booleanValue());
	}

	/**
	 * 货位数据 all zero。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public boolean isLocator0Num() {
		boolean b0 = false;
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		if (locator != null) {
			//
			int b0count = 0;
			for (int j = 0; j < locator.length; j++)
				// 入库
				if ((locator[j].getNinspacenum() == null || locator[j]
						.getNinspacenum().equals(ZERO))
						&& (locator[j].getNinspaceassistnum() == null || locator[j]
								.getNinspaceassistnum().equals(ZERO))
						&& (locator[j].getNoutspacenum() == null || locator[j]
								.getNoutspacenum().equals(ZERO))
						&& (locator[j].getNoutspaceassistnum() == null || locator[j]
								.getNoutspaceassistnum().equals(ZERO)))
					b0count++;
			if (locator.length == b0count)
				b0 = true;
		} else
			b0 = true;
		return b0;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-12-11 18:23:33)
	 * 
	 * @return boolean
	 */
	private boolean isNeedUpdateSnStatus(GeneralBillItemVO voOldItem) {
		// 未修改表体，或修改了表体，并且是相关数据修改了
		boolean bUp = false;
		if (voOldItem == null)
			return bUp;

		String[] itemkeys = new String[] { "cinventoryid", "vbatchcode",
				"vfree1", "vfree2", "vfree3", "vfree4", "vfree5", "vfree6",
				"vfree7", "vfree8", "vfree9", "vfree10" };

		String oNew = null;
		String oOld = null;
		for (int i = 0; i < itemkeys.length; i++) {
			oNew = (String) getAttributeValue(itemkeys[i]);
			oOld = (String) voOldItem.getAttributeValue(itemkeys[i]);
			if (oNew == null && oOld == null)
				continue;

			if ((oNew != null && !oNew.equals(oOld))
					|| (oOld != null && !oOld.equals(oNew))) {
				bUp = true;
				break;
			}

		}
		return bUp;

	}

	/**
	 * 此处插入方法说明。 功能描述: ***如果item被修改了，他们是无条件改为修改----〉应该是相关数据修改了，才修改之，其中相关数据是指：
	 * 
	 * cinventoryid,castunitid,vbatchcode,vfreeXXX,correspondXX（对应入库单）,实收发数量；
	 * 
	 * 
	 * 
	 * 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public boolean isRelDataUpdated(GeneralBillItemVO voOldItem) {
		// 未修改表体，或修改了表体，并且是相关数据修改了
		boolean bUp = false;
		if (voOldItem != null) {
			if (getCinventoryid() != null
					&& !getCinventoryid().equals(voOldItem.getCinventoryid())
					|| getCastunitid() != null
					&& !getCastunitid().equals(voOldItem.getCastunitid())
					|| getVbatchcode() != null
					&& !getVbatchcode().equals(voOldItem.getVbatchcode())
					|| getCcorrespondcode() != null
					&& !getCcorrespondcode().equals(
							voOldItem.getCcorrespondcode())
					|| getNinnum() != null
					&& !getNinnum().equals(voOldItem.getNinnum())
					|| getNinassistnum() != null
					&& !getNinassistnum().equals(voOldItem.getNinassistnum())
					|| getNoutnum() != null
					&& !getNoutnum().equals(voOldItem.getNoutnum())
					|| getNoutassistnum() != null
					&& !getNoutassistnum().equals(voOldItem.getNoutassistnum()))
				bUp = true;
			if (!bUp) {
				// 自由项，不要打乱检查顺序。
				nc.vo.scm.ic.bill.FreeVO voaOldFree = voOldItem.getFreeItemVO();
				if (getFreeItemVO() == null && voaOldFree == null)
					bUp = false;
				else if (getFreeItemVO() == null && voaOldFree != null
						|| getFreeItemVO() != null && voaOldFree == null)
					bUp = true;
				else if (getFreeItemVO() != null && voaOldFree != null) {
					Object oTemp = null, oTempOld = null;
					for (int i = 0; i < nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM; i++) {
						oTemp = getFreeItemVO().getAttributeValue("vfree" + i);
						oTempOld = voaOldFree.getAttributeValue("vfree" + i);
						if (oTemp == null && oTempOld == null)
							bUp = false;
						else if (oTemp == null && oTempOld != null
								|| oTemp != null && oTempOld == null)
							bUp = true;
						else if (oTemp != null && !oTemp.equals(oTempOld))
							bUp = true;
					}
				}
			}
		}
		return bUp;

	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseAstUOM() {
		if (getAttributeValue("bUkUseAstUOM") == null)
			return true;
		else
			return ((UFBoolean) getAttributeValue("bUkUseAstUOM"))
					.booleanValue();
	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 用对应单表体 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseCorrbid() {
		if (getAttributeValue("bUkUseCorrbid") == null)
			return false;
		else
			return ((Boolean) getAttributeValue("bUkUseCorrbid"))
					.booleanValue();
	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 用对应单表头 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseCorrhid() {
		if (getAttributeValue("bUkUseCorrhid") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUkUseCorrhid"))
					.booleanValue();
	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 用源头表体 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseFirstbid() {
		if (getAttributeValue("bUkUseFirstbid") == null)
			return false;
		return ((UFBoolean) getAttributeValue("bUkUseFirstbid")).booleanValue();
	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseFirsthid() {
		if (getAttributeValue("bUkUseFirsthid") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUkUseFirsthid"))
					.booleanValue();
	}

	/**
	 * 此处插入方法说明。 功能：用自由项 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseFreeItem() {
		if (getAttributeValue("bUkUseFreeItem") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUkUseFreeItem"))
					.booleanValue();
	}

	/**
	 * 此处插入方法说明。 功能：用存货。有时需要只用来源单据汇总 参数： 返回： 例外： 日期：(2002-9-26 14:36:09)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseInvID() {
		if (getAttributeValue("bUkUseInvID") == null)
			return true;
		else
			return ((UFBoolean) getAttributeValue("bUkUseInvID"))
					.booleanValue();
	}

	/**
	 * 此处插入方法说明。 功能：用批次 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseLot() {
		if (getAttributeValue("bUkUseLot") == null)
			return true;
		else
			return ((UFBoolean) getAttributeValue("bUkUseLot")).booleanValue();

	}

	/**
	 * 此处插入方法说明。 功能：用来源表体 参数： 返回： 例外： 日期：(2002-9-26 14:36:09)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseSourcebid() {
		if (getAttributeValue("bUkUseSourcebid") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUkUseSourcebid"))
					.booleanValue();

	}

	/**
	 * 此处插入方法说明。 功能：用来源表头 参数： 返回： 例外： 日期：(2002-9-26 14:36:09)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUkUseSourcehid() {
		if (getAttributeValue("bUkUseSourcehid") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUkUseSourcehid"))
					.booleanValue();

	}

	/**
	 * 此处插入方法说明。 功能：存货行主键的设置 参数： 返回： 例外： 日期：(2002-9-26 14:36:09)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 */
	public boolean isUseUkSetup() {
		if (getAttributeValue("bUseUkSetup") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bUseUkSetup"))
					.booleanValue();

	}

	/**
	 * 此处插入方法说明。 功能描述:失效日期是否被修改 输入参数: 返回值: 异常处理: 作者:程起伍 日期:
	 * 
	 * @return boolean
	 */
	public boolean isValidateUpdated() {
		if (getAttributeValue("bValidateUpdate") == null)
			return false;
		else
			return ((UFBoolean) getAttributeValue("bValidateUpdate"))
					.booleanValue();

	}

	/**
	 * 
	 * 
	 * 创建者：王乃军
	 * 
	 * 功能：汇总过的表体存货 货位数量 取反
	 * 
	 * 参数：LocatorVO[] 返回： LocatorVO[] 结果 例外： 日期：(2001-6-26 16:37:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return ArrayList
	 */
	public LocatorVO[] negLocator() {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		locator = negLocator(locator);
		return locator;
	}

	/**
	 * 
	 * 
	 * 创建者：王乃军
	 * 
	 * 功能：汇总过的表体存货 货位数量 取反
	 * 
	 * 参数：LocatorVO[] 返回： LocatorVO[] 结果 例外： 日期：(2001-6-26 16:37:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return ArrayList
	 */
	public LocatorVO[] negLocator(LocatorVO[] voaLocator) {

		// 参数非空检查，如果数量未填，返回被减单据！！！！！。
		if (voaLocator == null || voaLocator.length == 0
				|| voaLocator[0] == null
				|| voaLocator[0].getNinspacenum() == null
				&& voaLocator[0].getNoutspacenum() == null) {
			return voaLocator;
		}
		// 处理删除了货位分配数据的情况。
		if (voaLocator == null)
			voaLocator = new LocatorVO[0];

		for (int i = 0; i < voaLocator.length; i++) {
			// 本行的数量
			if (voaLocator[i].getNinspacenum() != null) {
				voaLocator[i].setNinspacenum(ZERO.sub(voaLocator[i]
						.getNinspacenum()));
			}
			if (voaLocator[i].getNoutspacenum() != null) {
				voaLocator[i].setNoutspacenum(ZERO.sub(voaLocator[i]
						.getNoutspacenum()));
			}
			// 本行的辅数量-传入的辅数量
			if (voaLocator[i].getNinspaceassistnum() != null) {
				voaLocator[i].setNinspaceassistnum(ZERO.sub(voaLocator[i]
						.getNinspaceassistnum()));
			}
			if (voaLocator[i].getNoutspaceassistnum() != null) {
				voaLocator[i].setNoutspaceassistnum(ZERO.sub(voaLocator[i]
						.getNoutspaceassistnum()));
			}
		}
		return voaLocator;
	}

	/**
	 * 属性m_account的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_account
	 *            String
	 */
	public void setAccount(String newAccount) {
		setAttributeValue("account", newAccount);
	}

	/**
	 * 设置属性的值
	 * 
	 * 参数说明: sKey:属性itemkey oValue:属性的值
	 * 
	 * 无返回值
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setAttributeValue(String sKey, Object oValue) {

		if (oValue != null && oValue.toString().length() == 0)
			oValue = null;
		if (SettlementVO.getHashKey().containsKey(sKey)) {
			setBB3Value(sKey, oValue);
		}
	  	if ("vbatchcode".equals(sKey) && null != oValue )
	        super.setAttributeValue(sKey, ((String)oValue).trim());
	   	else
		super.setAttributeValue(sKey, oValue);
		// 修改自由项目等信息，必须同步修改invvo
		if (sKey.indexOf("vfree") != -1) {
			if (super.getAttributeValue("invvo") != null)
				((InvVO) super.getAttributeValue("invvo")).setAttributeValue(
						sKey, oValue);

		}

	}

	/**
	 * 王乃军 功能： 参数： 返回： 例外： 日期：(2004-9-30 12:14:05) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newBarcodeClose
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBarcodeClose(nc.vo.pub.lang.UFBoolean newBarcodeClose) {
		setAttributeValue("bbarcodeclose", newBarcodeClose);
	}

	/**
	 * 功能：条码是否有修改编辑（在条码编辑框中使用该属性） 参数： 返回： 例外： 日期：(2004-5-24 16:02:19)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newBarcodeUpdate
	 *            boolean
	 */
	public void setBarcodeUpdate(boolean newBarcodeUpdate) {
		setAttributeValue("bBarcodeUpdate", new UFBoolean(newBarcodeUpdate));
	}

	/**
	 * 属性m_barcode的Setter方法。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @void
	 */
	public void setBarCodeVOs(nc.vo.ic.pub.bc.BarCodeVO[] barvos) {
		// 获得货位数据
		m_barcode = barvos;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public void setBB3Value(String name, Object value) {
		SettlementVO[] voBB3 = getBB3VO();
		if (voBB3 == null) {
			voBB3 = new nc.vo.ic.pub.settlement.SettlementVO[1];
			voBB3[0] = new nc.vo.ic.pub.settlement.SettlementVO();
		}
		voBB3[0].setAttributeValue(name, value);
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param newBB3
	 *            nc.vo.ic.pub.settlement.SettlementVO[]
	 */
	public void setBB3VO(nc.vo.ic.pub.settlement.SettlementVO[] newBB3) {
		super.setAttributeValue("settlevo", newBB3);
	}

	/**
	 * 给属性 <单据行是否条码关闭/bbarcodeclose>赋值。 考虑的历史数据，有做条码关闭操作的数据，所以为Null的情况表示‘N’
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBbarcodeclose(UFBoolean value) {
		setAttributeValue("bbarcodeclose", value);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-5-31 10:05:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newIUK_SourceBodyidOnly
	 *            boolean
	 */
	public void setBisIUK_SourceBodyidOnly(boolean newIUK_SourceBodyidOnly) {
		setAttributeValue("bIUK_SourceBodyidOnly", new UFBoolean(
				newIUK_SourceBodyidOnly));
	}

	/**
	 * 属性m_bkxcl的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_bkxcl
	 *            UFDouble
	 */
	public void setBkxcl(UFDouble newBkxcl) {

		setAttributeValue("bkxcl", newBkxcl);
	}

	/**
	 * 给属性 <是否返利/breturnprofit>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBreturnprofit(UFBoolean value) {
		setAttributeValue("breturnprofit", value);
	}

	/**
	 * 给属性 <是否价保/bsafeprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBsafeprice(UFBoolean value) {
		setAttributeValue("bsafeprice", value);
	}

	/**
	 * 给属性 <自动补货标志/bsupplyflag>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBsupplyflag(UFBoolean value) {
		setAttributeValue("bsupplyflag", value);
	}

	/**
	 * 给属性 <暂估标志/bzgflag>赋值。 Y:已暂估 N:未暂估(缺省) 采购入库单上标示该入库单是否是暂估单据
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBzgflag(UFBoolean value) {
		setAttributeValue("bzgflag", value);
	}

	/**
	 * 属性m_caccountunitid的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_caccountunitid
	 *            String
	 */
	public void setCaccountunitid(String newCaccountunitid) {

		setAttributeValue("caccountunitid", newCaccountunitid);
	}

	/**
	 * 给属性 <辅计量单位ID/castunitid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCastunitid(String value) {
		setAttributeValue("castunitid", value);
	}

	/**
	 * 给属性 <辅计量单位/castunitname>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCastunitname(String value) {
		setAttributeValue("castunitname", value);
	}

	/**
	 * 给属性 <质检状态ID/ccheckstateid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcheckstateid(String value) {
		setAttributeValue("ccheckstateid", value);
	}

	/**
	 * 给属性 <对应入库单据表体序列号/ccorrespondbid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcorrespondbid(String value) {
		setAttributeValue("ccorrespondbid", value);
	}

	/**
	 * 给属性 <对应入库单单据号/ccorrespondcode>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcorrespondcode(String value) {
		setAttributeValue("ccorrespondcode", value);
	}

	/**
	 * 给属性 <对应入库单序列号/ccorrespondhid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcorrespondhid(String value) {
		setAttributeValue("ccorrespondhid", value);
	}

	/**
	 * 给属性 <对应入库单类型/ccorrespondtype>赋值。 40 库存期初余额 41 库存期初借入单 44 库存期初来料加工单 45
	 * 库存采购入库单 46 库存产成品入库单 47 库存委外加工入库单 48 库存来料加工入库单 49 库存借入单 4A 库存其它入库单 4B
	 * 库存借出还回单
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcorrespondtype(String value) {
		setAttributeValue("ccorrespondtype", value);
	}

	/**
	 * 属性m_ccorrespondtypename的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_ccorrespondtype
	 *            String
	 */
	public void setCcorrespondtypename(String newCcorrespondtypename) {

		setAttributeValue("ccorrespondtypename", newCcorrespondtypename);
	}

	/**
	 * 给属性 <成本对象ID/ccostobject>赋值。 对于销售出库单、其他出库单，目前用于存储收货单位
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcostobject(String value) {
		setAttributeValue("ccostobject", value);
	}

	/**
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-11-30 14:41:00) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_ccostobjectid
	 *            java.lang.String
	 */
	public void setCcostobjectName(java.lang.String newM_ccostobjectname) {
		setAttributeValue("ccostobjectname", newM_ccostobjectname);
	}

	/**
	 * 给属性 <源头单据表体ID/cfirstbillbid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfirstbillbid(String value) {
		setAttributeValue("cfirstbillbid", value);
	}

	/**
	 * 给属性 <源头单据表头ID/cfirstbillhid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfirstbillhid(String value) {
		setAttributeValue("cfirstbillhid", value);
	}

	/**
	 * 给属性 <源头单据类型/cfirsttype>赋值。 30 销售订单 31 销售发货单 32 销售发票 21 采购订单 23 采购到货
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfirsttype(String value) {
		setAttributeValue("cfirsttype", value);
	}

	/**
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-10-23 12:45:44) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_cfirsttypename
	 *            java.lang.String
	 */
	public void setCfirsttypename(java.lang.String newM_cfirsttypename) {
		setAttributeValue("cfirsttypename", newM_cfirsttypename);
	}

	/**
	 * 给属性 <锁定来源/cfreezeid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfreezeid(String value) {
		setAttributeValue("cfreezeid", value);
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param newM_cgeneralbb3
	 *            java.lang.String
	 */
	public void setCgeneralbb3(java.lang.String newM_cgeneralbb3) {
		setAttributeValue("cgeneralbb3", newM_cgeneralbb3);
	}

	/**
	 * 给属性 <出入库单表体ID/cgeneralbid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCgeneralbid(String value) {
		setAttributeValue("cgeneralbid", value);
	}

	/**
	 * 给属性 <出入库单表头ID/cgeneralhid>赋值。 用于和单据表头关联
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCgeneralhid(String value) {
		setAttributeValue("cgeneralhid", value);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-5-29 20:35:55) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_ccheckstateid
	 *            java.lang.String
	 */
	public void setCheckstateid(java.lang.String newM_ccheckstateid) {
		setAttributeValue("ccheckstateid", newM_ccheckstateid);
	}

	/**
	 * 属性m_chzl的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_chzl
	 *            UFDouble
	 */
	public void setChzl(UFDouble newChzl) {

		setAttributeValue("chzl", newChzl);
	}

	/**
	 * 给属性 <存货基本ID/cinvbasid>赋值。 材料出库单配比出库时生产的产品 委托加工发料单时的生产产品 期初来料加工的加工品
	 * 来料加工入库的加工品 来料加工出库的加工品
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCinvbasid(String value) {
		setAttributeValue("cinvbasid", value);
	}

	/**
	 * 属性m_cinventorycode的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_cinventorycode
	 *            String
	 */
	public void setCinventorycode(String newCinventorycode) {

		setAttributeValue("cinventorycode", newCinventorycode);
	}

	/**
	 * 给属性 <存货ID/cinventoryid>赋值。 材料出库单配比出库时生产的产品 委托加工发料单时的生产产品 期初来料加工的加工品
	 * 来料加工入库的加工品 来料加工出库的加工品
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCinventoryid(String value) {
		setAttributeValue("cinventoryid", value);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-26 14:20:49) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_cinvmanid
	 *            java.lang.String
	 */
	public void setCinvmanid(java.lang.String newM_cinvmanid) {
		setAttributeValue("cinvmanid", newM_cinvmanid);
		setAttributeValue("cinvbasid", newM_cinvmanid);
	}

	/**
	 * 给属性 <采购单据到货计划ID/corder_bb1id>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCorder_bb1id(String value) {
		setAttributeValue("corder_bb1id", value);
	}

	/**
	 * 属性m_cprojectcode的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_cprojectcode
	 *            String
	 */
	public void setCprojectcode(String newCprojectcode) {

		setAttributeValue("cprojectcode", newCprojectcode);
	}

	/**
	 * 给属性 <项目ID/cprojectid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCprojectid(String value) {
		setAttributeValue("cprojectid", value);
	}

	/**
	 * 给属性 <项目/cprojectname>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCprojectname(String value) {
		setAttributeValue("cprojectname", value);
	}

	/**
	 * 属性m_cprojectphasecode的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_cprojectcode
	 *            String
	 */
	public void setCprojectphasecode(String newCprojectphasecode) {

		setAttributeValue("cprojectphasecode", newCprojectphasecode);
	}

	/**
	 * 给属性 <项目阶段ID/cprojectphaseid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCprojectphaseid(String value) {
		setAttributeValue("cprojectphaseid", value);
	}

	/**
	 * 给属性 <项目阶段/cprojectphasename>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCprojectphasename(String value) {
		setAttributeValue("cprojectphasename", value);
	}

	/**
	 * 给属性 <收货单位/creceieveid>赋值。 2003-02-18增加，主要用于销售出库单、其他出库单，逐步替换写到 成本对象 上的信息。
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCreceieveid(String value) {
		setAttributeValue("creceieveid", value);
	}

	/**
	 * 给属性 <行号/crowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCrowno(String value) {
		setAttributeValue("crowno", value);
	}

	/**
	 * 给属性 <来源单据表体序列号/csourcebillbid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsourcebillbid(String value) {
		setAttributeValue("csourcebillbid", value);
	}

	/**
	 * 给属性 <来源单据表头序列号/csourcebillhid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsourcebillhid(String value) {
		setAttributeValue("csourcebillhid", value);
	}

	/**
	 * 属性 m_csourceheadts 的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_account
	 *            String
	 */
	public void setCsourcebodyts(String newAccount) {

		setAttributeValue("csourcebodyts", newAccount);
	}

	/**
	 * 属性 m_csourceheadts 的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_account
	 *            String
	 */
	public void setCsourceheadts(String newAccount) {

		setAttributeValue("csourceheadts", newAccount);
	}

	/**
	 * 给属性 <来源单据类型/csourcetype>赋值。 4K 转库单 4L 库存组装单 4M 库存拆卸单 4N 库存形态转换单 4U 调拨订单
	 * 30 销售订单 31 销售发货单 32 销售发票 21 采购订单 23 采购到货 A3 备料计划 A4 完工报告
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsourcetype(String value) {
		setAttributeValue("csourcetype", value);
	}

	/**
	 * 属性m_cspaceid的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_cspaceid
	 *            String
	 */
	public void setCspace2id(String newCspaceid) {

		setAttributeValue("cspace2id", newCspaceid);
	}

	/**
	 * 属性m_cspaceid的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_cspaceid
	 *            String
	 */
	public void setCspaceid(String newCspaceid) {

		setAttributeValue("cspaceid", newCspaceid);
	}

	/**
	 * 
	 * 方法功能描述：序列号的ID。
	 * <p>
	 * <b>参数说明</b>
	 * @param cserialid
	 * <p>
	 * @author duy
	 * @time 2008-5-29 上午10:02:33
	 */
	public void setCserialid(String cserialid) {
	    setAttributeValue("cserialid", cserialid);
	}

	/**
	 * 给属性 <VMI汇总ID/csumid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsumid(String value) {
		setAttributeValue("csumid", value);
	}

	/**
	 * 给属性 <供应商ID/cvendorid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCvendorid(String value) {
		setAttributeValue("cvendorid", value);
	}

	/**
	 * 给属性 <工作中心主键/cworkcenterid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCworkcenterid(String value) {
		setAttributeValue("cworkcenterid", value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-16 11:47:45)
	 * 
	 * @param newM_cworkcentername
	 *            java.lang.String
	 */
	public void setCworkcentername(java.lang.String newM_cworkcentername) {
		setAttributeValue("cworkcentername", newM_cworkcentername);
	}

	/**
	 * 给属性 <投料点主键/cworksiteid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCworksiteid(String value) {
		setAttributeValue("cworksiteid", value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-16 11:47:45)
	 * 
	 * @param newM_cworksitename
	 *            java.lang.String
	 */
	public void setCworksitename(java.lang.String newM_cworksitename) {
		setAttributeValue("cworksitename", newM_cworksitename);
	}

	/**
	 * 给属性 <加工工序/cwp>赋值。 材料领用单标示材料使用工序
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCwp(String value) {
		setAttributeValue("cwp", value);
	}

	/**
	 * 给属性 <业务日期/dbizdate>赋值。 填实收发数量的日期，或此业务实际发生的日期。
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDbizdate(UFDate value) {
		setAttributeValue("dbizdate", value);
	}

	/**
	 * 属性m_defaultAstUOM的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_defaultAstUOM
	 *            String
	 */
	public void setDefaultAstUOM(String newDefaultAstUOM) {

		setAttributeValue("defaultAstUOM", newDefaultAstUOM);
	}

	/**
	 * 给属性 <源头单据制单日期/dfirstbilldate>赋值。 调拨出入库单据可以根据调拨订单日期查询
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDfirstbilldate(UFDate value) {
		setAttributeValue("dfirstbilldate", value);
	}

	/**
	 * 属性m_pk的setter方法。
	 * 
	 * 创建日期：(2001-6-19)
	 * 
	 * @param newM_pk
	 *            String
	 */
	public void setDiscountflag(UFBoolean newPk) {

		setAttributeValue("discountflag", newPk);
	}

	/**
	 * 创建者：王乃军 功能：清空不需保存的数据，数量类型的数据无需清空。 参数： 返回： 例外： 日期：(2001-6-12 19:49:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void setDispItemNull() {
		// m_cgeneralbid;
		// m_caccountunitid;
		// m_castunitid;
		setCastunitname(null);
		// m_ccorrespondbid;
		// m_ccorrespondcode;
		// m_ccorrespondhid;
		// m_ccorrespondtype;
		// m_ccostobject;
		setCinventorycode(null);
		// m_cinventoryid;
		// m_isLotMgt;
		// m_isSerialMgt;
		// m_isValidateMgt;
		// m_isAstUOMmgt;
		// m_isFreeItemMgt;
		// m_isSet;
		// m_standStoreUOM;
		// m_defaultAstUOM;
		// m_isSellProxy;
		// m_qualityDay;
		// m_invReservedPty;
		// m_isSolidConvRate;
		// m_cprojectid;
		setCprojectname(null);
		setVspacecode(null);
		setVspacename(null);
		setVspace2code(null);
		setVspace2name(null);
		// m_csourcebillbid;
		// m_csourcebillhid;
		// m_csourcetype;
		// m_cspaceid;
		// m_dbizdate;
		// m_dstandbydate;
		// m_dvalidate;
		// m_faccflag;
		// m_fchecked;
		// m_flargess;
		// m_hsl;
		// m_invname;
		// m_invspec;
		// m_invtype;
		// m_isok;
		// m_jggx;
		// m_ljyhc;
		// m_ljyhhsl;
		// m_ljyhhslassist;
		// m_ljzxssl;
		// m_ljzxsslassist;
		// m_measdocname;
		// m_naccountmny;
		// m_naccountnum1;
		// m_naccountnum2;
		// m_ninassistnum;
		// m_ninnum;
		// m_nleftastsum;
		// m_nmny;
		// m_nneedinassistnum;
		// m_noutassistnum;
		// m_noutnum;
		// m_nplannedmny;
		// m_nplannedprice;
		// m_nprice;
		// m_nretastsum;
		// m_nshouldinnum;
		// m_nshouldoutassistnum;
		// m_nshouldoutnum;
		// m_nsignnum;
		// m_ntopurchastsum;
		// m_ntranoutnum;
		// m_pk_measdoc;
		setScrq(null);
		// m_sydhsl;
		// m_sydhslassist;
		// m_vbatchcode;
		// m_vfree0;
		// m_vfree1;
		// m_vfree2;
		// m_vfree3;
		// m_vfree4;
		// m_vfree5;
		// m_vfree6;
		// m_vfree7;
		// m_vfree8;
		// m_vfree9;
		// m_vfree10;
		// m_vproductbatch;
		// m_vsourcebillcode;
		// m_vuserdef1;
		// m_vuserdef2;
		// m_vuserdef3;
		// m_vuserdef4;
		// m_vuserdef5;
		// m_vuserdef6;
		// m_locator;
		// m_serial;
		// m_account;
		// m_cgeneralhid;

	}

	/**
	 * 给属性 <需求日期/drequiredate>赋值。 来源备料计划
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDrequiredate(UFDate value) {
		setAttributeValue("drequiredate", value);
	}

	/**
	 * 给属性 <需求时间/drequiretime>赋值。 来源备料计划
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDrequiretime(UFTime value) {
		setAttributeValue("drequiretime", value);
	}

	/**
	 * 给属性 <备用日期/dstandbydate>赋值。 仅用于借入、借出单、期初借入、期初借出作为预还日期。
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDstandbydate(UFDate value) {
		setAttributeValue("dstandbydate", value);
	}

	/**
	 * 给属性 <失效日期/dvalidate>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDvalidate(UFDate value) {
		setAttributeValue("dvalidate", value);
	}

	/**
	 * 给属性 <暂估日期/dzgdate>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDzgdate(UFDate value) {
		setAttributeValue("dzgdate", value);
	}

	/**
	 * 功能：设置拆包方式 参数： 返回： 例外： 日期：(2005-1-20 16:09:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newDesaType
	 *            Integer
	 */
	public void setDesaType(Integer newDesaType) {
		super.setAttributeValue("idesatype", newDesaType);
	}

	/**
	 * 功能：设置拆解信息VO 参数： 返回： 例外： 日期：(2005-1-20 12:05:45) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newDesassem
	 *            nc.vo.ic.pub.DesassemblyVO
	 */
	public void setDesassemVO(nc.vo.ic.pub.DesassemblyVO newDesassem) {
		m_voDesassem = newDesassem;

	}

	/**
	 * 属性m_faccflag的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_faccflag
	 *            Integer
	 */
	public void setFaccflag(Integer newFaccflag) {

		setAttributeValue("faccflag", newFaccflag);
	}

	/**
	 * 给属性 <表体行状态/fbillrowflag>赋值。 5已经生成配套单据 其它为未生成配套
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFbillrowflag(Integer value) {
		setAttributeValue("fbillrowflag", value);
	}

	/**
	 * 给属性 <待检标志/fchecked>赋值。 1待检 0非待检 在销售出库单为发运标志：配送系统回写，表示已生成发运清单。
	 * 采购入库单表明该存货是否已检验
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFchecked(Integer value) {
		setAttributeValue("fchecked", value);
	}

	/**
	 * 给属性 <是否赠品/flargess>赋值。 Y:赠品 N:非赠品 采购入库、销售出库使用
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFlargess(UFBoolean value) {
		setAttributeValue("flargess", value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-11-3 20:44:28)
	 * 
	 * @param newFlargessEdit
	 *            java.lang.String
	 */
	public void setFlargessEdit(java.lang.String newFlargessEdit) {
		setAttributeValue("isflargessedit", newFlargessEdit);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-20 23:58:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_freevo
	 *            nc.vo.scm.ic.bill.FreeVO
	 */
	public void setFreeItemVO(nc.vo.scm.ic.bill.FreeVO newM_freevo) {
		// default is not
		// setIsFreeItemMgt(new Integer(0));
		if (newM_freevo != null) {
			//FreeVO freevo = getFreeItemVO();
      FreeVO freevo = (nc.vo.scm.ic.bill.FreeVO) newM_freevo.clone();
			// Object oFree = null;
			int i = 0;
			for (i = 1; i <= nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM; i++) {
				// oFree = newM_freevo.getAttributeValue("vfreeid" + i);
				// if (oFree != null && oFree.toString().trim().length() > 0)
				// break;
				super.setAttributeValue("vfree" + i, freevo
						.getAttributeValue("vfree" + i));
			}
			super.setAttributeValue("freevo", freevo);
			// is freeitem management.
			// if (i <= nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM)
			// setIsFreeItemMgt(new Integer(1));
		}
	}
  
  /**
   * 
   * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-20 23:58:17) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param newM_freevo
   *            nc.vo.scm.ic.bill.FreeVO
   */
  public void setFreeVODefine(nc.vo.scm.ic.bill.FreeVO newM_freevo) {
    // default is not
    // setIsFreeItemMgt(new Integer(0));
    if (newM_freevo != null) {
      FreeVO freevo = getFreeItemVO();
      if(freevo==null){
        freevo = (nc.vo.scm.ic.bill.FreeVO) newM_freevo.clone();
      }else{
        freevo.setDefine(newM_freevo);
      }
      super.setAttributeValue("freevo", freevo);
    }
  }

	/**
	 * 给属性 <换算率/hsl>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setHsl(UFDouble value) {
		setAttributeValue("hsl", value);
	}

	/**
	 * 创建者：hanwei 功能：设置需保存的条码数据 用于从保存条码后（结果是不保存条码），清空前台条码信息 参数： 返回： 例外：
	 * 日期：(2001-6-12 19:49:46) 修改日期，修改人，修改原因，注释标志：
	 */
	public void setIDClearBarcodeItems(GeneralBillItemVO voI) {
		if (voI == null)
			return;
		if (voI.getBarCodeVOs() == null || voI.getBarCodeVOs().length == 0) {
			m_barcode = null;
		}

	}

	/**
	 * 创建者：王乃军 功能：设置存货的显示、控制信息 参数： 返回： 例外： 日期：(2001-6-14 15:27:44)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voInv
	 *            nc.vo.scm.ic.bill.InvVO
	 */
	public void setInv(nc.vo.scm.ic.bill.InvVO voInv) {
		if (voInv == null)
			return;
		setAttributeValue("cinventoryid", voInv.getCinventoryid());
		setAttributeValue("cinvmanid", voInv.getCinvmanid());
		setAttributeValue("cinvbasid", voInv.getCinvbaseid());
		setAttributeValue("cinventorycode", voInv.getCinventorycode());
		setAttributeValue("invname", voInv.getInvname());
		setAttributeValue("invspec", voInv.getInvspec());
		setAttributeValue("invtype", voInv.getInvtype());
		setAttributeValue("pk_measdoc", voInv.getPk_measdoc());
		setAttributeValue("measdocname", voInv.getMeasdocname());
		setAttributeValue("castunitid", voInv.getCastunitid());
		setAttributeValue("castunitname", voInv.getCastunitname());
		setAttributeValue("hsl", voInv.getHsl());
		if (voInv.getFreeItemVO() != null) {
			super.setAttributeValue("freevo", voInv.getFreeItemVO().clone());
		}
		setAttributeValue("isLotMgt", voInv.getIsLotMgt());
		setAttributeValue("isSerialMgt", voInv.getIsSerialMgt());
		setAttributeValue("isValidateMgt", voInv.getIsValidateMgt());
		setAttributeValue("isAstUOMmgt", voInv.getIsAstUOMmgt());
		setAttributeValue("isFreeItemMgt", voInv.getIsFreeItemMgt());
		setAttributeValue("isSet", voInv.getIsSet());
		setAttributeValue("standStoreUOM", voInv.getStandStoreUOM());
		setAttributeValue("defaultAstUOM", voInv.getDefaultAstUOM());
		setAttributeValue("isSellProxy", voInv.getIsSellProxy());
		setAttributeValue("qualityDay", voInv.getQualityDay());
		// add by ljun
		setAttributeValue("iscancalculatedinvcost", voInv
				.getIscancalculatedinvcost());
		;

		setAttributeValue("isSolidConvRate", voInv.getIsSolidConvRate());
		if (getAttributeValue("isSolidConvRate") != null
				&& ((Integer) getAttributeValue("isSolidConvRate")).intValue() == 1)
			setAttributeValue("fixedflag", "Y");
		else
			setAttributeValue("fixedflag", "N");

		setIsStoreByConvert(voInv.getIsStoreByConvert());

		setIsmngstockbygrswt(voInv.getIsmngstockbygrswt());

		// ===============
		setAttributeValue("vbatchcode", voInv.getVbatchcode());
		setAttributeValue("dvalidate", voInv.getDvalidate());
		setAttributeValue("scrq", voInv.getDproducedate());
		// m_vbatchcode;
		// m_dvalidate;
		// m_ninnum;
		// m_ninassistnum;
		// m_noutnum;
		// m_noutassistnum;
		setAttributeValue("nplannedprice", voInv.getNplannedprice());
		// m_flargess;
		// m_faccflag;
		// m_fchecked;
		setAttributeValue("bkxcl", voInv.getBkxcl());
		setAttributeValue("xczl", voInv.getXczl());
		setAttributeValue("nmaxstocknum", voInv.getNmaxstocknum());
		setAttributeValue("nminstocknum", voInv.getNminstocknum());
		setAttributeValue("norderpointnum", voInv.getNorderpointnum());
		setAttributeValue("nsafestocknum", voInv.getNsafestocknum());
		setAttributeValue("chzl", voInv.getChzl());

		// 以下是getInvVO()的代码，
		// setInvVO中没有对应的设置。
		// 表头主键
		// voInv.setCgeneralhid(m_cgeneralhid);
		// //表体主键
		// voInv.setCgeneralbid(m_cgeneralbid);
		// //对应入库单据属性
		// voInv.setCcorrespondbid(m_ccorrespondbid);
		// voInv.setCcorrespondcode(m_ccorrespondcode);
		// voInv.setCcorrespondhid(m_ccorrespondhid);
		// voInv.setCcorrespondtype(m_ccorrespondtype);
		// voInv.setCcorrespondtypename(m_ccorrespondtypename);

		// m_vfree0;
		setAttributeValue("invReservedPty", voInv.getInvReservedPty());
		setAttributeValue("discountflag", voInv.getDiscountflag());
		setAttributeValue("laborflag", voInv.getLaborflag());
		setAttributeValue("cfreezeid", voInv.getCfreezeid());

		setAttributeValue("outpriority", voInv.getOutpriority());
		setAttributeValue("outtrackin", voInv.getOuttrackin());
		setAttributeValue("negallowed", voInv.getNegallowed());

		setAttributeValue("isprimarybarcode", voInv.getIsprimarybarcode());

		setAttributeValue("issecondarybarcode", voInv.getIssecondarybarcode());

		setAttributeValue("npacknum", voInv.getNPacknum());
		setAttributeValue("pk_packsort", voInv.getPk_packsort());
		setAttributeValue("vpacktypename", voInv.getVpacktypename());

		setAttributeValue("nunitvolume", voInv.getNunitvolume());
		setAttributeValue("nunitweight", voInv.getNunitweight());
		setAttributeValue("autobalancemeas", voInv
				.getAttributeValue("autobalancemeas"));
		setAttributeValue("issupplierstock", voInv
				.getAttributeValue("issupplierstock"));
		setAttributeValue("ismngstockbygrswt", voInv
				.getAttributeValue("ismngstockbygrswt"));

		setAttributeValue("isstorebyconvert", voInv
				.getAttributeValue("isstorebyconvert"));
		//added by lirr 2009-02-25
		setAttributeValue("isAsset", voInv.getM_isAsset());
		setAttributeValue("invvo", voInv);

	}

	/**
	 * 属性m_invname的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_invname
	 *            String
	 */
	public void setInvname(String newInvname) {

		setAttributeValue("invname", newInvname);
	}

	/**
	 * 创建者：王乃军 功能：设置存货的显示、控制信息,本方法是为推式生成库存单据VO重置各个存货属性而增加的。 不重置自由项，辅计量和存货ID 参数：
	 * 返回： 例外： 日期：(2001-6-14 15:27:44) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voInv
	 *            nc.vo.scm.ic.bill.InvVO
	 */
	public void setInvPartly(nc.vo.scm.ic.bill.InvVO voInv) {
		if (voInv == null)
			return;

		// m_cinventoryid = voInv.getCinventoryid();
		// m_cinvmanid = voInv.getCinvmanid();
		setAttributeValue("cinvbasid", voInv.getCinvmanid());
		setAttributeValue("cinventorycode", voInv.getCinventorycode());
		setAttributeValue("invname", voInv.getInvname());
		setAttributeValue("invspec", voInv.getInvspec());
		setAttributeValue("invtype", voInv.getInvtype());
		setAttributeValue("pk_measdoc", voInv.getPk_measdoc());
		setAttributeValue("measdocname", voInv.getMeasdocname());
		// m_castunitid = voInv.getCastunitid();
		// m_castunitname = voInv.getCastunitname();
		// m_hsl = voInv.getHsl();
		// if (voInv.getFreeItemVO() != null)
		// m_freevo = (FreeVO) voInv.getFreeItemVO().clone();

		setAttributeValue("isLotMgt", voInv.getIsLotMgt());
		setAttributeValue("isSerialMgt", voInv.getIsSerialMgt());
		setAttributeValue("isValidateMgt", voInv.getIsValidateMgt());
		setAttributeValue("isAstUOMmgt", voInv.getIsAstUOMmgt());
		setAttributeValue("isFreeItemMgt", voInv.getIsFreeItemMgt());
		setAttributeValue("isSet", voInv.getIsSet());
		setAttributeValue("standStoreUOM", voInv.getStandStoreUOM());
		setAttributeValue("defaultAstUOM", voInv.getDefaultAstUOM());
		setAttributeValue("isSellProxy", voInv.getIsSellProxy());
		setAttributeValue("qualityDay", voInv.getQualityDay());
		setAttributeValue("isSolidConvRate", voInv.getIsSolidConvRate());
		setAttributeValue("autobalancemeas", voInv
				.getAttributeValue("autobalancemeas"));
		setAttributeValue("issupplierstock", voInv
				.getAttributeValue("issupplierstock"));
		setAttributeValue("ismngstockbygrswt", voInv
				.getAttributeValue("ismngstockbygrswt"));

		setAttributeValue("isstorebyconvert", voInv
				.getAttributeValue("isstorebyconvert"));

		setAttributeValue("nplannedprice", voInv.getNplannedprice());

		setAttributeValue("bkxcl", voInv.getBkxcl());
		setAttributeValue("xczl", voInv.getXczl());
		setAttributeValue("nmaxstocknum", voInv.getNmaxstocknum());
		setAttributeValue("nminstocknum", voInv.getNminstocknum());
		setAttributeValue("norderpointnum", voInv.getNorderpointnum());
		setAttributeValue("nsafestocknum", voInv.getNsafestocknum());

		// 以下是getInvVO()的代码，
		// setInvVO中没有对应的设置。
		// 表头主键
		// voInv.setCgeneralhid(m_cgeneralhid);
		// //表体主键
		// voInv.setCgeneralbid(m_cgeneralbid);
		// //对应入库单据属性
		// voInv.setCcorrespondbid(m_ccorrespondbid);
		// voInv.setCcorrespondcode(m_ccorrespondcode);
		// voInv.setCcorrespondhid(m_ccorrespondhid);
		// voInv.setCcorrespondtype(m_ccorrespondtype);
		// voInv.setCcorrespondtypename(m_ccorrespondtypename);

		// m_vfree0;
		setAttributeValue("invReservedPty", voInv.getInvReservedPty());
		setAttributeValue("discountflag", voInv.getDiscountflag());
		setAttributeValue("laborflag", voInv.getLaborflag());
		//修改人：刘家清 修改时间：2008-11-4 下午08:19:27 修改原因：cfreezeid用于出库解冻操作，不能被冲掉。
		//setAttributeValue("cfreezeid", voInv.getCfreezeid());

		setAttributeValue("outpriority", voInv.getOutpriority());
		setAttributeValue("outtrackin", voInv.getOuttrackin());
		setAttributeValue("negallowed", voInv.getNegallowed());
		setAttributeValue("isprimarybarcode", voInv.getIsprimarybarcode());
		setAttributeValue("issecondarybarcode", voInv.getIssecondarybarcode());
    
		
		// 补充生产日期和失效日期等信息
		if (voInv.getIsLotMgt() == 1 && voInv.getIsValidateMgt() == 1) {
			if (getScrq() == null && getDvalidate() != null) {
				setScrq(InvVO.calcQualityScrqDate(getDvalidate(), voInv
						.getQualityperiodunit(), voInv.getQualityDay()));
			}
			else if (getDvalidate() == null && getScrq() != null) {
				setDvalidate(InvVO.calcQualityDate(getScrq(), voInv
						.getQualityperiodunit(), voInv.getQualityDay()));
			}
		}
    
    setFreeVODefine(voInv.getRealFreeItemVO());
   
    
	}

	/**
	 * 属性m_invReservedPty的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_invReservedPty
	 *            Integer
	 */
	public void setInvReservedPty(Integer newInvReservedPty) {

		setAttributeValue("invReservedPty", newInvReservedPty);
	}

	/**
	 * 属性m_invspec的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_invspec
	 *            String
	 */
	public void setInvspec(String newInvspec) {

		setAttributeValue("invspec", newInvspec);
	}

	/**
	 * 属性m_invtype的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_invtype
	 *            String
	 */
	public void setInvtype(String newInvtype) {

		setAttributeValue("invtype", newInvtype);
	}

	/**
	 * 属性m_isAstUOMmgt的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isAstUOMmgt
	 *            Integer
	 */
	public void setIsAstUOMmgt(Integer newIsAstUOMmgt) {

		setAttributeValue("isAstUOMmgt", newIsAstUOMmgt);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-16 9:55:06)
	 * 
	 * @param newM_iscancalculatedinvcost
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIscancalculatedinvcost(
			nc.vo.pub.lang.UFBoolean newM_iscancalculatedinvcost) {
		setAttributeValue("iscancalculatedinvcost", newM_iscancalculatedinvcost);
	}

	/**
	 * 属性m_isFreeItemMgt的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isFreeItemMgt
	 *            Integer
	 */
	public void setIsFreeItemMgt(Integer newIsFreeItemMgt) {

		setAttributeValue("isFreeItemMgt", newIsFreeItemMgt);
	}

	/**
	 * 属性m_isLotMgt的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isLotMgt
	 *            Integer
	 */
	public void setIsLotMgt(Integer newIsLotMgt) {

		setAttributeValue("isLotMgt", newIsLotMgt);
	}

	public void setIsStoreByConvert(Integer newIsStoreByConvert) {

		setAttributeValue("isstorebyconvert", newIsStoreByConvert);
	}

	public void setIsmngstockbygrswt(Integer newIsmngstockbygrswt) {
		setAttributeValue("ismngstockbygrswt", newIsmngstockbygrswt);
	}

	/**
	 * 给属性 <结算完毕标志/isok>赋值。 Y:结算完毕 N:未结算完(缺省) 采购入库单上表示该入库单已经采购结算完毕。
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setIsok(UFBoolean value) {
		setAttributeValue("isok", value);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-2 14:40:14)
	 * 
	 * @param newIsprimarybarcode
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsprimarybarcode(nc.vo.pub.lang.UFBoolean newIsprimarybarcode) {
		setAttributeValue("isprimarybarcode", newIsprimarybarcode);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-2 14:41:19)
	 * 
	 * @param newIssecondarybarcode
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIssecondarybarcode(
			nc.vo.pub.lang.UFBoolean newIssecondarybarcode) {
		setAttributeValue("issecondarybarcode", newIssecondarybarcode);
	}

	/**
	 * 属性m_isSellProxy的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isSellProxy
	 *            Integer
	 */
	public void setIsSellProxy(Integer newIsSellProxy) {

		setAttributeValue("isSellProxy", newIsSellProxy);
	}

	/**
	 * 属性m_isSerialMgt的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isSerialMgt
	 *            Integer
	 */
	public void setIsSerialMgt(Integer newIsSerialMgt) {

		setAttributeValue("isSerialMgt", newIsSerialMgt);
	}

	/**
	 * 属性m_isSet的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isSet
	 *            Integer
	 */
	public void setIsSet(Integer newIsSet) {

		setAttributeValue("isSet", newIsSet);
	}

	/**
	 * 属性m_isSolidConvRate的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isSolidConvRate
	 *            Integer
	 */
	public void setIsSolidConvRate(Integer newIsSolidConvRate) {

		setAttributeValue("isSolidConvRate", newIsSolidConvRate);
		// //if (newIsSolidConvRate != null && newIsSolidConvRate.intValue() ==
		// 1)
		// //fixedflag = "Y";
		// //else
		// //m_fixedflag = "N";
	}

	/**
	 * 属性m_isValidateMgt的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_isValidateMgt
	 *            Integer
	 */
	public void setIsValidateMgt(Integer newIsValidateMgt) {

		setAttributeValue("isValidateMgt", newIsValidateMgt);
	}

	/**
	 * 属性m_jggx的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_jggx
	 *            String
	 */
	public void setJggx(String newJggx) {

		setAttributeValue("jggx", newJggx);
	}

	/**
	 * 属性m_pk的setter方法。
	 * 
	 * 创建日期：(2001-6-19)
	 * 
	 * @param newM_pk
	 *            String
	 */
	public void setLaborflag(UFBoolean newPk) {

		setAttributeValue("laborflag", newPk);
	}

	/**
	 * 王乃军 功能： 参数： 返回： 例外： 日期：(2004-9-30 12:03:04) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_nbarcodenum
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setListnbarcodenum(nc.vo.pub.lang.UFDouble newM_nbarcodenum) {
		setAttributeValue("nbarcodenum", newM_nbarcodenum);
	}

	/**
	 * 属性m_locator的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            String
	 */
	public void setLocator(LocatorVO[] newLocator) {
		super.setAttributeValue("locator", newLocator);
		if (newLocator != null && newLocator.length == 1) {
			super.setAttributeValue("cspaceid", newLocator[0].getCspaceid());
			super
					.setAttributeValue("vspacename", newLocator[0]
							.getVspacename());
		}
	}

	/**
	 * 此处插入方法说明。 功能描述:
	 * ***如果item被修改了，他们是无条件改为修改----〉应该是相关数据修改了，才修改之，其中相关数据是指：cinventoryid,castunitid,vbatchcode,vfreeXXX,correspondXX（对应入库单）,实收发数量；
	 * ***如果item未修改，需要和传入的原ItemVO做判断。 I) 如果个数不同，认为修改了。 II)
	 * 把原来的数据放到hastable中，遍历查找，如果有的数据找不到，认为改了。 因为数量必定没有修改，所以不用再遍历当前的数据查找被删除的数据。J
	 * III) 比较的unique key 货位：m_cspaceid和数量比较
	 * 序列号：因为存货id和其他属性的修改必定导致itemvo的状态为修改，所以只判断vserialcode即可。如果表头修改了，还要看单据号、客商是否修改了。
	 * 
	 * 
	 * 
	 * 
	 * 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public void setLocStatus(GeneralBillItemVO voOldItem) {
		// 未修改表体，或修改了表体，并且是相关数据修改了在调用时判断。
		LocatorVO[] m_locator = (LocatorVO[]) super
				.getAttributeValue("locator");
		if (voOldItem != null) {
			LocatorVO[] voaOldLoc = voOldItem.getLocator();
			// 下面判断的顺序不能改。
			// 都为空，认为没改。
			if (voaOldLoc == null && m_locator == null || voaOldLoc != null
					&& voaOldLoc.length == 0 && m_locator != null
					&& m_locator.length == 0)
				setAttributeValue("iLocStatus", new Integer(
						nc.vo.pub.VOStatus.UNCHANGED));
			// 如果个数不同，认为修改了。
			else if (voaOldLoc == null && m_locator != null
					|| voaOldLoc != null && m_locator == null
					|| voaOldLoc != null && m_locator != null
					&& voaOldLoc.length != m_locator.length)
				setAttributeValue("iLocStatus", new Integer(
						nc.vo.pub.VOStatus.UPDATED));
			else if (voaOldLoc != null && m_locator != null) {
				// 把原来的数据放到hastable中，遍历查找，
				java.util.Hashtable htOldLoc = new java.util.Hashtable();
				int size = voaOldLoc.length;
				for (int i = 0; i < size; i++)
					if (voaOldLoc[i] != null
							&& voaOldLoc[i].getCspaceid() != null)
						htOldLoc.put(voaOldLoc[i].getCspaceid(), voaOldLoc[i]);
				//
				size = m_locator.length;
				LocatorVO voTemp = null;
				for (int i = 0; i < size; i++) {
					if (m_locator[i] != null
							&& m_locator[i].getCspaceid() != null)
						voTemp = (LocatorVO) htOldLoc.get(m_locator[i]
								.getCspaceid());
					// 没有，表示改了
					if (voTemp == null) {
						setAttributeValue("iLocStatus", new Integer(
								nc.vo.pub.VOStatus.UPDATED));
						break;
					} else { // 改了数量吗？
						if (m_locator[i].getNinspacenum() != null
								&& !m_locator[i].getNinspacenum().equals(
										voTemp.getNinspacenum())
								|| m_locator[i].getNinspaceassistnum() != null
								&& !m_locator[i].getNinspaceassistnum().equals(
										voTemp.getNinspaceassistnum())
								|| m_locator[i].getNoutspacenum() != null
								&& !m_locator[i].getNoutspacenum().equals(
										voTemp.getNoutspacenum())
								|| m_locator[i].getNinspaceassistnum() != null
								&& !m_locator[i].getNinspaceassistnum().equals(
										voTemp.getNinspaceassistnum()))
							setAttributeValue("iLocStatus", new Integer(
									nc.vo.pub.VOStatus.UPDATED));
					}
				}
			}

		} else
			// 和表体状态一样，检查是否相关数据修改了
			setAttributeValue("iLocStatus", new Integer(getStatus()));

		// SCMEnv.out("------------- loc sta ---" + m_iLocStatus);
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param newLocStatus
	 *            int
	 */
	public void setLocStatus(int newLocStatus) {
		setAttributeValue("iLocStatus", new Integer(newLocStatus));
	}

	/**
	 * 属性m_measdocname的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_measdocname
	 *            String
	 */
	public void setMeasdocname(String newMeasdocname) {

		setAttributeValue("measdocname", newMeasdocname);
	}

	/**
	 * 属性naccinvoicenum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newsetNaccinvoicenum
	 *            UFDouble
	 */
	public void setNaccinvoicenum(UFDouble newsetNaccinvoicenum) {

		setAttributeValue("naccinvoicenum", newsetNaccinvoicenum);
	}

	/**
	 * 属性m_naccountmny的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_naccountmny
	 *            UFDouble
	 */
	public void setNaccountmny(UFDouble newNaccountmny) {

		setAttributeValue("naccountmny", newNaccountmny);
		SettlementVO[] vosBB3 = getBB3VO();
		if (vosBB3 != null && vosBB3.length > 0 && vosBB3[0] != null)
			vosBB3[0].setAttributeValue("naccountmny", newNaccountmny);

	}

	/**
	 * 属性m_naccountnum1的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_naccountnum1
	 *            UFDouble
	 */
	public void setNaccountnum1(UFDouble newNaccountnum1) {

		setAttributeValue("naccountnum1", newNaccountnum1);
		SettlementVO[] vosBB3 = getBB3VO();
		if (vosBB3 != null && vosBB3.length > 0 && vosBB3[0] != null)
			vosBB3[0].setAttributeValue("naccountnum1", newNaccountnum1);
	}

	/**
	 * 属性m_naccountnum2的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_naccountnum2
	 *            UFDouble
	 */
	public void setNaccountnum2(UFDouble newNaccountnum2) {

		setAttributeValue("naccountnum2", newNaccountnum2);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 14:02:34) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_naccoutnum
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNaccoutnum(nc.vo.pub.lang.UFDouble newM_naccoutnum) {
		setAttributeValue("naccoutnum", newM_naccoutnum);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 14:02:34) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_navlinvoicenum
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNavlinvoicenum(nc.vo.pub.lang.UFDouble newM_navlinvoicenum) {
		setAttributeValue("navlinvoicenum", newM_navlinvoicenum);
	}

	/**
	 * 给属性 <条码数量/nbarcodenum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNbarcodenum(UFDouble value) {
		setAttributeValue("nbarcodenum", value);
	}

	/**
	 * 给属性 <件数/ncountnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNcountnum(UFDouble value) {
		setAttributeValue("ncountnum", value);
	}

	/**
	 * 属性m_neconomicnum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_neconomicnum
	 *            UFDouble
	 */
	public void setNeconomicnum(UFDouble newNeconomicnum) {

		setAttributeValue("neconomicnum", newNeconomicnum);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:40:52) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_negallowed
	 *            java.lang.String
	 */
	public void setNegallowed(UFBoolean newM_negallowed) {
		setAttributeValue("negallowed", newM_negallowed);
	}

	/**
	 * 给属性 <实入辅数量/ninassistnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNinassistnum(UFDouble value) {
		setAttributeValue("ninassistnum", value);
	}

	/**
	 * 给属性 <实入数量/ninnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNinnum(UFDouble value) {
		setAttributeValue("ninnum", value);
	}

	/**
	 * 给属性 <实入数量/ninnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNingrossnum(UFDouble value) {
		setAttributeValue("ningrossnum", value);
	}

	/**
	 * 属性m_nleftastsum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nleftastsum
	 *            UFDouble
	 */
	public void setNleftastnum(UFDouble newNleftastsum) {

		setAttributeValue("nleftastnum", newNleftastsum);
	}

	public void setNleftgrsnum(UFDouble newNleftgrsnum) {
		setAttributeValue("nleftgrsnum", newNleftgrsnum);
	}

	public void setNretgrossnum(UFDouble newNretgrossnum) {
		setAttributeValue("nretgrossnum", newNretgrossnum);
	}

	/**
	 * 属性m_nleftsum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nleftastsum
	 *            UFDouble
	 */
	public void setNleftnum(UFDouble newNleftastsum) {

		setAttributeValue("nleftnum", newNleftastsum);
	}

	/**
	 * 给属性 <实入数量/ninnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoutgrossnum(UFDouble value) {
		setAttributeValue("noutgrossnum", value);
	}

	/**
	 * 属性m_nmaxstocknum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nmaxstocknum
	 *            UFDouble
	 */
	public void setNmaxstocknum(UFDouble newNmaxstocknum) {

		setAttributeValue("nmaxstocknum", newNmaxstocknum);
	}

	/**
	 * 属性m_nminstocknum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nminstocknum
	 *            UFDouble
	 */
	public void setNminstocknum(UFDouble newNminstocknum) {

		setAttributeValue("nminstocknum", newNminstocknum);
	}

	/**
	 * 给属性 <金额/nmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNmny(UFDouble value) {
		setAttributeValue("nmny", value);
	}

	/**
	 * 给属性 <应入辅数量/nneedinassistnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNneedinassistnum(UFDouble value) {
		setAttributeValue("nneedinassistnum", value);
	}

	/**
	 * 属性m_norderpointnum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_norderpointnum
	 *            UFDouble
	 */
	public void setNorderpointnum(UFDouble newNorderpointnum) {

		setAttributeValue("norderpointnum", newNorderpointnum);
	}

	/**
	 * 给属性 <实出辅数量/noutassistnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoutassistnum(UFDouble value) {
		setAttributeValue("noutassistnum", value);
	}

	/**
	 * 给属性 <实出数量/noutnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoutnum(UFDouble value) {
		setAttributeValue("noutnum", value);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-17 18:45:19) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_npacknum
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNpacknum(nc.vo.pub.lang.UFDouble newM_npacknum) {
		setAttributeValue("npacknum", newM_npacknum);
	}

	/**
	 * 给属性 <计划金额/nplannedmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNplannedmny(UFDouble value) {
		setAttributeValue("nplannedmny", value);
	}

	/**
	 * 给属性 <计划单价/nplannedprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNplannedprice(UFDouble value) {
		setAttributeValue("nplannedprice", value);
	}

	/**
	 * 给属性 <单价/nprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNprice(UFDouble value) {
		setAttributeValue("nprice", value);
	}

	/**
	 * 给属性 <已退货辅数量/nreplenishedastnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNreplenishedastnum(UFDouble value) {
		setAttributeValue("nreplenishedastnum", value);
	}

	/**
	 * 给属性 <已退货数量/nreplenishednum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNreplenishednum(UFDouble value) {
		setAttributeValue("nreplenishednum", value);
	}

	/**
	 * 属性m_nretastsum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nretastsum
	 *            UFDouble
	 */
	public void setNretastnum(UFDouble newNretastsum) {

		setAttributeValue("nretastnum", newNretastsum);
	}

	/**
	 * 属性m_nretsum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nretastsum
	 *            UFDouble
	 */
	public void setNretnum(UFDouble newNretsum) {

		setAttributeValue("nretnum", newNretsum);
	}

	/**
	 * 属性m_nsafestocknum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nsafestocknum
	 *            UFDouble
	 */
	public void setNsafestocknum(UFDouble newNsafestocknum) {

		setAttributeValue("nsafestocknum", newNsafestocknum);
	}

	/**
	 * 给属性 <不含税金额/nsalemny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNsalemny(UFDouble value) {
		setAttributeValue("nsalemny", value);
	}

	/**
	 * 给属性 <销售价格/nsaleprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNsaleprice(UFDouble value) {
		setAttributeValue("nsaleprice", value);
	}

	/**
	 * 给属性 <应入数量/nshouldinnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNshouldinnum(UFDouble value) {
		setAttributeValue("nshouldinnum", value);
	}

	/**
	 * 给属性 <应出辅数量/nshouldoutassistnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNshouldoutassistnum(UFDouble value) {
		setAttributeValue("nshouldoutassistnum", value);
	}

	/**
	 * 给属性 <应出数量/nshouldoutnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNshouldoutnum(UFDouble value) {
		setAttributeValue("nshouldoutnum", value);
	}

	/**
	 * 属性m_nsignnum的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_nsignnum
	 *            UFDouble
	 */
	public void setNsignnum(UFDouble newNsignnum) {

		setAttributeValue("nsignnum", newNsignnum);
	}

	/**
	 * 给属性 <含税金额/ntaxmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxmny(UFDouble value) {
		setAttributeValue("ntaxmny", value);
	}

	/**
	 * 给属性 <含税单价/ntaxprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxprice(UFDouble value) {
		setAttributeValue("ntaxprice", value);
	}

	/**
	 * 给属性 <转出辅数量/ntranoutastnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtranoutastnum(UFDouble value) {
		setAttributeValue("ntranoutastnum", value);
	}

	/**
	 * 给属性 <转出数量/ntranoutnum>赋值。 转采购、转销售数量
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtranoutnum(UFDouble value) {
		setAttributeValue("ntranoutnum", value);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_nunitvolume
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNunitvolume(nc.vo.pub.lang.UFDouble newM_nunitvolume) {
		setAttributeValue("nunitvolume", newM_nunitvolume);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_nunitweight
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNunitweight(nc.vo.pub.lang.UFDouble newM_nunitweight) {
		setAttributeValue("nunitweight", newM_nunitweight);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_nvolume
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNvolume(nc.vo.pub.lang.UFDouble newM_nvolume) {
		setAttributeValue("nvolume", newM_nvolume);
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2004-5-25 15:39:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_nweight
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNweight(nc.vo.pub.lang.UFDouble newM_nweight) {
		setAttributeValue("nweight", newM_nweight);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:39:57) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_outpriority
	 *            java.lang.String
	 */
	public void setOutpriority(Integer newM_outpriority) {
		setAttributeValue("outpriority", newM_outpriority);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:39:57) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_outtrackin
	 *            java.lang.String
	 */
	public void setOuttrackin(UFBoolean newM_outtrackin) {
		setAttributeValue("outtrackin", newM_outtrackin);
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-17 14:42:04)
	 * 
	 * @param newM_pk_calbody
	 *            java.lang.String
	 */
	public void setPk_calbody(java.lang.String newM_pk_calbody) {
		setAttributeValue("pk_calbody", newM_pk_calbody);
	}

	/**
	 * 属性m_pk_measdoc的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_pk_measdoc
	 *            String
	 */
	public void setPk_measdoc(String newPk_measdoc) {

		setAttributeValue("pk_measdoc", newPk_measdoc);
	}

	/**
	 * 给属性 <包装类型/pk_packsort>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setPk_packsort(String value) {
		setAttributeValue("pk_packsort", value);
	}

	/**
	 * 设置对象标识，用来唯一定位对象。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param m_cgeneralbid
	 *            String
	 */
	public void setPrimaryKey(String newCgeneralbid) {

		setAttributeValue("cgeneralbid", newCgeneralbid);
	}

	/**
	 * 属性m_qualityDay的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_qualityDay
	 *            Integer
	 */
	public void setQualityDay(Integer newQualityDay) {

		setAttributeValue("qualityDay", newQualityDay);
	}

	/**
	 * 属性m_scrq的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_scrq
	 *            UFDate
	 */
	public void setScrq(UFDate newScrq) {

		setAttributeValue("scrq", newScrq);
	}

	/**
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-12 15:20:52) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newSerial
	 *            nc.vo.ic.pub.sn.SerialVO[]
	 */
	public void setSerial(nc.vo.ic.pub.sn.SerialVO[] newSerial) {
		super.setAttributeValue("serial", newSerial);
	}

	/**
	 * 此处插入方法说明。 作者：韩卫 2003-12-12 功能把应退库数量设置到应入数量（对委外加工入库、采购入库的退库业务）
	 * 创建日期：(2003-12-12 9:54:36)
	 */
	public void setShouldInfromBackNum() {
		UFDouble nshouldbackastnum = SmartVODataUtils
				.getUFDouble(getAttributeValue("nshouldbacknum"));
		setNshouldinnum(nshouldbackastnum);
		setNneedinassistnum(nshouldbackastnum);
	}

	/**
	 * 此处插入方法说明。 功能描述:
	 * ***如果item被修改了，他们是无条件改为修改----〉应该是相关数据修改了，才修改之，其中相关数据是指：cinventoryid,castunitid,vbatchcode,vfreeXXX,correspondXX（对应入库单）,实收发数量；
	 * ***如果item未修改，需要和传入的原ItemVO做判断。 I) 如果个数不同，认为修改了。 II)
	 * 把原来的数据放到hastable中，遍历查找，如果有的数据找不到，认为改了。 因为数量必定没有修改，所以不用再遍历当前的数据查找被删除的数据。J
	 * III) 比较的unique key 货位：m_cspaceid和数量比较
	 * 序列号：因为存货id和其他属性的修改必定导致itemvo的状态为修改，所以只判断vserialcode即可。如果表头修改了，还要看单据号、客商是否修改了。
	 * 
	 * 
	 * 
	 * 
	 * 输入参数: 返回值: 异常处理: 日期:
	 * 
	 */
	public void setSnStatus(GeneralBillItemVO voOldItem) {
		// 未修改表体，或修改了表体，并且是相关数据修改了
		setSnStatus(nc.vo.pub.VOStatus.UNCHANGED);
		SerialVO[] serial = (SerialVO[]) super.getAttributeValue("serial");
		// add by hanwei 2003-11-06
		// 通过比对新旧单据的业务日期判断是否状态为修改 add by hanwei
		if (voOldItem != null) {
			// 出入库单据状态
			int iInOutPty = getInOutFlag();
			if ((InOutFlag.IN == iInOutPty || InOutFlag.OUT == iInOutPty)
					&& iInOutPty != voOldItem.getInOutFlag()) {
				setSnStatus(nc.vo.pub.VOStatus.UPDATED);
				return;
			}
			// 单据行的业务日期
			String sOldDate = null;
			String sNewDate = null;
			if (getDbizdate() != null)
				sNewDate = getDbizdate().toString();
			// 旧序列号
			nc.vo.ic.pub.sn.SerialVO[] voaSn = voOldItem.getSerial();
			if (voaSn != null && voaSn.length > 0) {
				if (iInOutPty == InOutFlag.IN) // 入库
					sOldDate = voaSn[0].getDbillindate();
				else
					sOldDate = voaSn[0].getDbilloutdate();

				if (sOldDate != null && sNewDate != null
						&& !(sOldDate.equalsIgnoreCase(sNewDate))) {
					setSnStatus(nc.vo.pub.VOStatus.UPDATED);
					return;
				}
			}
			if (isNeedUpdateSnStatus(voOldItem)) {
				setSnStatus(nc.vo.pub.VOStatus.UPDATED);
				return;
			}

		}

		if (voOldItem != null) {
			nc.vo.ic.pub.sn.SerialVO[] voaSn = voOldItem.getSerial();
			// 下面判断的顺序不能改。
			// 都为空，认为没改。
			if (voaSn == null && serial == null || voaSn != null
					&& voaSn.length == 0 && serial != null
					&& serial.length == 0)
				setSnStatus(nc.vo.pub.VOStatus.UNCHANGED);
			// 如果个数不同，认为修改了。
			else {

				if (voaSn == null && serial != null || voaSn != null
						&& serial == null || voaSn != null && serial != null
						&& voaSn.length != serial.length)
					setSnStatus(nc.vo.pub.VOStatus.UPDATED);
				else if (voaSn != null && serial != null) {
					// 把原来的数据放到hastable中，遍历查找，
					java.util.Hashtable htOldSn = new java.util.Hashtable();
					int size = voaSn.length;
					for (int i = 0; i < size; i++)
						if (voaSn[i] != null
								&& voaSn[i].getVserialcode() != null)
							htOldSn.put(voaSn[i].getVserialcode(), voaSn[i]);
					//
					size = serial.length;
					nc.vo.ic.pub.sn.SerialVO voTemp = null;
					for (int i = 0; i < size; i++) {
						if (serial[i] != null
								&& serial[i].getVserialcode() != null)
							voTemp = (nc.vo.ic.pub.sn.SerialVO) htOldSn
									.get(serial[i].getVserialcode());
						// 没有，表示改了
						if (voTemp == null) {
							setSnStatus(nc.vo.pub.VOStatus.UPDATED);
							break;
						}

						// 货位改咧。
						else if (!(voTemp.getCspaceid() == null && serial[i]
								.getCspaceid() == null) // 不全为空
								&& (voTemp.getCspaceid() == null
										&& serial[i].getCspaceid() != null // 去掉了货位数据
								|| voTemp.getCspaceid() != null // 有货位数据但货位改了。
										&& !voTemp.getCspaceid().equals(
												serial[i].getCspaceid()))) {
							setSnStatus(nc.vo.pub.VOStatus.UPDATED);
							break;

						}
					}
				}
			}

		} else
			// 和表体状态一样，检查是否相关数据修改了
			setSnStatus(getStatus());
		// SCMEnv.out("------------- sn sta ---" + m_iSnStatus);

	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param newSnStatus
	 *            int
	 */
	public void setSnStatus(int newSnStatus) {
		setAttributeValue("iSnStatus", new Integer(newSnStatus));
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-4-21 15:34:42)
	 * 
	 * @param newBarcode
	 *            nc.vo.ic.pub.bc.BarCodeVO[]
	 */
	public void setSourceBarcode(nc.vo.ic.pub.bc.BarCodeVO[] newBarcode) {
		m_sourceBarcode = newBarcode;
	}

	/**
	 * 属性m_standStoreUOM的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_standStoreUOM
	 *            String
	 */
	public void setStandStoreUOM(UFDouble newStandStoreUOM) {

		setAttributeValue("standStoreUOM", newStandStoreUOM);
	}

	/**
	 * 属性 m_timestamp 的Setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return void
	 */
	public void setTimeStamp(String s) {
		setAttributeValue("ts", s);
	}

	/**
	 * 属性 m_timestamp 的Setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return void
	 */
	public void setTs(String s) {
		setAttributeValue("ts", s);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseAstUOM
	 *            boolean
	 */
	public void setUkUseAstUOM(boolean newUkUseAstUOM) {
		setAttributeValue("bUkUseAstUOM", new UFBoolean(newUkUseAstUOM));
	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @param newUkUseCorrbid
	 *            boolean
	 */
	public void setUkUseCorrbid(boolean newUkUseCorrbid) {
		setAttributeValue("bUkUseCorrbid", new UFBoolean(newUkUseCorrbid));

	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @param newUkUseCorrhid
	 *            boolean
	 */
	public void setUkUseCorrhid(boolean newUkUseCorrhid) {
		setAttributeValue("bUkUseCorrhid", new UFBoolean(newUkUseCorrhid));

	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @param newUkUseFirstbid
	 *            boolean
	 */
	public void setUkUseFirstbid(boolean newUkUseFirstbid) {
		setAttributeValue("bUkUseFirstbid", new UFBoolean(newUkUseFirstbid));

	}

	/**
	 * 类型说明： 创建日期：(2003-1-8 14:47:45) 作者：王乃军 修改日期： 修改人： 修改原因： 算法说明：
	 * 
	 * @param newUkUseFirsthid
	 *            boolean
	 */
	public void setUkUseFirsthid(boolean newUkUseFirsthid) {
		setAttributeValue("bUkUseFirsthid", new UFBoolean(newUkUseFirsthid));

	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseFreeItem
	 *            boolean
	 */
	public void setUkUseFreeItem(boolean newUkUseFreeItem) {
		setAttributeValue("bUkUseFreeItem", new UFBoolean(newUkUseFreeItem));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseInvID
	 *            boolean
	 */
	public void setUkUseInvID(boolean newUkUseInvID) {
		setAttributeValue("bUkUseInvID", new UFBoolean(newUkUseInvID));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseLot
	 *            boolean
	 */
	public void setUkUseLot(boolean newUkUseLot) {
		setAttributeValue("bUkUseLot", new UFBoolean(newUkUseLot));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseSourcebid
	 *            boolean
	 */
	public void setUkUseSourcebid(boolean newUkUseSourcebid) {
		setAttributeValue("bUkUseSourcebid", new UFBoolean(newUkUseSourcebid));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseSourcehid
	 *            boolean
	 */
	public void setUkUseSourcehid(boolean newUkUseSourcehid) {
		setAttributeValue("bUkUseSourcehid", new UFBoolean(newUkUseSourcehid));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUkUseAstUOM
	 *            boolean
	 */
	public void setUkUseVendorid(boolean newUkUseVendorid) {
		setAttributeValue("bUkUseVendorid", new UFBoolean(newUkUseVendorid));
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-9-26 14:36:09) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newUseUkSetup
	 *            boolean
	 */
	public void setUseUkSetup(boolean newUseUkSetup) {
		setAttributeValue("bUseUkSetup", new UFBoolean(newUseUkSetup));
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 作者:程起伍 日期:
	 * 
	 * @param isUpdate
	 *            java.lang.Boolean
	 */
	public void setValidateUpdateFlg(boolean isUpdate) {
		setAttributeValue("bValidateUpdate", new UFBoolean(isUpdate));
	}

	/**
	 * 给属性 <批次号/vbatchcode>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVbatchcode(String value) {
		if (null !=value)
			setAttributeValue("vbatchcode", value.trim());
		else
			setAttributeValue("vbatchcode", value);
	}

	/**
	 * 给属性 <表体备注2/vbodynote2>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVbodynote2(String value) {
		setAttributeValue("vbodynote2", value);
	}

	/**
	 * 给属性 <对应入库单行号/vcorrespondrowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVcorrespondrowno(String value) {
		setAttributeValue("vcorrespondrowno", value);
	}

	/**
	 * 给属性 <源头单据号/vfirstbillcode>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfirstbillcode(String value) {
		setAttributeValue("vfirstbillcode", value);
	}

	/**
	 * 给属性 <源头单据行号/vfirstrowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfirstrowno(String value) {
		setAttributeValue("vfirstrowno", value);
	}

	/**
	 * 给属性 <自由项1/vfree1>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree1(String value) {
		setAttributeValue("vfree1", value);
	}

	/**
	 * 给属性 <自由项10/vfree10>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree10(String value) {
		setAttributeValue("vfree10", value);
	}

	/**
	 * 给属性 <自由项2/vfree2>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree2(String value) {
		setAttributeValue("vfree2", value);
	}

	/**
	 * 给属性 <自由项3/vfree3>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree3(String value) {
		setAttributeValue("vfree3", value);
	}

	/**
	 * 给属性 <自由项4/vfree4>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree4(String value) {
		setAttributeValue("vfree4", value);
	}

	/**
	 * 给属性 <自由项5/vfree5>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree5(String value) {
		setAttributeValue("vfree5", value);
	}

	/**
	 * 给属性 <自由项6/vfree6>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree6(String value) {
		setAttributeValue("vfree6", value);
	}

	/**
	 * 给属性 <自由项7/vfree7>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree7(String value) {
		setAttributeValue("vfree7", value);
	}

	/**
	 * 给属性 <自由项8/vfree8>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree8(String value) {
		setAttributeValue("vfree8", value);
	}

	/**
	 * 给属性 <自由项9/vfree9>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVfree9(String value) {
		setAttributeValue("vfree9", value);
	}

	/**
	 * 给属性 <行备注/vnotebody>赋值。 2003-02-18增加 2003-02-20修改字段名称
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVnotebody(String value) {
		setAttributeValue("vnotebody", value);
	}

	/**
	 * 给属性 <包装类型/vpacksortname>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVpacksortname(String value) {
		setAttributeValue("vpacksortname", value);
	}

	/**
	 * 给属性 <生产订单号/vproductbatch>赋值。 仅用于产成品入库
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVproductbatch(String value) {
		setAttributeValue("vproductbatch", value);
	}

	/**
	 * 给属性 <收货单位/vreceievename>赋值。 2003-02-18增加，主要用于销售出库单、其他出库单，逐步替换写到 成本对象
	 * 上的信息。
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVreceievename(String value) {
		setAttributeValue("vreceievename", value);
	}

	/**
	 * 给属性 <来源单据号/vsourcebillcode>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVsourcebillcode(String value) {
		setAttributeValue("vsourcebillcode", value);
	}

	/**
	 * 给属性 <来源单据行号/vsourcerowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVsourcerowno(String value) {
		setAttributeValue("vsourcerowno", value);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_vspacecode
	 *            java.lang.String
	 */
	public void setVspace2code(java.lang.String newM_vspacecode) {
		setAttributeValue("vspace2code", newM_vspacecode);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_vspacename
	 *            java.lang.String
	 */
	public void setVspace2name(java.lang.String newM_vspacename) {
		setAttributeValue("vspace2name", newM_vspacename);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_vspacecode
	 *            java.lang.String
	 */
	public void setVspacecode(java.lang.String newM_vspacecode) {
		setAttributeValue("vspacecode", newM_vspacecode);
	}

	/**
	 * 
	 * 创建者：王乃军 功能： 参数： 返回： 例外： 日期：(2001-6-22 13:57:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_vspacename
	 *            java.lang.String
	 */
	public void setVspacename(java.lang.String newM_vspacename) {
		setAttributeValue("vspacename", newM_vspacename);
	}

	/**
	 * 
	 * 方法功能描述：序列号。
	 * <p>
	 * <b>参数说明</b>
	 * @param vserialcode
	 * <p>
	 * @author duy
	 * @time 2008-5-29 上午10:04:24
	 */
	public void setVserialcode(java.lang.String vserialcode) {
	    setAttributeValue("vserialcode", vserialcode);
	}

	/**
	 * 给属性 <自定义项10/vuserdef10>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef10(String value) {
		setAttributeValue("vuserdef10", value);
	}

	/**
	 * 给属性 <自定义项2/vuserdef2>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef2(String value) {
		setAttributeValue("vuserdef2", value);
	}

	/**
	 * 给属性 <自定义项3/vuserdef3>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef3(String value) {
		setAttributeValue("vuserdef3", value);
	}

	/**
	 * 给属性 <自定义项4/vuserdef4>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef4(String value) {
		setAttributeValue("vuserdef4", value);
	}

	/**
	 * 给属性 <自定义项5/vuserdef5>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef5(String value) {
		setAttributeValue("vuserdef5", value);
	}

	/**
	 * 给属性 <自定义项6/vuserdef6>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef6(String value) {
		setAttributeValue("vuserdef6", value);
	}

	/**
	 * 给属性 <自定义项7/vuserdef7>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef7(String value) {
		setAttributeValue("vuserdef7", value);
	}

	/**
	 * 给属性 <自定义项8/vuserdef8>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef8(String value) {
		setAttributeValue("vuserdef8", value);
	}

	/**
	 * 给属性 <自定义项9/vuserdef9>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVuserdef9(String value) {
		setAttributeValue("vuserdef9", value);
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-4-20 17:11:31) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newM_Vvendorname
	 *            java.lang.String
	 */
	public void setVvendorname(java.lang.String newM_Vvendorname) {
		setAttributeValue("vvendorname", newM_Vvendorname);
	}

	/**
	 * 属性m_xczl的setter方法。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_xczl
	 *            UFDouble
	 */
	public void setXczl(UFDouble newXczl) {

		setAttributeValue("xczl", newXczl);
	}

	/**
	 * 
	 * 方法功能描述：设置客商基本档案ID。
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param value
	 *            客商基本档案ID
	 *            <p>
	 * @author duy
	 * @time 2007-3-16 下午01:19:58
	 */
	public void setPk_cubasdoc(String value) {
		setAttributeValue("pk_cubasdoc", value);
	}

	/**
	 * 
	 * 
	 * 创建者：王乃军
	 * 
	 * 功能：汇总过的表体存货 货位数量 之差 m_locator - voaSubedLocator
	 * 
	 * 把voaLocator的PK放在hashtable中 voaSubedLocator 中独有的item要填加到返回值中
	 * 
	 * 前提： 1、voaLocator中的PK各自保证唯一。
	 * 
	 * 
	 * 参数：LocatorVO[]（减数） 返回： LocatorVO[] 结果 例外： 日期：(2001-6-26 16:37:46)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return ArrayList
	 */
	public LocatorVO[] subLocator(LocatorVO[] voaSubedLocator) {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		locator = subLocator(locator, voaSubedLocator);

		return locator;
	}

	/**
	 * 
	 * 
	 * 创建者：王乃军
	 * 
	 * 功能：汇总过的表体存货 货位数量 之差 voaLocator - voaSubedLocator
	 * 
	 * 把voaLocator的PK放在hashtable中 voaSubedLocator 中独有的item要填加到返回值中
	 * 
	 * 前提： 1、voaLocator中的Cspaceid各自保证唯一。
	 * 
	 * 
	 * 参数：LocatorVO[](被减数),LocatorVO[]（减数） 返回： LocatorVO[] 结果 例外： 日期：(2001-6-26
	 * 16:37:46) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return ArrayList
	 */
	public LocatorVO[] subLocator(LocatorVO[] voaLocator,
			LocatorVO[] voaSubedLocator) {

		// 参数非空检查，如果数量未填，返回被减单据！！！！！。
		if (voaSubedLocator == null || voaSubedLocator.length == 0
				|| voaSubedLocator[0] == null
				|| voaSubedLocator[0].getNinspacenum() == null
				&& voaSubedLocator[0].getNoutspacenum() == null) {
			return voaLocator;
		}
		// 处理删除了货位分配数据的情况。
		if (voaLocator == null)
			voaLocator = new LocatorVO[0];

		// 把voaLocator的PK放在hashtable中,以迅速查找
		java.util.Hashtable htBodyKey = new java.util.Hashtable();
		for (int i = 0; i < voaSubedLocator.length; i++) {
			if (voaSubedLocator[i].getCspaceid() == null) {
				nc.vo.scm.pub.SCMEnv.out("err:no spaceid" + i);
				continue;
			}
			if (!htBodyKey.containsKey(voaSubedLocator[i].getCspaceid()))
				htBodyKey.put(voaSubedLocator[i].getCspaceid(), "" + i);
		}
		int iLineNum2 = 0; // PK index in voaSubedLocator
		Object oValueTemp = null;
		for (int i = 0; i < voaLocator.length; i++) {
			if (voaLocator[i].getCspaceid() == null) {
				nc.vo.scm.pub.SCMEnv.out("err:no spaceid" + i);
				continue;
			}
			oValueTemp = htBodyKey.get(voaLocator[i].getCspaceid());
			// 如果找不到表示是新增的货位行，不用处理
			if (oValueTemp == null)
				continue;
			// else
			iLineNum2 = Integer.valueOf(oValueTemp.toString()).intValue();
			// 本行的数量-传入的数量
			// ========= IN
			if (voaLocator[i].getNinspacenum() != null) {
				if (voaSubedLocator[iLineNum2].getNinspacenum() != null)
					voaLocator[i].setNinspacenum(voaLocator[i].getNinspacenum()
							.sub(voaSubedLocator[iLineNum2].getNinspacenum()));
			} else { // 删除了数量处理:0-XXX
				if (voaSubedLocator[iLineNum2].getNinspacenum() != null)
					voaLocator[i].setNinspacenum(ZERO
							.sub(voaSubedLocator[iLineNum2].getNinspacenum()));
			}
			// ======== OUT
			if (voaLocator[i].getNoutspacenum() != null) {
				if (voaSubedLocator[iLineNum2].getNoutspacenum() != null)
					voaLocator[i].setNoutspacenum(voaLocator[i]
							.getNoutspacenum().sub(
									voaSubedLocator[iLineNum2]
											.getNoutspacenum()));
			} else { // 删除了数量处理:0-XXX
				if (voaSubedLocator[iLineNum2].getNoutspacenum() != null)
					voaLocator[i].setNoutspacenum(ZERO
							.sub(voaSubedLocator[iLineNum2].getNoutspacenum()));
			}
			// 本行的辅数量-传入的辅数量
			// ===== IN
			if (voaLocator[i].getNinspaceassistnum() != null) {
				if (voaSubedLocator[iLineNum2].getNinspaceassistnum() != null)
					voaLocator[i].setNinspaceassistnum(voaLocator[i]
							.getNinspaceassistnum().sub(
									voaSubedLocator[iLineNum2]
											.getNinspaceassistnum()));
			} else { // 删除了辅数量处理:0-XXX
				if (voaSubedLocator[iLineNum2].getNinspaceassistnum() != null)
					voaLocator[i].setNinspaceassistnum(ZERO
							.sub(voaSubedLocator[iLineNum2]
									.getNinspaceassistnum()));
			}
			// ==== OUT
			if (voaLocator[i].getNoutspaceassistnum() != null) {
				if (voaSubedLocator[iLineNum2].getNoutspaceassistnum() != null)
					voaLocator[i].setNoutspaceassistnum(voaLocator[i]
							.getNoutspaceassistnum().sub(
									voaSubedLocator[iLineNum2]
											.getNoutspaceassistnum()));
			} else { // 删除了辅数量处理:0-XXX
				if (voaSubedLocator[iLineNum2].getNoutspaceassistnum() != null)
					voaLocator[i].setNoutspaceassistnum(ZERO
							.sub(voaSubedLocator[iLineNum2]
									.getNoutspaceassistnum()));
			}
		}
		// ------- 删除的行处理 --------
		// 把voaLocator的PK放在hashtable中,以迅速查找
		java.util.Hashtable htBodyKey2 = new java.util.Hashtable();
		for (int i = 0; i < voaLocator.length; i++) {
			if (voaLocator[i].getCspaceid() == null) {
				nc.vo.scm.pub.SCMEnv.out("err:no spaceid" + i);
				continue;
			}

			if (!htBodyKey2.containsKey(voaLocator[i].getCspaceid()))
				htBodyKey2.put(voaLocator[i].getCspaceid(), "" + i);
		}
		// ------ 检查 voaSubedLocator 中的pk是否都包含在voaLocator中，
		// 没有的话是被删除了，需要添加上，但数量取反。
		java.util.Vector vTemp = null;
		LocatorVO voLoc = null;
		for (int i = 0; i < voaSubedLocator.length; i++) {
			if (voaSubedLocator[i].getCspaceid() == null) {
				nc.vo.scm.pub.SCMEnv.out("err:no spaceid" + i);
				continue;
			}
			if (!htBodyKey2.containsKey(voaSubedLocator[i].getCspaceid())) {
				// 不修改传入的参数。
				voLoc = (LocatorVO) voaSubedLocator[i].clone();
				if (voLoc.getNinspacenum() != null)
					voLoc.setNinspacenum(ZERO.sub(voLoc.getNinspacenum()));
				if (voLoc.getNoutspacenum() != null)
					voLoc.setNoutspacenum(ZERO.sub(voLoc.getNoutspacenum()));
				if (voLoc.getNinspaceassistnum() != null)
					voLoc.setNinspaceassistnum(ZERO.sub(voLoc
							.getNinspaceassistnum()));
				if (voLoc.getNoutspaceassistnum() != null)
					voLoc.setNoutspaceassistnum(ZERO.sub(voLoc
							.getNoutspaceassistnum()));
				if (vTemp == null)
					vTemp = new java.util.Vector();
				vTemp.addElement(voLoc);
			}
		}
		// 返回值添加之
		LocatorVO voaNewLoc[] = voaLocator;
		if (vTemp != null) {
			voaNewLoc = new LocatorVO[voaLocator.length + vTemp.size()];
			// old
			for (int i = 0; i < voaLocator.length; i++)
				voaNewLoc[i] = voaLocator[i];
			// new
			for (int i = voaLocator.length; i < (voaLocator.length + vTemp
					.size()); i++)
				voaNewLoc[i] = (LocatorVO) vTemp.elementAt(i
						- voaLocator.length);
		}
		return voaNewLoc;
	}

	/**
	 * 汇总货位数据。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public void sumLocator() {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		if (locator != null) {
			// delete row ,set negatice value
			if (getStatus() == nc.vo.pub.VOStatus.DELETED)
				sumLocator(locator, true);
			else
				sumLocator(locator);
		}
	}

	/**
	 * 汇总货位数据。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public void sumLocator(LocatorVO[] voaMyLocator) {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		if (voaMyLocator != null && voaMyLocator.length > 0) {
			// 暂存器
			java.util.Vector vTemp = new java.util.Vector();
			java.util.Hashtable htSpaceKey = new java.util.Hashtable();
			String sSpaceid = null;
			UFDouble dInvSumNumIn = null; // 汇总的入库存货数量,辅数量
			UFDouble dInvSumAstNumIn = null;
			UFDouble dInvSumNumOut = null; // 汇总的出库存货数量,辅数量
			UFDouble dInvSumAstNumOut = null;
			LocatorVO voLoc = null;
			//
			for (int i = 0; i < voaMyLocator.length; i++) {
				sSpaceid = voaMyLocator[i].getCspaceid();
				dInvSumNumIn = ZERO;
				dInvSumAstNumIn = ZERO;
				dInvSumNumOut = ZERO;
				dInvSumAstNumOut = ZERO;
				// 不包含时需要汇总
				if (sSpaceid != null && !htSpaceKey.containsKey(sSpaceid)) {
					htSpaceKey.put(sSpaceid, "");
					// loop from i !!!!!!!!
					for (int j = i; j < voaMyLocator.length; j++) {
						if (sSpaceid.equals(voaMyLocator[j].getCspaceid())) {
							// 入库
							if (voaMyLocator[j].getNinspacenum() != null)
								dInvSumNumIn = dInvSumNumIn.add(voaMyLocator[j]
										.getNinspacenum());
							if (voaMyLocator[j].getNinspaceassistnum() != null)
								dInvSumAstNumIn = dInvSumAstNumIn
										.add(voaMyLocator[j]
												.getNinspaceassistnum());
							// 出库
							if (voaMyLocator[j].getNoutspacenum() != null)
								dInvSumNumOut = dInvSumNumOut
										.add(voaMyLocator[j].getNoutspacenum());
							if (voaMyLocator[j].getNoutspaceassistnum() != null)
								dInvSumAstNumOut = dInvSumAstNumOut
										.add(voaMyLocator[j]
												.getNoutspaceassistnum());
						}
					}
					voLoc = (LocatorVO) voaMyLocator[i].clone();
					// set value
					voLoc.setNinspacenum(dInvSumNumIn);
					voLoc.setNinspaceassistnum(dInvSumAstNumIn);
					voLoc.setNoutspacenum(dInvSumNumOut);
					voLoc.setNoutspaceassistnum(dInvSumAstNumOut);
					// put to Vector;
					vTemp.add(voLoc);
				}
			}
			// m_locator重新赋值
			if (vTemp.size() > 0) {
				locator = new LocatorVO[vTemp.size()];
				vTemp.copyInto(locator);
			}
		}
	}

	/**
	 * 汇总货位数据。
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param newM_locator
	 *            vo[]
	 */
	public void sumLocator(LocatorVO[] voaMyLocator, boolean bNegative) {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		if (voaMyLocator != null && voaMyLocator.length > 0) {
			// 暂存器
			java.util.Vector vTemp = new java.util.Vector();
			java.util.Hashtable htSpaceKey = new java.util.Hashtable();
			String sSpaceid = null;
			UFDouble dInvSumNumIn = null; // 汇总的入库存货数量,辅数量
			UFDouble dInvSumAstNumIn = null;
			UFDouble dInvSumNumOut = null; // 汇总的出库存货数量,辅数量
			UFDouble dInvSumAstNumOut = null;
			LocatorVO voLoc = null;
			//
			for (int i = 0; i < voaMyLocator.length; i++) {
				sSpaceid = voaMyLocator[i].getCspaceid();
				dInvSumNumIn = ZERO;
				dInvSumAstNumIn = ZERO;
				dInvSumNumOut = ZERO;
				dInvSumAstNumOut = ZERO;
				// 不包含时需要汇总
				if (sSpaceid != null && !htSpaceKey.containsKey(sSpaceid)) {
					htSpaceKey.put(sSpaceid, "");
					// loop from i !!!!!!!!
					for (int j = i; j < voaMyLocator.length; j++) {
						if (sSpaceid.equals(voaMyLocator[j].getCspaceid())) {
							// 入库
							if (voaMyLocator[j].getNinspacenum() != null)
								dInvSumNumIn = dInvSumNumIn.add(voaMyLocator[j]
										.getNinspacenum());
							if (voaMyLocator[j].getNinspaceassistnum() != null)
								dInvSumAstNumIn = dInvSumAstNumIn
										.add(voaMyLocator[j]
												.getNinspaceassistnum());
							// 出库
							if (voaMyLocator[j].getNoutspacenum() != null)
								dInvSumNumOut = dInvSumNumOut
										.add(voaMyLocator[j].getNoutspacenum());
							if (voaMyLocator[j].getNoutspaceassistnum() != null)
								dInvSumAstNumOut = dInvSumAstNumOut
										.add(voaMyLocator[j]
												.getNoutspaceassistnum());
						}
					}
					voLoc = (LocatorVO) voaMyLocator[i].clone();
					// set value
					if (bNegative) {
						dInvSumNumIn = ZERO.sub(dInvSumNumIn);
						dInvSumAstNumIn = ZERO.sub(dInvSumAstNumIn);
						dInvSumNumOut = ZERO.sub(dInvSumNumOut);
						dInvSumAstNumOut = ZERO.sub(dInvSumAstNumOut);
					}
					voLoc.setNinspacenum(dInvSumNumIn);
					voLoc.setNinspaceassistnum(dInvSumAstNumIn);
					voLoc.setNoutspacenum(dInvSumNumOut);
					voLoc.setNoutspaceassistnum(dInvSumAstNumOut);
					// put to Vector;
					vTemp.add(voLoc);
				}
			}
			// m_locator重新赋值
			if (vTemp.size() > 0) {
				locator = new LocatorVO[vTemp.size()];
				vTemp.copyInto(locator);
			}
		}
	}

	/**
	 * ****************************************** 功能：将货位
	 * LoctorVO[]与表体上的cspaceid同步 <|>
	 * 
	 * 创建日期：(2004-3-12 21:30:36)
	 * 
	 * @param：
	 * 
	 * @return： ******************************************
	 */
	public void synLocator() {
		LocatorVO[] locator = (LocatorVO[]) super.getAttributeValue("locator");
		// cspaceid -> locator
		if (getCspaceid() != null && getCspaceid().trim().length() > 0) {
			if ((locator == null || locator.length == 0)
					&& (!CheckTools.isNullOrZero(getNinnum())
							|| !CheckTools.isNullOrZero(getNoutnum())
							|| !CheckTools.isNullOrZero(getNingrossnum()) || !CheckTools
							.isNullOrZero(getNoutgrossnum()))) {

				locator = new nc.vo.ic.pub.locator.LocatorVO[1];
				locator[0] = new nc.vo.ic.pub.locator.LocatorVO();
				locator[0].setCspaceid(getCspaceid());
				locator[0].setCgeneralbid(getCgeneralbid());
				if (getNinnum() != null) {
					locator[0].setNinspacenum(getNinnum());
				} else if (getNoutnum() != null) {
					locator[0].setNoutspacenum(getNoutnum());
				}
				if (getNinassistnum() != null) {
					locator[0].setNinspaceassistnum(getNinassistnum());
				} else if (getNoutassistnum() != null) {
					locator[0].setNoutspaceassistnum(getNoutassistnum());
				}

				if (getNingrossnum() != null) {
					locator[0].setNingrossnum(getNingrossnum());
				} else if (getNoutgrossnum() != null) {
					locator[0].setNoutgrossnum(getNoutgrossnum());
				}

				super.setAttributeValue("locator", locator);
			}

		}

		// locator-> cspaceid
		if (locator != null && locator.length == 1 && locator[0] != null
				&& getCspaceid() == null) {
			setCspaceid(locator[0].getCspaceid());

		}

	}

	/*
	 * （非 Javadoc）
	 * 
	 * @see nc.vo.pub.SuperVO#getParentPKFieldName()
	 */
	public String getParentPKFieldName() {
		return "cgeneralhid";
	}

	/*
	 * （非 Javadoc）
	 * 
	 * @see nc.vo.pub.SuperVO#getPKFieldName()
	 */
	public String getPKFieldName() {
		return "cgeneralbid";
	}

	/*
	 * （非 Javadoc）
	 * 
	 * @see nc.vo.pub.SuperVO#getTableName()
	 */
	public String getTableName() {
		return "ic_general_b";
	}

	public BatchcodeVO getBatchCodeVO() {
		BatchcodeVO voBatchcode = (BatchcodeVO) super
				.getAttributeValue("batchcodevo");

		if (voBatchcode == null) {
			voBatchcode = new BatchcodeVO();

			SmartVOUtilExt.copyVOByVO(voBatchcode, IItemKey.batchcodeDocFiels,
					this, IItemKey.batchcodefielsAtBillBody);
			voBatchcode.setVbatchcode((String) getAttributeValue("vbatchcode"));
			voBatchcode.setPk_invbasdoc((String) getCinvbasid());
			voBatchcode.setPk_invmandoc((String) getCinventoryid());

			// voBatchcode.setVbatchcode((String)getAttributeValue("vbatchcode"));
			// voBatchcode.setCqualitylevelid((String)getAttributeValue("cqualitylevelid"));
			// voBatchcode.setDinvalidate((UFDate)getAttributeValue("dvalidate"));
			// voBatchcode.setDproducedate((UFDate)getAttributeValue("dproducedate"));
			// voBatchcode.setPk_invbasdoc((String)getAttributeValue("pk_invbasdoc"));
			// voBatchcode.setPk_invmandoc((String)getAttributeValue("pk_invmandoc"));
			// voBatchcode.setTchecktime(nc.vo.ic.pub.check.CheckTools.toUFDateTime(getAttributeValue("tchecktime")));
			// voBatchcode.setTbatchtime(nc.vo.ic.pub.check.CheckTools.toUFDateTime(getAttributeValue("tbatchtime")));
			// /* if (null != getAttributeValue("tbatchtime"))
			// voBatchcode.setTbatchtime(new
			// UFDateTime((String)getAttributeValue("tbatchtime")));
			// else
			// voBatchcode.setTbatchtime(null);*/
			// voBatchcode.setVvendbatchcode((String)getAttributeValue("vvendbatchcode"));
			// String sKey = null;
			// for(int i=1;i<21;i++){
			// sKey="vdef"+String.valueOf(i).trim();
			// voBatchcode.setAttributeValue(sKey,getAttributeValue(sKey));
			//			
			// }

		}
		return voBatchcode;
	}

	public void setBatchCodeVO(BatchcodeVO bcvos) {
		if (bcvos == null)
			return;
		SmartVOUtilExt.copyVOByVO(this, IItemKey.batchcodefielsAtBillBody,
				bcvos, IItemKey.batchcodeDocFiels);
		setAttributeValue("vbatchcode", bcvos.getVbatchcode());
		setAttributeValue("pk_invbasdoc", bcvos.getPk_invbasdoc());
		setAttributeValue("pk_invmandoc", bcvos.getPk_invmandoc());

		// String sKey = null;
		// for(int i=1;i<21;i++){
		// sKey="vdef"+String.valueOf(i).trim();
		// setAttributeValue(sKey, bcvos.getAttributeValue(sKey));
		// }
		//	
		// setAttributeValue("vbatchcode",bcvos.getVbatchcode());
		// setAttributeValue("cqualitylevelid",bcvos.getCqualitylevelid());
		// setAttributeValue("dvalidate",bcvos.getDinvalidate());
		// setAttributeValue("dproducedate",bcvos.getDproducedate());
		// setAttributeValue("pk_invbasdoc",bcvos.getPk_invbasdoc());
		// setAttributeValue("pk_invmandoc",bcvos.getPk_invmandoc());
		// setAttributeValue("tchecktime",bcvos.getTchecktime());
		// setAttributeValue("tbatchtime",bcvos.getTbatchtime());
		// setAttributeValue("vvendbatchcode",bcvos.getVvendbatchcode());

	}

	/**
	 * 累计对冲数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNrushnum() {
		return SmartVODataUtils
				.getUFDouble(getAttributeValue(IItemKey.nrushnum));
	}

	/**
	 * 给属性 累计对冲数量 赋值。
	 * 
	 * 
	 * 
	 */
	public void setNrushnum(UFDouble value) {
		setAttributeValue(IItemKey.nrushnum, value);
	}

	/**
	 * 出库单下游确认应收数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtoarnum() {
		return CheckTools.toUFDouble(getAttributeValue(IItemKey.ntoarnum));
	}

	/**
	 * 出库单下游确认应收数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param UFDouble
	 */
	public void setNtoarnum(UFDouble value) {
		setAttributeValue(IItemKey.ntoarnum, value);
	}

	/**
	 * 内部交易暂估日期
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDate getDtozgdate() {
		return CheckTools.toUFDate(getAttributeValue(IItemKey.dtozgdate));
	}

	/**
	 * 内部交易暂估日期
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param UFDouble
	 */
	public void setDtozgdate(UFDate value) {
		setAttributeValue(IItemKey.dtozgdate, value);
	}

	/**
	 * 
	 * 方法功能描述：获得是否已经下发U8零售的标识（只用于调拨出库单）。
	 * <p>
	 * 
	 * @return 是否已经下发U8零售的标识
	 *         <p>
	 * @author duy
	 * @time 2007-4-13 下午01:41:25
	 */
	public UFBoolean getBtou8rm() {
		Object value = getAttributeValue("btou8rm");
		if (value != null)
			return SmartVODataUtils.getUFBoolean(value);
		else
			return uffalse;
	}

	/**
	 * 
	 * 方法功能描述：设置是否已经下发U8零售的标识（只用于调拨出库单）。
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param btou8rm
	 *            是否已经下发U8零售的标识
	 *            <p>
	 * @author duy
	 * @time 2007-4-13 下午01:42:41
	 */
	public void setBtou8rm(UFBoolean btou8rm) {
		setAttributeValue("btou8rm", btou8rm);
	}

	/**
	 * 
	 * 方法功能描述：获得销售退货入库中退货原因的ID。
	 * <p>
	 * 
	 * @return 退货原因的ID
	 *         <p>
	 * @author duy
	 * @time 2007-4-13 下午01:43:13
	 */
	public String getPk_returnreason() {
		return (String) getAttributeValue("pk_returnreason");
	}

	/**
	 * 
	 * 方法功能描述：设置销售退货入库中退货原因的ID。
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param pk_returnreason
	 *            退货原因的ID
	 *            <p>
	 * @author duy
	 * @time 2007-4-13 下午01:44:11
	 */
	public void setPk_returnreason(String pk_returnreason) {
		setAttributeValue("pk_returnreason", pk_returnreason);
	}

	/**
	 * 
	 * 方法功能描述：获得U8零售中单据类型的编码。
	 * <p>
	 * 
	 * @return U8零售中单据类型的编码
	 *         <p>
	 * @author duy
	 * @time 2007-4-13 下午01:44:54
	 */
	public String getVbilltypeu8rm() {
		return (String) getAttributeValue("vbilltypeu8rm");
	}

	/**
	 * 
	 * 方法功能描述：设置U8零售中单据类型的编码。
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param vbilltypeu8rm
	 *            U8零售中单据类型的编码
	 *            <p>
	 * @author duy
	 * @time 2007-4-13 下午01:45:34
	 */
	public void setVbilltypeu8rm(String vbilltypeu8rm) {
		setAttributeValue("vbilltypeu8rm", vbilltypeu8rm);
	}

	/**
	 * 累计出库退回数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNaccumoutbacknum() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.naccumoutbacknum));
	}

	/**
	 * 累计出库退回数量
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @param UFDouble
	 */
	public void setNaccumoutbacknum(UFDouble value) {
		setAttributeValue(IItemKey.naccumoutbacknum, value);
	}

	/**
	 * 红字退回单对应蓝字单据类型编码
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsignwasttype() {
		return (String) getAttributeValue(IItemKey.csignwasttype);
	}

	/**
	 * 红字退回单对应蓝字单据类型编码
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsignwasttype(String value) {
		setAttributeValue(IItemKey.csignwasttype, value);
	}

	/**
	 * 红字退回单对应蓝字单ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsignwasthid() {
		return (String) getAttributeValue(IItemKey.csignwasthid);
	}

	/**
	 * 红字退回单对应蓝字单ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsignwasthid(String value) {
		setAttributeValue(IItemKey.csignwasthid, value);
	}

	/**
	 * 红字退回单对应蓝字单据号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getVsignwastcode() {
		return (String) getAttributeValue(IItemKey.vsignwastcode);
	}

	/**
	 * 红字退回单对应蓝字单据号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setVsignwastcode(String value) {
		setAttributeValue(IItemKey.vsignwastcode, value);
	}

	/**
	 * 红字退回单对应蓝字单行ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsignwastbid() {
		return (String) getAttributeValue(IItemKey.csignwastbid);
	}

	/**
	 * 红字退回单对应蓝字单行ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsignwastbid(String value) {
		setAttributeValue(IItemKey.csignwastbid, value);
	}

	/**
	 * 红字退回单对应蓝字单行号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getVsignwastrowno() {
		return (String) getAttributeValue(IItemKey.vsignwastrowno);
	}

	/**
	 * 红字退回单对应蓝字单行号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setVsignwastrowno(String value) {
		setAttributeValue(IItemKey.vsignwastrowno, value);
	}

	/**
	 * 签收单据类型编码
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsourcewasttype() {
		return (String) getAttributeValue(IItemKey.csourcewasttype);
	}

	/**
	 * 签收单据类型编码
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsourcewasttype(String value) {
		setAttributeValue(IItemKey.csourcewasttype, value);
	}

	/**
	 * 签收单ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsourcewasthid() {
		return (String) getAttributeValue(IItemKey.csourcewasthid);
	}

	/**
	 * 签收单ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsourcewasthid(String value) {
		setAttributeValue(IItemKey.csourcewasthid, value);
	}

	/**
	 * 签收单据号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getVsourcewastcode() {
		return (String) getAttributeValue(IItemKey.vsourcewastcode);
	}

	/**
	 * 签收单据号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setVsourcewastcode(String value) {
		setAttributeValue(IItemKey.vsourcewastcode, value);
	}

	/**
	 * 签收单行ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getCsourcewastbid() {
		return (String) getAttributeValue(IItemKey.csourcewastbid);
	}

	/**
	 * 签收单行ID
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setCsourcewastbid(String value) {
		setAttributeValue(IItemKey.csourcewastbid, value);
	}

	/**
	 * 签收单行号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public String getVsourcewastrowno() {
		return (String) getAttributeValue(IItemKey.vsourcewastrowno);
	}

	/**
	 * 签收单行号
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setVsourcewastrowno(String value) {
		setAttributeValue(IItemKey.vsourcewastrowno, value);
	}

	/**
	 * 处理货位精度
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void procLocNumDigit(int numdigit, int astdigit) {
		if (this.getLocator() != null && this.getLocator().length > 0) {
			LocatorVO[] locvos = this.getLocator();
			for (int i = 0, loop = locvos.length; i < loop; i++) {
				locvos[i].setNoutspacenum(SmartVOUtilExt.getDigitUFDouble(
						locvos[i].getNoutspacenum(), numdigit));
				locvos[i].setNoutgrossnum(SmartVOUtilExt.getDigitUFDouble(
						locvos[i].getNoutgrossnum(), numdigit));
				locvos[i].setNoutspaceassistnum(SmartVOUtilExt
						.getDigitUFDouble(locvos[i].getNoutspaceassistnum(),
								astdigit));

				locvos[i].setNinspacenum(SmartVOUtilExt.getDigitUFDouble(
						locvos[i].getNinspacenum(), numdigit));
				locvos[i].setNingrossnum(SmartVOUtilExt.getDigitUFDouble(
						locvos[i].getNingrossnum(), numdigit));
				locvos[i].setNinspaceassistnum(SmartVOUtilExt.getDigitUFDouble(
						locvos[i].getNinspaceassistnum(), astdigit));
			}
		}

	}

	/**
	 * 清vbatchcode
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void clearBatchCodeData() {
		for (String key : IItemKey.batchcodefielsAtBillBody) {
			this.setVbatchcode(null);
			this.setAttributeValue(key, null);
		}
		this.setAttributeValue("batchcodevo", null);
	}

	/**
	 * 调拨出库暂估标志
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public UFBoolean getBtooutzgflag() {
		return CheckTools.toUFBoolean(getAttributeValue(IItemKey.btooutzgflag));
	}

	/**
	 * 调拨出库暂估标志
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setBtooutzgflag(UFBoolean value) {
		setAttributeValue(IItemKey.btooutzgflag, value);
	}

	/**
	 * 调拨出库传IA时机
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public Integer getFtoouttransflag() {
		return CheckTools
				.toInteger(getAttributeValue(IItemKey.ftoouttransflag));
	}

	/**
	 * 调拨出库传IA时机
	 * 
	 * 创建日期：(2001-6-16)
	 * 
	 * @return String
	 */
	public void setFtoouttransflag(Integer value) {
		setAttributeValue(IItemKey.ftoouttransflag, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：原币无税单价
	 * 
	 * @return
	 */
	public UFDouble getNquotentprice() {
		return CheckTools.toUFDouble(getAttributeValue(IItemKey.nquotentprice));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：原币无税单价
	 * 
	 * @param value
	 */
	public void setNquotentprice(UFDouble value) {
		setAttributeValue(IItemKey.nquotentprice, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：出库签收本币无税金额
	 * 
	 * @return
	 */
	public UFDouble getNsignsummny() {
		return CheckTools.toUFDouble(getAttributeValue(IItemKey.nsignsummny));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：出库签收本币无税金额
	 * 
	 * @param value
	 */
	public void setNsignsummny(UFDouble value) {
		setAttributeValue(IItemKey.nsignsummny, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：出库签收本币含税金额
	 * 
	 * @return
	 */
	public UFDouble getNsigntaxsummny() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.nsigntaxsummny));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：出库签收本币含税金额
	 * 
	 * @param value
	 */
	public void setNsigntaxsummny(UFDouble value) {
		setAttributeValue(IItemKey.nsigntaxsummny, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：出库签收原币无税金额
	 * 
	 * @return
	 */
	public UFDouble getNorisignsummny() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.norisignsummny));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：出库签收原币无税金额
	 * 
	 * @param value
	 */
	public void setNorisignsummny(UFDouble value) {
		setAttributeValue(IItemKey.norisignsummny, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：出库签收原币含税金额
	 * 
	 * @return
	 */
	public UFDouble getNorisigntaxsummny() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.norisigntaxsummny));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：出库签收原币含税金额
	 * 
	 * @param value
	 */
	public void setNorisigntaxsummny(UFDouble value) {
		setAttributeValue(IItemKey.norisigntaxsummny, value);
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：累计出库签收数量
	 * 
	 * @return
	 */
	public UFDouble getNaccumoutsignnum() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.naccumoutsignnum));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：累计出库签收数量
	 * 
	 * @param value
	 */
	public void setNaccumoutsignnum(UFDouble value) {
		setAttributeValue(IItemKey.naccumoutsignnum, value);
	}
	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：累计途损数量
	 * 
	 * @return
	 */
	public UFDouble getNaccumwastnum() {
		return CheckTools
				.toUFDouble(getAttributeValue(IItemKey.naccumwastnum));
	}

	/**
	 * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：累计途损数量
	 * 
	 * @param value
	 */
	public void setNaccumwastnum(UFDouble value) {
		setAttributeValue(IItemKey.naccumwastnum, value);
	}
	


	/**
	 * 表体库存组织PK
	 * @return
	 */
	public String getPk_bodycalbody() {
	    return (String)getAttributeValue(IItemKey.pk_bodycalbody);
	}

	/**
	 * 表体库存组织PK
	 * @param value
	 */
	public void setPk_bodycalbody(String value) {
	    setAttributeValue(IItemKey.pk_bodycalbody, value);
	}

	/**
	 * 表体仓库PK
	 * @return
	 */
	public String getCbodywarehouseid() {
	    return (String)getAttributeValue(IItemKey.cbodywarehouseid);
	}

	/**
	 * 表体仓库PK
	 * @param value
	 */
	public void setCbodywarehouseid(String value) {
	    setAttributeValue(IItemKey.cbodywarehouseid, value);
	}

	/**
	 * 表体库存单据类型编码
	 * @return
	 */
	public String getCbodybilltypecode() {
	    return (String)getAttributeValue(IItemKey.cbodybilltypecode);
	}

	/**
	 * 表体库存单据类型编码
	 * @param value
	 */
	public void setCbodybilltypecode(String value) {
	    setAttributeValue(IItemKey.cbodybilltypecode, value);
	}
  
  /**
   * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：原币无税金额
   * 
   * @return
   */
  public UFDouble getNquotentmny() {
    return CheckTools
        .toUFDouble(getAttributeValue(IItemKey.nquotentmny));
  }

  /**
   * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：原币无税金额
   * 
   * @param value
   */
  public void setNquotentmny(UFDouble value) {
    setAttributeValue(IItemKey.nquotentmny, value);
  }
  
  /**
   * 创建人：刘家清 创建日期：2008-3-11上午09:20:01 创建原因：入库单累计采购费用结算次数
   * 
   * @return
   */
  public UFDouble getNfeesettletimes() {
    return CheckTools
        .toUFDouble(getAttributeValue(IItemKey.nfeesettletimes));
  }

  /**
   * 创建人：刘家清 创建日期：2008-3-11上午09:19:55 创建原因：入库单累计采购费用结算次数
   * 
   * @param value
   */
  public void setNfeesettletimes(UFDouble value) {
    setAttributeValue(IItemKey.nfeesettletimes, value);
  }
  
  /**
   * creceiveareaid
   * @return
   */
  public String getCreceiveareaid() {
      return (String)getAttributeValue(IItemKey.creceiveareaid);
  }

  /**
   * creceiveareaid
   * @param value
   */
  public void setCreceiveareaid(String value) {
      setAttributeValue(IItemKey.creceiveareaid, value);
  }
  
  /**
   * creceivepointid
   * @return
   */
  public String getCreceivepointid() {
      return (String)getAttributeValue(IItemKey.creceivepointid);
  }

  /**
   * creceivepointid
   * @param value
   */
  public void setCreceivepointid(String value) {
      setAttributeValue(IItemKey.creceivepointid, value);
  }
  
  /**
   * vreceiveaddress
   * @return
   */
  public String getVreceiveaddress() {
      return (String)getAttributeValue(IItemKey.vreceiveaddress);
  }

  /**
   * vreceiveaddress
   * @param value
   */
  public void setVreceiveaddress(String value) {
      setAttributeValue(IItemKey.vreceiveaddress, value);
  }
  
  /**
   * ddeliverdate
   * @return
   */
  public UFDate getDdeliverdate() {
      return (UFDate)getAttributeValue(IItemKey.ddeliverdate);
  }

  /**
   * vreceiveaddress
   * @param value
   */
  public void setDdeliverdate(UFDate value) {
      setAttributeValue(IItemKey.ddeliverdate, value );
  }
  
  //v56 新需求临时去掉 lirr 2009-03-03
    public Integer getIsAsset() {
		return SmartVODataUtils.getInteger(super.getAttributeValue("isAsset"));
	}
  public void setIsAsset(Integer newIsAsset) {

		setAttributeValue("isAsset", newIsAsset);
	}
 /**
  * edit by zengyugao
  */
  public UFDouble getGrossprice(){
	  Object value = getAttributeValue("grossprice");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setGrossprice(UFDouble value) {
		setAttributeValue("grossprice", value);
	}
  public UFDouble getGrossweight(){
	  Object value = getAttributeValue("grossweight");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setGrossweight(UFDouble value) {
		setAttributeValue("grossweight", value);
	}
  public UFDouble getGrosssumny(){
	  Object value = getAttributeValue("grosssumny");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setGrosssumny(UFDouble value) {
		setAttributeValue("grosssumny", value);
	}
  public UFDouble getStuffprice(){
	  Object value = getAttributeValue("stuffprice");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setStuffprice(UFDouble value) {
		setAttributeValue("stuffprice", value);
	}
  public UFDouble getStuffweight(){
	  Object value = getAttributeValue("stuffweight");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setStuffweight(UFDouble value) {
		setAttributeValue("stuffweight", value);
	}
  
  public UFDouble getStuffsumny(){
	  Object value = getAttributeValue("stuffsumny");
		return SmartVODataUtils.getUFDouble(value);
  }
  public void setStuffsumny(UFDouble value) {
		setAttributeValue("stuffsumny", value);
	}
//----------------
public Object getEqualValueToDownByRule(String upBillType, String myBillType) {
	// TODO 自动生成方法存根
	 return getCgeneralbid();
}

public Object getEqualValueToDownByRule(String myBillType, String downBillType, String sMyKey) {
	// TODO 自动生成方法存根
    if ("noutnum".equals(sMyKey)) {
        return getNoutnum();
      } else if ("cquotecurrency".equals(sMyKey)) {
        return getAttributeValue("cquotecurrency");
      } else if ("nquotentprice".equals(sMyKey)) {
        return getNquotentprice();
      } else if ("nquotentmny".equals(sMyKey)) {
        return getNquotentmny();
      } else if ("nquoteprice".equals(sMyKey)) {
        return getAttributeValue("nquoteprice");
      } else if ("nquotemny".equals(sMyKey)) {
        return getAttributeValue("nquotemny");
      }
      
      return null;
}	

}
