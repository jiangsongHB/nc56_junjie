/*******************************************************************************
 * *************************************************************\ The skeleton
 * of this class is generated by an automatic * code generator for NC product. * \
 ******************************************************************************/

package nc.bs.ps.settle;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import nc.bs.bd.b21.BusinessCurrencyRateUtil;
import nc.bs.framework.common.NCLocator;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.pi.InvoiceImpl;
import nc.bs.pu.pub.BsPuTool;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pu.pub.PubImpl;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.scm.pub.TempTableDMO;
import nc.itf.pu.inter.IPuToTO_PuToTO;
import nc.itf.scm.cenpur.service.ChgDataUtil;
import nc.itf.scm.cenpur.service.TempTableUtil;
import nc.itf.uap.busibean.ISysInitQry;
import nc.ui.bd.b21.CurrParamQuery;
import nc.vo.ia.bill.BillHeaderVO;
import nc.vo.ia.bill.BillItemVO;
import nc.vo.ia.bill.BillVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.pi.InvoiceHeaderVO;
import nc.vo.pi.InvoiceItemVO;
import nc.vo.ps.estimate.GeneralBb3VO;
import nc.vo.ps.estimate.GeneralHItemVO;
import nc.vo.ps.settle.FeeDetailVO;
import nc.vo.ps.settle.FeeinvoiceVO;
import nc.vo.ps.settle.IdTsData;
import nc.vo.ps.settle.IinvoiceVO;
import nc.vo.ps.settle.OorderVO;
import nc.vo.ps.settle.SaledataVO;
import nc.vo.ps.settle.SettlebillHeaderVO;
import nc.vo.ps.settle.SettlebillItemVO;
import nc.vo.ps.settle.SettlebillVO;
import nc.vo.ps.settle.StockVO;
import nc.vo.pu.exception.RwtPiToPoException;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.cenpur.service.ChgDocPkVO;
import nc.vo.scm.cenpur.service.ChgPriceMnyVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pu.RelationsCalVO;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.TempTableVO;

/**
 * Settlebill的DMO类。 创建日期：(2001-5-26)
 * 
 * @author：
 */
public class SettleDMO extends DataManageObject {
  /**
   * SettlebillDMO 构造子注解。
   * 
   * @exception javax.naming.NamingException
   *              父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException
   *              父类构造子抛出的异常。
   */
  public SettleDMO()
      throws javax.naming.NamingException, SystemException {
    super();
  }

  /**
   * SettlebillDMO 构造子注解。
   * 
   * @param dbName
   *          java.lang.String 在EJB Server中配置的数据库DataSource名称。
   * @exception javax.naming.NamingException
   *              父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException
   *              父类构造子抛出的异常。
   */
  public SettleDMO(
      String dbName)
      throws javax.naming.NamingException, SystemException {
    super(dbName);
  }

  /**
   * 此处插入方法说明。 功能描述:航天中汇专用(删除bd_cumandoc,bd_custbank,bd_custaddr,bd_cubasdoc的记录)
   * 输入参数: 返回值: 异常处理: 日期:2002/09/14
   */
  public void deleteVendorRecord(String pk_cubasdoc[]) throws SQLException {

    String sql1 = "delete from bd_cumandoc where pk_cubasdoc = ?";
    String sql2 = "delete from bd_custbank where pk_cubasdoc = ?";
    String sql3 = "delete from bd_custaddr where pk_cubasdoc = ?";
    String sql4 = "delete from bd_cubasdoc where pk_cubasdoc = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();

      for (int i = 0; i < pk_cubasdoc.length; i++) {
        String s = pk_cubasdoc[i];
        if (s != null && s.trim().length() > 0) {
          stmt = con.prepareStatement(sql1);
          stmt.setString(1, s);
          stmt.executeUpdate();

          stmt = con.prepareStatement(sql2);
          stmt.setString(1, s);
          stmt.executeUpdate();

          stmt = con.prepareStatement(sql3);
          stmt.setString(1, s);
          stmt.executeUpdate();

          stmt = con.prepareStatement(sql4);
          stmt.setString(1, s);
          stmt.executeUpdate();

        }
      }
      //
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

  }

  /**
   * 功能描述:作废结算单 输入参数:结算单VO
   * 
   * @修改 zhf
   * @修改时间 2008-7-22上午11:17:47
   * @修改说明 如果为费用结算单删除对应费用结算明细子表
   */
  public void discardSettlebill(SettlebillVO VO) throws java.sql.SQLException {

    String sql1 = "update po_settlebill set dr = 1 where csettlebillid = ?";
    String sql2 = "update po_settlebill_b set dr = 1 where csettlebillid = ?";
    String sql3 = "update po_settle_feedetail set dr = 1 where csettlebillid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql2);
      stmt.setString(1, VO.getHeadVO().getCsettlebillid());
      executeUpdate(stmt);
      if (stmt != null)
        stmt.close();

      stmt = con.prepareStatement(sql1);
      stmt.setString(1, VO.getHeadVO().getCsettlebillid());
      executeUpdate(stmt);

      stmt = con.prepareStatement(sql3);
      stmt.setString(1, VO.getHeadVO().getCsettlebillid());
      executeUpdate(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 功能描述:直运发票结算 输入参数: 返回值:结算单表头主键+表体主键 异常处理:
   */
  public Vector doDirectInvoiceBalance(Vector vKey, SettlebillVO settlebillVO,
      IinvoiceVO iinvoiceVOs[], String unitCode, String busitypeID,
      String operatorID, String strOprType) throws java.sql.SQLException {
    //
    String key = "";
    Vector v = new Vector();
    try {
      // 插入结算单
      SettlebillHeaderVO head = settlebillVO.getHeadVO();
      if (vKey == null || vKey.size() == 0 || vKey.elementAt(0) == null
          || ((String) vKey.elementAt(0)).length() == 0) {
        key = insertHead(head);
      }
      else {
        key = (String) vKey.elementAt(0);
      }

      v.addElement(key);

      SettlebillItemVO body[] = settlebillVO.getBodyVO();
      String s[] = insertBody(body, key);
      for (int i = 0; i < s.length; i++) {
        v.addElement(s[i]);
      }

      // 更新发票
      if (iinvoiceVOs != null && iinvoiceVOs.length > 0) {
        updateInvoiceDirect(iinvoiceVOs);
      }
      //结算完毕自动传应付
      new InvoiceImpl().settleAllToARAP(body,unitCode,operatorID, strOprType);    
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    //
    return v;
  }

  /**
   * 功能描述:基于订单接收发票时结算 输入参数: 返回值:结算单表头主键+表体主键 异常处理:
   */
  public Vector doOrderToInvoiceSettle(SettlebillVO settlebillVO,
      StockVO stockVOs[], IinvoiceVO iinvoiceVOs[],String sOperator, String strOprType)
      throws java.sql.SQLException {

    Vector v = new Vector();
    try {
      // 插入结算单
      SettlebillHeaderVO head = settlebillVO.getHeadVO();
      String key = insertHead(head);

      v.addElement(key);

      SettlebillItemVO body[] = settlebillVO.getBodyVO();
      String s[] = insertBody(body, key);
      for (int i = 0; i < s.length; i++) {
        v.addElement(s[i]);
      }

      // 更新入库单
      if (stockVOs != null && stockVOs.length > 0) {
        updateStock(stockVOs, false);
      }

      // 更新发票
      if (iinvoiceVOs != null && iinvoiceVOs.length > 0) {
        updateInvoice(iinvoiceVOs);
      }
      // 结算完毕自动传应付
      String unitCode = null;
      for(StockVO vo:stockVOs){
        if(vo==null) continue;
        unitCode=vo.getPk_corp();
        if (unitCode == null || unitCode.trim().length() == 0) {// zhf add v55
          // 先取开票公司如不存在取收货公司（支持其他入库单情况）
          unitCode = stockVOs[0].getPk_stockcorp();
        }
      }
      new InvoiceImpl().settleAllToARAP(body,unitCode,sOperator, strOprType); 
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "doOrderToInvoiceSettle",
        new Object[] {
            settlebillVO, stockVOs, iinvoiceVOs
        });
    /** ********************************************************** */

    return v;
  }

  /**
   * 功能描述:入库单生成发票时结算 输入参数: 返回值:结算单表头主键+表体主键 异常处理:
   */
  public Vector doStockToInvoiceBalance(Vector vKey, SettlebillVO settlebillVO,
      StockVO stockVOs[], IinvoiceVO iinvoiceVOs[], String unitCode,
      String busitypeID, String operatorID, String strOprType) throws BusinessException {

    Vector v = new Vector();

    try {
      String key = "";

      // 插入结算单
      SettlebillHeaderVO head = settlebillVO.getHeadVO();
      if (vKey == null || vKey.size() == 0 || vKey.elementAt(0) == null
          || ((String) vKey.elementAt(0)).length() == 0) {
        key = insertHead(head);
      }
      else {
        key = (String) vKey.elementAt(0);
      }

      v.addElement(key);

      SettlebillItemVO body[] = settlebillVO.getBodyVO();
      String s[] = insertBody(body, key);
      for (int i = 0; i < s.length; i++) {
        v.addElement(s[i]);
      }

      // 更新入库单
      if (stockVOs != null && stockVOs.length > 0) {
        updateStock(stockVOs, false);
      }

      // 更新发票
      if (iinvoiceVOs != null && iinvoiceVOs.length > 0) {
        updateInvoice(iinvoiceVOs);
      }
      // 结算完毕自动传应付
      new InvoiceImpl().settleAllToARAP(body,unitCode,operatorID, strOprType); 

    }
    catch (Exception e) {
      throw new BusinessException(e);
    }
    //
    return v;
  }

  /**
   * 功能描述:航天中汇专用(获得供应商管理档案的公司ID) 输入参数: 返回值: 异常处理: 日期:2002/09/14
   */
  public String[] getCorpIDs() throws SQLException {

    String sql = "select distinct pk_corp from bd_cumandoc where dr = 0";

    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        if (s != null && s.trim().length() > 0)
          v.addElement(s);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    if (v.size() > 0) {
      String s[] = new String[v.size()];
      v.copyInto(s);
      return s;
    }

    return null;
  }

  /**
   * 功能描述:航天中汇专用(获得供应商管理档案中custflag为2或3的pk_cubasdoc及custname,custflag) 输入参数:
   * 返回值: 异常处理: 日期:2002/09/14
   */
  public Vector getCustIDAndNameFromCust(String pk_corp) throws SQLException {

    String sql = "select distinct A.pk_cubasdoc, custname, custflag ";
    sql += "from bd_cubasdoc A, bd_cumandoc B ";
    sql += "where B.pk_corp = ? and A.pk_cubasdoc = B.pk_cubasdoc ";
    sql += "and (custflag = '2' or custflag = '3') and A.dr = 0 and B.dr = 0";

    Vector v = new Vector();
    Vector v1 = new Vector();
    Vector v2 = new Vector();
    Vector v3 = new Vector();

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_corp);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        String s3 = rs.getString(3);

        v1.addElement(s1);
        v2.addElement(s2);
        v3.addElement(s3);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    String s1[] = new String[v1.size()];
    v1.copyInto(s1);
    String s2[] = new String[v2.size()];
    v2.copyInto(s2);
    String s3[] = new String[v3.size()];
    v3.copyInto(s3);

    v.addElement(s1);
    v.addElement(s2);
    v.addElement(s3);

    return v;
  }

  /**
   * 功能描述:航天中汇专用(获得供应商管理档案中custflag为1或空的pk_cubasdoc及custname,custflag) 输入参数:
   * 返回值: 异常处理: 日期:2002/09/14
   */
  public Vector getCustIDAndNameFromVendor(String pk_corp) throws SQLException {

    String sql = "select distinct A.pk_cubasdoc, custname, custflag ";
    sql += "from bd_cubasdoc A, bd_cumandoc B ";
    sql += "where B.pk_corp = ? and A.pk_cubasdoc = B.pk_cubasdoc ";
    sql += "and (custflag = '1' or custflag = ' ') and A.dr = 0 and B.dr = 0";

    Vector v = new Vector();
    Vector v1 = new Vector();
    Vector v2 = new Vector();
    Vector v3 = new Vector();

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_corp);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        String s3 = rs.getString(3);

        v1.addElement(s1);
        v2.addElement(s2);
        v3.addElement(s3);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    String s1[] = new String[v1.size()];
    v1.copyInto(s1);
    String s2[] = new String[v2.size()];
    v2.copyInto(s2);
    String s3[] = new String[v3.size()];
    v3.copyInto(s3);

    v.addElement(s1);
    v.addElement(s2);
    v.addElement(s3);

    return v;
  }

  /**
   * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
   */
  public String[] getInvBaseID(String pk_invmandoc[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "getInvBaseID", new Object[] {
      pk_invmandoc
    });
    /** ********************************************************** */

    String sql = "select pk_invmandoc,pk_invbasdoc from bd_invmandoc where dr = 0 and pk_invmandoc in ";
    /*
     * ('"; for(int i = 0; i < pk_invmandoc.length - 1; i++) sql +=
     * pk_invmandoc[i] + "','"; sql += pk_invmandoc[pk_invmandoc.length - 1] +
     * "')";
     */
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(pk_invmandoc,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU91,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/* @res "调用临时表处理出现异常:" */
          + e.getMessage());
    }
    sql += strIdSet;
    //
    Hashtable t = new Hashtable();
    String s[] = new String[pk_invmandoc.length];
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s1.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0) {
          t.put(s1, s2);
        }
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "getInvBaseID", new Object[] {
      pk_invmandoc
    });
    /** ********************************************************** */

    if (t.size() > 0) {
      for (int i = 0; i < pk_invmandoc.length; i++) {
        String s1 = pk_invmandoc[i];
        if (s1 != null) {
          Object o = t.get(s1);
          if (o != null)
            s[i] = o.toString();
        }
      }
    }

    return s;
  }

  /**
   * 功能描述:通过上级存货分类CODE获得下级存货分类ID 输入参数: 返回值: 异常处理: 日期:2002/07/19
   */
  public String[] getSubInvClassID(String cInvClassID) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "getSubInvClassID",
        new Object[] {
          cInvClassID
        });
    /** ********************************************************** */

    String sql1 = "select invclasscode from bd_invcl where pk_invcl = ?";
    String sql = "select pk_invcl, invclasscode from bd_invcl where invclasslev > (select invclasslev from bd_invcl where invclasscode = ?)";

    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql1);
      stmt.setString(1, cInvClassID);
      ResultSet rs = stmt.executeQuery();

      String cInvClassCode = null;
      if (rs.next()) {
        String s = rs.getString(1);
        if (s != null && s.trim().length() > 0)
          cInvClassCode = s;
      }
      if (rs != null)
        rs.close();

      //
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cInvClassCode);
      rs = stmt.executeQuery();
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s2 != null && s2.trim().length() > 0) {
          int index = s2.indexOf(cInvClassCode);
          if (index == 0)
            v.addElement(s1);
        }
      }

      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "getSubInvClassID",
        new Object[] {
          cInvClassID
        });
    /** ********************************************************** */

    if (v.size() > 0) {
      String s[] = new String[v.size()];
      v.copyInto(s);
      return s;
    }

    return null;
  }

  /**
   * 功能描述:获得供应商的基础ID 输入参数: 返回值: 异常处理:
   */
  public String[] getVendorBaseKey(String cVendorMangID[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "getVendorBaseKey",
        new Object[] {
          cVendorMangID
        });
    /** ********************************************************** */

    String sql = "select pk_cumandoc, pk_cubasdoc from bd_cumandoc where pk_cumandoc in ";
    /*
     * ('"; if(cVendorMangID == null || cVendorMangID.length == 0) return null;
     * for(int i = 0; i < cVendorMangID.length - 1; i++) sql += cVendorMangID[i] +
     * "','"; sql += cVendorMangID[cVendorMangID.length - 1] + "')";
     */
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(cVendorMangID,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU57,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/* @res "调用临时表处理出现异常:" */
          + e.getMessage());
    }
    sql += strIdSet;
    Hashtable t = new Hashtable();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s2 != null)
          t.put(s1, s2);
      }

      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "getVendorBaseKey",
        new Object[] {
          cVendorMangID
        });
    /** ********************************************************** */

    String ss[] = new String[cVendorMangID.length];
    if (t.size() > 0) {
      for (int i = 0; i < cVendorMangID.length; i++) {
        String s = cVendorMangID[i];
        if (s != null && s.trim().length() > 0) {
          Object o = t.get(s);
          if (o != null)
            ss[i] = o.toString();
        }
      }
    }

    return ss;
  }

  /**
   * 功能:判断是否为虚拟发票 输入:发票ID[] 返回:发票类型为3的发票ID[] 日期:2002/09/19 作者:熊海情 修改:晁志平 FOR V30
   * 效率优化
   */
  public String[] getVirtualInvoices(String saInvoiceID[])
      throws java.sql.SQLException {

    if (saInvoiceID == null || saInvoiceID.length == 0) {
      SCMEnv.out("输入参数为空，直接返回NULL!异常位置：");
      SCMEnv.out(new Exception());
      return null;
    }
    String sql = "select cinvoiceid from po_invoice where iinvoicetype = 3 and dr = 0 and cinvoiceid in ";

    Vector vRslt = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      String strIdSet = null;
      try {
        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strIdSet = dmoTmpTbl.insertTempTable(saInvoiceID,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strIdSet == null || strIdSet.trim().equals("()")) {
          strIdSet = " ('ErrorPk') ";
        }
      }
      catch (Exception e) {
        throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                                             * @res
                                                             * "调用临时表处理出现异常:"
                                                             */
            + e.getMessage());
      }
      sql += strIdSet;
      //
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        vRslt.addElement(rs.getString(1));
      }
    }
    finally {
      try {
        if (rs != null)
          rs.close();
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    String[] saRslt = null;
    if (vRslt.size() > 0) {
      saRslt = new String[vRslt.size()];
      vRslt.copyInto(saRslt);
    }
    return saRslt;
  }

  /**
   * 功能描述:插入结算单体
   */
  public String[] insertBody(SettlebillItemVO settlebillItem[], String pk_head)
      throws java.sql.SQLException {

    String sql = "insert into po_settlebill_b(csettlebill_bid, csettlebillid, pk_corp, cinvoice_bid, cinvoiceid, cstockid, "
        + "cstockrow, cmangid, cbaseid, nsettlenum, nsettledisctmny, nfactor1, nfactor2, nfactor3, nfactor4, nfactor5, "
        + "nreasonalwastnum, nprice, nmoney, ngaugemny, cvmiid, csaleid, pk_arrvcorp, nreasonalwastprice, nreasonalwastmny"
        + ",byffirstsettle , vstockbilltype) "
        + "values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)";

    String key[] = new String[settlebillItem.length];
    Connection con = null;
    PreparedStatement stmt = null;
    String pk_corp = settlebillItem[0].getPk_corp();
    //zhf add for v55 由于各类结算都会走到此处  在次进行 结算完毕是否自动传应付 的调用
    ArrayList<String> invoiceList = new ArrayList<String>();
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int index = 0;
      for (int i = 0; i < settlebillItem.length; i++) {
        index = 0;
        // set PK fields:
        key[i] = getOID(pk_corp);
        stmt.setString(++index, key[i]);
        // set non PK fields:
        stmt.setString(++index, pk_head);
        if (settlebillItem[i].getPk_corp() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getPk_corp());
        }
        if (settlebillItem[i].getCinvoice_bid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCinvoice_bid());
        }
        if (settlebillItem[i].getCinvoiceid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCinvoiceid());
        }
        if (settlebillItem[i].getCstockid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCstockid());
        }
        if (settlebillItem[i].getCstockrow() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCstockrow());
        }
        if (settlebillItem[i].getCmangid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCmangid());
        }
        if (settlebillItem[i].getCbaseid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCbaseid());
        }
        if (settlebillItem[i].getNsettlenum() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNsettlenum()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNsettledisctmny() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNsettledisctmny()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNfactor1() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNfactor1()
              .toBigDecimal());
        }

        if (settlebillItem[i].getNfactor2() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNfactor2()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNfactor3() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNfactor3()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNfactor4() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNfactor4()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNfactor5() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNfactor5()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNreasonalwastnum() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNreasonalwastnum()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNprice() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNprice()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNmoney() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNmoney()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNgaugemny() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNgaugemny()
              .toBigDecimal());
        }
        if (settlebillItem[i].getCvmiid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCvmiid());
        }
        if (settlebillItem[i].getCsale_bid() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getCsale_bid());
        }

        if (settlebillItem[i].getPk_stockcorp() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getPk_stockcorp());
        }
        if (settlebillItem[i].getNreasonalwastprice() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNreasonalwastprice()
              .toBigDecimal());
        }
        if (settlebillItem[i].getNreasonalwastmny() == null) {
          stmt.setNull(++index, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(++index, settlebillItem[i].getNreasonalwastmny()
              .toBigDecimal());
        }
        if (settlebillItem[i].isFirstEstFeeSettle()) {
          stmt.setString(++index, "Y");
        }
        else {
          stmt.setString(++index, "N");
        }
        if (settlebillItem[i].getVstockbilltype() == null) {
          stmt.setNull(++index, Types.CHAR);
        }
        else {
          stmt.setString(++index, settlebillItem[i].getVstockbilltype());
        }
        //
        executeUpdate(stmt);        
      }
      executeBatch(stmt);      
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "insertBody", new Object[] {
        settlebillItem, pk_head
    });
    /** ********************************************************** */

    return key;
  }

  /**
   * 功能描述:插入结算单头
   */
  public String insertHead(SettlebillHeaderVO settlebillHeader)
      throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "insertHead", new Object[] {
      settlebillHeader
    });
    /** ********************************************************** */

    String sql = "insert into po_settlebill(csettlebillid, vsettlebillcode, pk_corp, dsettledate, cbiztype, cvendormangid, cvendorbaseid, cdeptid, cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, tmaketime) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // set PK fields:
      key = getOID(settlebillHeader.getPk_corp());
      stmt.setString(1, key);
      // set non PK fields:
      if (settlebillHeader.getVsettlebillcode() == null) {
        stmt.setNull(2, Types.CHAR);
      }
      else {
        stmt.setString(2, settlebillHeader.getVsettlebillcode());
      }
      if (settlebillHeader.getPk_corp() == null) {
        stmt.setNull(3, Types.CHAR);
      }
      else {
        stmt.setString(3, settlebillHeader.getPk_corp());
      }
      if (settlebillHeader.getDsettledate() == null) {
        stmt.setNull(4, Types.CHAR);
      }
      else {
        stmt.setString(4, settlebillHeader.getDsettledate().toString());
      }
      if (settlebillHeader.getCbiztype() == null) {
        stmt.setNull(5, Types.CHAR);
      }
      else {
        stmt.setString(5, settlebillHeader.getCbiztype());
      }
      if (settlebillHeader.getCvendormangid() == null) {
        stmt.setNull(6, Types.CHAR);
      }
      else {
        stmt.setString(6, settlebillHeader.getCvendormangid());
      }
      if (settlebillHeader.getCvendorbaseid() == null) {
        stmt.setNull(7, Types.CHAR);
      }
      else {
        stmt.setString(7, settlebillHeader.getCvendorbaseid());
      }
      if (settlebillHeader.getCdeptid() == null) {
        stmt.setNull(8, Types.CHAR);
      }
      else {
        stmt.setString(8, settlebillHeader.getCdeptid());
      }
      if (settlebillHeader.getCemployeeid() == null) {
        stmt.setNull(9, Types.CHAR);
      }
      else {
        stmt.setString(9, settlebillHeader.getCemployeeid());
      }
      if (settlebillHeader.getCaccountyear() == null) {
        stmt.setNull(10, Types.CHAR);
      }
      else {
        stmt.setString(10, settlebillHeader.getCaccountyear());
      }
      if (settlebillHeader.getIbillstatus() == null) {
        stmt.setNull(11, Types.INTEGER);
      }
      else {
        stmt.setInt(11, settlebillHeader.getIbillstatus().intValue());
      }
      if (settlebillHeader.getCoperator() == null) {
        stmt.setNull(12, Types.CHAR);
      }
      else {
        stmt.setString(12, settlebillHeader.getCoperator());
      }
      if (settlebillHeader.getCbilltype() == null) {
        stmt.setNull(13, Types.CHAR);
      }
      else {
        stmt.setString(13, settlebillHeader.getCbilltype());
      }
      if (settlebillHeader.getTmaketime() == null) {
        stmt.setNull(14, Types.CHAR);
      }
      else {
        stmt.setString(14, settlebillHeader.getTmaketime());
      }
      //
      stmt.executeUpdate();
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "insertHead", new Object[] {
      settlebillHeader
    });
    /** ********************************************************** */

    return key;
  }

  /**
   * 功能描述:插入发票体 输入参数:发票体VO 返回值:主键
   */
  public String[] insertInvoiceBody(InvoiceItemVO invoiceItem[])
      throws java.sql.SQLException {
    //
    String sql = "insert into po_invoice_b(cinvoice_bid, cinvoiceid, pk_corp, cusedeptid, corder_bid, " +
        "corderid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, cmangid, " +
        "cbaseid, ninvoicenum, naccumsettnum, idiscounttaxtype, ntaxrate, " +
        "ccurrencytypeid, noriginalcurprice, noriginaltaxmny, noriginalcurmny, noriginalsummny, " +
        "noriginalpaymentmny, nexchangeotobrate, nmoney, ntaxmny, nsummny, " +
        "npaymentmny, naccumsettmny,cprojectid, cprojectphaseid, vmemo, " +
        "vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, " +
        "vfree5, csourcebilltype, csourcebillid, csourcebillrowid, crowno, " +
        "norgnettaxprice, vproducenum, pk_upsrccorp, cwarehouseid) values(?, ?, ?, ?, " +
        "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
        "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key[] = new String[invoiceItem.length];
    Connection con = null;
    PreparedStatement stmt = null;
    String pk_corp = invoiceItem[0].getPk_corp();
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      for (int i = 0; i < invoiceItem.length; i++) {
        // set PK fields:
        key[i] = getOID(pk_corp);
        stmt.setString(1, key[i]);
        // set non PK fields:
        if (invoiceItem[i].getCinvoiceid() == null) {
          stmt.setNull(2, Types.CHAR);
        }
        else {
          stmt.setString(2, invoiceItem[i].getCinvoiceid());
        }
        if (invoiceItem[i].getPk_corp() == null) {
          stmt.setNull(3, Types.CHAR);
        }
        else {
          stmt.setString(3, invoiceItem[i].getPk_corp());
        }
        if (invoiceItem[i].getCusedeptid() == null) {
          stmt.setNull(4, Types.CHAR);
        }
        else {
          stmt.setString(4, invoiceItem[i].getCusedeptid());
        }
        if (invoiceItem[i].getCorder_bid() == null) {
          stmt.setNull(5, Types.CHAR);
        }
        else {
          stmt.setString(5, invoiceItem[i].getCorder_bid());
        }
        if (invoiceItem[i].getCorderid() == null) {
          stmt.setNull(6, Types.CHAR);
        }
        else {
          stmt.setString(6, invoiceItem[i].getCorderid());
        }
        if (invoiceItem[i].getCupsourcebilltype() == null) {
          stmt.setNull(7, Types.CHAR);
        }
        else {
          stmt.setString(7, invoiceItem[i].getCupsourcebilltype());
        }
        if (invoiceItem[i].getCupsourcebillid() == null) {
          stmt.setNull(8, Types.CHAR);
        }
        else {
          stmt.setString(8, invoiceItem[i].getCupsourcebillid());
        }
        if (invoiceItem[i].getCupsourcebillrowid() == null) {
          stmt.setNull(9, Types.CHAR);
        }
        else {
          stmt.setString(9, invoiceItem[i].getCupsourcebillrowid());
        }
        if (invoiceItem[i].getCmangid() == null) {
          stmt.setNull(10, Types.CHAR);
        }
        else {
          stmt.setString(10, invoiceItem[i].getCmangid());
        }
        if (invoiceItem[i].getCbaseid() == null) {
          stmt.setNull(11, Types.CHAR);
        }
        else {
          stmt.setString(11, invoiceItem[i].getCbaseid());
        }
        if (invoiceItem[i].getNinvoicenum() == null) {
          stmt.setNull(12, Types.INTEGER);
        }
        else {
          stmt
              .setBigDecimal(12, invoiceItem[i].getNinvoicenum().toBigDecimal());
        }
        if (invoiceItem[i].getNaccumsettnum() == null) {
          stmt.setNull(13, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(13, invoiceItem[i].getNaccumsettnum()
              .toBigDecimal());
        }
        if (invoiceItem[i].getIdiscounttaxtype() == null) {
          stmt.setNull(14, Types.INTEGER);
        }
        else {
          stmt.setInt(14, invoiceItem[i].getIdiscounttaxtype().intValue());
        }
        if (invoiceItem[i].getNtaxrate() == null) {
          stmt.setNull(15, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(15, invoiceItem[i].getNtaxrate().toBigDecimal());
        }
        if (invoiceItem[i].getCcurrencytypeid() == null) {
          stmt.setNull(16, Types.CHAR);
        }
        else {
          stmt.setString(16, invoiceItem[i].getCcurrencytypeid());
        }
        if (invoiceItem[i].getNoriginalcurprice() == null) {
          stmt.setNull(17, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(17, invoiceItem[i].getNoriginalcurprice()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNoriginaltaxmny() == null) {
          stmt.setNull(18, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(18, invoiceItem[i].getNoriginaltaxmny()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNoriginalcurmny() == null) {
          stmt.setNull(19, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(19, invoiceItem[i].getNoriginalcurmny()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNoriginalsummny() == null) {
          stmt.setNull(20, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(20, invoiceItem[i].getNoriginalsummny()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNoriginalpaymentmny() == null) {
          stmt.setNull(21, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(21, invoiceItem[i].getNoriginalpaymentmny()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNexchangeotobrate() == null) {
          stmt.setNull(22, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(22, invoiceItem[i].getNexchangeotobrate()
              .toBigDecimal());
        }
        if (invoiceItem[i].getNmoney() == null) {
          stmt.setNull(23, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(23, invoiceItem[i].getNmoney().toBigDecimal());
        }
        if (invoiceItem[i].getNtaxmny() == null) {
          stmt.setNull(24, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(24, invoiceItem[i].getNtaxmny().toBigDecimal());
        }
        if (invoiceItem[i].getNsummny() == null) {
          stmt.setNull(25, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(25, invoiceItem[i].getNsummny().toBigDecimal());
        }
        if (invoiceItem[i].getNpaymentmny() == null) {
          stmt.setNull(26, Types.INTEGER);
        }
        else {
          stmt
              .setBigDecimal(26, invoiceItem[i].getNpaymentmny().toBigDecimal());
        }
        if (invoiceItem[i].getNaccumsettmny() == null) {
          stmt.setNull(27, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(27, invoiceItem[i].getNaccumsettmny()
              .toBigDecimal());
        }
        if (invoiceItem[i].getCprojectid() == null) {
          stmt.setNull(28, Types.CHAR);
        }
        else {
          stmt.setString(28, invoiceItem[i].getCprojectid());
        }
        if (invoiceItem[i].getCprojectphaseid() == null) {
          stmt.setNull(29, Types.CHAR);
        }
        else {
          stmt.setString(29, invoiceItem[i].getCprojectphaseid());
        }
        if (invoiceItem[i].getVmemo() == null) {
          stmt.setNull(30, Types.CHAR);
        }
        else {
          stmt.setString(30, invoiceItem[i].getVmemo());
        }
        if (invoiceItem[i].getVdef1() == null) {
          stmt.setNull(31, Types.CHAR);
        }
        else {
          stmt.setString(31, invoiceItem[i].getVdef1());
        }
        if (invoiceItem[i].getVdef2() == null) {
          stmt.setNull(32, Types.CHAR);
        }
        else {
          stmt.setString(32, invoiceItem[i].getVdef2());
        }
        if (invoiceItem[i].getVdef3() == null) {
          stmt.setNull(33, Types.CHAR);
        }
        else {
          stmt.setString(33, invoiceItem[i].getVdef3());
        }
        if (invoiceItem[i].getVdef4() == null) {
          stmt.setNull(34, Types.CHAR);
        }
        else {
          stmt.setString(34, invoiceItem[i].getVdef4());
        }
        if (invoiceItem[i].getVdef5() == null) {
          stmt.setNull(35, Types.CHAR);
        }
        else {
          stmt.setString(35, invoiceItem[i].getVdef5());
        }
        if (invoiceItem[i].getVdef6() == null) {
          stmt.setNull(36, Types.CHAR);
        }
        else {
          stmt.setString(36, invoiceItem[i].getVdef6());
        }
        if (invoiceItem[i].getVfree1() == null) {
          stmt.setNull(37, Types.CHAR);
        }
        else {
          stmt.setString(37, invoiceItem[i].getVfree1());
        }
        if (invoiceItem[i].getVfree2() == null) {
          stmt.setNull(38, Types.CHAR);
        }
        else {
          stmt.setString(38, invoiceItem[i].getVfree2());
        }
        if (invoiceItem[i].getVfree3() == null) {
          stmt.setNull(39, Types.CHAR);
        }
        else {
          stmt.setString(39, invoiceItem[i].getVfree3());
        }
        if (invoiceItem[i].getVfree4() == null) {
          stmt.setNull(40, Types.CHAR);
        }
        else {
          stmt.setString(40, invoiceItem[i].getVfree4());
        }
        if (invoiceItem[i].getVfree5() == null) {
          stmt.setNull(41, Types.CHAR);
        }
        else {
          stmt.setString(41, invoiceItem[i].getVfree5());
        }
        if (invoiceItem[i].getCsourcebilltype() == null) {
          stmt.setNull(42, Types.CHAR);
        }
        else {
          stmt.setString(42, invoiceItem[i].getCsourcebilltype());
        }
        if (invoiceItem[i].getCsourcebillid() == null) {
          stmt.setNull(43, Types.CHAR);
        }
        else {
          stmt.setString(43, invoiceItem[i].getCsourcebillid());
        }
        if (invoiceItem[i].getCsourcebillrowid() == null) {
          stmt.setNull(44, Types.CHAR);
        }
        else {
          stmt.setString(44, invoiceItem[i].getCsourcebillrowid());
        }
        if (invoiceItem[i].getCrowno() == null) {
          stmt.setNull(45, Types.CHAR);
        }
        else {
          stmt.setString(45, invoiceItem[i].getCrowno());
        }
        if (invoiceItem[i].getNorgnettaxprice() == null) {
          stmt.setNull(46, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(46, invoiceItem[i].getNorgnettaxprice()
              .toBigDecimal());
        }
        if (invoiceItem[i].getVproducenum() == null) {
          stmt.setNull(47, Types.CHAR);
        }
        else {
          stmt.setString(47, invoiceItem[i].getVproducenum());
        }
        // 上层来源公司
        if (invoiceItem[i].getPk_upsrccorp() == null) {
          stmt.setNull(48, Types.CHAR);
        }
        else {
          stmt.setString(48, invoiceItem[i].getPk_upsrccorp());
        }
        if (invoiceItem[i].getCwarehouseid() == null) {
          stmt.setNull(49, Types.CHAR);
        }
        else {
          stmt.setString(49, invoiceItem[i].getCwarehouseid());
        }

        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "insertInvoiceBody",
        new Object[] {
          invoiceItem
        });
    /** ********************************************************** */

    return key;
  }

  /**
   * 功能描述:插入发票头 输入参数:发票头VO 返回值:主键
   */
  public String insertInvoiceHead(InvoiceHeaderVO invoiceHeader)
      throws java.sql.SQLException {

    String sql = "insert into po_invoice(cinvoiceid, pk_corp, vinvoicecode, iinvoicetype, cdeptid, cfreecustid, cemployeeid, dinvoicedate, darrivedate, cbiztype, cvendormangid, cvendorbaseid, caccountbankid, cpayunit, finitflag, cvoucherid, ctermprotocolid, coperator, vmemo, caccountyear, ibillstatus, cbilltype, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, cstoreorganization, pk_purcorp, tmaketime, tlastmaketime, bapflag, dauditdate, cauditpsn) values(?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // set PK fields:
      key = getOID(invoiceHeader.getPk_corp());
      stmt.setString(1, key);
      // set non PK fields:
      if (invoiceHeader.getPk_corp() == null) {
        stmt.setNull(2, Types.CHAR);
      }
      else {
        stmt.setString(2, invoiceHeader.getPk_corp());
      }
      if (invoiceHeader.getVinvoicecode() == null) {
        stmt.setNull(3, Types.CHAR);
      }
      else {
        stmt.setString(3, invoiceHeader.getVinvoicecode());
      }
      if (invoiceHeader.getIinvoicetype() == null) {
        stmt.setNull(4, Types.INTEGER);
      }
      else {
        stmt.setInt(4, invoiceHeader.getIinvoicetype().intValue());
      }
      if (invoiceHeader.getCdeptid() == null) {
        stmt.setNull(5, Types.CHAR);
      }
      else {
        stmt.setString(5, invoiceHeader.getCdeptid());
      }
      if (invoiceHeader.getCfreecustid() == null) {
        stmt.setNull(6, Types.CHAR);
      }
      else {
        stmt.setString(6, invoiceHeader.getCfreecustid());
      }
      if (invoiceHeader.getCemployeeid() == null) {
        stmt.setNull(7, Types.CHAR);
      }
      else {
        stmt.setString(7, invoiceHeader.getCemployeeid());
      }
      if (invoiceHeader.getDinvoicedate() == null) {
        stmt.setNull(8, Types.CHAR);
      }
      else {
        stmt.setString(8, invoiceHeader.getDinvoicedate().toString());
      }
      if (invoiceHeader.getDarrivedate() == null) {
        stmt.setNull(9, Types.CHAR);
      }
      else {
        stmt.setString(9, invoiceHeader.getDarrivedate().toString());
      }
      if (invoiceHeader.getCbiztype() == null) {
        stmt.setNull(10, Types.CHAR);
      }
      else {
        stmt.setString(10, invoiceHeader.getCbiztype());
      }
      if (invoiceHeader.getCvendormangid() == null) {
        stmt.setNull(11, Types.CHAR);
      }
      else {
        stmt.setString(11, invoiceHeader.getCvendormangid());
      }
      if (invoiceHeader.getCvendorbaseid() == null) {
        stmt.setNull(12, Types.CHAR);
      }
      else {
        stmt.setString(12, invoiceHeader.getCvendorbaseid());
      }
      if (invoiceHeader.getCaccountbankid() == null) {
        stmt.setNull(13, Types.CHAR);
      }
      else {
        stmt.setString(13, invoiceHeader.getCaccountbankid());
      }
      if (invoiceHeader.getCpayunit() == null) {
        stmt.setNull(14, Types.CHAR);
      }
      else {
        stmt.setString(14, invoiceHeader.getCpayunit());
      }
      if (invoiceHeader.getFinitflag() == null) {
        stmt.setNull(15, Types.INTEGER);
      }
      else {
        stmt.setInt(15, invoiceHeader.getFinitflag().intValue());
      }
      if (invoiceHeader.getCvoucherid() == null) {
        stmt.setNull(16, Types.CHAR);
      }
      else {
        stmt.setString(16, invoiceHeader.getCvoucherid());
      }
      if (invoiceHeader.getCtermprotocolid() == null) {
        stmt.setNull(17, Types.CHAR);
      }
      else {
        stmt.setString(17, invoiceHeader.getCtermprotocolid());
      }
      if (invoiceHeader.getCoperator() == null) {
        stmt.setNull(18, Types.CHAR);
      }
      else {
        stmt.setString(18, invoiceHeader.getCoperator());
      }
      if (invoiceHeader.getVmemo() == null) {
        stmt.setNull(19, Types.CHAR);
      }
      else {
        stmt.setString(19, invoiceHeader.getVmemo());
      }
      if (invoiceHeader.getCaccountyear() == null) {
        stmt.setNull(20, Types.CHAR);
      }
      else {
        stmt.setString(20, invoiceHeader.getCaccountyear());
      }
      if (invoiceHeader.getIbillstatus() == null) {
        stmt.setNull(21, Types.INTEGER);
      }
      else {
        stmt.setInt(21, invoiceHeader.getIbillstatus().intValue());
      }
      if (invoiceHeader.getCbilltype() == null) {
        stmt.setNull(22, Types.CHAR);
      }
      else {
        stmt.setString(22, invoiceHeader.getCbilltype());
      }
      if (invoiceHeader.getVdef1() == null) {
        stmt.setNull(23, Types.CHAR);
      }
      else {
        stmt.setString(23, invoiceHeader.getVdef1());
      }
      if (invoiceHeader.getVdef2() == null) {
        stmt.setNull(24, Types.CHAR);
      }
      else {
        stmt.setString(24, invoiceHeader.getVdef2());
      }
      if (invoiceHeader.getVdef3() == null) {
        stmt.setNull(25, Types.CHAR);
      }
      else {
        stmt.setString(25, invoiceHeader.getVdef3());
      }
      if (invoiceHeader.getVdef4() == null) {
        stmt.setNull(26, Types.CHAR);
      }
      else {
        stmt.setString(26, invoiceHeader.getVdef4());
      }
      if (invoiceHeader.getVdef5() == null) {
        stmt.setNull(27, Types.CHAR);
      }
      else {
        stmt.setString(27, invoiceHeader.getVdef5());
      }
      if (invoiceHeader.getVdef6() == null) {
        stmt.setNull(28, Types.CHAR);
      }
      else {
        stmt.setString(28, invoiceHeader.getVdef6());
      }
      if (invoiceHeader.getVdef7() == null) {
        stmt.setNull(29, Types.CHAR);
      }
      else {
        stmt.setString(29, invoiceHeader.getVdef7());
      }
      if (invoiceHeader.getVdef8() == null) {
        stmt.setNull(30, Types.CHAR);
      }
      else {
        stmt.setString(30, invoiceHeader.getVdef8());
      }
      if (invoiceHeader.getVdef9() == null) {
        stmt.setNull(31, Types.CHAR);
      }
      else {
        stmt.setString(31, invoiceHeader.getVdef9());
      }
      if (invoiceHeader.getVdef10() == null) {
        stmt.setNull(32, Types.CHAR);
      }
      else {
        stmt.setString(32, invoiceHeader.getVdef10());
      }
      if (invoiceHeader.getCstoreorganization() == null) {
        stmt.setNull(33, Types.CHAR);
      }
      else {
        stmt.setString(33, invoiceHeader.getCstoreorganization());
      }
      // 采购公司
      if (invoiceHeader.getPk_purcorp() == null) {
        stmt.setNull(34, Types.CHAR);
      }
      else {
        stmt.setString(34, invoiceHeader.getPk_purcorp());
      }
      if (invoiceHeader.getTmaketime() == null) {
        stmt.setNull(35, Types.CHAR);
      }
      else {
        stmt.setString(35, invoiceHeader.getTmaketime());
      }
      if (invoiceHeader.getTlastmaketime() == null) {
        stmt.setNull(36, Types.CHAR);
      }
      else {
        stmt.setString(36, invoiceHeader.getTlastmaketime());
      }
      if (invoiceHeader.getBapflag() == null) {
        stmt.setNull(37, Types.CHAR);
      }
      else {
        stmt.setString(37, invoiceHeader.getBapflag().toString());
      }
      if (invoiceHeader.getDauditdate() == null) {
        stmt.setNull(38, Types.CHAR);
      }
      else {
        stmt.setString(38, invoiceHeader.getDauditdate().toString());
      }
      if (invoiceHeader.getCauditpsn() == null) {
        stmt.setNull(39, Types.CHAR);
      }
      else {
        stmt.setString(39, invoiceHeader.getCauditpsn().toString());
      }

      //
      stmt.executeUpdate();
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "insertInvoiceHead",
        new Object[] {
          invoiceHeader
        });
    /** ********************************************************** */

    return key;
  }

  /**
   * 功能描述:判断发票的单据号是否重复
   */
  public boolean isCodeDuplicate(String unitCode, String billCode, String key)
      throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "isCodeDuplicate",
        new Object[] {
            unitCode, billCode, key
        });
    /** ********************************************************** */

    String sql = "";
    if (key != null)
      sql = "select vinvoicecode from po_invoice where dr = 0 and pk_corp = ? and vinvoicecode = ? and cinvoiceid <> ?";
    else
      sql = "select vinvoicecode from po_invoice where dr = 0 and pk_corp = ? and vinvoicecode = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, unitCode);
      stmt.setString(2, billCode);
      if (key != null)
        stmt.setString(3, key);

      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        v.addElement(s);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "isCodeDuplicate",
        new Object[] {
            unitCode, billCode, key
        });
    /** ********************************************************** */

    if (v.size() > 0)
      return true;
    return false;
  }

  /**
   * 功能描述:判断发票是否为费用/折扣
   */
  public boolean[] isFeeDiscount(String cbaseid[]) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "isFeeDiscount",
        new Object[] {
          cbaseid
        });
    /** ********************************************************** */

    String sql = "select laborflag, discountflag, pk_invbasdoc from bd_invbasdoc where dr = 0 and pk_invbasdoc in ";

    Vector vTemp = new Vector();
    vTemp.addElement(cbaseid[0]);
    for (int i = 1; i < cbaseid.length; i++) {
      if (!vTemp.contains(cbaseid[i]))
        vTemp.addElement(cbaseid[i]);
    }
    String sTemp[] = new String[vTemp.size()];
    vTemp.copyInto(sTemp);
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sTemp,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU18,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      sql += strSetId;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
     * sTemp.length - 1; i++) sql += " pk_invbasdoc in " + sTemp[i] + " or ";
     * sql += " pk_invbasdoc in " + sTemp[sTemp.length - 1] + ")";
     */
    Connection con = null;
    PreparedStatement stmt = null;
    Hashtable t = new Hashtable();
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        String s3 = rs.getString(3);

        if (s3 != null && s3.trim().length() > 0 && s1 != null
            && s1.trim().length() > 0 && s1.toUpperCase().trim().equals("Y"))
          t.put(s3, new UFBoolean(true));
        if (s3 != null && s3.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0 && s2.toUpperCase().trim().equals("Y"))
          t.put(s3, new UFBoolean(true));
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "isFeeDiscount", new Object[] {
      cbaseid
    });
    /** ********************************************************** */
    boolean b[] = new boolean[cbaseid.length];
    for (int i = 0; i < b.length; i++) {
      b[i] = false;
      Object o = t.get(cbaseid[i]);
      if (o != null)
        b[i] = true;
    }
    return b;
  }

  /**
   * 功能描述:判断结算单的单据号是否重复
   */
  public boolean isSettlebillCodeDuplicate(String unitCode, String billCode)
      throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "isSettlebillCodeDuplicate",
        new Object[] {
            unitCode, billCode
        });
    /** ********************************************************** */

    String sql = "select vsettlebillcode from po_settlebill where dr = 0 and pk_corp = ? and vsettlebillcode = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, unitCode);
      stmt.setString(2, billCode);

      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        v.addElement(s);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "isSettlebillCodeDuplicate",
        new Object[] {
            unitCode, billCode
        });
    /** ********************************************************** */

    if (v.size() > 0)
      return true;
    return false;
  }

  /**
   * 此处插入方法说明。 功能描述:判断销售发票能否弃审,若能弃审,则作废销售发票相关数据 输入参数: 返回值: 异常处理: 日期:2002/06/11
   */
  public void isUnauditableForSale(String csaleid) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SaledataDMO", "isUnauditableForSale",
        new Object[] {
          csaleid
        });
    /** ********************************************************** */

    String sql1 = "select naccumnum from po_saledata where csaleid = ?";
    String sql2 = "update po_saledata set dr = 1 where csaleid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql1);

      stmt.setString(1, csaleid);
      rs = stmt.executeQuery();

      double sum = 0;
      while (rs.next()) {
        BigDecimal d = null;
        Object oTemp = rs.getObject(1);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          d = new BigDecimal(oTemp.toString());
        if (d != null && d.toString().trim().length() > 0)
          sum += d.doubleValue();
      }

      if (Math.abs(sum) == 0) {
        // 销售发票未结算，可作废销售发票相关数据
        stmt = con.prepareStatement(sql2);
        stmt.setString(1, csaleid);
        stmt.executeUpdate();
      }
      else {
        // 销售发票已结算，不可作废销售发票相关数据
        throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("40040502", "UPP40040502-000045")/*
                                                                         * @res
                                                                         * "销售发票已结算！"
                                                                         */);
      }

    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SaledataDMO", "isUnauditableForSale",
        new Object[] {
          csaleid
        });
    /** ********************************************************** */
  }

  /*
   * 获得库存组织的直运仓 2006-09-05 xhq
   */
  public Hashtable queryZYstore(String pk_calbody[])
      throws java.sql.SQLException {
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(pk_calbody,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()"))
        strSetId = " ('ErrorPk') ";
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }

    String sql = "select pk_calbody, pk_stordoc from bd_stordoc where isnull(dr,0) = 0 and isdirectstore = 'Y' and pk_calbody in ";
    sql += strSetId;

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();

      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s2 != null)
          t.put(s1, s2);
      }

    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    return t;
  }

  /**
   * 功能描述:查询所有发票(包括费用发票和折扣发票)
   */
  public IinvoiceVO[] queryAllInvoice(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryAllInvoice",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */
    String sql = "select cvendormangid, cvendorbaseid, vinvoicecode, A.cinvoiceid, cinvoice_bid, cmangid, cbaseid, ninvoicenum, naccumsettnum, nmoney, naccumsettmny, cdeptid, cemployeeid, A.pk_corp, cbiztype, verifyrule, A.ts, B.ts, vproducenum, cupsourcebillid, cupsourcebillrowid,csourcebilltype,csourcebillid,csourcebillrowid ";
    sql += ",B.ccurrencytypeid, B.noriginalcurprice, B.nexchangeotobrate ";
    sql += "from po_invoice A ";
    sql += "inner join po_invoice_b B on A.cinvoiceid = B.cinvoiceid ";
    sql += "inner join bd_invmandoc C on C.pk_invmandoc = B.cmangid ";
    sql += "inner join bd_busitype E on E.pk_busitype = A.cbiztype ";
    sql += "left outer join bd_stordoc ST on ST.pk_stordoc = B.cwarehouseid and (B.cwarehouseid is null or coalesce(iscalculatedinvcost,'N') = 'Y') ";
    sql += "where A.dr = 0 and B.dr = 0 and iinvoicetype <> 3 and A.pk_corp = C.pk_corp ";
    // sql += "and upper(sellproxyflag) = 'N' "; /**CZP DEL FOR XY
    // ：2004－04－29，采购结算支持受托属性存货在非受托业务类型下的结算*/
    if (unitCode != null) {
      sql += " and A.pk_corp = '" + unitCode + "' ";
    }
    sql += sCondition;
    IinvoiceVO invoices[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        IinvoiceVO invoice = new IinvoiceVO();
        // cvendormangid :
        String cvendormangid = rs.getString(1);
        invoice.setCvendormangid(cvendormangid == null ? "" : cvendormangid
            .trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(2);
        invoice.setCvendorbaseid(cvendorbaseid == null ? "" : cvendorbaseid
            .trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(3);
        invoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(4);
        invoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(5);
        invoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cmangid :
        String cmangid = rs.getString(6);
        invoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(7);
        invoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninvoicenum :
        Object ninvoicenum = rs.getObject(8);
        invoice.setNinvoicenum(ninvoicenum == null ? new UFDouble(0.0)
            : new UFDouble(ninvoicenum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(9);
        invoice.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // nmoney :
        Object nmoney = rs.getObject(10);
        invoice.setNmoney(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettlemny = rs.getObject(11);
        invoice.setNaccumsettlemny(naccumsettlemny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettlemny.toString()));
        // cdeptid :
        String cdeptid = rs.getString(12);
        invoice.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(13);
        invoice.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // cunitid :
        String cunitid = rs.getString(14);
        invoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cbiztype :
        String cbiztype = rs.getString(15);
        invoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // verifyrule :
        String verifyrule = rs.getString(16);
        // ts1 :
        String ts1 = rs.getString(17);
        invoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(18);
        invoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(19);
        invoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // cupsourcebillid :
        String cupsourcebillid = rs.getString(20);
        invoice.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        // cupsourcebillrowid :
        String cupsourcebillrowid = rs.getString(21);
        invoice.setCupsourcebillrowid(cupsourcebillrowid == null ? null
            : cupsourcebillrowid.trim());
        // csourcebilltype :
        String csourcebilltype = rs.getString(22);
        invoice.setVsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        // csourcebillid :
        String csourcebillid = rs.getString(23);
        invoice.setCsourcebillhid(csourcebillid == null ? null : csourcebillid
            .trim());
        // csourcebillrowid :
        String csourcebillrowid = rs.getString(24);
        invoice.setCsourcebillbid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());

        // since v502, ,B.ccurrencytypeid, B.noriginalcurprice,
        // B.nexchangeotobrate
        invoice.setCcurrencytypeid(rs.getString(25));
        invoice.setNoriginalcurprice(PuPubVO.getUFDouble_ZeroAsNull(rs
            .getObject(26)));
        invoice.setNexchangeotobrate(PuPubVO.getUFDouble_ZeroAsNull(rs
            .getObject(27)));
        //
        if (verifyrule != null && verifyrule.length() > 0) {
          verifyrule = verifyrule.trim().toUpperCase();
          if (!verifyrule.equals("N"))
            v.addElement(invoice);
        }
      }
      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    invoices = new IinvoiceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(invoices);
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryAllInvoice",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */
    return invoices;
  }

  /**
   * 功能描述:获得订单头主键和体主键
   */
  public String[] queryArriveorder(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryArriveorder",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "";
    if (unitCode != null) {
      sql = "select corderid,corder_bid from po_arriveorder_b where pk_corp = ? and dr = 0 ";
    }
    else {
      sql = "select corderid,corder_bid from po_arriveorder_b where dr = 0 ";
    }
    sql += sCondition;

    String keys[] = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (unitCode != null) {
        stmt.setString(1, unitCode);
      }
      ResultSet rs = stmt.executeQuery();
      //
      Vector v = new Vector();
      while (rs.next()) {
        v.addElement(rs.getString(1));
        v.addElement(rs.getString(2));
      }
      if (v.size() > 0) {
        keys = new String[v.size()];
        v.copyInto(keys);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryArriveorder",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    return keys;
  }

  /**
   * 功能描述:通过标准入库单表体VO获得结算用入库单结算子表VO 输入参数:标准入库单表体VO 返回值:结算用入库单结算子表VO
   * 日期:2003/04/24
   */
  public GeneralBb3VO[] queryBb3ByGeneralBillItemVO(GeneralBillItemVO VOs[])
      throws SQLException {

    if (VOs == null || VOs.length == 0) {
      SCMEnv.out("传入参数为空，直接返回null!异常位置：");
      SCMEnv.out(new Exception());
      return null;
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO",
        "queryBb3ByGeneralBillItemVO", new Object[] {
          VOs
        });
    /** ********************************************************** */

    if (VOs == null || VOs.length == 0)
      return null;
    String sql = "select cgeneralbid, cgeneralhid, naccountmny, naccountnum2, caccountunitid, naccountnum1, nsignnum, npprice, npmoney, cgeneralbb3 from ic_general_bb3 where cgeneralbid in ";
    /*
     * ('"; for (int i = 0; i < VOs.length - 1; i++) sql +=
     * VOs[i].getCgeneralbid() + "','"; sql += VOs[VOs.length -
     * 1].getCgeneralbid() + "')";
     */
    int iLen = VOs.length;
    String[] saId = new String[iLen];
    for (int i = 0; i < iLen; i++) {
      saId[i] = VOs[i].getCgeneralbid();
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU85,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/* @res "调用临时表处理出现异常:" */
          + e.getMessage());
    }
    sql += strIdSet;

    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        GeneralBb3VO generalBb3 = new GeneralBb3VO();
        // cgeneralbid :
        String cgeneralbid = rs.getString(1);
        generalBb3.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid
            .trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(2);
        generalBb3.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid
            .trim());
        // naccountmny :
        Object naccountmny = rs.getObject(3);
        generalBb3.setNaccountmny(naccountmny == null ? new UFDouble(0.0)
            : new UFDouble(naccountmny.toString()));
        // naccountnum2 :
        Object naccountnum2 = rs.getObject(4);
        generalBb3.setNaccountnum2(naccountnum2 == null ? new UFDouble(0.0)
            : new UFDouble(naccountnum2.toString()));
        // caccountunitid :
        String caccountunitid = rs.getString(5);
        generalBb3.setCaccountunitid(caccountunitid == null ? null
            : caccountunitid.trim());
        // naccountnum1 :
        Object naccountnum1 = rs.getObject(6);
        generalBb3.setNaccountnum1(naccountnum1 == null ? new UFDouble(0.0)
            : new UFDouble(naccountnum1.toString()));
        // nsignnum :
        Object nsignnum = rs.getObject(7);
        generalBb3.setNsignnum(nsignnum == null ? new UFDouble(0.0)
            : new UFDouble(nsignnum.toString()));
        // npprice :
        Object npprice = rs.getObject(8);
        generalBb3.setNpprice(npprice == null ? new UFDouble(0.0)
            : new UFDouble(npprice.toString()));
        // npmoney :
        Object npmoney = rs.getObject(9);
        generalBb3.setNpmoney(npmoney == null ? new UFDouble(0.0)
            : new UFDouble(npmoney.toString()));
        // cgeneralbb3 :
        String cgeneralbb3 = rs.getString(10);
        generalBb3.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3
            .trim());

        v.addElement(generalBb3);
      }
      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryBb3ByGeneralBillItemVO",
        new Object[] {
          VOs
        });
    /** ********************************************************** */

    if (v.size() > 0) {
      GeneralBb3VO generalBb3s[] = new GeneralBb3VO[v.size()];
      v.copyInto(generalBb3s);
      return generalBb3s;
    }

    return null;
  }

  /*
   * 查询已参与费用分摊的入库单行ID
   */
  public Vector queryStockRowID(String unitCode, boolean bFeeSettled)
      throws SQLException {

    String sql = "select cstockrow, nsettledisctmny, nfactor1, nfactor2, nfactor3, nfactor4, nfactor5 from po_settlebill_b where dr = 0 and pk_corp = '"
        + unitCode + "'";

    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector(), vv = new Vector();
    ;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        Object o = rs.getObject(2);
        Object o1 = rs.getObject(3);
        Object o2 = rs.getObject(4);
        Object o3 = rs.getObject(5);
        Object o4 = rs.getObject(6);
        Object o5 = rs.getObject(7);
        if (s != null) {
          if (bFeeSettled) {
            if (o != null
                && Math.abs((new UFDouble(o.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
            if (o1 != null
                && Math.abs((new UFDouble(o1.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
            if (o2 != null
                && Math.abs((new UFDouble(o2.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
            if (o3 != null
                && Math.abs((new UFDouble(o3.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
            if (o4 != null
                && Math.abs((new UFDouble(o4.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
            if (o5 != null
                && Math.abs((new UFDouble(o5.toString())).doubleValue()) > 0
                && !v.contains(s))
              v.addElement(s);
          }
          else {
            if ((o == null || (new UFDouble(o.toString())).doubleValue() == 0)
                && (o1 == null || (new UFDouble(o1.toString())).doubleValue() == 0)
                && (o2 == null || (new UFDouble(o2.toString())).doubleValue() == 0)
                && (o3 == null || (new UFDouble(o3.toString())).doubleValue() == 0)
                && (o4 == null || (new UFDouble(o4.toString())).doubleValue() == 0)
                && (o5 == null || (new UFDouble(o5.toString())).doubleValue() == 0)) {
              if (!v.contains(s))
                v.addElement(s);
            }
            else {
              if (!vv.contains(s))
                vv.addElement(s);
            }
          }
        }
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    if (vv.size() > 0 && v.size() > 0) {
      for (int i = 0; i < vv.size(); i++) {
        Object s = vv.elementAt(i);
        if (s != null && v.contains(s))
          v.remove(s);
      }
    }
    return v;
  }

  public Hashtable queryStockZGInfo(String cgeneralbid[]) throws SQLException {
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(cgeneralbid,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU55,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().length() == 0)
        strIdSet = "('TempTableDMOError')";
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }

    String sql = "select A.cgeneralbid, A.ninnum, B.npmoney from ic_general_b A, ic_general_bb3 B where A.dr = 0 and B.dr = 0 and A.cgeneralbid = B.cgeneralbid and A.cgeneralbid in ";
    sql += strIdSet;

    Connection con = null;
    PreparedStatement stmt = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        Object ninnum = rs.getObject(2);
        Object npmoney = rs.getObject(3);
        if (npmoney == null)
          npmoney = new UFDouble(0);

        if (s1 != null)
          t.put(s1, new Object[] {
              ninnum, npmoney
          });
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    return t;
  }

  /**
   * 按公司查询成本要素序号,HashMap{成本要素主键，序号}
   * 
   * @return 返回值可能没有值(本公司未定义成本要素)
   * @author czp
   * @date 2008-07-11
   * @since v55
   */
  public HashMap<String, Integer> queryCfactorIdAndNoHash(String unitCode)
      throws BusinessException {
    if (unitCode == null || unitCode.length() == 0) {
      throw new BusinessException(
          "String unitCode is null, please adjust the calling program!");
    }
    String sql = "select ccostfactorid from po_costfactor where pk_corp = ? and dr = 0 order by ccostfactorid ";
    Connection con = null;
    PreparedStatement stmt = null;
    HashMap<String, Integer> mapCfactorIdAndNo = new HashMap<String, Integer>();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, unitCode);
      ResultSet rs = stmt.executeQuery();
      //
      int iNo = 1;
      while (rs.next()) {
        mapCfactorIdAndNo.put(rs.getString(1), new Integer(iNo++));
      }
    }
    catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return mapCfactorIdAndNo;
  }

  /**
   * 功能描述:获得成本要素的序号、名称和主键 输入参数:[[序号]，[名称]，[主键]]
   */
  public Vector queryCostfactorNO(String unitCode, String cId[])
      throws SQLException {

    String sql = "select ccostfactorid,vfactorname from po_costfactor where pk_corp = ? and dr = 0 order by ccostfactorid ";

    Vector v1 = new Vector();
    Vector v2 = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, unitCode);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        s1 = s1.trim();
        v1.addElement(s1);

        String s2 = rs.getString(2);
        s2 = s2.trim();
        v2.addElement(s2);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    if (v1.size() == 0)
      return null;
    Vector v = new Vector();
    Vector vv = new Vector();
    Vector vvv = new Vector();
    for (int i = 0; i < cId.length; i++) {
      String s1 = cId[i].trim();
      for (int j = 0; j < v1.size(); j++) {
        String s2 = (String) v1.elementAt(j);
        s2 = s2.trim();
        if (s1.equals(s2)) {
          v.addElement(new Integer(j));
          vv.addElement(v2.elementAt(j));
          vvv.addElement(v1.elementAt(j));
          break;
        }
      }
    }

    if (v.size() > 0) {
      Vector vTemp = new Vector();
      vTemp.addElement(v);
      vTemp.addElement(vv);
      vTemp.addElement(vvv);
      return vTemp;
    }
    return null;
  }

  /**
   * 功能:根据采购入库单(暂估)的来源为订单，查询订单的币种、汇率（折本、折辅）、扣税类别、税率 输入:GeneralBillVO[]
   * 返回:ArrayList{Object[5],...} 异常:SQLException 日期:2002/05/27 作者:熊海情 修改:晁志平 FOR
   * V30 效率优化
   */
  public ArrayList queryDataForARAP(GeneralBillVO[] VOs) throws SQLException {

    if (VOs == null || VOs.length == 0) {
      SCMEnv.out("输入参数为空，直接返回NULL!异常位置：");
      SCMEnv.out(new Exception());
      return null;
    }
    String sql = " select corder_bid, ccurrencytypeid, nexchangeotobrate, idiscounttaxtype, ntaxrate from po_order_b where corder_bid in ";

    HashMap map = new HashMap();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    int iLen = VOs.length;
    String strId = null;
    GeneralBillItemVO bodyVO[] = null;
    int iPos = 0, iCnt = 0;
    try {
      ArrayList listIds = new ArrayList();
      for (int i = 0; i < iLen; i++) {
        bodyVO = (GeneralBillItemVO[]) VOs[i].getChildrenVO();
        if (bodyVO == null || bodyVO.length == 0) {
          continue;
        }
        iCnt = bodyVO.length;
        iPos = 0;
        strId = null;
        while (strId != null && iPos < iCnt) {
          strId = bodyVO[iPos].getCsourcebillbid();
          iPos++;
        }
        if (strId != null && !listIds.contains(strId)) {
          listIds.add(strId);
        }
      }
      if (listIds.size() == 0) {
        SCMEnv.out("未获取ID[],直接返回NULL!异常位置：");
        SCMEnv.out(new Exception());
        return null;
      }
      String strSetId = null;
      try {
        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTmpTbl.insertTempTable(listIds,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " ('ErrorPk') ";
        }
      }
      catch (Exception e) {
        throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                                             * @res
                                                             * "调用临时表处理出现异常:"
                                                             */
            + e.getMessage());
      }
      sql += strSetId;
      //
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      Object oaRslt[] = new Object[5];
      Object oTmp = null;
      while (rs.next()) {
        oaRslt[0] = rs.getString(1);
        if (oaRslt[0] == null || map.containsKey(oaRslt[0])) {
          continue;
        }
        oTmp = rs.getObject(1);
        if (oTmp != null)
          oaRslt[1] = new UFDouble(oTmp.toString());

        oTmp = rs.getObject(2);
        if (oTmp != null)
          oaRslt[2] = new UFDouble(oTmp.toString());

        int j = rs.getInt(3);
        oaRslt[3] = new Integer(j);

        oTmp = rs.getObject(4);
        if (oTmp != null) {
          oaRslt[4] = new UFDouble(oTmp.toString());
        }

        map.put(oaRslt[0], oaRslt);
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    ArrayList listRslt = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      bodyVO = (GeneralBillItemVO[]) VOs[i].getChildrenVO();
      if (bodyVO == null || bodyVO.length == 0) {
        continue;
      }
      iCnt = bodyVO.length;
      iPos = 0;
      strId = null;
      while (strId != null && iPos < iCnt) {
        strId = bodyVO[iPos].getCsourcebillbid();
        iPos++;
      }
      if (strId != null) {
        listRslt.add((Object[]) map.get(strId));
      }
      else {
        listRslt.add(null);
      }
    }
    return listRslt.size() == 0 ? null : listRslt;
  }

  /**
   * 功能描述:查询折扣发票 输入参数:单位编码,未结算完毕条件 返回值:费用发票VO[]
   */
  public FeeinvoiceVO[] queryDiscount(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryDiscount",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "select A.pk_corp ,cmangid, cbaseid, nmoney, naccumsettmny, cinvoice_bid, A.cinvoiceid, cvendormangid, cvendorbaseid, vinvoicecode, cbiztype, cdeptid, cemployeeid, verifyrule, A.ts, B.ts, vproducenum, vfree1, vfree2, vfree3, vfree4, vfree5, B.vmemo,B.cupsourcebilltype,B.cupsourcebillid,B.cupsourcebillrowid,B.csourcebilltype,B.csourcebillid,B.csourcebillrowid ";
    sql += "from po_invoice_b B ";
    sql += "inner join po_invoice A on A.cinvoiceid = B.cinvoiceid ";
    sql += "inner join bd_busitype E on E.pk_busitype = A.cbiztype ";
    sql += "left outer join bd_stordoc ST on ST.pk_stordoc = B.cwarehouseid and (B.cwarehouseid is null or coalesce(ST.iscalculatedinvcost,'N') = 'Y') ";
    sql += " where B.dr= 0 and A.dr = 0 and A.pk_corp = B.pk_corp ";

    if (unitCode != null) {
      sql += "and A.pk_corp = '" + unitCode + "' ";
    }
    sql += sCondition;

    FeeinvoiceVO feeinvoices[] = null;
    Vector v = new Vector();
    Vector vMangID = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      Vector vv = new Vector();
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        FeeinvoiceVO feeinvoice = new FeeinvoiceVO();
        // cunitid :
        String cunitid = rs.getString(1);
        feeinvoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cmangid :
        String cmangid = rs.getString(2);
        feeinvoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(3);
        feeinvoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // nmoney :
        Object nmoney = rs.getObject(4);
        feeinvoice.setNmny(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(5);
        feeinvoice.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString()));
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(6);
        feeinvoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(7);
        feeinvoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // cvendormangid :
        String cvendormangid = rs.getString(8);
        feeinvoice.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(9);
        feeinvoice.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(10);
        feeinvoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cbiztype :
        String cbiztype = rs.getString(11);
        feeinvoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // cdeptid :
        String cdeptid = rs.getString(12);
        feeinvoice.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperator :
        String coperator = rs.getString(13);
        feeinvoice.setCoperator(coperator == null ? null : coperator.trim());
        // verifyrule :
        String verifyrule = rs.getString(14);
        // ts1 :
        String ts1 = rs.getString(15);
        feeinvoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(16);
        feeinvoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(17);
        feeinvoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(18);
        feeinvoice.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(19);
        feeinvoice.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(20);
        feeinvoice.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(21);
        feeinvoice.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(22);
        feeinvoice.setVfree5(vfree5 == null ? null : vfree5.trim());
        // vmemo :
        String vmemo = rs.getString(23);
        feeinvoice.setVmemobody(vmemo);
        // 上层
        String strTmp = rs.getString(24);
        feeinvoice.setCupsourcebilltype(strTmp);
        strTmp = rs.getString(25);
        feeinvoice.setCupsourcebillid(strTmp);
        strTmp = rs.getString(26);
        feeinvoice.setCupsourcebillrowid(strTmp);
        // 源头
        strTmp = rs.getString(27);
        feeinvoice.setCsourcebilltype(strTmp);
        strTmp = rs.getString(28);
        feeinvoice.setCsourcebillid(strTmp);
        strTmp = rs.getString(29);
        feeinvoice.setCsourcerowid(strTmp);
        //
        if (verifyrule != null && verifyrule.length() > 0) {
          verifyrule = verifyrule.trim().toUpperCase();
          if (!verifyrule.equals("N"))
            vv.addElement(feeinvoice);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      if (vv.size() > 0) {
        String sqlsql = "select pk_invbasdoc from bd_invbasdoc where dr = 0 ";
        sqlsql += "and upper(discountflag) = 'Y' and pk_invbasdoc in ";

        Vector vTemp = new Vector();
        vTemp.addElement(((FeeinvoiceVO) vv.elementAt(0)).getCbaseid());
        for (int i = 1; i < vv.size(); i++) {
          if (!vTemp.contains(((FeeinvoiceVO) vv.elementAt(i)).getCbaseid()))
            vTemp.addElement(((FeeinvoiceVO) vv.elementAt(i)).getCbaseid());
        }
        String sTemp[] = new String[vTemp.size()];
        vTemp.copyInto(sTemp);
        // 临时表
        String strSetId = null;
        try {
          nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
          strSetId = dmoTempTbl.insertTempTable(sTemp,
              nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU19,
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
          if (strSetId == null || strSetId.trim().equals("()")) {
            strSetId = " ('ErrorPk') ";
          }
          sqlsql += strSetId;
        }
        catch (Exception e) {
          throw new SQLException(e.getMessage());
        }
        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        while (rs.next()) {
          vMangID.addElement(rs.getString(1));
        }
        if (rs != null)
          rs.close();
        if (stmt != null)
          stmt.close();

        for (int i = 0; i < vv.size(); i++) {
          FeeinvoiceVO feeVO = (FeeinvoiceVO) vv.elementAt(i);
          if (vMangID.contains(feeVO.getCbaseid())) {
            v.addElement(feeVO);
          }
        }
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    feeinvoices = new FeeinvoiceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(feeinvoices);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryDiscount", new Object[] {
        unitCode, sCondition
    });
    /** ********************************************************** */

    return feeinvoices;
  }

  /**
   * 功能描述:查询已结入库单（2002/07/24修改：单价取加权单价） 输入参数: String unitCode，公司主键 String
   * sCondition，查询条件 返回值: StockVO[]，结算用入库单VO[]
   */
  public StockVO[] queryEndStock(String unitCode, String sCondition)
      throws BusinessException {

    String sql = "select cproviderid, vbillcode, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, pk_invbasdoc, ninnum, naccountnum1, naccountmny, cdptid, cbizid, A.pk_corp, cgeneralbb3, A.ts, B.ts, C.ts, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, B.csourcebillhid, B.csourcebillbid, B.csourcetype, B.cfirstbillhid, B.cfirstbillbid, B.cfirsttype, B.vnotebody, ";
    sql += "B.hsl, B.pk_invoicecorp ," +

    // zhf add for v55 暂估标志 暂估单价 暂估金额 入库采购费用累计结算次数 库存单据类型
        " B.bzgflag,C.npprice as estiprice,C.npmoney as estimoney ,nfeesettletimes ,cbilltypecode ,B.nmny,C.cfeeid,C.nfeemny";

    sql += " from ic_general_h A,ic_general_bb3 C,bd_invmandoc D,bd_busitype E, bd_stordoc S, ic_general_b B";

    sql += " where A.cwarehouseid = S.pk_stordoc and A.dr=0 and B.dr=0 and A.cgeneralhid=B.cgeneralhid and A.cgeneralhid=C.cgeneralhid and B.cgeneralbid=C.cgeneralbid and D.pk_invmandoc = B.cinventoryid and E.pk_busitype = A.cbiztype ";

    sql += " and (abs(naccountnum1) > 0 or coalesce(B.bzgflag, 'N') = 'Y')";// zhf
    // add

    if (unitCode != null) {
      sql += "and B.pk_invoicecorp = '" + unitCode + "' ";
    }
    sql += sCondition;

    // 查询结算数量、结算单价
    String sqlsql = "select A.nsettlenum, A.nprice, cgeneralbid from po_settlebill_b A, ic_general_b B where A.dr = 0 and cstockid = cgeneralhid and cstockrow = cgeneralbid and B.dr = 0 and cgeneralbid in ";

    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ArrayList listId = new ArrayList();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        StockVO stock = new StockVO();
        // cproviderid :
        String cproviderid = rs.getString(1);
        stock.setCprovidermangid(cproviderid == null ? null : cproviderid
            .trim());
        // vbillcode :
        String vbillcode = rs.getString(2);
        stock.setVbillcode(vbillcode == null ? null : vbillcode.trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(3);
        stock.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
        // cgeneralbid :
        String cgeneralbid = rs.getString(4);
        stock.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        stock.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        stock.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninnum :
        Object ninnum = rs.getObject(7);
        stock.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(
            ninnum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(8);
        stock.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(9);
        stock.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString()));
        // cdeptid :
        String cdeptid = rs.getString(10);
        stock.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(11);
        stock.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // pk_corp :收货公司
        String pk_corp = rs.getString(12);
        stock.setPk_stockcorp(pk_corp == null ? null : pk_corp.trim());
        // cgeneralbb3 :
        String cgeneralbb3 = rs.getString(13);
        stock.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3.trim());
        // ts1 :
        String ts1 = rs.getString(14);
        stock.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(15);
        stock.setTs2(ts2 == null ? null : ts2.trim());
        // ts3 :
        String ts3 = rs.getString(16);
        stock.setTs3(ts3 == null ? null : ts3.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(17);
        stock.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(18);
        stock.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(19);
        stock.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(20);
        stock.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(21);
        stock.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(22);
        stock.setVfree5(vfree5 == null ? null : vfree5.trim());
        // 上层信息
        int index = 23;
        String strTmp = rs.getString(index++);
        stock.setCsourcebillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebilltype(strTmp);
        // 源头信息
        strTmp = rs.getString(index++);
        stock.setCfirstbillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirstbillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirsttype(strTmp);
        // 表体行备注
        strTmp = rs.getString(index++);
        stock.setVmemobody(strTmp);
        // hsl :
        Object hsl = rs.getObject(index++);
        stock.setHsl(PuPubVO.getUFDouble_NullAsZero(hsl));
        // pk_corp :收票公司
        pk_corp = rs.getString(index++);
        stock.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        // zhf add v55
        Object ozgflag = rs.getObject(index++);
        UFBoolean bzgflag = PuPubVO.getUFBoolean_NullAs(ozgflag, new UFBoolean(false));
        stock.setBzgflag(bzgflag);

        // Object ufnum = rs.getObject(index++);
        // stock.setNestinum(ufnum == null ? new UFDouble(0.0) : new
        // UFDouble(ufnum.toString()));

        Object ufprice = rs.getObject(index++);
        stock.setNestiprice(PuPubVO.getUFDouble_NullAsZero(ufprice));

        Object ufmoney = rs.getObject(index++);
        stock.setNestimoney(PuPubVO.getUFDouble_NullAsZero(ufmoney));

        Object feesettletimes = rs.getObject(index++);
        stock.setNfeesettletimes(feesettletimes == null ? new Integer(0)
            : new Integer(feesettletimes.toString()));

        String cbilltypecode = rs.getString(index++);
        stock.setVstockbilltype(cbilltypecode);

        // 入库金额
        Object nmny = rs.getObject(index++);
        stock.setNmoney(PuPubVO.getUFDouble_NullAsZero(nmny));

        String cfeeid = rs.getString(index++);
        stock.setCfeeid(cfeeid);

        Object nfeemny = rs.getObject(index++);
        stock.setNfeemny(PuPubVO.getUFDouble_NullAsZero(nfeemny));

        // end
        v.addElement(stock);
        //
        listId.add(stock.getCgeneralbid());
      }

      if (rs != null)
        rs.close();

      if (v.size() > 0) {
        if (stmt != null)
          stmt.close();

        String strSetId = null;
        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTmpTbl.insertTempTable(listId,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " ('ErrorPk') ";
        }
        sqlsql += strSetId;

        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        String s = null;
        Vector v1 = new Vector(); // 结算数量
        Vector v2 = new Vector(); // 结算单价
        Vector v3 = new Vector(); // 入库单行ID
        while (rs.next()) {
          Object oTemp1 = rs.getObject(1);
          Object oTemp2 = rs.getObject(2);
          s = rs.getString(3);

          if (oTemp1 != null && oTemp1.toString().trim().length() > 0)
            v1.addElement(new UFDouble(oTemp1.toString()));
          else
            v1.addElement(new UFDouble(0));

          if (oTemp2 != null && oTemp2.toString().trim().length() > 0)
            v2.addElement(new UFDouble(oTemp2.toString()));
          else
            v2.addElement(new UFDouble(0));

          if (s != null && s.trim().length() > 0)
            v3.addElement(s);
        }
        if (rs != null)
          rs.close();

        // 计算加权单价
        Vector vTemp = new Vector();

        java.util.Hashtable t = new java.util.Hashtable();
        if (v1.size() != 0 && v2.size() != 0 && v3.size() != 0) {
          vTemp.addElement(v3.elementAt(0));
          for (int i = 0; i < vTemp.size(); i++) {
            double sumMny = 0;
            double sumNum = 0;
            double avePrice = 0;
            String ss = (String) vTemp.elementAt(i);
            for (int j = 0; j < v3.size(); j++) {
              s = (String) v3.elementAt(j);
              if (vTemp.contains(s)) {
                if (s.equals(ss)) {
                  UFDouble nNum = (UFDouble) v1.elementAt(j);
                  UFDouble nPrice = (UFDouble) v2.elementAt(j);
                  sumMny += nNum.doubleValue() * nPrice.doubleValue();
                  sumNum += nNum.doubleValue();
                  if (Math.abs(sumNum) > 0)
                    avePrice = sumMny / sumNum;
                  t.put(s, new UFDouble(avePrice));
                }
              }
              else {
                vTemp.addElement(s);
              }
            }
          }
        }

        for (int i = 0; i < v.size(); i++) {
          StockVO stockVO = (StockVO) v.elementAt(i);
          s = stockVO.getCgeneralbid();
          UFDouble avePrice = new UFDouble(0);
          Object oTemp = t.get(s);
          if (oTemp != null)
            avePrice = (UFDouble) oTemp;
          stockVO.setNprice(avePrice);// 结算平均价

          stockVO.setNaccumsettlemny(avePrice.multiply(stockVO
              .getNaccumsettlenum(), BsPuTool.getCCurrDecimal(null)));// 累计结算金额

          double d = stockVO.getNinnum().doubleValue()
              - stockVO.getNaccumsettlenum().doubleValue();
          stockVO.setNnosettlenum(new UFDouble(d));// 未结算金额

          // zhf add v55 暂估数量==入库数量
          if (stockVO.getBzgflag().booleanValue()) {
            stockVO.setNestinum(stockVO.getNinnum());
          }
          else
            stockVO.setNestinum(new UFDouble(0.0));
          // end
        }
      }
    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }
    return stocks;
  }

  /**
   * 功能描述:查询费用发票 输入参数:单位编码,未结算完毕条件 返回值:费用发票[]
   */
  public FeeinvoiceVO[] queryFee(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryFee", new Object[] {
        unitCode, sCondition
    });
    /** ********************************************************** */

    String sql = "select cinvoice_bid, A.cinvoiceid, D.ccostfactorid, vfactorname, fapportionmode, D.pk_corp ,D.cmangid, D.cbaseid, nmoney, naccumsettmny, bisentercost, cvendormangid, cvendorbaseid, vinvoicecode, cbiztype, cdeptid, cemployeeid, verifyrule, A.ts, B.ts, vproducenum, vfree1, vfree2, vfree3, vfree4, vfree5, B.vmemo,B.cupsourcebilltype,B.cupsourcebillid,B.cupsourcebillrowid,B.csourcebilltype,B.csourcebillid,B.csourcebillrowid ";
    sql += "from po_costfactor C inner join po_costfactor_b D on D.ccostfactorid = C.ccostfactorid ";
    sql += "inner join po_invoice_b B on B.cmangid = D.cmangid ";
    sql += "inner join po_invoice A on B.cinvoiceid = A.cinvoiceid ";
    sql += "inner join bd_busitype E on E.pk_busitype = A.cbiztype ";
    sql += "left outer join bd_stordoc ST on ST.pk_stordoc = B.cwarehouseid and (B.cwarehouseid is null or coalesce(ST.iscalculatedinvcost,'N') = 'Y') ";
    sql += "where B.dr=0 and A.dr=0 and D.pk_corp = B.pk_corp ";

    if (unitCode != null) {
      sql += "and D.pk_corp = '" + unitCode + "' ";
    }
    sql += sCondition;

    FeeinvoiceVO feeinvoices[] = null;
    Vector v = new Vector();
    Vector vMangID = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      Vector vv = new Vector();
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        FeeinvoiceVO feeinvoice = new FeeinvoiceVO();
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(1);
        feeinvoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(2);
        feeinvoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // ccostfactorid :
        String ccostfactorid = rs.getString(3);
        feeinvoice.setCcostfactorid(ccostfactorid == null ? null
            : ccostfactorid.trim());
        // vfactorname :
        String vfactorname = rs.getString(4);
        feeinvoice.setVfactorname(vfactorname == null ? null : vfactorname
            .trim());
        // fapportionmode :
        Integer fapportionmode = (Integer) rs.getObject(5);
        feeinvoice.setFapportionmode(fapportionmode == null ? null
            : fapportionmode);
        // cunitid :
        String cunitid = rs.getString(6);
        feeinvoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cmangid :
        String cmangid = rs.getString(7);
        feeinvoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(8);
        feeinvoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // nmoney :
        Object nmoney = rs.getObject(9);
        feeinvoice.setNmny(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(10);
        feeinvoice.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString()));
        // biscost :
        String biscost = rs.getString(11);
        feeinvoice.setBiscost(biscost == null ? null : new UFBoolean(biscost
            .trim()));
        // cvendormangid :
        String cvendormangid = rs.getString(12);
        feeinvoice.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(13);
        feeinvoice.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(14);
        feeinvoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cbiztype :
        String cbiztype = rs.getString(15);
        feeinvoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // cdeptid :
        String cdeptid = rs.getString(16);
        feeinvoice.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperator :
        String coperator = rs.getString(17);
        feeinvoice.setCoperator(coperator == null ? null : coperator.trim());
        // verifyrule :
        String verifyrule = rs.getString(18);
        // ts1 :
        String ts1 = rs.getString(19);
        feeinvoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(20);
        feeinvoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(21);
        feeinvoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(22);
        feeinvoice.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(23);
        feeinvoice.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(24);
        feeinvoice.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(25);
        feeinvoice.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(26);
        feeinvoice.setVfree5(vfree5 == null ? null : vfree5.trim());
        // B.vmemo
        String strTmp = rs.getString(27);
        feeinvoice.setVmemobody(strTmp);
        // 上层
        strTmp = rs.getString(28);
        feeinvoice.setCupsourcebilltype(strTmp);
        strTmp = rs.getString(29);
        feeinvoice.setCupsourcebillid(strTmp);
        strTmp = rs.getString(30);
        feeinvoice.setCupsourcebillrowid(strTmp);
        // 源头
        strTmp = rs.getString(31);
        feeinvoice.setCsourcebilltype(strTmp);
        strTmp = rs.getString(32);
        feeinvoice.setCsourcebillid(strTmp);
        strTmp = rs.getString(33);
        feeinvoice.setCsourcerowid(strTmp);
        //
        if (verifyrule != null && verifyrule.length() > 0) {
          verifyrule = verifyrule.trim().toUpperCase();
          if (!verifyrule.equals("N"))
            vv.addElement(feeinvoice);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      if (vv.size() > 0) {
        String sqlsql = "select pk_invbasdoc from bd_invbasdoc where dr = 0 ";
        sqlsql += "and upper(laborflag) = 'Y' and pk_invbasdoc in ";

        Vector vTemp = new Vector();
        vTemp.addElement(((FeeinvoiceVO) vv.elementAt(0)).getCbaseid());
        for (int i = 1; i < vv.size(); i++) {
          if (!vTemp.contains(((FeeinvoiceVO) vv.elementAt(i)).getCbaseid()))
            vTemp.addElement(((FeeinvoiceVO) vv.elementAt(i)).getCbaseid());
        }
        String sTemp[] = new String[vTemp.size()];
        vTemp.copyInto(sTemp);
        // 临时表
        String strSetId = null;
        try {
          nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
          strSetId = dmoTempTbl.insertTempTable(sTemp,
              nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU20,
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
          if (strSetId == null || strSetId.trim().equals("()")) {
            strSetId = " ('ErrorPk') ";
          }
          sqlsql += strSetId;
        }
        catch (Exception e) {
          throw new SQLException(e.getMessage());
        }
        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        while (rs.next()) {
          vMangID.addElement(rs.getString(1));
        }
        if (rs != null)
          rs.close();
        if (stmt != null)
          stmt.close();

        for (int i = 0; i < vv.size(); i++) {
          FeeinvoiceVO feeVO = (FeeinvoiceVO) vv.elementAt(i);
          if (vMangID.contains(feeVO.getCbaseid())) {
            v.addElement(feeVO);
          }
        }
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    feeinvoices = new FeeinvoiceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(feeinvoices);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryFee", new Object[] {
        unitCode, sCondition
    });
    /** ********************************************************** */

    return feeinvoices;
  }

  /**
   * 功能:查询所有发票(是否包括费用发票和折扣发票由传入参数决定) 作者：熊海情 参数：ArrayList |- String ,公司主键 |-
   * String ,查询条件串 |- UFBoolean ,是否虚拟发票过滤 |- UFBoolean ,是否过滤费用、折扣属性发票
   * 返回：IinvoiceVO[], 采购结算用发票VO[] 修改：晁志平 FOR V30 1)、仓库属性是否成本计算过滤
   * 2)、针对结算匹配数量相反发票，增加不用折扣属性过滤处理，即查询出所有数据
   */
  public IinvoiceVO[] queryInvoice(ArrayList listPara) throws SQLException {
    if (listPara == null || listPara.size() < 4) {
      SCMEnv.out("程序BUG：传入参数错误!以下调用信息供程序员参考：");
      SCMEnv.out(new Exception());
      throw new SQLException("程序BUG：传入参数错误!");/* notranslate */
    }
    String unitCode = (String) listPara.get(0);
    String sCondition = (String) listPara.get(1);
    UFBoolean bInvisibleInvoice = (UFBoolean) listPara.get(2);
    UFBoolean bFilter = (UFBoolean) listPara.get(3);
    UFBoolean bSortByInvCode = new UFBoolean(false);
    String strExtJoin = "";
    String strOrderBy = "";
    if (listPara.size() >= 5 && listPara.get(4) != null) {
      bSortByInvCode = (UFBoolean) listPara.get(4);
      if (bSortByInvCode.booleanValue()) {
        strExtJoin = "inner join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = B.cbaseid ";
        strOrderBy = " order by bd_invbasdoc.invcode ";
      }
    }
    String sExtra = "and iinvoicetype <> 3 ";
    if (bInvisibleInvoice.booleanValue())
      sExtra = " ";
    String sql = "select cvendormangid, cvendorbaseid, vinvoicecode, A.cinvoiceid, cinvoice_bid, cmangid, cbaseid, ninvoicenum, naccumsettnum, nmoney, naccumsettmny, cdeptid, cemployeeid, A.pk_corp, cbiztype, verifyrule, A.ts, B.ts, vproducenum, cupsourcebillid, cupsourcebillrowid, vfree1, vfree2, vfree3, vfree4, vfree5, B.vmemo,B.cupsourcebilltype,B.cupsourcebillid,B.cupsourcebillrowid,B.csourcebilltype,B.csourcebillid,B.csourcebillrowid,A.ibillstatus ";
    sql += ",B.ccurrencytypeid, B.noriginalcurprice, B.nexchangeotobrate, B.cwarehouseid, A.cstoreorganization ";
    sql += "from po_invoice A ";
    sql += "inner join po_invoice_b B on B.cinvoiceid = A.cinvoiceid ";
    sql += strExtJoin;
    sql += "inner join bd_busitype E on E.pk_busitype = A.cbiztype ";
    sql += "left outer join bd_stordoc ST on ST.pk_stordoc = B.cwarehouseid and (B.cwarehouseid is null or coalesce(ST.iscalculatedinvcost,'N') = 'Y') ";
    sql += "where A.dr = 0 and B.dr = 0 ";
    sql += sExtra;
    if (unitCode != null) {
      sql += "and A.pk_corp ='" + unitCode + "' ";
    }
    sql += sCondition;
    sql += strOrderBy;
    //
    Connection con = null;
    PreparedStatement stmt = null;
    Vector vRslt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      Vector vv = new Vector();
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        IinvoiceVO invoice = new IinvoiceVO();
        // cvendormangid :
        String cvendormangid = rs.getString(1);
        invoice.setCvendormangid(cvendormangid == null ? "" : cvendormangid
            .trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(2);
        invoice.setCvendorbaseid(cvendorbaseid == null ? "" : cvendorbaseid
            .trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(3);
        invoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(4);
        invoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(5);
        invoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cmangid :
        String cmangid = rs.getString(6);
        invoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(7);
        invoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninvoicenum :
        Object ninvoicenum = rs.getObject(8);
        invoice.setNinvoicenum(ninvoicenum == null ? new UFDouble(0.0)
            : new UFDouble(ninvoicenum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(9);
        invoice.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // nmoney :
        Object nmoney = rs.getObject(10);
        invoice.setNmoney(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettlemny = rs.getObject(11);
        invoice.setNaccumsettlemny(naccumsettlemny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettlemny.toString()));
        // cdeptid :
        String cdeptid = rs.getString(12);
        invoice.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(13);
        invoice.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // cunitid :
        String cunitid = rs.getString(14);
        invoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cbiztype :
        String cbiztype = rs.getString(15);
        invoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // verifyrule :
        String verifyrule = rs.getString(16);
        // ts1 :
        String ts1 = rs.getString(17);
        invoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(18);
        invoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(19);
        invoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // csourcebillid :
        String csourcebillid = rs.getString(20);
        invoice.setCsourcebillhid(csourcebillid == null ? null : csourcebillid
            .trim());
        // csourcebillrowid :
        String csourcebillrowid = rs.getString(21);
        invoice.setCsourcebillbid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        // vfree1 :
        String vfree1 = rs.getString(22);
        invoice.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(23);
        invoice.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(24);
        invoice.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(25);
        invoice.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(26);
        invoice.setVfree5(vfree5 == null ? null : vfree5.trim());
        // B.vmemo
        String strTmp = rs.getString(27);
        invoice.setVmemobody(strTmp);
        // 上层
        strTmp = rs.getString(28);
        invoice.setCupsourcebilltype(strTmp);
        strTmp = rs.getString(29);
        invoice.setCupsourcebillid(strTmp);
        strTmp = rs.getString(30);
        invoice.setCupsourcebillrowid(strTmp);
        // 源头
        strTmp = rs.getString(31);
        invoice.setCsourcebilltype(strTmp);
        strTmp = rs.getString(32);
        invoice.setCsourcebillid(strTmp);
        strTmp = rs.getString(33);
        invoice.setCsourcerowid(strTmp);
        int m = rs.getInt(34);
        invoice.setIBillStatus(new Integer(m));
        // since v502, ,B.ccurrencytypeid, B.noriginalcurprice,
        // B.nexchangeotobrate
        invoice.setCcurrencytypeid(rs.getString(35));
        invoice.setNoriginalcurprice(PuPubVO.getUFDouble_ZeroAsNull(rs
            .getObject(36)));
        invoice.setNexchangeotobrate(PuPubVO.getUFDouble_ZeroAsNull(rs
            .getObject(37)));
        //仓库及库存组织
        invoice.setCwarehouseid(rs.getString(38));
        invoice.setCstoreorganization(rs.getString(39));
        if (verifyrule != null && verifyrule.length() > 0) {
          verifyrule = verifyrule.trim().toUpperCase();
          if (!verifyrule.equals("N"))
            vv.addElement(invoice);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      if (vv.size() > 0 && bFilter.booleanValue()) {
        vRslt = new Vector();
        String sqlsql = "select pk_invbasdoc from bd_invbasdoc where dr = 0 ";
        sqlsql += "and upper(laborflag) = 'N' and upper(discountflag) = 'N' ";
        // sqlsql += "and upper(sellproxyflag) = 'N' and ("; /**CZP DEL FOR XY
        // ：2004－04－29，采购结算支持受托属性存货在非受托业务类型下的结算*/
        sqlsql += "and pk_invbasdoc in ";
        Vector vTemp = new Vector();
        vTemp.addElement(((IinvoiceVO) vv.elementAt(0)).getCbaseid());
        for (int i = 1; i < vv.size(); i++) {
          if (!vTemp.contains(((IinvoiceVO) vv.elementAt(i)).getCbaseid()))
            vTemp.addElement(((IinvoiceVO) vv.elementAt(i)).getCbaseid());
        }
        String sTemp[] = new String[vTemp.size()];
        vTemp.copyInto(sTemp);
        // 临时表
        String strSetId = null;
        try {
          nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
          strSetId = dmoTempTbl.insertTempTable(sTemp,
              nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU37,
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
          if (strSetId == null || strSetId.trim().equals("()")) {
            strSetId = " ('ErrorPk') ";
          }
          sqlsql += strSetId;
        }
        catch (Exception e) {
          throw new SQLException(e.getMessage());
        }
        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        //
        Vector vMangID = new Vector();
        while (rs.next()) {
          vMangID.addElement(rs.getString(1));
        }
        if (rs != null)
          rs.close();
        if (stmt != null)
          stmt.close();

        for (int i = 0; i < vv.size(); i++) {
          IinvoiceVO invoiceVO = (IinvoiceVO) vv.elementAt(i);
          if (vMangID.contains(invoiceVO.getCbaseid())) {
            vRslt.addElement(invoiceVO);
          }
        }
      }
      else {
        vRslt = vv;
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    IinvoiceVO invoices[] = null;
    invoices = new IinvoiceVO[vRslt.size()];
    if (vRslt != null && vRslt.size() > 0) {
      vRslt.copyInto(invoices);
    }
    return invoices;
  }

  /**
   * 功能描述:根据结算入库单VO查询结算匹配的结算发票VO 输入参数:入库单VO 返回值:发票VO 异常处理: 日期:2003/04/24
   * 
   * @return nc.vo.ps.settle.IinvoiceVO[]
   * @param VOs
   *          nc.vo.ps.settle.StockVO[]
   */
  public IinvoiceVO[] queryInvoiceByStock(StockVO[] VO)
      throws BusinessException {

    if (VO == null || VO.length == 0) {
      SCMEnv.out("传入参数为空，直接返回null!异常位置：");
      SCMEnv.out(new Exception());
      return null;
    }

    // 来源单据行ID唯一性组合
    Vector vID = new Vector();
    vID.addElement(VO[0].getCsourcebillbid());
    for (int i = 1; i < VO.length; i++) {
      String s = VO[i].getCsourcebillbid();
      if (!vID.contains(s))
        vID.addElement(s);
    }
    String strPkCorp = VO[0].getPk_corp();
    String sCondition = " and abs(nmoney - naccumsettmny) >= 0.0 and csourcebillrowid in ";
    /*
     * ('"; for (int i = 0; i < VO.length - 1; i++) sCondition +=
     * VO[i].getCsourcebillbid() + "','"; sCondition += VO[VO.length -
     * 1].getCsourcebillbid() + "')";
     */
    int iLen = VO.length;
    String[] saId = new String[iLen];
    for (int i = 0; i < iLen; i++) {
      saId[i] = VO[i].getCsourcebillbid();
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU86,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
          "SCMCOMMON", "UPPSCMCommon-000413")/* @res "调用临时表处理出现异常:" */
          + e.getMessage());
    }
    sCondition += strIdSet;

    ArrayList listPara = new ArrayList();
    listPara.add(VO[0].getPk_corp());
    listPara.add(sCondition);
    listPara.add(new UFBoolean(false));
    listPara.add(new UFBoolean(true));
    IinvoiceVO[] invoiceVO = null;

    try {
      invoiceVO = queryInvoice(listPara);
    }
    catch (SQLException e) {
      SCMEnv.out(e);
      throw new BusinessException(e.getMessage());
    }

    // 按龙旗项目调整，取单据上的单价并按单据汇率转换，单价为空时按本币金额/除以数量
    BusinessCurrencyRateUtil dmoCurrArith = null;
    int nPriceDecimal = 2;
    try {
      dmoCurrArith = new BusinessCurrencyRateUtil(strPkCorp);
      // 单价精度
      ISysInitQry myService = (ISysInitQry) NCLocator.getInstance().lookup(
          ISysInitQry.class.getName());
      nPriceDecimal = myService.getParaInt(strPkCorp, "BD505");
    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    // 是否主辅币核算
    // boolean bBlnLocalFrac = dmoCurrArith.isBlnLocalFrac();

    if (invoiceVO != null && invoiceVO.length > 0) {
      // 计算未结算数量，本币未结算金额，单价
      for (int i = 0; i < invoiceVO.length; i++) {
        UFDouble d1 = invoiceVO[i].getNinvoicenum();
        UFDouble d2 = invoiceVO[i].getNaccumsettlenum();
        if (d1 == null)
          d1 = new UFDouble(0);
        if (d2 == null)
          d2 = new UFDouble(0);
        double d = d1.doubleValue() - d2.doubleValue();
        invoiceVO[i].setNnosettlenum(new UFDouble(d));
        d1 = invoiceVO[i].getNmoney();
        d2 = invoiceVO[i].getNaccumsettlemny();
        if (d1 == null)
          d1 = new UFDouble(0);
        if (d2 == null)
          d2 = new UFDouble(0);
        // d = d1.doubleValue() - d2.doubleValue();
        // invoiceVO[i].setNnosettlemny(new UFDouble(d));
        invoiceVO[i]
            .setNnosettlemny(d1.sub(d2, BsPuTool.getCCurrDecimal(null)));
        /*
         * d1 = invoiceVO[i].getNinvoicenum(); d2 = invoiceVO[i].getNmoney(); if
         * (d1 == null) d1 = new UFDouble(0); if (d2 == null) d2 = new
         * UFDouble(0); if (Math.abs(d1.doubleValue()) > 0) { d =
         * d2.doubleValue() / d1.doubleValue(); invoiceVO[i].setNprice(new
         * UFDouble(d)); }
         */
        invoiceVO[i].setNprice(invoiceVO[i].getNprice(dmoCurrArith,
            nPriceDecimal, strPkCorp));
      }
    }

    return invoiceVO;
  }

  /**
   * 功能描述:获得发票号
   */
  public String[] queryInvoiceCode(SettlebillItemVO VOs[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */

    String sql = "select cinvoiceid, vinvoicecode from po_invoice where dr = 0 and cinvoiceid in ";

    Vector vTemp = new Vector();
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCinvoiceid() != null
          && VOs[i].getCinvoiceid().trim().length() > 0
          && !vTemp.contains(VOs[i].getCinvoiceid()))
        vTemp.addElement(VOs[i].getCinvoiceid());
    }
    if (vTemp.size() == 0)
      return new String[VOs.length];
    String sTemp[] = new String[vTemp.size()];
    vTemp.copyInto(sTemp);
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sTemp,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU38,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      sql += strSetId;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
     * sTemp.length - 1; i++) sql += " cinvoiceid in " + sTemp[i] + " or "; sql += "
     * cinvoiceid in " + sTemp[sTemp.length - 1] + ")";
     */
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s1.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0) {
          t.put(s1, s2);
        }
      }
      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */

    String vInvoicecode[] = new String[VOs.length];
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCinvoiceid() == null
          || VOs[i].getCinvoiceid().trim().length() == 0)
        continue;
      Object oTemp = t.get(VOs[i].getCinvoiceid());
      if (oTemp != null)
        vInvoicecode[i] = oTemp.toString();
    }

    return vInvoicecode;
  }

  /**
   * @since v53 设置直运发票结算时生成的结算单的供应商、采购员、采购部门
   */
  public void setValuesForDirect(SettlebillItemVO voaSettleBillItem[])
      throws BusinessException {
    //
    ArrayList<String> listIDVal = new ArrayList<String>();
    for (SettlebillItemVO item : voaSettleBillItem) {
      if (item == null || item.getCinvoiceid() == null
          || PuPubVO.getString_TrimZeroLenAsNull(item.getCvendorname()) != null) {
        continue;
      }
      listIDVal.add(item.getCinvoiceid());
    }
    if (listIDVal.size() == 0) {
      return;
    }
    StringBuffer sbSql = new StringBuffer(
        "select po_invoice.cinvoiceid, bd_cubasdoc.custname, bd_deptdoc.deptname, bd_psndoc.psnname ");
    sbSql.append("from po_invoice, bd_cubasdoc, bd_deptdoc, bd_psndoc ");
    sbSql.append("where po_invoice.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
    sbSql.append("and po_invoice.cemployeeid = bd_psndoc.pk_psndoc ");
    sbSql.append("and po_invoice.cdeptid = bd_deptdoc.pk_deptdoc ");
    sbSql.append("and po_invoice.dr = 0 and po_invoice.cinvoiceid in ");
    sbSql.append(new TempTableUtil().getSubSql(listIDVal));
    //
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String strHid = null;
    HashMap<String, ArrayList<String>> mapIdAndDocname = new HashMap<String, ArrayList<String>>();
    ArrayList<String> listNames = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        strHid = rs.getString(1);
        if (strHid == null) {
          continue;
        }
        listNames = new ArrayList<String>();
        listNames.add(rs.getString(2));
        listNames.add(rs.getString(3));
        listNames.add(rs.getString(4));
        mapIdAndDocname.put(strHid, listNames);
      }
    }
    catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    //
    for (int i = 0; i < voaSettleBillItem.length; i++) {
      strHid = voaSettleBillItem[i].getCinvoiceid();
      if (strHid == null
          || strHid.length() == 0
          || PuPubVO.getString_TrimZeroLenAsNull(voaSettleBillItem[i]
              .getCvendorname()) != null) {
        continue;
      }
      // bd_cubasdoc.custname, bd_deptdoc.deptname, bd_psndoc.psnname
      listNames = mapIdAndDocname.get(strHid);
      if (listNames == null) {
        continue;
      }
      voaSettleBillItem[i].setCvendorname(listNames.get(0));
      voaSettleBillItem[i].setCdeptname(listNames.get(1));
      voaSettleBillItem[i].setCemployeename(listNames.get(2));
    }
    //
    return;
  }

  /**
   * 功能描述:查询所有发票(不包括费用发票和折扣发票)
   */
  public IinvoiceVO[] queryInvoiceDetail(String unitCode, String sCondition,
      UFBoolean bInvisibleInvoice) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceDetail",
        new Object[] {
            unitCode, sCondition, bInvisibleInvoice
        });
    /** ********************************************************** */

    String sExtra = "and iinvoicetype <> 3";
    if (bInvisibleInvoice.booleanValue())
      sExtra = "";

    String sql = "";
    if (unitCode != null) {
      sql = "select A.bapflag, cvendormangid, cvendorbaseid, vinvoicecode, A.cinvoiceid, cinvoice_bid, cmangid, cbaseid, ninvoicenum, naccumsettnum, nmoney, naccumsettmny, cdeptid, cemployeeid, A.pk_corp, cbiztype, A.ts, B.ts, vproducenum, ibillstatus, iinvoicetype, corderid, corder_bid ";
      sql += "from po_invoice A,po_invoice_b B ";
      sql += "where A.dr = 0 and B.dr = 0 " + sExtra + " and A.pk_corp = ? ";
      sql += "and A.cinvoiceid = B.cinvoiceid ";
    }
    else {
      sql = "select A.bapflag, cvendormangid, cvendorbaseid, vinvoicecode, A.cinvoiceid, cinvoice_bid, cmangid, cbaseid, ninvoicenum, naccumsettnum, nmoney, naccumsettmny, cdeptid, cemployeeid, A.pk_corp, cbiztype, A.ts, B.ts, vproducenum, ibillstatus, iinvoicetype, corderid, corder_bid ";
      sql += "from po_invoice A,po_invoice_b B ";
      sql += "where A.dr = 0 and B.dr = 0 " + sExtra + " ";
      sql += "and A.cinvoiceid = B.cinvoiceid ";
    }
    sql += sCondition;

    Vector vv = new Vector();
    IinvoiceVO invoices[] = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (unitCode != null) {
        stmt.setString(1, unitCode);
      }
      ResultSet rs = stmt.executeQuery();
      //
      int index = 0;
      while (rs.next()) {
        index = 1;
        IinvoiceVO invoice = new IinvoiceVO();
        //bapflag
        String strApFlag = rs.getString(index++);
        invoice.setApFlag(PuPubVO.getUFBoolean_NullAs(strApFlag, UFBoolean.FALSE));
        // cvendormangid :
        String cvendormangid = rs.getString(index++);
        invoice.setCvendormangid(cvendormangid == null ? "" : cvendormangid
            .trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(index++);
        invoice.setCvendorbaseid(cvendorbaseid == null ? "" : cvendorbaseid
            .trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(index++);
        invoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(index++);
        invoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(index++);
        invoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cmangid :
        String cmangid = rs.getString(index++);
        invoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(index++);
        invoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninvoicenum :
        Object ninvoicenum = rs.getObject(index++);
        invoice.setNinvoicenum(ninvoicenum == null ? new UFDouble(0.0)
            : new UFDouble(ninvoicenum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(index++);
        invoice.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // nmoney :
        Object nmoney = rs.getObject(index++);
        invoice.setNmoney(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettlemny = rs.getObject(index++);
        invoice.setNaccumsettlemny(naccumsettlemny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettlemny.toString()));
        // cdeptid :
        String cdeptid = rs.getString(index++);
        invoice.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(index++);
        invoice.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // cunitid :
        String cunitid = rs.getString(index++);
        invoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cbiztype :
        String cbiztype = rs.getString(index++);
        invoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // ts1 :
        String ts1 = rs.getString(index++);
        invoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(index++);
        invoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(index++);
        invoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // ibillstatus
        int ibillstatus = rs.getInt(index++);
        invoice.setIBillStatus(new Integer(ibillstatus));
        // iinvoicetype
        int iinvoicetype = rs.getInt(index++);
        invoice.setIInvoiceType(new Integer(iinvoicetype));
        // corderid :
        String corderid = rs.getString(index++);
        invoice.setCorderid(corderid == null ? null : corderid.trim());
        // corder_bid :
        String corder_bid = rs.getString(index++);
        invoice.setCorder_bid(corder_bid == null ? null : corder_bid.trim());

        vv.addElement(invoice);
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    invoices = new IinvoiceVO[vv.size()];
    if (vv.size() > 0) {
      vv.copyInto(invoices);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceDetail",
        new Object[] {
            unitCode, sCondition, bInvisibleInvoice
        });
    /** ********************************************************** */

    return invoices;
  }

  /**
   * 功能描述:查询发票(非费用,非折扣,数量为空或零)(服务于费用单独结算) 输入参数:单位编码,未结算完毕条件
   */
  public FeeinvoiceVO[] queryInvoiceNoNum(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceNoNum",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "select distinct B.cinvoice_bid, B.cinvoiceid, B.pk_corp, cmangid, cbaseid, ninvoicenum, nmoney, naccumsettmny, cvendormangid, cvendorbaseid, vinvoicecode, cbiztype, cdeptid, cemployeeid, verifyrule, A.ts, B.ts, vproducenum, vfree1, vfree2, vfree3, vfree4, vfree5,B.cupsourcebilltype,B.cupsourcebillid,B.cupsourcebillrowid,B.csourcebilltype,B.csourcebillid,B.csourcebillrowid, B.vmemo ";
    sql += "from po_invoice_b B inner join po_invoice A on A.cinvoiceid = B.cinvoiceid ";
    sql += "inner join bd_busitype E on E.pk_busitype = A.cbiztype ";
    sql += "left outer join bd_stordoc ST on ST.pk_stordoc = B.cwarehouseid ";
    sql += "where B.dr=0 and A.dr=0 and iinvoicetype <> 3 ";
    sql += "and (B.cwarehouseid is null or coalesce(ST.iscalculatedinvcost,'N') = 'Y') ";

    if (unitCode != null) {
      sql += "and A.pk_corp = '" + unitCode + "' ";
    }
    sql += sCondition;

    FeeinvoiceVO feeinvoices[] = null;
    Vector v = new Vector();
    Vector vMangID = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      Vector vv = new Vector();
      //
      while (rs.next()) {
        FeeinvoiceVO feeinvoice = new FeeinvoiceVO();
        // cinvoice_bid :
        String cinvoice_bid = rs.getString(1);
        feeinvoice.setCinvoice_bid(cinvoice_bid == null ? null : cinvoice_bid
            .trim());
        // cinvoiceid :
        String cinvoiceid = rs.getString(2);
        feeinvoice.setCinvoiceid(cinvoiceid == null ? null : cinvoiceid.trim());
        // cunitid :
        String cunitid = rs.getString(3);
        feeinvoice.setPk_corp(cunitid == null ? null : cunitid.trim());
        // cmangid :
        String cmangid = rs.getString(4);
        feeinvoice.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(5);
        feeinvoice.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninvoicenum :
        BigDecimal ninvoicenum = null;
        Object oTemp = rs.getObject(6);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          ninvoicenum = new BigDecimal(oTemp.toString());
        // nmoney :
        Object nmoney = rs.getObject(7);
        feeinvoice.setNmny(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(8);
        feeinvoice.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString()));
        // cvendormangid :
        String cvendormangid = rs.getString(9);
        feeinvoice.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(10);
        feeinvoice.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // vinvoicecode :
        String vinvoicecode = rs.getString(11);
        feeinvoice.setVinvoicecode(vinvoicecode == null ? null : vinvoicecode
            .trim());
        // cbiztype :
        String cbiztype = rs.getString(12);
        feeinvoice.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // cdeptid :
        String cdeptid = rs.getString(13);
        feeinvoice.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperator :
        String coperator = rs.getString(14);
        feeinvoice.setCoperator(coperator == null ? null : coperator.trim());
        // verifyrule :
        String verifyrule = rs.getString(15);
        // ts1 :
        String ts1 = rs.getString(16);
        feeinvoice.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(17);
        feeinvoice.setTs2(ts2 == null ? null : ts2.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(18);
        feeinvoice.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(19);
        feeinvoice.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(20);
        feeinvoice.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(21);
        feeinvoice.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(22);
        feeinvoice.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(23);
        feeinvoice.setVfree5(vfree5 == null ? null : vfree5.trim());
        // 上层
        String strTmp = rs.getString(24);
        feeinvoice.setCupsourcebilltype(strTmp);
        strTmp = rs.getString(25);
        feeinvoice.setCupsourcebillid(strTmp);
        strTmp = rs.getString(26);
        feeinvoice.setCupsourcebillrowid(strTmp);
        // 源头
        strTmp = rs.getString(27);
        feeinvoice.setCsourcebilltype(strTmp);
        strTmp = rs.getString(28);
        feeinvoice.setCsourcebillid(strTmp);
        strTmp = rs.getString(29);
        feeinvoice.setCsourcerowid(strTmp);
        // vmemo :
        String vmemo = rs.getString(30);
        feeinvoice.setVmemobody(vmemo);
        //

        if (verifyrule != null && verifyrule.length() > 0
            && (ninvoicenum == null || ninvoicenum.doubleValue() == 0.0)) {
          verifyrule = verifyrule.trim().toUpperCase();
          if (!verifyrule.equals("N"))
            vv.addElement(feeinvoice);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      if (vv.size() > 0) {
        String sqlsql = "select pk_invmandoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_corp = '"
            + unitCode + "' ";
        sqlsql += "and A.pk_invbasdoc = B.pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' ";
        // sqlsql += "and upper(sellproxyflag) = 'N' and ("; /**CZP DEL FOR XY
        // ：2004－04－29，采购结算支持受托属性存货在非受托业务类型下的结算*/
        sqlsql += "and pk_invmandoc in ";
        Vector vTemp = new Vector();
        vTemp.addElement(((FeeinvoiceVO) vv.elementAt(0)).getCmangid());
        for (int i = 1; i < vv.size(); i++) {
          if (!vTemp.contains(((FeeinvoiceVO) vv.elementAt(i)).getCmangid()))
            vTemp.addElement(((FeeinvoiceVO) vv.elementAt(i)).getCmangid());
        }
        String sTemp[] = new String[vTemp.size()];
        vTemp.copyInto(sTemp);
        // 临时表
        String strSetId = null;
        try {
          nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
          strSetId = dmoTempTbl.insertTempTable(sTemp,
              nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU40,
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
          if (strSetId == null || strSetId.trim().equals("()")) {
            strSetId = " ('ErrorPk') ";
          }
          sqlsql += strSetId;
        }
        catch (Exception e) {
          throw new SQLException(e.getMessage());
        }
        /*
         * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
         * sTemp.length - 1; i++) sqlsql += " pk_invmandoc in " + sTemp[i] + "
         * or "; sqlsql += " pk_invmandoc in " + sTemp[sTemp.length - 1] + ")";
         */
        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        while (rs.next()) {
          vMangID.addElement(rs.getString(1));
        }
        if (rs != null)
          rs.close();
        if (stmt != null)
          stmt.close();

        for (int i = 0; i < vv.size(); i++) {
          FeeinvoiceVO feeVO = (FeeinvoiceVO) vv.elementAt(i);
          if (vMangID.contains(feeVO.getCmangid())) {
            v.addElement(feeVO);
          }
        }
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    feeinvoices = new FeeinvoiceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(feeinvoices);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryInvoiceNoNum",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    return feeinvoices;
  }

  /**
   * 功能描述:根据结算发票VO查询结算匹配的结算发票VO(可能为正也可能为负) 输入参数:发票VO[] 返回值:发票VO[]
   * 异常处理:java.sql.SQLException 日期:2003/05/29 作者：熊海情 修改：晁志平 2004-06-04 FOR V30
   * 1)、放开非折扣非劳务限制 2)、排除本身(不匹配自己)
   */
  public IinvoiceVO[] queryNegInvoiceByInvoice(IinvoiceVO[] VO)
      throws SQLException {
    // 来源单据行ID唯一性组合
    Vector vID = new Vector();
    vID.addElement(VO[0].getCsourcebillbid());
    for (int i = 1; i < VO.length; i++) {
      String s = VO[i].getCsourcebillbid();
      if (!vID.contains(s))
        vID.addElement(s);
    }
    String strPkCorp = VO[0].getPk_corp();
    String sCondition = " and abs(nmoney - naccumsettmny) >= 0.0 and cupsourcebillrowid in ";
    try {
      // 临时表方案
      ArrayList listUpBid = new ArrayList();
      ArrayList listThisBid = new ArrayList();
      int iLen = VO == null ? 0 : VO.length;
      for (int i = 0; i < iLen; i++) {
        listUpBid.add(VO[i].getCsourcebillbid());
        listThisBid.add(VO[i].getCinvoice_bid());
      }
      String strSetIn = null;
      if (listUpBid.size() == 0) {
        return null;
      }
      nc.bs.scm.pub.TempTableDMO dmoGetSetIn = new nc.bs.scm.pub.TempTableDMO();
      strSetIn = dmoGetSetIn.insertTempTable(listUpBid,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU54,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetIn == null || strSetIn.trim().equals("()")) {
        return null;
      }
      sCondition += strSetIn + " ";
      strSetIn = dmoGetSetIn.insertTempTable(listThisBid,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU13,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      sCondition += "and cinvoice_bid not in ";
      sCondition += strSetIn + " ";

      ArrayList listPara = new ArrayList();
      listPara.add(VO[0].getPk_corp());
      listPara.add(sCondition);
      listPara.add(new UFBoolean(false));
      listPara.add(new UFBoolean(false));
      IinvoiceVO invoiceVO[] = queryInvoice(listPara);

      // 比较查询出的副发票是否已存在,若存在,应删除
      if (invoiceVO != null && invoiceVO.length > 0) {
        Vector vTemp = new Vector();
        for (int i = 0; i < VO.length; i++) {
          if (!vTemp.contains(VO[i].getCinvoice_bid()))
            vTemp.addElement(VO[i].getCinvoice_bid());
        }
        Vector vvTemp = new Vector();
        for (int i = 0; i < invoiceVO.length; i++) {
          if (!vTemp.contains(invoiceVO[i].getCinvoice_bid()))
            vvTemp.addElement(invoiceVO[i]);
        }
        invoiceVO = new IinvoiceVO[vvTemp.size()];
        vvTemp.copyInto(invoiceVO);
      }
      //

      if (invoiceVO != null && invoiceVO.length > 0) {
        // 计算未结算数量，本币未结算金额，单价
        for (int i = 0; i < invoiceVO.length; i++) {
          UFDouble d1 = invoiceVO[i].getNinvoicenum();
          UFDouble d2 = invoiceVO[i].getNaccumsettlenum();
          if (d1 == null)
            d1 = new UFDouble(0);
          if (d2 == null)
            d2 = new UFDouble(0);
          double d = d1.doubleValue() - d2.doubleValue();
          invoiceVO[i].setNnosettlenum(new UFDouble(d));
          d1 = invoiceVO[i].getNmoney();
          d2 = invoiceVO[i].getNaccumsettlemny();
          if (d1 == null)
            d1 = new UFDouble(0);
          if (d2 == null)
            d2 = new UFDouble(0);
          // d = d1.doubleValue() - d2.doubleValue();
          // invoiceVO[i].setNnosettlemny(new UFDouble(d));
          invoiceVO[i].setNnosettlemny(d1.sub(d2, BsPuTool
              .getCCurrDecimal(null)));

          d1 = invoiceVO[i].getNinvoicenum();
          d2 = invoiceVO[i].getNmoney();
          if (d1 == null)
            d1 = new UFDouble(0);
          if (d2 == null)
            d2 = new UFDouble(0);
          if (Math.abs(d1.doubleValue()) > 0) {
            // since v502, 精度处理
            invoiceVO[i].setNprice(d2.div(d1, BsPuTool.getPriceDigit(null)));
            // d = d2.doubleValue() / d1.doubleValue();
            // invoiceVO[i].setNprice(new UFDouble(d));
          }
        }

        Vector v = new Vector();
        for (int i = 0; i < VO.length; i++) {
          String s1 = VO[i].getCsourcebillbid();
          if (s1 == null)
            continue;
          UFDouble nNum1 = VO[i].getNnosettlenum();
          UFDouble nMoney1 = VO[i].getNnosettlemny();
          for (int j = 0; j < invoiceVO.length; j++) {
            String s2 = invoiceVO[j].getCsourcebillbid();
            if (s2 == null)
              continue;
            UFDouble nNum2 = invoiceVO[j].getNnosettlenum();
            if (nNum2 == null)
              nNum2 = new UFDouble(0.0);
            UFDouble nMoney2 = invoiceVO[j].getNnosettlemny();
            if (nMoney2 == null)
              nMoney2 = new UFDouble(0.0);
            if (s1.equals(s2)
                && (nNum1.doubleValue() == -1 * nNum2.doubleValue())
                && (nMoney1.doubleValue() == -1 * nMoney2.doubleValue())) {
              v.addElement(invoiceVO[j]);
            }
          }
        }
        if (v.size() > 0) {
          IinvoiceVO VOs[] = new IinvoiceVO[v.size()];
          v.copyInto(VOs);
          return VOs;
        }
      }
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }

    return null;
  }

  /**
   * 功能描述:根据结算入库单VO查询结算匹配的负结算入库单VO
   * 
   * @since v502, 算法调整，用上层行ID匹配调整为用源头订单行ID(cfirstbillbid)匹配
   */
  public StockVO[] queryNegStockByStock(StockVO[] VO) throws BusinessException {

    if (VO == null || VO.length == 0) {
      SCMEnv.out("传入参数为空，直接返回null!异常位置：");
      SCMEnv.out(new Exception());
      return null;
    }
    // 来源单据行ID唯一性组合
    Vector vID = new Vector();
    vID.addElement(VO[0].getCfirstbillbid());
    for (int i = 1; i < VO.length; i++) {
      String s = VO[i].getCfirstbillbid();
      if (!vID.contains(s))
        vID.addElement(s);
    }

    // 设置查询条件
    String unitCode = VO[0].getPk_corp();
    String sCondition = " and upper(isok) = 'N' and upper(bzgflag) = 'N' and cfirstbillbid in ";
    /*
     * ('"; for (int i = 0; i < vID.size() - 1; i++) sCondition +=
     * vID.elementAt(i) + "','"; sCondition += vID.elementAt(vID.size() - 1) +
     * "')";
     */
    String[] saId = new String[vID.size()];
    vID.copyInto(saId);
    String strIdSet = null;
    try {
      TempTableDMO dmoTmpTbl = new TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saId, TempTableVO.TEMPTABLE_PU87,
          TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    sCondition += strIdSet;

    int iDigitLocalCurrType = 2;
    iDigitLocalCurrType = BsPuTool.getCCurrDecimal(unitCode);
    //
    StockVO stockVOs[] = null;
    try {
      stockVOs=queryStock(unitCode, sCondition, iDigitLocalCurrType, false);
    }
    catch (SQLException e) {
      throw new BusinessException(e.getMessage());
    }
    // 比较查询出的副入库单是否已存在,若存在,应删除
    if (stockVOs != null && stockVOs.length > 0) {
      Vector vTemp = new Vector();
      for (int i = 0; i < VO.length; i++) {
        if (!vTemp.contains(VO[i].getCgeneralbid()))
          vTemp.addElement(VO[i].getCgeneralbid());
      }
      Vector vvTemp = new Vector();
      for (int i = 0; i < stockVOs.length; i++) {
        if (!vTemp.contains(stockVOs[i].getCgeneralbid()))
          vvTemp.addElement(stockVOs[i]);
      }
      stockVOs = new StockVO[vvTemp.size()];
      vvTemp.copyInto(stockVOs);
    }
    //

    if (stockVOs != null && stockVOs.length > 0) {
      Vector vTemp = new Vector();
      for (int i = 0; i < stockVOs.length; i++) {
        vTemp.addElement(stockVOs[i].getCprovidermangid());
      }
      String sVendorMangID[] = new String[vTemp.size()];
      vTemp.copyInto(sVendorMangID);

      String[] sVendorBaseID = null;
      try {
        sVendorBaseID = getVendorBaseKey(sVendorMangID);
      }
      catch (SQLException e) {
        throw new BusinessException(e.getMessage());
      }
      if (sVendorBaseID == null || sVendorBaseID.length != sVendorMangID.length) {
        throw new BusinessException(
            "Data Error : sVendorBaseID == null || sVendorBaseID.length != sVendorMangID.length");
      }
      // 计算未结算数量，本币未结算金额
      for (int i = 0; i < stockVOs.length; i++) {
        stockVOs[i].setCproviderbaseid(sVendorBaseID[i]);
        UFDouble d1 = stockVOs[i].getNinnum();
        UFDouble d2 = stockVOs[i].getNaccumsettlenum();
        if (d1 == null || d1.toString().trim().length() == 0)
          d1 = new UFDouble(0);
        if (d2 == null || d2.toString().trim().length() == 0)
          d2 = new UFDouble(0);
        double d = d1.doubleValue() - d2.doubleValue();
        stockVOs[i].setNnosettlenum(new UFDouble(d));
        d1 = stockVOs[i].getNmoney();
        d2 = stockVOs[i].getNaccumsettlemny();
        if (d1 == null || d1.toString().trim().length() == 0)
          d1 = new UFDouble(0);
        if (d2 == null || d2.toString().trim().length() == 0)
          d2 = new UFDouble(0);
        d = d1.doubleValue() - d2.doubleValue();
        stockVOs[i].setNnosettlemny(new UFDouble(d).add(new UFDouble(0.0),
            BsPuTool.getCCurrDecimal(null)));
      }

      Vector v = new Vector();
      for (int i = 0; i < VO.length; i++) {
        String s1 = VO[i].getCfirstbillbid().trim();
        UFDouble nNum1 = VO[i].getNnosettlenum();
        for (int j = 0; j < stockVOs.length; j++) {
          String s2 = stockVOs[j].getCfirstbillbid().trim();
          UFDouble nNum2 = stockVOs[j].getNnosettlenum();
          if (s1.equals(s2)
              && (nNum1.doubleValue() == -1 * nNum2.doubleValue())) {
            v.addElement(stockVOs[j]);
          }
        }
      }
      if (v.size() > 0) {
        StockVO VOs[] = new StockVO[v.size()];
        v.copyInto(VOs);
        return VOs;
      }
    }

    return null;
  }

  /**
   * 功能描述:查询订单,根据销售结算中，根据入库单生成的发票的一些信息来自订单
   */
  public OorderVO[] queryOrderDetail(String unitCode, String sCondition)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryOrderDetail",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "";
    if (unitCode != null) {
      sql = "select corder_bid, A.corderid, cusedeptid, idiscounttaxtype, ntaxrate, ccurrencytypeid, cprojectid, cprojectphaseid, ctermprotocolid, csourcebillid, csourcerowid, csourcebilltype, nordernum, naccuminvoicenum, nmoney, cemployeeid, A.ts, B.ts ";
      sql += "from po_order A, po_order_b B ";
      sql += "where A.pk_corp = ? and A.corderid = B.corderid and A.dr = 0 and B.dr = 0 ";
    }
    else {
      sql = "select corder_bid, A.corderid, cusedeptid, idiscounttaxtype, ntaxrate, ccurrencytypeid, cprojectid, cprojectphaseid, ctermprotocolid, csourcebillid, csourcerowid, csourcebilltype, nordernum, naccuminvoicenum, nmoney, cemployeeid, A.ts, B.ts ";
      sql += "from po_order A, po_order_b B ";
      sql += "where A.corderid = B.corderid and A.dr = 0 and B.dr = 0 ";
    }
    sql += sCondition;

    OorderVO oorders[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (unitCode != null) {
        stmt.setString(1, unitCode);
      }
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        OorderVO oorder = new OorderVO();
        // corder_bid :
        String corder_bid = rs.getString(1);
        oorder.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
        // corderid :
        String corderid = rs.getString(2);
        oorder.setCorderid(corderid == null ? null : corderid.trim());
        // cusedeptid :
        String cusedeptid = rs.getString(3);
        oorder.setCusedeptid(cusedeptid == null ? null : cusedeptid.trim());
        // idiscounttaxtype :
        Integer idiscounttaxtype = (Integer) rs.getObject(4);
        oorder.setIdiscounttaxtype(idiscounttaxtype == null ? null
            : idiscounttaxtype);
        // ntaxrate :
        Object ntaxrate = rs.getObject(5);
        oorder.setNtaxrate(ntaxrate == null ? new UFDouble(0.0) : new UFDouble(
            ntaxrate.toString()));
        // ccurrencytypeid :
        String ccurrencytypeid = rs.getString(6);
        oorder.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        // cprojectid :
        String cprojectid = rs.getString(7);
        oorder.setCprojectid(cprojectid == null ? null : cprojectid.trim());
        // cprojectphaseid :
        String cprojectphaseid = rs.getString(8);
        oorder.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        // ctermProtocolid :
        String ctermprotocolid = rs.getString(9);
        oorder.setCtermprotocolid(ctermprotocolid == null ? null
            : ctermprotocolid.trim());
        // csourcebillid :
        String csourcebillid = rs.getString(10);
        oorder.setCsourcebillid(csourcebillid == null ? null : csourcebillid
            .trim());
        // csourcerowid :
        String csourcerowid = rs.getString(11);
        oorder.setCsourcerowid(csourcerowid == null ? null : csourcerowid
            .trim());
        // csourcebilltype :
        String csourcebilltype = rs.getString(12);
        oorder.setSourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        // nordernum :
        BigDecimal nordernum = null;
        Object oTemp = rs.getObject(13);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          nordernum = new BigDecimal(oTemp.toString());
        oorder.setNordernum(nordernum == null ? new UFDouble(0.0)
            : new UFDouble(nordernum));
        // naccuminvoicenum :
        Object naccuminvoicenum = rs.getObject(14);
        oorder.setNaccuminvoicenum(naccuminvoicenum == null ? new UFDouble(0.0)
            : new UFDouble(naccuminvoicenum.toString()));
        // nmoney :
        BigDecimal nmoney = null;
        oTemp = rs.getObject(15);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          nmoney = new BigDecimal(oTemp.toString());
        oorder.setNmoney(nmoney == null ? new UFDouble(0.0) : new UFDouble(
            nmoney));
        // cemployeeid :
        String cemployeeid = rs.getString(16);
        oorder.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
        // ts1 :
        String ts1 = rs.getString(17);
        oorder.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(18);
        oorder.setTs2(ts2 == null ? null : ts2.trim());

        // 设置单价
        if (nordernum != null && nmoney != null
            && nordernum.doubleValue() != 0.0) {
          double nprice = nmoney.doubleValue() / nordernum.doubleValue();
          oorder.setNprice(new UFDouble(nprice));
        }
        else
          oorder.setNprice(new UFDouble(0.0));

        v.addElement(oorder);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    oorders = new OorderVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(oorders);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryOrderDetail",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    return oorders;
  }

  /**
   * 功能描述:查询销售发票数据 输入参数:String sCondition 查询条件串 返回值:SaledataVO[] 销售结算数据
   */
  public SaledataVO[] querySaleinvoice(String sCondition) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SaledataDMO", "querySaleinvoice",
        new Object[] {
          sCondition
        });
    /** ********************************************************** */

    String sql = "select csale_bid, csaleid, dsaledate, cdeptid, cmangid, cbaseid, cvendormangid, cvendorbaseid, nsalenum, nsalemny, naccumnum, po_saledata.ts, po_saledata.dr, po_saledata.pk_corp, cstoreorganization, cwarehouseid ";
    sql += "from po_saledata left outer join bd_stordoc S on po_saledata.cwarehouseid = S.pk_stordoc ";
    sql += "where po_saledata.dr = 0 ";
    //
    if (sCondition != null && sCondition.trim().length() > 0)
      sql += sCondition;
    //
    sql += " and (coalesce(S.iscalculatedinvcost,'N') = 'Y' or cwarehouseid is null) ";
    //
    SaledataVO saledatas[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        SaledataVO saledata = new SaledataVO();
        // csale_bid :
        String csale_bid = rs.getString(1);
        saledata.setCsale_bid(csale_bid == null ? null : csale_bid.trim());
        // csaleid :
        String csaleid = rs.getString(2);
        saledata.setCsaleid(csaleid == null ? null : csaleid.trim());
        // dsaledate :
        String dsaledate = rs.getString(3);
        saledata.setDsaledate(dsaledate == null ? null : new UFDate(dsaledate
            .trim(), false));
        // cdeptid :
        String cdeptid = rs.getString(4);
        saledata.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        saledata.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        saledata.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // cvendormangid :
        String cvendormangid = rs.getString(7);
        saledata.setCvendormangid(cvendormangid == null ? null : cvendormangid
            .trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(8);
        saledata.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid
            .trim());
        // nsalenum :
        BigDecimal nsalenum = null;
        Object oTemp = rs.getObject(9);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          nsalenum = new BigDecimal(oTemp.toString());
        saledata.setNsalenum(nsalenum == null ? null : new UFDouble(nsalenum));
        // nsalemny :
        Object nsalemny = rs.getObject(10);
        saledata.setNsalemny(nsalemny == null ? null : new UFDouble(nsalemny
            .toString()));
        // naccumnum :
        BigDecimal naccumnum = null;
        oTemp = rs.getObject(11);
        if (oTemp != null && oTemp.toString().trim().length() > 0)
          naccumnum = new BigDecimal(oTemp.toString());
        saledata.setNaccumnum(naccumnum == null ? null
            : new UFDouble(naccumnum));
        // ts :
        String ts = rs.getString(12);
        saledata.setTs(ts == null ? null : ts.trim());
        // dr :
        Integer dr = (Integer) rs.getObject(13);
        saledata.setDr(dr == null ? null : dr);
        // pk_corp :
        String pk_corp = rs.getString(14);
        saledata.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        // cstoreorganization :
        String cstoreorganization = rs.getString(15);
        saledata.setCstoreorganization(cstoreorganization == null ? null
            : cstoreorganization.trim());
        // cwarehouseid :
        String strWareHouseId = rs.getString(16);
        saledata.setCwarehouseid(strWareHouseId);

        // 未结算完毕的销售发票返回
        if (nsalenum != null && nsalenum.toString().trim().length() > 0) {
          if (naccumnum == null || naccumnum.toString().trim().length() == 0) {
            v.addElement(saledata);
          }
          else if (Math.abs(nsalenum.doubleValue() - naccumnum.doubleValue()) > 0) {
            v.addElement(saledata);
          }
        }
      }

      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    saledatas = new SaledataVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(saledatas);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SaledataDMO", "querySaleinvoice",
        new Object[] {
          sCondition
        });
    /** ********************************************************** */

    return saledatas;
  }

  /**
   * 功能描述:查询结算单表头-来源于入库单
   */
  public SettlebillHeaderVO[] querySettlebillHead_Stock(String sUnitCode,
      String sCondition) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "querySettlebillHead",
        new Object[] {
            sUnitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "";
    if (sUnitCode != null) {
      sql = "select distinct A.csettlebillid,vsettlebillcode, A.pk_corp, dsettledate, A.cbiztype, cfreecustid, cvendormangid, cvendorbaseid, cdeptid, ";
      sql += "cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, A.ts, A.tmaketime ";
      if (sCondition.indexOf("cbizid") >= 0
          || sCondition.indexOf("cdptid") >= 0
          || sCondition.indexOf("cproviderid") >= 0) {
        // 涉及入库单
        sql += "from po_settlebill A, po_settlebill_b B, ic_general_h C ";
        sql += "where A.pk_corp = ? and A.dr = 0 and B.dr = 0 and C.dr = 0 and cstockid = cgeneralhid and A.csettlebillid = B.csettlebillid";
      }
      else {
        // 不涉及入库单也不来源于VMI汇总
        sql += "from po_settlebill A, po_settlebill_b B ";
        sql += "where A.pk_corp = ? and A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid and (B.cvmiid is null or B.cvmiid = '')";
      }
    }
    else {
      sql = "select distinct A.csettlebillid,vsettlebillcode, A.pk_corp, dsettledate, A.cbiztype, cfreecustid, cvendormangid, cvendorbaseid, cdeptid, ";
      sql += "cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, A.ts, A.tmaketime ";
      if (sCondition.indexOf("cbizid") >= 0
          || sCondition.indexOf("cdptid") >= 0
          || sCondition.indexOf("cproviderid") >= 0) {
        // 涉及入库单
        sql += "from po_settlebill A, po_settlebill_b B, ic_general_h C ";
        sql += "where A.dr = 0 and B.dr = 0 and C.dr = 0 and cstockid = cgeneralhid and A.csettlebillid = B.csettlebillid";
      }
      else {
        // 不涉及入库单
        sql += "from po_settlebill A, po_settlebill_b B ";
        sql += "where A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid";
      }
    }
    sql += sCondition;

    SettlebillHeaderVO settlebillHVO[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (sUnitCode != null) {
        stmt.setString(1, sUnitCode);
      }
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        SettlebillHeaderVO settlebillHeader = new SettlebillHeaderVO();
        // csettlebillid :
        String csettlebillid = rs.getString(1);
        settlebillHeader.setCsettlebillid(csettlebillid == null ? null
            : csettlebillid.trim());
        // vsettlebillcode :
        String vsettlebillcode = rs.getString(2);
        settlebillHeader.setVsettlebillcode(vsettlebillcode == null ? null
            : vsettlebillcode.trim());
        // cunitid :
        String cunitid = rs.getString(3);
        settlebillHeader.setPk_corp(cunitid == null ? null : cunitid.trim());
        // dsettledate :
        String dsettledate = rs.getString(4);
        settlebillHeader.setDsettledate(dsettledate == null ? null
            : new UFDate(dsettledate.trim(), false));
        // cbiztype :
        String cbiztype = rs.getString(5);
        settlebillHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // cfreecustid :
        String cfreecustid = rs.getString(6);
        settlebillHeader.setCfreecustid(cfreecustid == null ? null
            : cfreecustid.trim());
        // cvendormangid :
        String cvendormangid = rs.getString(7);
        settlebillHeader.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(8);
        settlebillHeader.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // cdeptid :
        String cdeptid = rs.getString(9);
        settlebillHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // cemployeeid :
        String cemployeeid = rs.getString(10);
        settlebillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // caccountyear :
        String caccountyear = rs.getString(11);
        settlebillHeader.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(12);
        settlebillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // coperator :
        String coperator = rs.getString(13);
        settlebillHeader.setCoperator(coperator == null ? null : coperator
            .trim());
        // cbilltype :
        String cbilltype = rs.getString(14);
        settlebillHeader.setCbilltype(cbilltype == null ? null : cbilltype
            .trim());
        // ts :
        String ts = rs.getString(15);
        settlebillHeader.setTs(ts == null ? null : ts.trim());
        // tmaketime :
        String tmaketime = rs.getString(16);
        settlebillHeader.setTmaketime(tmaketime == null ? null : tmaketime
            .trim());

        settlebillHeader.setDr(new Integer(0));

        v.addElement(settlebillHeader);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    if (v != null && v.size() > 0) {
      settlebillHVO = new SettlebillHeaderVO[v.size()];
      v.copyInto(settlebillHVO);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "querySettlebillHead",
        new Object[] {
            sUnitCode, sCondition
        });
    /** ********************************************************** */

    return settlebillHVO;
  }

  /**
   * 功能描述:查询结算单表头-来源于VMI汇总
   */
  public SettlebillHeaderVO[] querySettlebillHead_Vmi(String sUnitCode,
      String sCondition) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "querySettlebillHead",
        new Object[] {
            sUnitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "";
    if (sUnitCode != null) {
      sql = "select distinct A.csettlebillid,vsettlebillcode, A.pk_corp, dsettledate, A.cbiztype, cfreecustid, cvendormangid, cvendorbaseid, cdeptid, ";
      sql += "cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, A.ts, A.tmaketime ";
      sql += "from po_settlebill A, po_settlebill_b B, ic_vmi_sum C ";
      sql += "where A.pk_corp = ? and A.dr = 0 and B.dr = 0 and C.dr = 0 and B.cvmiid = C.cvmihid and A.csettlebillid = B.csettlebillid";
    }
    sql += sCondition;

    SettlebillHeaderVO settlebillHVO[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (sUnitCode != null) {
        stmt.setString(1, sUnitCode);
      }
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        SettlebillHeaderVO settlebillHeader = new SettlebillHeaderVO();
        // csettlebillid :
        String csettlebillid = rs.getString(1);
        settlebillHeader.setCsettlebillid(csettlebillid == null ? null
            : csettlebillid.trim());
        // vsettlebillcode :
        String vsettlebillcode = rs.getString(2);
        settlebillHeader.setVsettlebillcode(vsettlebillcode == null ? null
            : vsettlebillcode.trim());
        // cunitid :
        String cunitid = rs.getString(3);
        settlebillHeader.setPk_corp(cunitid == null ? null : cunitid.trim());
        // dsettledate :
        String dsettledate = rs.getString(4);
        settlebillHeader.setDsettledate(dsettledate == null ? null
            : new UFDate(dsettledate.trim(), false));
        // cbiztype :
        String cbiztype = rs.getString(5);
        settlebillHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // cfreecustid :
        String cfreecustid = rs.getString(6);
        settlebillHeader.setCfreecustid(cfreecustid == null ? null
            : cfreecustid.trim());
        // cvendormangid :
        String cvendormangid = rs.getString(7);
        settlebillHeader.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(8);
        settlebillHeader.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // cdeptid :
        String cdeptid = rs.getString(9);
        settlebillHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // cemployeeid :
        String cemployeeid = rs.getString(10);
        settlebillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // caccountyear :
        String caccountyear = rs.getString(11);
        settlebillHeader.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(12);
        settlebillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // coperator :
        String coperator = rs.getString(13);
        settlebillHeader.setCoperator(coperator == null ? null : coperator
            .trim());
        // cbilltype :
        String cbilltype = rs.getString(14);
        settlebillHeader.setCbilltype(cbilltype == null ? null : cbilltype
            .trim());
        // ts :
        String ts = rs.getString(15);
        settlebillHeader.setTs(ts == null ? null : ts.trim());
        String tmaketime = rs.getString(16);
        settlebillHeader.setTmaketime(tmaketime == null ? null : tmaketime
            .trim());

        settlebillHeader.setDr(new Integer(0));

        v.addElement(settlebillHeader);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    if (v != null && v.size() > 0) {
      settlebillHVO = new SettlebillHeaderVO[v.size()];
      v.copyInto(settlebillHVO);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "querySettlebillHead",
        new Object[] {
            sUnitCode, sCondition
        });
    /** ********************************************************** */

    return settlebillHVO;
  }

  /**
   * 功能描述:查询结算单表体 日期：2003/02/19 说明：多用于加载单张单据或指定条件的少量单据表体数据情况
   */
  public SettlebillItemVO[] querySettleBody(String sUnitCode, String sCondition)
      throws SQLException {
    String sql = "select csettlebill_bid, A.pk_corp, A.csettlebillid, cinvoiceid, cinvoice_bid, cstockid, cstockrow, cmangid, cbaseid, nsettlenum, "
        + "nsettledisctmny, nfactor1, nfactor2, nfactor3, nfactor4, nfactor5, nreasonalwastnum, nprice, nmoney, ngaugemny, A.ts, cvmiid, csaleid,"
        + " pk_arrvcorp, nreasonalwastprice, nreasonalwastmny ,vstockbilltype,byffirstsettle "
        + "from po_settlebill_b A, po_settlebill B where A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid ";
    if (sUnitCode != null) {
      sql += "and A.pk_corp = '" + sUnitCode + "' ";
    }
    sql += sCondition;
    Vector vRslt = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      SettlebillItemVO settlebillItem = null;
      String strTmp = null;
      Object oTmp = null;
      int index = 0;
      //
      while (rs.next()) {
        settlebillItem = new SettlebillItemVO();
        index = 0;
        // csettlebill_bid :
        strTmp = rs.getString(++index);
        settlebillItem
            .setCsettlebill_bid(strTmp == null ? null : strTmp.trim());
        // pk_corp :
        strTmp = rs.getString(++index);
        settlebillItem.setPk_corp(strTmp == null ? null : strTmp.trim());
        // csettlebillid :
        strTmp = rs.getString(++index);
        settlebillItem.setCsettlebillid(strTmp == null ? null : strTmp.trim());
        // cinvoiceid :
        strTmp = rs.getString(++index);
        settlebillItem.setCinvoiceid(strTmp == null ? null : strTmp.trim());
        // cinvoice_bid :
        strTmp = rs.getString(++index);
        settlebillItem.setCinvoice_bid(strTmp == null ? null : strTmp.trim());
        // cstockid :
        strTmp = rs.getString(++index);
        settlebillItem.setCstockid(strTmp == null ? null : strTmp.trim());
        // cstockrow :
        strTmp = rs.getString(++index);
        settlebillItem.setCstockrow(strTmp == null ? null : strTmp.trim());
        // cmangid :
        strTmp = rs.getString(++index);
        settlebillItem.setCmangid(strTmp == null ? null : strTmp.trim());
        // cbaseid :
        strTmp = rs.getString(++index);
        settlebillItem.setCbaseid(strTmp == null ? null : strTmp.trim());
        // nsettlenum :
        oTmp = rs.getObject(++index);
        settlebillItem.setNsettlenum(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nsettledisctmny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNsettledisctmny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor1 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor1(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor2 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor2(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor3 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor3(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor4 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor4(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor5 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor5(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nreasonalwastnum :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastnum(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nprice :
        oTmp = rs.getObject(++index);
        settlebillItem.setNprice(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nmoney :
        oTmp = rs.getObject(++index);
        settlebillItem.setNmoney(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // ngaugemny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNgaugemny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // ts :
        strTmp = rs.getString(++index);
        settlebillItem.setTs(strTmp == null ? null : strTmp.trim());
        // cvmiid:
        strTmp = rs.getString(++index);
        settlebillItem.setCvmiid(strTmp == null ? null : strTmp.trim());
        // csale_bid:
        strTmp = rs.getString(++index);
        settlebillItem.setCsale_bid(strTmp == null ? null : strTmp.trim());
        // pk_arrvcorp
        strTmp = rs.getString(++index);
        settlebillItem.setPk_stockcorp(strTmp == null ? null : strTmp.trim());
        // nreasonalwastprice :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastprice(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nreasonalwastmny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastmny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        //
        strTmp = rs.getString(++index);
        settlebillItem.setVstockbilltype(strTmp == null ? null : strTmp.trim());
        
        //by zhaoyha at 2008.10.25
        strTmp = rs.getString(++index);
        settlebillItem.setByffirstsettle(new UFBoolean(strTmp == null ? "N" : strTmp.trim()));  
        
        settlebillItem.setDr(new Integer(0));

        vRslt.addElement(settlebillItem);
      }
    }
    finally {
      try {
        if (rs != null)
          rs.close();
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    if (vRslt != null && vRslt.size() > 0) {
      SettlebillItemVO bodyVO[] = new SettlebillItemVO[vRslt.size()];
      vRslt.copyInto(bodyVO);
      return bodyVO;
    }

    return null;
  }

  /**
   * 功能描述:查询入库单 输入参数: 返回值: 异常处理: 2003-03-03 ljq 修改，增加对入库单行是否赠品属性的查询
   * <p>
   * 2007-10-26 czp 修改，
   * <p>
   * 无发票结算时单价、金额不再取暂估价、暂估金额，取入库单表体的单价、金额
   * <p>
   * Fengping 基于中粮项目提出 <zhanghaiyan提供项目补丁>
   */
  public StockVO[] queryStock(String unitCode, String sCondition,
      int nMoneyDecimal, boolean bNoneFlag) throws SQLException {
    String sql = "";
    sql = "select ninnum,cbilltypecode, bzgflag, cproviderid, vbillcode, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, naccountnum1, naccountmny";
    // //since v502
    // if(bNoneFlag){
    // sql += ", B.nprice as npprice, B.nmny as npmoney";
    // }else{
    // sql += ", npprice, npmoney";
    // }
    // since v53,完善逻辑，支持V502前的按暂估提供调整依据
    sql += ", npprice, npmoney";// 有值优先
    sql += ", B.nprice, B.nmny";
    //
    sql += ", cdptid, cbizid,A.pk_corp, csourcebillhid, csourcebillbid, vsourcebillcode, cbiztype, csourcetype, ";
    sql += "cbizid, cprojectid, cprojectphaseid, vfree1, vfree2, vfree3, vfree4, vfree5, cbilltypecode, cgeneralbb3, A.ts, B.ts, C.ts, cfirstbillhid, cfirstbillbid, cfirsttype, vbatchcode ";
    sql += ", flargess, A.pk_calbody, B.vnotebody, ";
    // V30增加属性
    sql += "A.vuserdef1,A.vuserdef2,A.vuserdef3,A.vuserdef4,A.vuserdef5,A.vuserdef6,A.vuserdef7,A.vuserdef8,A.vuserdef9,A.vuserdef10,";
    sql += "A.cdispatcherid,A.cwarehouseid,A.vnote,A.cwhsmanagerid,";
    sql += "B.castunitid,B.vuserdef1,B.vuserdef2,B.vuserdef3,B.vuserdef4,B.vuserdef5,B.vuserdef6,B.dbizdate, ";
    sql += "B.hsl, A.vuserdef11,A.vuserdef12,A.vuserdef13,A.vuserdef14,A.vuserdef15,A.vuserdef16,A.vuserdef17,A.vuserdef18,A.vuserdef19,A.vuserdef20, ";
    sql += "A.pk_defdoc1,A.pk_defdoc2,A.pk_defdoc3,A.pk_defdoc4,A.pk_defdoc5,A.pk_defdoc6,A.pk_defdoc7,A.pk_defdoc8,A.pk_defdoc9,A.pk_defdoc10, ";
    sql += "A.pk_defdoc11,A.pk_defdoc12,A.pk_defdoc13,A.pk_defdoc14,A.pk_defdoc15,A.pk_defdoc16,A.pk_defdoc17,A.pk_defdoc18,A.pk_defdoc19,A.pk_defdoc20, ";
    sql += "B.vuserdef7,B.vuserdef8,B.vuserdef9,B.vuserdef10,B.vuserdef11,B.vuserdef12,B.vuserdef13,B.vuserdef14,B.vuserdef15,B.vuserdef16,B.vuserdef17,B.vuserdef18,B.vuserdef19,B.vuserdef20, ";
    sql += "B.pk_defdoc1,B.pk_defdoc2,B.pk_defdoc3,B.pk_defdoc4,B.pk_defdoc5,B.pk_defdoc6,B.pk_defdoc7,B.pk_defdoc8,B.pk_defdoc9,B.pk_defdoc10, ";
    sql += "B.pk_defdoc11,B.pk_defdoc12,B.pk_defdoc13,B.pk_defdoc14,B.pk_defdoc15,B.pk_defdoc16,B.pk_defdoc17,B.pk_defdoc18,B.pk_defdoc19,B.pk_defdoc20,B.cvendorid,bzgyfflag,naccumwashnum,B.pk_invoicecorp,nsignnum,B.cinvbasid,A.pk_purcorp,iscalculatedinvcost ";
    //
    sql += "from ic_general_h A,ic_general_b B,ic_general_bb3 C, bd_stordoc S, bd_busitype BT ";
    sql += "where A.cbiztype = BT.pk_busitype and A.cwarehouseid = S.pk_stordoc and A.dr = 0 and B.dr=0 and (cbilltypecode = '45' or cbilltypecode = '47' or upper(cbilltypecode) = '4T') ";
    sql += "and A.cgeneralhid=B.cgeneralhid and A.cgeneralhid=C.cgeneralhid and B.cgeneralbid=C.cgeneralbid and (fbillflag = 3 or fbillflag = 4) ";
    if (unitCode != null) {
      sql += "and B.pk_invoicecorp = '" + unitCode + "' ";
    }
    sql += sCondition;
    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    String strTmp = null;
    Object oTmp = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      Vector vv = new Vector();
      StockVO stock = null;
      int index = 0;
      UFDouble ufdPprice = null;
      UFDouble ufdPmoney = null;
      while (rs.next()) {
        stock = new StockVO();
        index = 1;
        // ninnum :
        oTmp = rs.getObject(index++);
        stock.setNinnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        // cbilltypecode :
        strTmp = rs.getString(index++);
        stock.setCbilltype(strTmp == null ? "" : strTmp.trim());
        // bzgflag :
        strTmp = rs.getString(index++);
        stock.setBzgflag(strTmp == null ? new UFBoolean(false) : new UFBoolean(
            strTmp.toString().trim()));
        // 入库单的入库数量为0,不参与结算
        if (stock.getNinnum().doubleValue() == 0.0) {
          continue;
        }
        // 委外入库单没有暂估,不参与结算
        if (("47").equalsIgnoreCase(stock.getCbilltype())
            && !(new UFBoolean(true)).equals(stock.getBzgflag())) {
          continue;
        }
        // cproviderid :
        strTmp = rs.getString(index++);
        stock.setCprovidermangid(strTmp == null ? "" : strTmp.trim());
        // vbillcode :
        strTmp = rs.getString(index++);
        stock.setVbillcode(strTmp == null ? "" : strTmp.trim());
        // cgeneralhid :
        strTmp = rs.getString(index++);
        stock.setCgeneralhid(strTmp == null ? "" : strTmp.trim());
        // cgeneralbid :
        strTmp = rs.getString(index++);
        stock.setCgeneralbid(strTmp == null ? "" : strTmp.trim());
        // cmangid :
        strTmp = rs.getString(index++);
        stock.setCmangid(strTmp == null ? "" : strTmp.trim());
        // naccumsettnum :
        oTmp = rs.getObject(index++);
        stock.setNaccumsettlenum(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // naccumsettmny :
        oTmp = rs.getObject(index++);
        // 支持精度处理
        stock.setNaccumsettlemny(PuPubVO.getUFDouble_NullAsZero(oTmp).add(
            new UFDouble(0.0), nMoneyDecimal));
        // npprice :
        oTmp = rs.getObject(index++);
        ufdPprice = (oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        stock.setNprice(ufdPprice);
        // npmony :
        oTmp = rs.getObject(index++);
        ufdPmoney = (oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        stock.setNmoney(ufdPmoney);
        // nprice : 备用
        oTmp = rs.getObject(index++);
        ufdPprice = (oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        // nmny : 备用
        oTmp = rs.getObject(index++);
        ufdPmoney = (oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        // since v53, 无发票结算时，取不到暂估暂估金额时，再取采购入库单的单价、金额
        if (bNoneFlag
            && PuPubVO.getUFDouble_NullAsZero(stock.getNmoney()).doubleValue() == 0.0) {
          /**
           * 分收集结,采购公司和收货公司的币种不一样,则入库单价需要转换
           * 收货公司的入库单价是以收化公司的本位币保存的
           */
          try{
            String stockPk_corp=rs.getString(17);
            if(!unitCode.equals(stockPk_corp)){
              String localCurPk= CurrParamQuery.getInstance().getLocalCurrPK(unitCode);
              String stockCurr= CurrParamQuery.getInstance().getLocalCurrPK(stockPk_corp);
              BusinessCurrencyRateUtil curTool = new BusinessCurrencyRateUtil(unitCode);
              if(!localCurPk.equals(stockCurr) && stockCurr!=null){
                ufdPprice=curTool.getAmountByOpp(stockCurr, localCurPk, ufdPprice, null, BsPuTool.getLoginDate().toString(),
                    BsPuTool.getPriceDigit(unitCode));
                ufdPmoney=stock.getNinnum().multiply(ufdPprice, nMoneyDecimal);
              }
            }
          }
          catch(Exception e){
            SCMEnv.out(e);
          }
            
          stock.setNprice(ufdPprice);
          stock.setNmoney(ufdPmoney);
        }
        // cdeptid :
        strTmp = rs.getString(index++);
        stock.setCdeptid(strTmp == null ? "" : strTmp.trim());
        // coperatorid :
        strTmp = rs.getString(index++);
        stock.setCoperatorid(strTmp == null ? "" : strTmp.trim());
        stock.setCbizid(strTmp == null ? "" : strTmp.trim());
        // pk_stockcorp :收货公司(入库单所属公司)
        strTmp = rs.getString(index++);
        stock.setPk_stockcorp(strTmp == null ? "" : strTmp.trim());
        // csourcebillhid :
        strTmp = rs.getString(index++);
        stock.setCsourcebillhid(strTmp == null ? "" : strTmp.trim());
        // csourcebillbid :
        strTmp = rs.getString(index++);
        stock.setCsourcebillbid(strTmp == null ? "" : strTmp.trim());
        // vsourcebillcode :
        strTmp = rs.getString(index++);
        stock.setVsourcebillcode(strTmp == null ? "" : strTmp.trim());
        // cbiztype :
        strTmp = rs.getString(index++);
        stock.setCbiztype(strTmp == null ? "" : strTmp.trim());
        // csourcetype :
        strTmp = rs.getString(index++);
        stock.setCsourcebilltype(strTmp == null ? "" : strTmp.trim());
        // cbizid :
        strTmp = rs.getString(index++);
        stock.setCbizid(strTmp == null ? "" : strTmp.trim());
        // cprojectid :
        strTmp = rs.getString(index++);
        stock.setCprojectid(strTmp == null ? "" : strTmp.trim());
        // cprojectphaseid :
        strTmp = rs.getString(index++);
        stock.setCprojectphaseid(strTmp == null ? "" : strTmp.trim());
        // vfree1 :
        strTmp = rs.getString(index++);
        stock.setVfree1(strTmp == null ? "" : strTmp.trim());
        // vfree2 :
        strTmp = rs.getString(index++);
        stock.setVfree2(strTmp == null ? "" : strTmp.trim());
        // vfree3 :
        strTmp = rs.getString(index++);
        stock.setVfree3(strTmp == null ? "" : strTmp.trim());
        // vfree4 :
        strTmp = rs.getString(index++);
        stock.setVfree4(strTmp == null ? "" : strTmp.trim());
        // vfree5 :
        strTmp = rs.getString(index++);
        stock.setVfree5(strTmp == null ? "" : strTmp.trim());
        // cbilltype :
        strTmp = rs.getString(index++);
        stock.setCbilltype(strTmp == null ? "" : strTmp.trim());
        // cgeneralbb3 :
        strTmp = rs.getString(index++);
        stock.setCgeneralbb3(strTmp == null ? "" : strTmp.trim());
        // ts1 :
        strTmp = rs.getString(index++);
        stock.setTs1(strTmp == null ? "" : strTmp.trim());
        // ts2 :
        strTmp = rs.getString(index++);
        stock.setTs2(strTmp == null ? "" : strTmp.trim());
        // ts3 :
        strTmp = rs.getString(index++);
        stock.setTs3(strTmp == null ? "" : strTmp.trim());
        // cfirstbillhid :
        strTmp = rs.getString(index++);
        stock.setCfirstbillhid(strTmp == null ? "" : strTmp.trim());
        // cfirstbillbid :
        strTmp = rs.getString(index++);
        stock.setCfirstbillbid(strTmp == null ? "" : strTmp.trim());
        // cfirsttype :
        strTmp = rs.getString(index++);
        stock.setCfirsttype(strTmp == null ? "" : strTmp.trim());
        // vbatchcode :
        strTmp = rs.getString(index++);
        stock.setVbatchcode(strTmp == null ? "" : strTmp.trim());
        // ljq begin
        // flargess
        strTmp = rs.getString(index++);
        stock.setFlargess(strTmp == null ? null : new UFBoolean(strTmp
            .toString().trim()));
        // ljq end
        strTmp = rs.getString(index++);
        stock.setCstoreorganization(strTmp == null ? "" : strTmp.trim());
        // czp
        strTmp = rs.getString(index++);
        stock.setVmemobody(strTmp == null ? "" : strTmp.trim());
        // V30增加属性
        strTmp = rs.getString(index++);
        stock.setVuserdefh1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh10(strTmp == null ? "" : strTmp.trim());
        //
        strTmp = rs.getString(index++);
        stock.setCdispatcherid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setCwarehouseid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVnote(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setCwhsmanagerid(strTmp == null ? "" : strTmp.trim());
        //
        strTmp = rs.getString(index++);
        stock.setCastunitid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb6(strTmp == null ? "" : strTmp.trim());
        //
        strTmp = rs.getString(index++);
        stock.setDbizdate(strTmp == null ? null : new UFDate(strTmp.trim(),
            false));
        // hsl :
        oTmp = rs.getObject(index++);
        stock.setHsl(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        //

        strTmp = rs.getString(index++);
        stock.setVuserdefh11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefh20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setPk_defdoch1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setPk_defdoch11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdoch20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setVuserdefb7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setVuserdefb11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setVuserdefb20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setPk_defdocb1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setPk_defdocb11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setPk_defdocb20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(index++);
        stock.setCvendorid(strTmp == null ? "" : strTmp.trim());
        // bzgyfflag :
        strTmp = rs.getString(index++);
        stock.setBzgyfflag(strTmp == null ? new UFBoolean(false)
            : new UFBoolean(strTmp.toString().trim()));
        // naccumwashnum :
        oTmp = rs.getObject(index++);
        stock.setNaccumwashnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(
            oTmp.toString()));
        // pk_corp :收票公司
        strTmp = rs.getString(index++);
        stock.setPk_corp(strTmp == null ? "" : strTmp.trim());
        // nsignnum :
        oTmp = rs.getObject(index++);
        stock.setNsignnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp
            .toString()));
        strTmp = rs.getString(index++);
        stock.setCbaseid(strTmp == null ? "" : strTmp.trim());
        // pk_purcorp :采购公司
        strTmp = rs.getString(index++);
        stock.setPk_purcorp(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(index++);
        stock.setBcalculatecost(strTmp == null ? new UFBoolean(false)
            : new UFBoolean(strTmp.toString().trim()));

        vv.addElement(stock);
      }
      if (stmt != null)
        stmt.close();
      if (vv.size() > 0) {
        for (int i = 0; i < vv.size(); i++) {
          StockVO stockVO = (StockVO) vv.elementAt(i);
          v.addElement(stockVO);
        }
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }
    return stocks;
  }

  /**
   * 功能描述:根据结算发票VO查询结算匹配的结算入库单VO 输入参数:IinvoiceVO[],采购结算用发票VO[]
   * 返回值:StockVO[],采购结算用入库单VO[] 异常处理:java.sql.SQLException 作者：熊海情 日期: 2001-6-1
   * 修改：晁志平 FOR V30
   */
  public StockVO[] queryStockByInvoice(IinvoiceVO[] VO, int nMoneyDecimal)
      throws BusinessException {
    // 来源单据行ID唯一性组合
    Vector vID = new Vector();
    vID.addElement(VO[0].getCsourcebillbid());
    for (int i = 1; i < VO.length; i++) {
      String s = VO[i].getCsourcebillbid();
      if (!vID.contains(s))
        vID.addElement(s);
    }

    // 设置查询条件
    String unitCode = VO[0].getPk_corp();
    String sCondition = " and upper(isok) = 'N' and coalesce(flargess,'N')='N' and cfirstbillbid in ";
    String[] saId = new String[vID.size()];
    vID.copyInto(saId);
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU89,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    sCondition += strIdSet;

    StockVO stockVOs[] = null;
    try {
      stockVOs = queryStock(unitCode, sCondition, nMoneyDecimal, false);
    }
    catch (SQLException e) {
      throw new BusinessException(e.getMessage());
    }
    if (stockVOs != null && stockVOs.length > 0) {
      // v5支持集中采购调整
      // 查询入库单调整，收货公司与当前登录公司不一致，则返回前增加处理:
      try {
        stockVOs = preDealStockVO(unitCode, stockVOs);
      }
      catch (SQLException e) {
        throw new BusinessException(e.getMessage());
      }
      if (stockVOs == null || stockVOs.length == 0)
        return null;

      Vector vTemp = new Vector();
      for (int i = 0; i < stockVOs.length; i++)
        vTemp.addElement(stockVOs[i].getCprovidermangid());
      String sVendorMangID[] = new String[vTemp.size()];
      vTemp.copyInto(sVendorMangID);
      String[] sVendorBaseID = null;
      try {
        sVendorBaseID = getVendorBaseKey(sVendorMangID);
      }
      catch (SQLException e) {
        throw new BusinessException(e.getMessage());
      }

      // 计算未结算数量，本币未结算金额
      for (int i = 0; i < stockVOs.length; i++) {
        stockVOs[i].setCproviderbaseid(sVendorBaseID[i]);
        UFDouble d1 = stockVOs[i].getNinnum();
        UFDouble d2 = stockVOs[i].getNaccumsettlenum();
        if (d1 == null || d1.toString().trim().length() == 0)
          d1 = new UFDouble(0);
        if (d2 == null || d2.toString().trim().length() == 0)
          d2 = new UFDouble(0);
        double d = d1.doubleValue() - d2.doubleValue();
        stockVOs[i].setNnosettlenum(new UFDouble(d));
        d1 = stockVOs[i].getNmoney();
        // since v502, 支持精度处理
        d2 = (PuPubVO.getUFDouble_NullAsZero(stockVOs[i].getNaccumsettlemny())
            .add(new UFDouble(0.0), nMoneyDecimal));
        if (d1 == null || d1.toString().trim().length() == 0)
          d1 = new UFDouble(0);
        if (d2 == null || d2.toString().trim().length() == 0)
          d2 = new UFDouble(0);
        d = d1.doubleValue() - d2.doubleValue();
        stockVOs[i].setNnosettlemny(new UFDouble(d).add(new UFDouble(0.0),
            BsPuTool.getCCurrDecimal(null)));
      }

    }

    return stockVOs;
  }

  /*
   * 结算传存货入库单处理: 收票公司(结算公司)和收货公司不同时, 需要转换: 公司, 库存组织, 存货, 供应商, 单价, 金额
   */
  public BillVO[] postDealBillVO(String pk_invoiceCorp,
      GeneralHItemVO itemVO[], BillVO VO[]) throws BusinessException {
    Hashtable hStockCorp = new Hashtable();// 入库单收货公司 key: cgeneralbid,
    // value:pk_corp
    for (int i = 0; i < itemVO.length; i++)
      hStockCorp.put(itemVO[i].getCgeneralbid(), itemVO[i].getPk_corp());

    Vector vv1 = new Vector();// 收货公司等于发票公司的存货入库单VO
    Vector vTemp = new Vector();// 收货公司不等于发票公司的库存入库单的来源订单ID    
    Vector v1 = new Vector(), v2 = new Vector();
    for (int i = 0; i < VO.length; i++) {
      BillItemVO bodyVO[] = (BillItemVO[]) VO[i].getChildrenVO();
      Object oTemp = hStockCorp.get(bodyVO[0].getCbill_bid());
      if (oTemp.equals(pk_invoiceCorp))
        vv1.addElement(VO[i]);
      else
        v1.addElement(VO[i]);
    }
    VO = new BillVO[v1.size()];
    v1.copyInto(VO);

    if (itemVO != null && itemVO.length > 0) {
      for (int i = 0; i < itemVO.length; i++) {
        if (!itemVO[i].getPk_corp().equals(pk_invoiceCorp)
            && !vTemp.contains(itemVO[i].getCfirstbillhid()))
          vTemp.addElement(itemVO[i].getCfirstbillhid());
      }
    }

    if (vTemp.size() > 0) {
      try {
        // 1.设置入库单库存组织：入库单来源采购订单ID->采购订单采购组织->内部结算库存组织,如果这种库存组织找不到，则过滤掉此类入库单，不参与结算
        String corderid[] = new String[vTemp.size()];
        vTemp.copyInto(corderid);
        IPuToTO_PuToTO myService = (IPuToTO_PuToTO) nc.bs.framework.common.NCLocator
            .getInstance().lookup(IPuToTO_PuToTO.class.getName());
        String cstororganization[] = myService.queryCalbodyForPs(corderid);
        String cpurorgname[] = queryPurOrgName(corderid);
        if (cstororganization == null || cstororganization.length == 0) {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          for (int i = 0; i < corderid.length; i++)
            s += " " + cpurorgname[i];
          s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
          throw new BusinessException(s);
        }
        else {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          boolean b = false;
          Hashtable tCalbody = new Hashtable();// 内部结算库存组织 key: 订单ID, value:
          // 库存组织ID
          for (int i = 0; i < cstororganization.length; i++) {
            if (cstororganization[i] != null)
              tCalbody.put(corderid[i], cstororganization[i]);
            else {
              s += " " + cpurorgname[i];
              b = true;
            }
          }
          if (b) {
            s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
                "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
            throw new BusinessException(s);
          }

          Hashtable tStore = queryZYstore(cstororganization);// 直运仓库 key:
          // 库存组织ID, value:
          // 仓库ID
          v1 = new Vector();
          for (int i = 0; i < VO.length; i++) {
            BillHeaderVO headVO = (BillHeaderVO) VO[i].getParentVO();
            headVO.setPk_corp(pk_invoiceCorp);
            v1.addElement(headVO);

            BillItemVO bodyVO[] = (BillItemVO[]) VO[i].getChildrenVO();
            for (int j = 0; j < bodyVO.length; j++) {
              bodyVO[j].setPk_corp(pk_invoiceCorp);
              v2.addElement(bodyVO[j]);
            }

            for (int j = 0; j < itemVO.length; j++) {
              if (headVO.getCbillid().equals(itemVO[j].getCgeneralhid())) {
                Object oTemp = tCalbody.get(itemVO[j].getCfirstbillhid());
                if (oTemp != null) {
                  headVO.setCstockrdcenterid(oTemp.toString());
                }
                else {
                  headVO.setCstockrdcenterid(null);
                }
                if (headVO.getCstockrdcenterid() != null) {
                  oTemp = tStore.get(headVO.getCstockrdcenterid());
                  if (oTemp != null)
                    headVO.setCwarehouseid(oTemp.toString());
                  else
                    headVO.setCwarehouseid(null);
                }
                else {
                  headVO.setCwarehouseid(null);
                }
                break;
              }
            }
          }
        }

        ChgDocPkVO switchVOs1[] = new ChgDocPkVO[v2.size()];
        for (int i = 0; i < v2.size(); i++) {
          switchVOs1[i] = new ChgDocPkVO();
          BillItemVO tempVO = (BillItemVO) v2.elementAt(i);
          Object oTemp = hStockCorp.get(tempVO.getCbill_bid());
          if (oTemp != null)
            switchVOs1[i].setSrcCorpId(oTemp.toString());
          switchVOs1[i].setSrcManId(tempVO.getCinventoryid());
          switchVOs1[i].setDstCorpId(pk_invoiceCorp);
        }

        Vector v3 = new Vector();
        for (int i = 0; i < v2.size(); i++) {
          ChgDocPkVO switchTempVO = new ChgDocPkVO();
          BillItemVO tempVO = (BillItemVO) v2.elementAt(i);

          Object oTemp = hStockCorp.get(tempVO.getCbill_bid());
          if (oTemp != null)
            switchTempVO.setSrcCorpId(oTemp.toString());
          switchTempVO.setSrcManId(tempVO.getCvendorid());
          switchTempVO.setDstCorpId(pk_invoiceCorp);
          if (switchTempVO.getSrcManId() != null
              && switchTempVO.getSrcManId().trim().length() > 0)
            v3.addElement(switchTempVO);
        }
        ChgDocPkVO switchVOs2[] = new ChgDocPkVO[v3.size()];
        v3.copyInto(switchVOs2);

        Vector v4 = new Vector();
        for (int i = 0; i < v1.size(); i++) {
          ChgDocPkVO switchTempVO = new ChgDocPkVO();
          BillHeaderVO tempVO = (BillHeaderVO) v1.elementAt(i);

          BillItemVO tempBodyVO = (BillItemVO) v2.elementAt(i);
          Object oTemp = hStockCorp.get(tempBodyVO.getCbill_bid());
          if (oTemp != null)
            switchTempVO.setSrcCorpId(oTemp.toString());

          switchTempVO.setSrcManId(tempVO.getCcustomvendorid());
          switchTempVO.setDstCorpId(pk_invoiceCorp);

          if (switchTempVO.getSrcManId() != null
              && switchTempVO.getSrcManId().trim().length() > 0)
            v4.addElement(switchTempVO);
        }
        ChgDocPkVO switchVOs3[] = new ChgDocPkVO[v4.size()];
        v4.copyInto(switchVOs3);

        // 转换存货管理ID
        ChgDocPkVO invVOs[] = ChgDataUtil.chgPkInvByCorp(switchVOs1);
        // 转换表体供应商ID
        ChgDocPkVO bodyVendVOs[] = null;
        // if(v3.size() > 0) bodyVendVOs =
        // ChgDataUtil.chgPkCuByCorp(switchVOs2);
        // 转换表头供应商ID
        ChgDocPkVO headVendVOs[] = null;
        // if(v4.size() > 0) headVendVOs =
        // ChgDataUtil.chgPkCuByCorp(switchVOs3);

        int j = 0;
        for (int i = 0; i < v2.size(); i++) {
          BillItemVO tempVO = (BillItemVO) v2.elementAt(i);
          tempVO.setCinventoryid(invVOs[i].getDstManId());
          if (bodyVendVOs != null && tempVO.getCvendorid() != null
              && tempVO.getCvendorid().trim().length() > 0) {
            tempVO.setCvendorid(bodyVendVOs[j].getDstManId());
            j++;
          }
        }

        j = 0;
        for (int i = 0; i < v1.size(); i++) {
          BillHeaderVO tempVO = (BillHeaderVO) v1.elementAt(i);
          if (headVendVOs != null && tempVO.getCcustomvendorid() != null
              && tempVO.getCcustomvendorid().trim().length() > 0) {
            tempVO.setCcustomvendorid(headVendVOs[j].getDstManId());
            j++;
          }
        }

      }
      catch (Exception e) {
        throw new BusinessException(e.getMessage());
      }
    }

    vTemp = new Vector();
    for (int i = 0; i < vv1.size(); i++)
      vTemp.addElement(vv1.elementAt(i));
    for (int i = 0; i < VO.length; i++)
      vTemp.addElement(VO[i]);
    VO = new BillVO[vTemp.size()];
    vTemp.copyInto(VO);

    return VO;
  }

  /*
   * 结算传存货入库单处理: 收票公司(结算公司)和收货公司不同时, 需要转换: 公司, 库存组织, 存货, 供应商, 单价, 金额
   */
  public BillVO[] postDealBillVOSP(String pk_invoiceCorp, StockVO itemVO[],
      BillVO VO[]) throws SQLException {
    Hashtable hStockCorp = new Hashtable();// 入库单收货公司 key: cgeneralbid,
    // value:pk_corp
    for (int i = 0; i < itemVO.length; i++)
      hStockCorp.put(itemVO[i].getCgeneralbid(), itemVO[i].getPk_stockcorp());

    Vector vv1 = new Vector();// 收货公司等于发票公司的存货入库单VO
    Vector vTemp = new Vector();// 收货公司不等于发票公司的库存入库单的来源订单ID
    Vector v1 = new Vector(), v2 = new Vector();
    for (int i = 0; i < VO.length; i++) {
      BillItemVO bodyVO[] = (BillItemVO[]) VO[i].getChildrenVO();
      Object oTemp = hStockCorp.get(bodyVO[0].getCbill_bid());
      if (oTemp.equals(pk_invoiceCorp))
        vv1.addElement(VO[i]);
      else
        v1.addElement(VO[i]);
    }
    VO = new BillVO[v1.size()];
    v1.copyInto(VO);

    if (itemVO != null && itemVO.length > 0) {
      for (int i = 0; i < itemVO.length; i++) {
        if (!itemVO[i].getPk_stockcorp().equals(pk_invoiceCorp)
            && !vTemp.contains(itemVO[i].getCfirstbillhid()))
          vTemp.addElement(itemVO[i].getCfirstbillhid());
      }
    }

    if (vTemp.size() > 0) {
      try {
        // 1.设置入库单库存组织：入库单来源采购订单ID->采购订单采购组织->内部结算库存组织,如果这种库存组织找不到，则过滤掉此类入库单，不参与结算
        String corderid[] = new String[vTemp.size()];
        vTemp.copyInto(corderid);
        IPuToTO_PuToTO myService = (IPuToTO_PuToTO) nc.bs.framework.common.NCLocator
            .getInstance().lookup(IPuToTO_PuToTO.class.getName());
        String cstororganization[] = myService.queryCalbodyForPs(corderid);
        String cpurorgname[] = queryPurOrgName(corderid);
        if (cstororganization == null || cstororganization.length == 0) {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          for (int i = 0; i < corderid.length; i++)
            s += " " + cpurorgname[i];
          s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
          throw new BusinessException(s);
        }
        else {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          boolean b = false;
          Hashtable tCalbody = new Hashtable();// 内部结算库存组织 key: 订单ID, value:
          // 库存组织ID
          for (int i = 0; i < cstororganization.length; i++) {
            if (cstororganization[i] != null)
              tCalbody.put(corderid[i], cstororganization[i]);
            else {
              s += " " + cpurorgname[i];
              b = true;
            }
          }
          if (b) {
            s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
                "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
            throw new BusinessException(s);
          }

          Hashtable tStore = queryZYstore(cstororganization);// 直运仓库 key:
          // 库存组织ID, value:
          // 仓库ID
          v1 = new Vector();
          for (int i = 0; i < VO.length; i++) {
            BillHeaderVO headVO = (BillHeaderVO) VO[i].getParentVO();
            headVO.setPk_corp(pk_invoiceCorp);
            v1.addElement(headVO);

            BillItemVO bodyVO[] = (BillItemVO[]) VO[i].getChildrenVO();
            for (int j = 0; j < bodyVO.length; j++) {
              bodyVO[j].setPk_corp(pk_invoiceCorp);
              v2.addElement(bodyVO[j]);
            }

            for (int j = 0; j < itemVO.length; j++) {
              if (headVO.getCbillid().equals(itemVO[j].getCgeneralhid())) {
                Object oTemp = tCalbody.get(itemVO[j].getCfirstbillhid());
                if (oTemp != null)
                  headVO.setCstockrdcenterid(oTemp.toString());
                else
                  headVO.setCstockrdcenterid(null);
                if (headVO.getCstockrdcenterid() != null) {
                  oTemp = tStore.get(headVO.getCstockrdcenterid());
                  if (oTemp != null)
                    headVO.setCwarehouseid(oTemp.toString());
                  else
                    headVO.setCwarehouseid(null);
                }
                else {
                  headVO.setCwarehouseid(null);
                }
                break;
              }
            }
          }
        }
      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
    }

    vTemp = new Vector();
    for (int i = 0; i < vv1.size(); i++)
      vTemp.addElement(vv1.elementAt(i));
    for (int i = 0; i < VO.length; i++)
      vTemp.addElement(VO[i]);
    VO = new BillVO[vTemp.size()];
    vTemp.copyInto(VO);

    return VO;
  }

  /*
   * v5支持集中采购调整 查询入库单调整，收货公司与当前登录公司不一致，则返回前增加处理:
   */
  public StockVO[] preDealStockVO(String unitCode, StockVO stockVOs[])
      throws SQLException {
    Vector vTemp = new Vector(), vv1 = new Vector(), vv2 = new Vector(), vv3 = new Vector();
    for (int i = 0; i < stockVOs.length; i++) {
      if (!unitCode.equals(stockVOs[i].getPk_stockcorp())) {
        if (!vTemp.contains(stockVOs[i].getCfirstbillhid()))
          vTemp.addElement(stockVOs[i].getCfirstbillhid());
        vv1.addElement(stockVOs[i]);
        vv3.addElement(stockVOs[i].getCgeneralbid());
      }
      else {
        vv2.addElement(stockVOs[i]);
      }
    }
    if (vTemp.size() > 0) {
      try {
        // 1.设置入库单库存组织：入库单来源采购订单ID->采购订单采购组织->内部结算库存组织,如果这种库存组织找不到，则过滤掉此类入库单，不参与结算
        String corderid[] = new String[vTemp.size()];
        vTemp.copyInto(corderid);
        IPuToTO_PuToTO myService = (IPuToTO_PuToTO) nc.bs.framework.common.NCLocator
            .getInstance().lookup(IPuToTO_PuToTO.class.getName());
        String cstororganization[] = myService.queryCalbodyForPs(corderid);
        String cpurorgname[] = queryPurOrgName(corderid);
        Vector v1 = new Vector();
        if (cstororganization == null || cstororganization.length == 0) {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          for (int i = 0; i < corderid.length; i++)
            s += " " + cpurorgname[i];
          s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
          throw new BusinessException(s);
          // for(int i = 0; i < stockVOs.length; i++){
          // if(!vv3.contains(stockVOs[i].getCgeneralbid()))
          // v1.addElement(stockVOs[i]);
          // }
          // if(v1.size() > 0){
          // stockVOs = new StockVO[v1.size()];
          // v1.copyInto(stockVOs);
          // return stockVOs;
          // }else return null;
        }
        else {
          String s = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
              "common", "UC000-0004091")
              + ":";
          boolean b = false;
          for (int i = 0; i < vTemp.size(); i++) {
            for (int j = 0; j < stockVOs.length; j++) {
              if (stockVOs[j].getCfirstbillhid() != null
                  && stockVOs[j].getCfirstbillhid().equals(
                      (String) vTemp.elementAt(i))) {
                if (cstororganization[i] == null
                    || cstororganization[i].trim().length() == 0) {
                  s += " " + cpurorgname[i];
                  b = true;
                  break;
                }
                stockVOs[j].setCstoreorganization(cstororganization[i]);
              }
            }
          }
          if (b) {
            s += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
                "4004050202", "UPP4004050202-000014")/* "未定义内部结算库存组织" */;
            throw new BusinessException(s);
          }
        }

        // 2.入库单的单价金额换算成当前登录公司本位币的单价金额,取不到汇率,抛业务异常
        // 3.将收货公司存货管理档案ID、供应商管理档案ID转换成当前登录公司档案ID，如果出现当前登录公司找不到匹配的管理档案ID(即未分配到当前登录公司)情况，则抛出异常，不进行结算
        ChgPriceMnyVO switchVOs1[] = new ChgPriceMnyVO[vv1.size()];
        ChgDocPkVO switchVOs2[] = new ChgDocPkVO[vv1.size()];
        Hashtable tCurrTypeID = new Hashtable();
        vv3 = new Vector();
        for (int i = 0; i < vv1.size(); i++) {
          switchVOs1[i] = new ChgPriceMnyVO();
          switchVOs2[i] = new ChgDocPkVO();
          ChgDocPkVO switchTempVO = new ChgDocPkVO();
          StockVO tempVO = (StockVO) vv1.elementAt(i);

          switchVOs1[i].setSrcCorpId(tempVO.getPk_stockcorp());
          switchVOs1[i].setDRateDate(new UFDate());
          Object oTemp = tCurrTypeID.get(tempVO.getPk_stockcorp());
          if (oTemp == null) {
            oTemp = PubDMO.getLocalCurrId(tempVO.getPk_stockcorp());
            tCurrTypeID.put(tempVO.getPk_stockcorp(), oTemp);
          }
          switchVOs1[i].setSrcCurrId(oTemp.toString());
          switchVOs1[i].setSrcVal(tempVO.getNprice());

          switchVOs1[i].setDstCorpId(unitCode);
          oTemp = tCurrTypeID.get(unitCode);
          if (oTemp == null) {
            oTemp = PubDMO.getLocalCurrId(unitCode);
            tCurrTypeID.put(unitCode, oTemp);
          }
          switchVOs1[i].setDstCurrId(oTemp.toString());

          switchVOs2[i].setSrcCorpId(tempVO.getPk_stockcorp());
          switchVOs2[i].setSrcManId(tempVO.getCmangid());
          switchVOs2[i].setDstCorpId(unitCode);

          switchTempVO.setSrcCorpId(tempVO.getPk_stockcorp());
          switchTempVO.setSrcManId(tempVO.getCprovidermangid());
          switchTempVO.setDstCorpId(unitCode);
          if (switchTempVO.getSrcManId() != null
              && switchTempVO.getSrcManId().trim().length() > 0)
            vv3.addElement(switchTempVO);
        }

        // 转换暂估单价
        /**
         * 按照V5的设计文档：
         *  入库单的结算信息由结算方填制，
         *  13、 应按结算公司属性（如精度、币种、参数）填制。
         *  如结算方币种为美元，14、 则入库单的累计结算金额为1.0，
         *  15、 表示的是1.0美元。
         *  通过代码分析，暂估和结算是一样的处理。
         *  
         *  因此，如果采购公司（结算公司）和收货公司的本位币不同，也不需要转换！
         *  修正：czp & zhaoyha 2008.12.26
         */
        ChgPriceMnyVO priceVOs[] = switchVOs1;//ChgDataUtil.chgPriceByCorp(switchVOs1);

        // ----- since v502,修正switchVOs1在设置单价前被金额转换所覆盖的BUG----- BGN ----
        for (int i = 0; i < vv1.size(); i++) {
          StockVO tempVO = (StockVO) vv1.elementAt(i);
          if (priceVOs[i].getDstVal() != null)
            tempVO.setNprice(priceVOs[i].getDstVal());
        }
        // ----- since v502,修正switchVOs1在设置单价前被金额转换所覆盖的BUG----- END ----

        // 转换暂估金额
        for (int i = 0; i < vv1.size(); i++) {
          StockVO tempVO = (StockVO) vv1.elementAt(i);
          switchVOs1[i].setSrcVal(tempVO.getNmoney());
          switchVOs1[i].setDstVal(null);
        }
        ChgPriceMnyVO moneyVOs[] = switchVOs1;//ChgDataUtil.chgPriceByCorp(switchVOs1);

        // ----- since v502,修正switchVOs1在设置金额前被结算金额转换所覆盖的BUG----- BGN ----
        for (int i = 0; i < vv1.size(); i++) {
          StockVO tempVO = (StockVO) vv1.elementAt(i);
          if (moneyVOs[i].getDstVal() != null)
            tempVO.setNmoney(moneyVOs[i].getDstVal());
        }
        // ----- since v502,修正switchVOs1在设置金额前被结算金额转换所覆盖的BUG----- END ----

        // 转换结算金额
        for (int i = 0; i < vv1.size(); i++) {
          StockVO tempVO = (StockVO) vv1.elementAt(i);
          switchVOs1[i].setSrcVal(tempVO.getNaccumsettlemny());
          switchVOs1[i].setDstVal(null);
        }
        ChgPriceMnyVO accummnyVOs[] = switchVOs1;//ChgDataUtil.chgPriceByCorp(switchVOs1);
        // 转换存货管理ID
        ChgDocPkVO invVOs[] = ChgDataUtil.chgPkInvByCorp(switchVOs2);

        // 转换供应商管理ID
        ChgDocPkVO switchVOs3[] = new ChgDocPkVO[vv3.size()];
        vv3.copyInto(switchVOs3);
        ChgDocPkVO vendVOs[] = null;
        // if(vv3.size() > 0) vendVOs = ChgDataUtil.chgPkCuByCorp(switchVOs3);

        int j = 0;
        for (int i = 0; i < vv1.size(); i++) {
          StockVO tempVO = (StockVO) vv1.elementAt(i);
          if (accummnyVOs[i].getDstVal() != null)
            tempVO.setNaccumsettlemny(accummnyVOs[i].getDstVal());
          tempVO.setCmangid(invVOs[i].getDstManId());
          if (vendVOs != null && tempVO.getCprovidermangid() != null
              && tempVO.getCprovidermangid().trim().length() > 0) {
            tempVO.setCprovidermangid(vendVOs[j].getDstManId());
            j++;
          }
        }

      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
    }

    for (int i = 0; i < stockVOs.length; i++) {
      if (!unitCode.equals(stockVOs[i].getPk_stockcorp())
					&& stockVOs[i].getCstoreorganization() != null
					&& stockVOs[i].getCstoreorganization().trim().length() > 0) {
      	stockVOs[i] = null;
      }
    }

    return stockVOs;
  }

  /*
   * 获取采购组织名称
   */
  private String[] queryPurOrgName(String[] saCorderId) throws SQLException {

    String sql = "select corderid, name from po_order A, bd_purorg B ";
    sql += "where A.dr = 0 and B.dr = 0 and A.cpurorganization = B.pk_purorg and A.corderid in ";

    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saCorderId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU89,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                                           * @res "调用临时表处理出现异常:"
                                                           */
          + e.getMessage());
    }
    sql += strIdSet;

    Connection con = null;
    PreparedStatement stmt = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s2 != null)
          t.put(s1, s2);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {//
      }
    }

    if (t.size() > 0) {
      String sID[] = new String[saCorderId.length];
      for (int i = 0; i < saCorderId.length; i++) {
        if (t.get(saCorderId[i]) != null)
          sID[i] = t.get(saCorderId[i]).toString();
        else
          sID[i] = null;
      }
      return sID;
    }
    return null;
  }

  /**
   * 功能描述:获得入库单号
   */
  public String[] queryStockCode(SettlebillItemVO VOs[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryStockCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */

    String sql = "select cgeneralhid, vbillcode from ic_general_h where dr = 0 and cgeneralhid in ";

    Vector vTemp = new Vector();
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCstockid() != null
          && VOs[i].getCstockid().trim().length() > 0
          && (!vTemp.contains(VOs[i].getCstockid())))
        vTemp.addElement(VOs[i].getCstockid());
    }
    if (vTemp.size() == 0)
      return new String[VOs.length];
    String sTemp[] = new String[vTemp.size()];
    vTemp.copyInto(sTemp);
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sTemp,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU41,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      sql += strSetId;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
     * sTemp.length - 1; i++) sql += " cgeneralhid in " + sTemp[i] + " or "; sql += "
     * cgeneralhid in " + sTemp[sTemp.length - 1] + ")";
     */
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s1.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0) {
          t.put(s1, s2);
        }
      }
      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryStockCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */

    String vBillcode[] = new String[VOs.length];
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCstockid() == null
          || VOs[i].getCstockid().trim().length() == 0)
        continue;
      Object oTemp = t.get(VOs[i].getCstockid());
      if (oTemp != null)
        vBillcode[i] = oTemp.toString();
    }

    return vBillcode;
  }

  /**
   * 功能描述:查询入库单
   */
  public StockVO[] queryStockDetail(String sCondition) throws SQLException {

    return queryStockDetail(sCondition, 2, 2);
  }

  /**
   * 功能描述:查询入库单 修改：CZP/2004-04-29/解决受托代销结算生成采购发票是其它业务类型问题，在匹配入库单时用“受托代销”业务类型过滤
   */
  public StockVO[] queryStockInSales(String unitCode, String sCondition)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryStockInSales",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    String sql = "";
    sql = "select cproviderid, vbillcode, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, D.pk_invbasdoc, ninnum, naccountnum1, naccountmny, npprice, npmoney, cdptid, cbizid,B.pk_invoicecorp, csourcebillhid, csourcebillbid, vsourcebillcode, cbiztype, csourcetype, cbilltypecode, bzgflag, ";
    sql += "cbizid, cprojectid, cprojectphaseid, vfree1, vfree2, vfree3, vfree4, vfree5, cbilltypecode, cgeneralbb3, A.ts, B.ts, C.ts, pk_calbody, B.hsl, ";

    sql += "A.vuserdef1,A.vuserdef2,A.vuserdef3,A.vuserdef4,A.vuserdef5,A.vuserdef6,A.vuserdef7,A.vuserdef8,A.vuserdef9,A.vuserdef10, ";
    sql += "A.vuserdef11,A.vuserdef12,A.vuserdef13,A.vuserdef14,A.vuserdef15,A.vuserdef16,A.vuserdef17,A.vuserdef18,A.vuserdef19,A.vuserdef20, ";
    sql += "A.pk_defdoc1,A.pk_defdoc2,A.pk_defdoc3,A.pk_defdoc4,A.pk_defdoc5,A.pk_defdoc6,A.pk_defdoc7,A.pk_defdoc8,A.pk_defdoc9,A.pk_defdoc10, ";
    sql += "A.pk_defdoc11,A.pk_defdoc12,A.pk_defdoc13,A.pk_defdoc14,A.pk_defdoc15,A.pk_defdoc16,A.pk_defdoc17,A.pk_defdoc18,A.pk_defdoc19,A.pk_defdoc20, ";
    sql += "B.vuserdef1,B.vuserdef2,B.vuserdef3,B.vuserdef4,B.vuserdef5,B.vuserdef6,B.vuserdef7,B.vuserdef8,B.vuserdef9,B.vuserdef10,B.vuserdef11,B.vuserdef12,B.vuserdef13,B.vuserdef14,B.vuserdef15,B.vuserdef16,B.vuserdef17,B.vuserdef18,B.vuserdef19,B.vuserdef20, ";
    sql += "B.pk_defdoc1,B.pk_defdoc2,B.pk_defdoc3,B.pk_defdoc4,B.pk_defdoc5,B.pk_defdoc6,B.pk_defdoc7,B.pk_defdoc8,B.pk_defdoc9,B.pk_defdoc10, ";
    sql += "B.pk_defdoc11,B.pk_defdoc12,B.pk_defdoc13,B.pk_defdoc14,B.pk_defdoc15,B.pk_defdoc16,B.pk_defdoc17,B.pk_defdoc18,B.pk_defdoc19,B.pk_defdoc20,cfirstbillhid,cfirstbillbid,B.cvendorid,cwarehouseid,A.pk_corp ";

    sql += "from ic_general_h A,ic_general_b B,ic_general_bb3 C,bd_invmandoc D,bd_invbasdoc E ,bd_busitype BS ";
    sql += "where A.dr = 0 and B.dr=0 and (cbilltypecode = '45' or cbilltypecode = '47' or upper(cbilltypecode) = '4T') ";
    sql += "and A.cgeneralhid=B.cgeneralhid and A.cgeneralhid=C.cgeneralhid and B.cgeneralbid=C.cgeneralbid and B.cinventoryid = D.pk_invmandoc and (fbillflag = 3 or fbillflag = 4) ";
    sql += "and D.pk_invbasdoc = E.pk_invbasdoc and upper(discountflag) = 'N' and upper(laborflag) = 'N' ";
    sql += "and A.cbiztype = BS.pk_busitype and BS.verifyrule = 'S' and csourcetype IN ('21','23','61') ";
    if (unitCode != null) {
      sql += "and A.pk_corp = '" + unitCode + "' ";
    }
    sql += sCondition;

    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        StockVO stock = new StockVO();
        // cproviderid :
        String cproviderid = rs.getString(1);
        stock.setCprovidermangid(cproviderid == null ? "" : cproviderid.trim());
        // vbillcode :
        String vbillcode = rs.getString(2);
        stock.setVbillcode(vbillcode == null ? null : vbillcode.trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(3);
        stock.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
        // cgeneralbid :
        String cgeneralbid = rs.getString(4);
        stock.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        stock.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        stock.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninnum :
        Object ninnum = rs.getObject(7);
        stock.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(
            ninnum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(8);
        stock.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(9);
        stock.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString()));
        // nprice :
        Object nprice = rs.getObject(10);
        stock.setNprice(nprice == null ? new UFDouble(0.0) : new UFDouble(
            nprice.toString()));
        // nmny :
        Object nmny = rs.getObject(11);
        stock.setNmoney(nmny == null ? new UFDouble(0.0) : new UFDouble(nmny
            .toString()));
        // cdeptid :
        String cdeptid = rs.getString(12);
        stock.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(13);
        stock.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // cunitid :
        String cunitid = rs.getString(14);
        stock.setPk_corp(cunitid == null ? null : cunitid.trim());
        // csourcebillhid :
        String csourcebillhid = rs.getString(15);
        stock.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid
            .trim());
        // csourcebillbid :
        String csourcebillbid = rs.getString(16);
        stock.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid
            .trim());
        // vsourcebillcode :
        String vsourcebillcode = rs.getString(17);
        stock.setVsourcebillcode(vsourcebillcode == null ? null
            : vsourcebillcode.trim());
        // cbiztype :
        String cbiztype = rs.getString(18);
        stock.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // csourcetype :
        String csourcetype = rs.getString(19);
        stock.setCsourcebilltype(csourcetype == null ? null : csourcetype
            .trim());

        // cbilltypecode :
        String cbilltypecode = rs.getString(20);
        // bzgflag :
        String bzgflag = rs.getString(21);

        // cbizid :
        String cbizid = rs.getString(22);
        stock.setCbizid(cbizid == null ? null : cbizid.trim());
        // cprojectid :
        String cprojectid = rs.getString(23);
        stock.setCprojectid(cprojectid == null ? null : cprojectid.trim());
        // cprojectphaseid :
        String cprojectphaseid = rs.getString(24);
        stock.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        // vfree1 :
        String vfree1 = rs.getString(25);
        stock.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(26);
        stock.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(27);
        stock.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(28);
        stock.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(29);
        stock.setVfree5(vfree5 == null ? null : vfree5.trim());
        // cbilltype :
        String cbilltype = rs.getString(30);
        stock.setCbilltype(cbilltype == null ? null : cbilltype.trim());
        // cgeneralbb3 :
        String cgeneralbb3 = rs.getString(31);
        stock.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3.trim());
        // ts1 :
        String ts1 = rs.getString(32);
        stock.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(33);
        stock.setTs2(ts2 == null ? null : ts2.trim());
        // ts3 :
        String ts3 = rs.getString(34);
        stock.setTs3(ts3 == null ? null : ts3.trim());
        // pk_calbody :
        String pk_calbody = rs.getString(35);
        stock.setCstoreorganization(pk_calbody == null ? null : pk_calbody
            .trim());
        // hsl :
        Object hsl = rs.getObject(36);
        stock.setHsl(hsl == null ? new UFDouble(0.0) : new UFDouble(hsl
            .toString()));

        String strTmp = rs.getString(37);
        stock.setVuserdefh1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(38);
        stock.setVuserdefh2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(39);
        stock.setVuserdefh3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(40);
        stock.setVuserdefh4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(41);
        stock.setVuserdefh5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(42);
        stock.setVuserdefh6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(43);
        stock.setVuserdefh7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(44);
        stock.setVuserdefh8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(45);
        stock.setVuserdefh9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(46);
        stock.setVuserdefh10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(47);
        stock.setVuserdefh11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(48);
        stock.setVuserdefh12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(49);
        stock.setVuserdefh13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(50);
        stock.setVuserdefh14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(51);
        stock.setVuserdefh15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(52);
        stock.setVuserdefh16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(53);
        stock.setVuserdefh17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(54);
        stock.setVuserdefh18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(55);
        stock.setVuserdefh19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(56);
        stock.setVuserdefh20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(57);
        stock.setPk_defdoch1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(58);
        stock.setPk_defdoch2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(59);
        stock.setPk_defdoch3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(60);
        stock.setPk_defdoch4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(61);
        stock.setPk_defdoch5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(62);
        stock.setPk_defdoch6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(63);
        stock.setPk_defdoch7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(64);
        stock.setPk_defdoch8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(65);
        stock.setPk_defdoch9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(66);
        stock.setPk_defdoch10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(67);
        stock.setPk_defdoch11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(68);
        stock.setPk_defdoch12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(69);
        stock.setPk_defdoch13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(70);
        stock.setPk_defdoch14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(71);
        stock.setPk_defdoch15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(72);
        stock.setPk_defdoch16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(73);
        stock.setPk_defdoch17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(74);
        stock.setPk_defdoch18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(75);
        stock.setPk_defdoch19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(76);
        stock.setPk_defdoch20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(77);
        stock.setVuserdefb1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(78);
        stock.setVuserdefb2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(79);
        stock.setVuserdefb3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(80);
        stock.setVuserdefb4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(81);
        stock.setVuserdefb5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(82);
        stock.setVuserdefb6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(83);
        stock.setVuserdefb7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(84);
        stock.setVuserdefb8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(85);
        stock.setVuserdefb9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(86);
        stock.setVuserdefb10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(87);
        stock.setVuserdefb11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(88);
        stock.setVuserdefb12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(89);
        stock.setVuserdefb13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(90);
        stock.setVuserdefb14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(91);
        stock.setVuserdefb15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(92);
        stock.setVuserdefb16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(93);
        stock.setVuserdefb17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(94);
        stock.setVuserdefb18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(95);
        stock.setVuserdefb19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(96);
        stock.setVuserdefb20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(97);
        stock.setPk_defdocb1(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(98);
        stock.setPk_defdocb2(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(99);
        stock.setPk_defdocb3(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(100);
        stock.setPk_defdocb4(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(101);
        stock.setPk_defdocb5(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(102);
        stock.setPk_defdocb6(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(103);
        stock.setPk_defdocb7(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(104);
        stock.setPk_defdocb8(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(105);
        stock.setPk_defdocb9(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(106);
        stock.setPk_defdocb10(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(107);
        stock.setPk_defdocb11(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(108);
        stock.setPk_defdocb12(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(109);
        stock.setPk_defdocb13(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(110);
        stock.setPk_defdocb14(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(111);
        stock.setPk_defdocb15(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(112);
        stock.setPk_defdocb16(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(113);
        stock.setPk_defdocb17(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(114);
        stock.setPk_defdocb18(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(115);
        stock.setPk_defdocb19(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(116);
        stock.setPk_defdocb20(strTmp == null ? "" : strTmp.trim());

        strTmp = rs.getString(117);
        stock.setCfirstbillhid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(118);
        stock.setCfirstbillbid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(119);
        stock.setCvendorid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(120);
        stock.setCwarehouseid(strTmp == null ? "" : strTmp.trim());
        strTmp = rs.getString(121);
        stock.setPk_stockcorp(strTmp == null ? "" : strTmp.trim());

        // 入库单的入库数量不为0,才能参与结算或暂估
        if (stock.getNinnum().doubleValue() != 0.0) {
          // 委外入库单没有暂估,不能参与结算
          if (cbilltypecode != null && cbilltypecode.trim().equals("47")) {
            if (bzgflag != null
                && (bzgflag.trim().equals("Y") || bzgflag.trim().equals("y")))
              v.addElement(stock);
          }
          else {
            v.addElement(stock);
          }
        }
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryStockInSales",
        new Object[] {
            unitCode, sCondition
        });
    /** ********************************************************** */

    return stocks;
  }

  /**
   * 此处插入方法说明。 功能描述:获得供应商基础ID 输入参数: 返回值: 异常处理: 日期：2002/11/20
   */
  public String[] queryVendorBaseIDForARAP(String pk_cumandoc[])
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorBaseIDForARAP",
        new Object[] {
          pk_cumandoc
        });
    /** ********************************************************** */

    if (pk_cumandoc == null || pk_cumandoc.length == 0)
      return null;

    String sql = "select pk_cumandoc, pk_cubasdoc from bd_cumandoc where pk_cumandoc in ";
    /*
     * ('"; for (int i = 0; i < pk_cumandoc.length; i++) { if (pk_cumandoc[i] !=
     * null && pk_cumandoc[i].trim().length() > 0 &&
     * (!vTemp.contains(pk_cumandoc[i]))) vTemp.addElement(pk_cumandoc[i]); } if
     * (vTemp.size() == 0) return null; for (int i = 0; i < vTemp.size() - 1;
     * i++) sql += vTemp.elementAt(i) + "','"; sql +=
     * vTemp.elementAt(vTemp.size() - 1) + "')";
     */
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(pk_cumandoc,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU64,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || strIdSet.trim().equals("()")) {
        strIdSet = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/* @res "调用临时表处理出现异常:" */
          + e.getMessage());
    }
    sql += strIdSet;

    Hashtable t = new Hashtable();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s1.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0) {
          t.put(s1, s2);
        }
      }

      if (rs != null)
        rs.close();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorBaseIDForARAP",
        new Object[] {
          pk_cumandoc
        });
    /** ********************************************************** */

    if (t.size() > 0) {
      String s[] = new String[pk_cumandoc.length];
      for (int i = 0; i < pk_cumandoc.length; i++) {
        String ss = pk_cumandoc[i];
        if (ss != null) {
          Object o = t.get(ss);
          if (o != null)
            s[i] = o.toString();
        }
      }
      return s;
    }
    return null;
  }

  /**
   * 功能描述:获得供应商名称、部门名称、业务员名称（从入库单获得） 输入参数: 返回值:
   * 异常处理:[[供应商名称...],[部门名称...],[业务员名称...]] 日期：2003/03/17
   */
  public ArrayList queryVendorName(String cgeneralhid[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorName",
        new Object[] {
          cgeneralhid
        });
    /** ********************************************************** */

    String s1[] = new String[cgeneralhid.length];
    String s2[] = new String[cgeneralhid.length];
    String s3[] = new String[cgeneralhid.length];

    // 供应商
    String sql1 = "select cgeneralhid, custshortname ";
    sql1 += "from ic_general_h A, bd_cumandoc B, bd_cubasdoc C ";
    sql1 += "where A.dr = 0 and B.pk_cubasdoc = C.pk_cubasdoc and pk_cumandoc = cproviderid ";
    sql1 += "and cgeneralhid in ";

    // 部门
    String sql2 = "select cgeneralhid, deptname ";
    sql2 += "from ic_general_h A, bd_deptdoc D ";
    sql2 += "where A.dr = 0 ";
    sql2 += "and cdptid = D.pk_deptdoc and cgeneralhid in ";

    // 业务员
    String sql3 = "select cgeneralhid, psnname ";
    sql3 += "from ic_general_h A, bd_psndoc E ";
    sql3 += "where A.dr = 0 ";
    sql3 += "and cbizid = E.pk_psndoc and cgeneralhid in ";

    if (cgeneralhid == null || cgeneralhid.length == 0) {
      ArrayList list = new ArrayList();
      list.add(s1);
      list.add(s2);
      list.add(s3);
      return list;
    }

    Vector vTemp = new Vector();
    for (int i = 0; i < cgeneralhid.length; i++) {
      if (cgeneralhid[i] != null && cgeneralhid[i].trim().length() > 0
          && (!vTemp.contains(cgeneralhid[i])))
        vTemp.addElement(cgeneralhid[i]);
    }
    if (vTemp.size() == 0) {
      ArrayList list = new ArrayList();
      list.add(s1);
      list.add(s2);
      list.add(s3);
      return list;
    }

    //
    String sTemp[] = new String[vTemp.size()];
    vTemp.copyInto(sTemp);
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sTemp,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU42,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      sql1 += strSetId;
      sql2 += strSetId;
      sql3 += strSetId;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); // for(int i = 0; i <
     * sTemp.length - 1; i++){ sql1 += " cgeneralhid in " + sTemp[i] + " or ";
     * sql2 += " cgeneralhid in " + sTemp[i] + " or "; sql3 += " cgeneralhid in " +
     * sTemp[i] + " or "; } sql1 += " cgeneralhid in " + sTemp[sTemp.length - 1] +
     * ")"; sql2 += " cgeneralhid in " + sTemp[sTemp.length - 1] + ")"; sql3 += "
     * cgeneralhid in " + sTemp[sTemp.length - 1] + ")";
     */
    Hashtable t1 = new Hashtable();
    Hashtable t2 = new Hashtable();
    Hashtable t3 = new Hashtable();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();

      stmt = con.prepareStatement(sql1);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        String ss = rs.getString(2);
        if (s != null && s.trim().length() > 0) {
          if (ss != null)
            t1.put(s, ss);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      stmt = con.prepareStatement(sql2);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        String ss = rs.getString(2);
        if (s != null && s.trim().length() > 0) {
          if (ss != null)
            t2.put(s, ss);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

      stmt = con.prepareStatement(sql3);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        String ss = rs.getString(2);
        if (s != null && s.trim().length() > 0) {
          if (ss != null)
            t3.put(s, ss);
        }
      }
      if (rs != null)
        rs.close();
      if (stmt != null)
        stmt.close();

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorName",
        new Object[] {
          cgeneralhid
        });
    /** ********************************************************** */

    for (int i = 0; i < s1.length; i++) {
      if (cgeneralhid[i] != null) {
        Object o = t1.get(cgeneralhid[i]);
        if (o != null)
          s1[i] = o.toString();
        o = t2.get(cgeneralhid[i]);
        if (o != null)
          s2[i] = o.toString();
        o = t3.get(cgeneralhid[i]);
        if (o != null)
          s3[i] = o.toString();
      }
    }

    ArrayList list = new ArrayList();
    list.add(s1);
    list.add(s2);
    list.add(s3);
    return list;
  }

  /**
   * 功能描述:获得供应商名称（从VMI汇总表头获得） 输入参数:VMI表头ID[] 返回值:[供应商名称...]
   */
  public String[] queryVendorName_Vmi(String saVmiHid[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorName_Vmi",
        new Object[] {
          saVmiHid
        });
    /** ********************************************************** */
    if (saVmiHid == null || saVmiHid.length <= 0)
      return null;
    int iLen = saVmiHid.length;
    //
    StringBuffer bufferSql = new StringBuffer("select cvmihid, custshortname ");
    bufferSql.append("from ic_vmi_sum A, bd_cumandoc B, bd_cubasdoc C ");
    bufferSql
        .append("where A.dr = 0 and B.pk_cubasdoc = C.pk_cubasdoc and pk_cumandoc = cvendorid ");
    bufferSql.append("and A.cvmihid in ");
    // 临时表
    String strSetId = null;
    nc.bs.scm.pub.TempTableDMO dmoTempTbl = null;
    try {
      dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(saVmiHid,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      bufferSql.append(strSetId);
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * bufferSql.append(saVmiHid[0]); bufferSql.append("' "); for (int i = 1; i <
     * iLen; i++) { bufferSql.append("or "); bufferSql.append("A.cvmihid = '");
     * bufferSql.append(saVmiHid[i]); bufferSql.append("' "); }
     * bufferSql.append(")");
     */
    //
    Hashtable tableIdName = new Hashtable();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(bufferSql.toString());
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s = rs.getString(1);
        String ss = rs.getString(2);
        if (s != null && s.trim().length() > 0) {
          if (ss != null)
            tableIdName.put(s, ss);
        }
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryVendorName_Vmi",
        new Object[] {
          saVmiHid
        });
    /** ********************************************************** */
    String[] saRet = new String[iLen];
    for (int i = 0; i < iLen; i++) {
      if (saVmiHid[i] == null) {
        saRet[i] = null;
        continue;
      }
      saRet[i] = (String) tableIdName.get(saVmiHid[i]);
    }
    return saRet;
  }

  /**
   * 功能描述:获得VMI汇总单据号
   */
  public String[] queryVMIBillCode(SettlebillItemVO VOs[]) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryVMIBillCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */
    String sql = "select cvmihid, vbillcode from ic_vmi_sum where dr = 0 and cvmihid in ";
    Vector vTemp = new Vector();
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCvmiid() != null && VOs[i].getCvmiid().trim().length() > 0
          && !vTemp.contains(VOs[i].getCvmiid()))
        vTemp.addElement(VOs[i].getCvmiid());
    }
    if (vTemp.size() == 0)
      return new String[VOs.length];
    String sTemp[] = new String[vTemp.size()];
    vTemp.copyInto(sTemp);
    // 临时表
    String strSetId = null;
    nc.bs.scm.pub.TempTableDMO dmoTempTbl = null;
    try {
      dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sTemp,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU43,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
      sql += strSetId;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    /*
     * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
     * sTemp.length - 1; i++) sql += " cvmihid in " + sTemp[i] + " or "; sql += "
     * cvmihid in " + sTemp[sTemp.length - 1] + ") ";
     */
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable t = new Hashtable();
    Vector v = new Vector();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        if (s1 != null && s1.trim().length() > 0 && s2 != null
            && s2.trim().length() > 0) {
          t.put(s1, s2);
        }
      }
      if (stmt != null)
        stmt.close();
      /** 费用、折扣类结算单行不显示VMI汇总号 */
      int iLen = VOs.length;
      String sqlsql = "select pk_invmandoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 ";
      sqlsql += "and A.pk_invbasdoc = B.pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' and pk_invmandoc in ";
      vTemp = new Vector();
      for (int i = 0; i < iLen; i++) {
        if (!vTemp.contains(VOs[i].getCmangid()))
          vTemp.addElement(VOs[i].getCmangid());
      }
      String[] saCmangId = new String[vTemp.size()];
      vTemp.copyInto(saCmangId);
      try {
        if (dmoTempTbl == null)
          dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTempTbl.insertTempTable(saCmangId,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU44,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " ('ErrorPk') ";
        }
        sqlsql += strSetId;
      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
      /*
       * saCmangId = nc.bs.pu.pub.PubDMO.getInSetsByIds(saCmangId); iLen =
       * saCmangId.length; String strSQL = ""; stmt =
       * con.prepareStatement(strSQL); for (int i = 0; i < iLen; i++) { strSQL =
       * sqlsql + "and pk_invmandoc in " + saCmangId[i]; rs =
       * stmt.executeQuery(sqlsql); while (rs.next()) {
       * v.addElement(rs.getString(1)); } }
       */
      stmt = con.prepareStatement(sqlsql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        v.addElement(rs.getString(1));
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryVMIBillCode",
        new Object[] {
          VOs
        });
    /** ********************************************************** */
    String[] saBillCode = new String[VOs.length];
    for (int i = 0; i < VOs.length; i++) {
      if (VOs[i].getCvmiid() == null || VOs[i].getCvmiid().trim().length() == 0)
        continue;
      Object oTemp = t.get(VOs[i].getCvmiid());
      if (oTemp != null && v.contains(VOs[i].getCmangid()))
        saBillCode[i] = oTemp.toString();
    }
    return saBillCode;
  }

  /**
   * 功能描述:获得VMI业务类型ID 日期：2002/05/22
   */
  public String queryVMIBusitye(String unitCode) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "queryVMIBusitypeID",
        new Object[] {
          unitCode
        });
    /** ********************************************************** */

    String sql = "select pk_busitype from bd_busitype where upper(verifyrule) = 'V' and pk_corp = ?";

    String s = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, unitCode);

      ResultSet rs = stmt.executeQuery();
      //
      if (rs.next()) {
        s = rs.getString(1);
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "queryVMIBusitypeID",
        new Object[] {
          unitCode
        });
    /** ********************************************************** */

    return s;
  }

  /**
   * 功能描述:更新折扣
   */
  public void updateDiscount(FeeinvoiceVO invoice[])
      throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "updateDiscount",
        new Object[] {
          invoice
        });
    /** ********************************************************** */

    String sql = "update po_invoice_b set naccumsettnum = 0, naccumsettmny = ? where cinvoiceid = ? and cinvoice_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = invoice.length;
      for (int i = 0; i < iLen; i++) {
        if (invoice[i] == null)
          continue;

        if (invoice[i].getNmny() != null
            && invoice[i].getNaccumsettlemny() != null
            && Math.abs(invoice[i].getNmny().doubleValue()) + 0.01 < Math
                .abs(invoice[i].getNaccumsettlemny().doubleValue())) {
          throw new SQLException(
              "Invoice accummulated money exceeds invoice money! Please check!");
        }

        if (invoice[i].getNaccumsettlemny() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(1, invoice[i].getNaccumsettlemny().toBigDecimal());
        }
        // find record by PK fields:
        stmt.setString(2, invoice[i].getCinvoiceid());
        stmt.setString(3, invoice[i].getCinvoice_bid());
        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "updateDiscount",
        new Object[] {
          invoice
        });
    /** ********************************************************** */
  }

  /**
   * 功能描述:更新费用发票
   */
  public void updateFee(FeeinvoiceVO invoice[]) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "updateFee", new Object[] {
      invoice
    });
    /** ********************************************************** */

    String sql = "update po_invoice_b set naccumsettnum = 0, naccumsettmny = ? where cinvoiceid = ? and cinvoice_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = invoice.length;
      for (int i = 0; i < iLen; i++) {
        if (invoice[i] == null)
          continue;

        if (invoice[i].getNmny() != null
            && invoice[i].getNaccumsettlemny() != null
            && Math.abs(invoice[i].getNmny().doubleValue()) + 0.01 < Math
                .abs(invoice[i].getNaccumsettlemny().doubleValue())) {
          throw new SQLException(
              "Invoice accummulated money exceeds invoice money! Please check!");
        }

        if (invoice[i].getNaccumsettlemny() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(1, invoice[i].getNaccumsettlemny().toBigDecimal());
        }
        // find record by PK fields:
        stmt.setString(2, invoice[i].getCinvoiceid());
        stmt.setString(3, invoice[i].getCinvoice_bid());
        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "updateFee", new Object[] {
      invoice
    });
    /** ********************************************************** */
  }

  /**
   * 功能描述:更新发票,直运发票回写专用
   * 
   * @since v53
   */
  public void updateInvoiceDirect(IinvoiceVO invoice[])
      throws BusinessException {

    String sql = "update po_invoice_b set naccumsettnum = coalesce(naccumsettnum,0) + ?, naccumsettmny = coalesce(naccumsettmny,0) + ? where cinvoiceid = ? and cinvoice_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    ArrayList<String> listBid = new ArrayList<String>();
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);

      int iLen = invoice.length;
      for (int i = 0; i < iLen; i++) {
        if (invoice[i] == null) {
          continue;
        }
        // if(invoice[i].getNmoney() != null && invoice[i].getNaccumsettlemny()
        // != null
        // && Math.abs(invoice[i].getNmoney().doubleValue()) + 0.01 <
        // Math.abs(invoice[i].getNaccumsettlemny().doubleValue())){
        // throw new SQLException("Invoice accummulated money exceeds invoice
        // money! Please check!");
        // }
        if (invoice[i].getNaccumsettlenum() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(1, invoice[i].getNaccumsettlenum().toBigDecimal());
        }
        if (invoice[i].getNaccumsettlemny() == null) {
          stmt.setNull(2, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(2, invoice[i].getNaccumsettlemny().toBigDecimal());
        }
        // find record by PK fields:
        stmt.setString(3, invoice[i].getCinvoiceid());
        stmt.setString(4, invoice[i].getCinvoice_bid());
        //
        listBid.add(invoice[i].getCinvoice_bid());
        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    // 检查出现异常的单据行
    Object[][] oa2Ret = new PubImpl()
        .queryArrayValue(
            "po_invoice, po_invoice_b",
            "po_invoice_b.cinvoice_bid",
            new String[] {
                "po_invoice.vinvoicecode", "po_invoice_b.crowno"
            },
            listBid.toArray(new String[listBid.size()]),
            "po_invoice.cinvoiceid = po_invoice_b.cinvoiceid and coalesce(naccumsettmny,0) > coalesce(nmoney,0)");
    StringBuffer sbErrInfo = null;
    // 组织提示信息：下列发票行的累计结算金额已经超出发票金额{发票号-行号}:{0}
    if (oa2Ret != null) {
      sbErrInfo = new StringBuffer("");
      for (int i = 0; i < oa2Ret.length; i++) {
        sbErrInfo.append(oa2Ret[i][0]);
        sbErrInfo.append("-");
        sbErrInfo.append(oa2Ret[i][1]);
        sbErrInfo.append("\n");
      }
    }
    if (sbErrInfo != null) {
      throw new BusinessException(NCLangResOnserver.getInstance().getStrByID(
          "40040401", "UPP40040401-000258", null, new String[] {
            sbErrInfo.toString()
          })/* @res : 下列发票行的累计结算金额已经超出发票金额{发票号-行号}:{0} */);
    }
  }

  /**
   * 功能描述:更新发票
   */
  public void updateInvoice(IinvoiceVO invoice[]) throws java.sql.SQLException {

    String sql = "update po_invoice_b set naccumsettnum = ?, naccumsettmny = ? where cinvoiceid = ? and cinvoice_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);

      int iLen = invoice.length;
      for (int i = 0; i < iLen; i++) {
        if (invoice[i] == null)
          continue;

        if (invoice[i].getNmoney() != null
            && invoice[i].getNaccumsettlemny() != null
            && Math.abs(invoice[i].getNmoney().doubleValue()) + 0.01 < Math
                .abs(invoice[i].getNaccumsettlemny().doubleValue())) {
          throw new SQLException(
              "Invoice accummulated money exceeds invoice money! Please check!");
        }

        if (invoice[i].getNaccumsettlenum() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(1, invoice[i].getNaccumsettlenum().toBigDecimal());
        }
        if (invoice[i].getNaccumsettlemny() == null) {
          stmt.setNull(2, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(2, invoice[i].getNaccumsettlemny().toBigDecimal());
        }
        // find record by PK fields:
        stmt.setString(3, invoice[i].getCinvoiceid());
        stmt.setString(4, invoice[i].getCinvoice_bid());
        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 功能描述:查询结算单表体 日期：2004-07-09 说明：用于批量查询大数据量单据表体情况
   */
  public SettlebillItemVO[] querySettleBodyBatch(String sUnitCode,
      String[] saHId, String[] saHTs) throws SQLException {

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Vector vRslt = new Vector();
    if (saHId == null || saHId.length < 0)
      return null;
    if (saHTs == null || saHTs.length < 0)
      return null;
    if (saHId.length != saHTs.length)
      return null;
    try {
      /*
       * 创建临时表: nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100
       * nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
       */
      Vector vHid = new Vector();
      Vector vHts = new Vector();
      int iLen = saHId.length;
      for (int i = 0; i < iLen; i++) {
        if (saHId[i] == null) {
          continue;
        }
        if (saHTs[i] == null) {
          saHTs[i] = "2000-01-01 00:00:00";
        }
        vHid.add(saHId[i]);
        vHts.add(saHTs[i]);
      }
      java.util.ArrayList listTblDataId = new java.util.ArrayList();
      java.util.ArrayList listTblDataTs = new java.util.ArrayList();
      java.util.ArrayList listTmp = null;
      for (int i = 0; i < iLen; i++) {
        listTmp = new java.util.ArrayList();
        listTmp.add(new Integer(i));
        listTmp.add(vHid.elementAt(i));
        listTblDataId.add(listTmp);
        listTmp = new java.util.ArrayList();
        listTmp.add(new Integer(i));
        listTmp.add(vHts.elementAt(i));
        listTblDataTs.add(listTmp);
      }
      String strTblNameTs = null;
      String strTblNameId = null;
      nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
      strTblNameTs = dmo.getTempStringTable(
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100, new String[] {
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cts"
          }, new String[] {
              "int", "char(19)"
          }, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, listTblDataTs);
      strTblNameId = dmo.getTempStringTable(
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94, new String[] {
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cmangid"
          }, new String[] {
              "int", "char(20)"
          }, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, listTblDataId);
      // 拼接SQL
      String strSql = "select csettlebill_bid, h.pk_corp, h.csettlebillid, cinvoiceid, cinvoice_bid, cstockid, cstockrow, B.cmangid, cbaseid, nsettlenum, nsettledisctmny, nfactor1, nfactor2, nfactor3, nfactor4, nfactor5, nreasonalwastnum, nprice, nmoney, ngaugemny, h.ts, cvmiid, csaleid, pk_arrvcorp, nreasonalwastprice, nreasonalwastmny ,vstockbilltype,byffirstsettle "
          + "from po_settlebill h, po_settlebill_b b,"
          + strTblNameId
          + " as hid,"
          + strTblNameTs
          + " as tts "
          + "where h.csettlebillid = b.csettlebillid and h.csettlebillid = hid.cmangid and h.ts = tts.cts and hid."
          + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
          + " = tts."
          + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
          + " and h.dr = 0 and b.dr = 0 ";
      if (sUnitCode != null) {
        strSql += "and h.pk_corp='" + sUnitCode + "' ";
      }
      //
      con = getConnection();
      stmt = con.prepareStatement(strSql);
      rs = stmt.executeQuery();
      SettlebillItemVO settlebillItem = null;
      String strTmp = null;
      Object oTmp = null;
      int index = 0;
      //
      while (rs.next()) {
        settlebillItem = new SettlebillItemVO();
        index = 0;
        // csettlebill_bid :
        strTmp = rs.getString(++index);
        settlebillItem
            .setCsettlebill_bid(strTmp == null ? null : strTmp.trim());
        // pk_corp :
        strTmp = rs.getString(++index);
        settlebillItem.setPk_corp(strTmp == null ? null : strTmp.trim());
        // csettlebillid :
        strTmp = rs.getString(++index);
        settlebillItem.setCsettlebillid(strTmp == null ? null : strTmp.trim());
        // cinvoiceid :
        strTmp = rs.getString(++index);
        settlebillItem.setCinvoiceid(strTmp == null ? null : strTmp.trim());
        // cinvoice_bid :
        strTmp = rs.getString(++index);
        settlebillItem.setCinvoice_bid(strTmp == null ? null : strTmp.trim());
        // cstockid :
        strTmp = rs.getString(++index);
        settlebillItem.setCstockid(strTmp == null ? null : strTmp.trim());
        // cstockrow :
        strTmp = rs.getString(++index);
        settlebillItem.setCstockrow(strTmp == null ? null : strTmp.trim());
        // cmangid :
        strTmp = rs.getString(++index);
        settlebillItem.setCmangid(strTmp == null ? null : strTmp.trim());
        // cbaseid :
        strTmp = rs.getString(++index);
        settlebillItem.setCbaseid(strTmp == null ? null : strTmp.trim());
        // nsettlenum :
        oTmp = rs.getObject(++index);
        settlebillItem.setNsettlenum(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nsettledisctmny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNsettledisctmny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor1 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor1(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor2 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor2(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor3 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor3(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor4 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor4(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nfactor5 :
        oTmp = rs.getObject(++index);
        settlebillItem.setNfactor5(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nreasonalwastnum :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastnum(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nprice :
        oTmp = rs.getObject(++index);
        settlebillItem.setNprice(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nmoney :
        oTmp = rs.getObject(++index);
        settlebillItem.setNmoney(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // ngaugemny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNgaugemny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // ts :
        strTmp = rs.getString(++index);
        settlebillItem.setTs(strTmp == null ? null : strTmp.trim());
        // cvmiid:
        strTmp = rs.getString(++index);
        settlebillItem.setCvmiid(strTmp == null ? null : strTmp.trim());
        // csale_bid:
        strTmp = rs.getString(++index);
        settlebillItem.setCsale_bid(strTmp == null ? null : strTmp.trim());
        // pk_arrvcorp :
        strTmp = rs.getString(++index);
        settlebillItem.setPk_stockcorp(strTmp == null ? null : strTmp.trim());
        // nreasonalwastprice :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastprice(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));
        // nreasonalwastmny :
        oTmp = rs.getObject(++index);
        settlebillItem.setNreasonalwastmny(oTmp == null ? new UFDouble(0.0)
            : new UFDouble(oTmp.toString()));

        // vstockbilltype zhf add for v55
        strTmp = rs.getString(++index);
        settlebillItem.setVstockbilltype(strTmp == null ? null : strTmp.trim());
        
        //by zhaoyha at 2008.10.25
        strTmp = rs.getString(++index);
        settlebillItem.setByffirstsettle(new UFBoolean(strTmp == null ? "N" : strTmp.trim()));       

        settlebillItem.setDr(new Integer(0));

        vRslt.addElement(settlebillItem);
      }
    }
    catch (SQLException e) {
      throw e;
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (rs != null)
          rs.close();

      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    if (vRslt != null && vRslt.size() > 0) {
      SettlebillItemVO bodyVO[] = new SettlebillItemVO[vRslt.size()];
      vRslt.copyInto(bodyVO);
      return bodyVO;
    }
    return null;
  }

  /**
   * 功能描述:根据销售结算时，生成发票后，修改订单的累计发票数量 输入参数:订单表体主键，是否需要刷新查询时间戳 返回：采购订单行新时间戳
   */
  public IdTsData updateOrderInvoiceNum(InvoiceItemVO itemVO[],
      boolean isNeedFindNewTs) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "updateOrderInvoiceNum",
        new Object[] {
          itemVO
        });
    /** ********************************************************** */

    IdTsData struIdTs = null;
    //
    String sql = "update po_order_b set naccuminvoicenum = coalesce(naccuminvoicenum,0) + (?) where corder_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql);
      UFDouble nInvoiceNum = null;
      int iLen = itemVO.length;
      for (int i = 0; i < iLen; i++) {
        nInvoiceNum = itemVO[i].getNinvoicenum();
        if (nInvoiceNum == null)
          continue;
        stmt.setDouble(1, nInvoiceNum.doubleValue());
        stmt.setString(2, itemVO[i].getCorder_bid());
        executeUpdate(stmt);
      }
      executeBatch(stmt);
      if (stmt != null)
        stmt.close();
      if (!isNeedFindNewTs)
        return null;
      // 刷新采购订单时间戳
      sql = "select corder_bid, ts from po_order_b where corder_bid in ";
      Vector vTemp = new Vector();
      vTemp.addElement(itemVO[0].getCorder_bid());
      for (int i = 1; i < itemVO.length; i++) {
        if (!vTemp.contains(itemVO[i].getCorder_bid()))
          vTemp.addElement(itemVO[i].getCorder_bid());
      }
      String sTemp[] = new String[vTemp.size()];
      vTemp.copyInto(sTemp);
      // 临时表
      String strSetId = null;
      try {
        nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTempTbl.insertTempTable(sTemp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU45,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " (ErrorPk) ";
        }
        sql += strSetId;
      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
      /*
       * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
       * sTemp.length - 1; i++) sql += " corder_bid in " + sTemp[i] + " or ";
       * sql += " corder_bid in " + sTemp[sTemp.length - 1];
       */
      // 查询
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      String strId = null, strTs = null;
      Vector vId = new Vector(), vTs = new Vector();
      while (rs.next()) {
        strId = rs.getString(1);
        strTs = rs.getString(2);
        if (strId == null || strId.trim().length() == 0 || strTs == null
            || strTs.trim().length() == 0 || vId.contains(strId))
          continue;
        vId.addElement(strId);
        vTs.addElement(strTs);
      }
      if (vId.size() > 0) {
        struIdTs = new IdTsData();
        struIdTs.setTableName("po_order_b");
        String[] saTmp = new String[vId.size()];
        vId.copyInto(saTmp);
        struIdTs.setIDs(saTmp);
        saTmp = new String[vId.size()];
        vTs.copyInto(saTmp);
        struIdTs.setTSs(saTmp);
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "updateOrderInvoiceNum",
        new Object[] {
          itemVO
        });
    /** ********************************************************** */
    return struIdTs;
  }

  /**
   * 功能描述:回写销售发票的累计结算数量（按销售发票行ID） 输入参数:SettlebillItemVO[]，是否需要刷新查询时间戳
   * 返回值:IdTsData,采购销售发票数据表新时间戳数据
   */
  public IdTsData updateSaleDataBatch(SettlebillItemVO[] items,
      boolean isNeedFindNewTs) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "updateSaleDataBatch",
        new Object[] {
          items
        });
    /** ********************************************************** */
    if (items == null || items.length == 0) {
      SCMEnv.out("传入数据为空，直接返回!");
      return null;
    }
    IdTsData struIdTs = null;
    // 更新
    String sql = "update po_saledata set naccumnum = coalesce(naccumnum,0) + (?) where csale_bid = ? ";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = items.length;
      String strKey = null;
      UFDouble ufdNum = null;
      for (int i = 0; i < iLen; i++) {
        if (items[i] == null)
          continue;
        ufdNum = items[i].getNsettlenum();
        if (ufdNum == null || ufdNum.doubleValue() == 0)
          continue;
        strKey = items[i].getCsale_bid();
        if (strKey == null || strKey.trim().equals(""))
          continue;
        stmt.setDouble(1, ufdNum.doubleValue());
        stmt.setString(2, strKey);
        executeUpdate(stmt);
      }
      executeBatch(stmt);
      if (stmt != null)
        stmt.close();

      /** 查询采购销售发票数据表新时间戳 */
      if (!isNeedFindNewTs) {
        return null;
      }
      java.util.Vector vTemp = new java.util.Vector();
      for (int i = 0; i < iLen; i++) {
        if (items[i] == null)
          continue;
        if (!vTemp.contains(items[i].getCsale_bid()))
          vTemp.addElement(items[i].getCsale_bid());
      }
      String sTemp[] = new String[vTemp.size()];
      vTemp.copyInto(sTemp);
      // 临时表
      String strSetId = null;
      try {
        nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTempTbl.insertTempTable(sTemp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU46,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " ('ErrorPk') ";
        }
      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
      /*
       * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
       * sTemp.length - 1; i++) sqlIdOr += " csale_bid in " + sTemp[i] + " or ";
       * sqlIdOr += " csale_bid in " + sTemp[sTemp.length - 1];
       */
      // 查询
      sql = "select csale_bid, ts from po_saledata where csale_bid in "
          + strSetId;
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      String strId = null, strTs = null;
      Vector vId = new Vector();
      Vector vTs = new Vector();
      while (rs.next()) {
        strId = rs.getString(1);
        strTs = rs.getString(2);
        if (strId == null || strId.trim().length() == 0 || strTs == null
            || strTs.trim().length() == 0 || vId.contains(strId))
          continue;
        vId.addElement(strId);
        vTs.addElement(strTs);
      }
      if (vId.size() > 0) {
        struIdTs = new IdTsData();
        struIdTs.setTableName("po_saledata");
        String[] saTmp = new String[vId.size()];
        vId.copyInto(saTmp);
        struIdTs.setIDs(saTmp);
        saTmp = new String[vId.size()];
        vTs.copyInto(saTmp);
        struIdTs.setTSs(saTmp);
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "updateSaleDataBatch",
        new Object[] {
          items
        });
    /** ********************************************************** */
    return struIdTs;
  }

  /**
   * 功能描述:更新入库单累计结算数量及结算标志 输入参数:StockVO[]，是否需要刷新查询时间戳 返回值:数组不为空，但数组元素可能为空
   * IdTsData[0],采购入库单子表新时间戳数据 IdTsData[1],采购入库单结算子子表新时间戳数据
   */
  public IdTsData[] updateStock(StockVO stock[], boolean isNeedFindNewTs)
      throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ps.settle.SettleDMO", "updateStock", new Object[] {
      stock
    });
    /** ********************************************************** */

    IdTsData[] idtsRet = new IdTsData[2];

    String sql = "update ic_general_bb3 set naccountnum1 = ?, naccountmny = ?, naccumwashnum = ? where cgeneralbid = ?";
    String sql1 = "update ic_general_b set isok = ? where cgeneralbid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    PreparedStatement stmt1 = null;
    ResultSet rs = null;
    try {
      con = getConnection();

      stmt = prepareStatement(con, sql);
      stmt1 = prepareStatement(con, sql1);
      boolean bEff = false;
      int iLen = stock.length;
      for (int i = 0; i < iLen; i++) {
        if (stock[i] == null)
          continue;

        if (stock[i].getNinnum() != null
            && stock[i].getNaccumsettlenum() != null
            && Math.abs(stock[i].getNinnum().doubleValue()) + 0.01 < Math
                .abs(stock[i].getNaccumsettlenum().doubleValue())) {
          throw new SQLException(
              "Stock accummulated num exceeds stock in num! Please check!");
        }
        if (!bEff)
          bEff = true;
        // 数量
        if (stock[i].getNaccumsettlenum() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setDouble(1, stock[i].getNaccumsettlenum().doubleValue());
        }
        if (stock[i].getNaccumsettlemny() == null) {
          stmt.setNull(2, Types.INTEGER);
        }
        else {
          stmt.setDouble(2, stock[i].getNaccumsettlemny().doubleValue());
        }
        if (stock[i].getNaccumwashnum() == null) {
          stmt.setNull(3, Types.INTEGER);
        }
        else {
          stmt.setDouble(3, stock[i].getNaccumwashnum().doubleValue());
        }

        stmt.setString(4, stock[i].getCgeneralbid());
        executeUpdate(stmt);
        // 结算标志
        if (stock[i].getNinnum().doubleValue() == stock[i].getNaccumsettlenum()
            .doubleValue())
          stmt1.setString(1, "Y");
        else
          stmt1.setString(1, "N");
        stmt1.setString(2, stock[i].getCgeneralbid());
        executeUpdate(stmt1);
      }
      if (bEff) {
        executeBatch(stmt);
      }
      if (stmt != null)
        stmt.close();
      if (bEff) {
        executeBatch(stmt1);
      }
      if (stmt1 != null)
        stmt1.close();
      if (!bEff)
        return null;
      /** 刷新采购入库单新时间戳 */
      if (!isNeedFindNewTs) {
        return null;
      }
      IdTsData struIdTs = null;
      Vector vTemp = new Vector();
      for (int i = 0; i < stock.length; i++) {
        if (stock[i] == null)
          continue;
        if (!vTemp.contains(stock[i].getCgeneralbid()))
          vTemp.addElement(stock[i].getCgeneralbid());
      }
      String sTemp[] = new String[vTemp.size()];
      vTemp.copyInto(sTemp);
      // 临时表
      String strSetId = null;
      try {
        nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
        strSetId = dmoTempTbl.insertTempTable(sTemp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU47,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strSetId == null || strSetId.trim().equals("()")) {
          strSetId = " ('ErrorPk') ";
        }
      }
      catch (Exception e) {
        throw new SQLException(e.getMessage());
      }
      /*
       * sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp); for (int i = 0; i <
       * sTemp.length - 1; i++) sqlIdOr += " cgeneralbid in " + sTemp[i] + " or ";
       * sqlIdOr += " cgeneralbid in " + sTemp[sTemp.length - 1];
       */
      // 查询入库单子表新时间戳
      sql = "select cgeneralbid, ts from ic_general_b where cgeneralbid in "
          + strSetId;
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      String strId = null, strTs = null;
      Vector vId = new Vector(), vTs = new Vector();
      while (rs.next()) {
        strId = rs.getString(1);
        strTs = rs.getString(2);
        if (strId == null || strId.trim().length() == 0 || strTs == null
            || strTs.trim().length() == 0 || vId.contains(strId))
          continue;
        vId.addElement(strId);
        vTs.addElement(strTs);
      }
      if (vId.size() > 0) {
        struIdTs = new IdTsData();
        struIdTs.setTableName("ic_general_b");
        String[] saTmp = new String[vId.size()];
        vId.copyInto(saTmp);
        struIdTs.setIDs(saTmp);
        saTmp = new String[vId.size()];
        vTs.copyInto(saTmp);
        struIdTs.setTSs(saTmp);
        idtsRet[0] = struIdTs;
      }
      // 查询入库单结算子子表新时间戳
      sql = "select cgeneralbid, ts from ic_general_bb3 where cgeneralbid in "
          + strSetId;
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      vId = new Vector();
      vTs = new Vector();
      while (rs.next()) {
        strId = rs.getString(1);
        strTs = rs.getString(2);
        if (strId == null || strId.trim().length() == 0 || strTs == null
            || strTs.trim().length() == 0 || vId.contains(strId))
          continue;
        vId.addElement(strId);
        vTs.addElement(strTs);
      }
      if (vId.size() > 0) {
        struIdTs = new IdTsData();
        struIdTs.setTableName("ic_general_bb3");
        String[] saTmp = new String[vId.size()];
        vId.copyInto(saTmp);
        struIdTs.setIDs(saTmp);
        saTmp = new String[vId.size()];
        vTs.copyInto(saTmp);
        struIdTs.setTSs(saTmp);
        idtsRet[1] = struIdTs;
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt1 != null) {
          stmt1.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ps.settle.SettleDMO", "updateStock", new Object[] {
      stock
    });
    /** ********************************************************** */
    //
    return idtsRet;
  }

  /*
   * 为入库单获取暂估价格
   */
  public StockVO[] replacePrice(StockVO VOs[]) throws BusinessException {

    if (VOs == null || VOs.length == 0)
      return VOs;

    // 获取暂估单价方式
    String unitCode = VOs[0].getPk_corp();
    String sEstPriceSource = null;
    String sPara = "N";// PO45
    String sPricePolicy = "无税价格优先";
    try {
      ISysInitQry myService = (ISysInitQry) nc.bs.framework.common.NCLocator
          .getInstance().lookup(ISysInitQry.class.getName());
      nc.vo.pub.para.SysInitVO initVO = myService.queryByParaCode(unitCode,
          "PO27");
      if (initVO == null)
        return VOs;
      sEstPriceSource = initVO.getValue();
      nc.vo.pub.para.SysInitVO tempVO = myService.queryByParaCode(unitCode,
          "PO45");
      if (tempVO != null)
        sPara = tempVO.getValue();
      tempVO = myService.queryByParaCode(unitCode, "PO28");
      if (tempVO != null)
        sPricePolicy = tempVO.getValue();
    }
    catch (Exception e) {
      /* 未正确获取暂估单价方式，处理为不设置默认暂估单价!此异常不影响业务流程不必抛出 */
      SCMEnv.out(e);
      return VOs;
    }

    if (sEstPriceSource == null || sEstPriceSource.trim().length() == 0)
      return VOs;

    ArrayList listJHJ = null;
    Vector vMangId = new Vector();
    Vector vCalBId = new Vector();
    Vector vWareId = new Vector();

    for (int i = 0; i < VOs.length; i++) {
      vMangId.addElement(VOs[i].getCmangid());
      vCalBId.addElement(VOs[i].getCstoreorganization());
      vWareId.addElement(VOs[i].getCwarehouseid());
    }
    String[] saMangId = new String[vMangId.size()];
    vMangId.copyInto(saMangId);
    String[] saCalBId = new String[vMangId.size()];
    vCalBId.copyInto(saCalBId);
    String[] saWareId = new String[vMangId.size()];
    vWareId.copyInto(saWareId);

    // 获取计划价,参考成本和计价方式
    nc.bs.ps.cost.CostanalyseDMO jhjDmo = null;
    try {
      jhjDmo = new nc.bs.ps.cost.CostanalyseDMO();
      if (sEstPriceSource.trim().equals("计划价") || sPara.equals("Y")
          || sPara.equals("是"))
        listJHJ = jhjDmo.queryPlanRefCost(unitCode, saMangId, saCalBId,
            saWareId);
    }
    catch (Exception e) {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40040503", "UPP40040503-000020")/*
                                                         * @res
                                                         * "获取计划价时出现异常，请稍后再试！"
                                                         */);
    }
    UFDouble nPlanPrice[] = null, nPriceMethod[] = null;
    if (listJHJ != null && listJHJ.size() >= 3) {
      nPlanPrice = (UFDouble[]) listJHJ.get(0);
      nPriceMethod = (UFDouble[]) listJHJ.get(2);
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    if (sEstPriceSource.trim().equals("订单价")) {
      try {
        con = getConnection();

        Hashtable t21 = new Hashtable(), t61 = new Hashtable();
        Vector v21 = new Vector(), v61 = new Vector();
        for (int i = 0; i < VOs.length; i++) {
          if (VOs[i].getCfirsttype() != null
              && VOs[i].getCfirsttype().equals("21")
              && VOs[i].getCfirstbillbid() != null
              && !v21.contains(VOs[i].getCfirstbillbid()))
            v21.addElement(VOs[i].getCfirstbillbid());
          if (VOs[i].getCfirsttype() != null
              && VOs[i].getCfirsttype().equals("61")
              && VOs[i].getCfirstbillbid() != null
              && !v61.contains(VOs[i].getCfirstbillbid()))
            v61.addElement(VOs[i].getCfirstbillbid());
        }

        if (v21.size() > 0) {
          // 获取采购订单本币价格
          String sqlsql = "select corder_bid, nordernum, nmoney, ntaxpricemny from po_order_b where dr = 0 and corder_bid in ";
          String sOrderBID[] = new String[v21.size()];
          v21.copyInto(sOrderBID);
          // 临时表
          String strSetId = null;
          try {
            nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
            strSetId = dmoTempTbl.insertTempTable(sOrderBID,
                nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34,
                nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
            if (strSetId == null || strSetId.trim().equals("()"))
              strSetId = " ('ErrorPk') ";
            sqlsql += strSetId;
          }
          catch (Exception e) {
            throw new SQLException(e.getMessage());
          }

          stmt = con.prepareStatement(sqlsql);
          rs = stmt.executeQuery();
          String s = null;
          Object o1 = null, o2 = null, o3 = null;
          UFDouble d1 = null, d2 = null, d3 = null;
          while (rs.next()) {
            s = rs.getString(1);
            o1 = rs.getObject(2);
            o2 = rs.getObject(3);
            o3 = rs.getObject(4);
            if (s != null && o1 != null && o2 != null && o3 != null) {
              d1 = new UFDouble(o1.toString());
              d2 = new UFDouble(o2.toString());
              d3 = new UFDouble(o3.toString());
              if (Math.abs(d1.doubleValue()) > 0)
                t21.put(s, new UFDouble[] {
                    d1, d2, d3
                });
            }
          }
          if (rs != null)
            rs.close();
          if (stmt != null)
            stmt.close();
        }

        if (v61.size() > 0) {
          // 获取委外订单本币价格
          String sqlsql = "select corder_bid, nordernum, nmoney, nsummny from sc_order_b where dr = 0 and corder_bid in ";
          String sOrderBID[] = new String[v61.size()];
          v61.copyInto(sOrderBID);
          // 临时表
          String strSetId = null;
          try {
            nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
            strSetId = dmoTempTbl.insertTempTable(sOrderBID,
                nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34,
                nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
            if (strSetId == null || strSetId.trim().equals("()"))
              strSetId = " ('ErrorPk') ";
            sqlsql += strSetId;
          }
          catch (Exception e) {
            throw new SQLException(e.getMessage());
          }

          stmt = con.prepareStatement(sqlsql);
          rs = stmt.executeQuery();
          String s = null;
          Object o1 = null, o2 = null, o3 = null;
          UFDouble d1 = null, d2 = null, d3 = null;
          while (rs.next()) {
            s = rs.getString(1);
            o1 = rs.getObject(2);
            o2 = rs.getObject(3);
            o3 = rs.getObject(4);
            if (s != null && o1 != null && o2 != null && o3 != null) {
              d1 = new UFDouble(o1.toString());
              d2 = new UFDouble(o2.toString());
              d3 = new UFDouble(o3.toString());
              if (Math.abs(d1.doubleValue()) > 0)
                t61.put(s, new UFDouble[] {
                    d1, d2, d3
                });
            }
          }
          if (rs != null)
            rs.close();
          if (stmt != null)
            stmt.close();
        }

        if (t21.size() > 0) {
          // 设置采购订单本币价格
          for (int i = 0; i < VOs.length; i++) {
            if (VOs[i].getCfirsttype() != null
                && VOs[i].getCfirsttype().equals("21")
                && VOs[i].getCfirstbillbid() != null
                && t21.get(VOs[i].getCfirstbillbid()) != null) {
              UFDouble dd[] = (UFDouble[]) t21.get(VOs[i].getCfirstbillbid());
              if (VOs[i].getNinnum().equals(dd[0])) {
                // 先获取金额, 再计算单价
                VOs[i].setBMoney(new UFBoolean(true));
                if (sPricePolicy.equals("无税价格优先")) {
                  VOs[i].setNmoney(dd[1]);
                  if (VOs[i].getNinnum() != null
                      && Math.abs(VOs[i].getNinnum().doubleValue()) > 0) {
                    // double d = VOs[i].getNmoney().doubleValue() /
                    // VOs[i].getNinnum().doubleValue();
                    // VOs[i].setNprice(new UFDouble(d));
                    VOs[i].setNprice(VOs[i].getNmoney().div(VOs[i].getNinnum(),
                        BsPuTool.getPriceDigit(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
                }
                else {
                  VOs[i].setNtotalmoney(dd[2]);
                  if (VOs[i].getNinnum() != null
                      && Math.abs(VOs[i].getNinnum().doubleValue()) > 0) {
                    // double d = VOs[i].getNtotalmoney().doubleValue() /
                    // VOs[i].getNinnum().doubleValue();
                    // VOs[i].setNtaxprice(new UFDouble(d));
                    VOs[i].setNtaxprice(VOs[i].getNtotalmoney().div(
                        VOs[i].getNinnum(), BsPuTool.getPriceDigit(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
                }
              }
              else {
                // 先获取单价,再计算金额
                VOs[i].setBMoney(new UFBoolean(false));
                if (sPricePolicy.equals("无税价格优先")) {
                  VOs[i].setNprice(dd[1].div(dd[0], BsPuTool
                      .getPriceDigit(null)));
                  if (VOs[i].getNinnum() != null) {
                    // double d = VOs[i].getNinnum().doubleValue() *
                    // VOs[i].getNprice().doubleValue();
                    // VOs[i].setNmoney(new UFDouble(d));
                    VOs[i].setNmoney(VOs[i].getNinnum().multiply(
                        VOs[i].getNprice(), BsPuTool.getCCurrDecimal(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
                }
                else {
                  VOs[i].setNtaxprice(dd[2].div(dd[0], BsPuTool
                      .getPriceDigit(null)));
                  if (VOs[i].getNinnum() != null) {
                    // double d = VOs[i].getNinnum().doubleValue() *
                    // VOs[i].getNtaxprice().doubleValue();
                    // VOs[i].setNtotalmoney(new UFDouble(d));
                    VOs[i].setNtotalmoney(VOs[i].getNinnum().multiply(
                        VOs[i].getNtaxprice(), BsPuTool.getCCurrDecimal(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
                }
              }
            }
            else {
              if (sPricePolicy.equals("无税价格优先")) {
                VOs[i].setNprice(new UFDouble(0));
                VOs[i].setNmoney(new UFDouble(0));
                VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
              }
              else {
                VOs[i].setNtaxprice(new UFDouble(0));
                VOs[i].setNtotalmoney(new UFDouble(0));
                VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
              }
            }
          }
        }

        if (t61.size() > 0) {
          // 设置委外订单本币价格
          for (int i = 0; i < VOs.length; i++) {
            if (VOs[i].getCfirsttype() != null
                && VOs[i].getCfirsttype().equals("61")
                && VOs[i].getCfirstbillbid() != null
                && t61.get(VOs[i].getCfirstbillbid()) != null) {
              UFDouble dd[] = (UFDouble[]) t61.get(VOs[i].getCfirstbillbid());
              if (VOs[i].getNinnum().equals(dd[0])) {
                // 先获取金额, 再计算单价
                VOs[i].setBMoney(new UFBoolean(true));
                if (sPricePolicy.equals("无税价格优先")) {
                  VOs[i].setNmoney(dd[1]);
                  if (VOs[i].getNinnum() != null
                      && Math.abs(VOs[i].getNinnum().doubleValue()) > 0) {
                    // double d = VOs[i].getNmoney().doubleValue() /
                    // VOs[i].getNinnum().doubleValue();
                    // VOs[i].setNprice(new UFDouble(d));
                    VOs[i].setNprice(VOs[i].getNmoney().div(VOs[i].getNinnum(),
                        BsPuTool.getPriceDigit(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
                }
                else {
                  VOs[i].setNtotalmoney(dd[2]);
                  if (VOs[i].getNinnum() != null
                      && Math.abs(VOs[i].getNinnum().doubleValue()) > 0) {
                    // double d = VOs[i].getNtotalmoney().doubleValue() /
                    // VOs[i].getNinnum().doubleValue();
                    // VOs[i].setNtaxprice(new UFDouble(d));
                    VOs[i].setNtaxprice(VOs[i].getNtotalmoney().div(
                        VOs[i].getNinnum(), BsPuTool.getPriceDigit(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
                }
              }
              else {
                // 先获取单价,再计算金额
                VOs[i].setBMoney(new UFBoolean(false));
                if (sPricePolicy.equals("无税价格优先")) {
                  VOs[i].setNprice(dd[1].div(dd[0], BsPuTool
                      .getPriceDigit(null)));
                  if (VOs[i].getNinnum() != null) {
                    // double d = VOs[i].getNinnum().doubleValue() *
                    // VOs[i].getNprice().doubleValue();
                    // VOs[i].setNmoney(new UFDouble(d));
                    VOs[i].setNmoney(VOs[i].getNinnum().multiply(
                        VOs[i].getNprice(), BsPuTool.getCCurrDecimal(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
                }
                else {
                  VOs[i].setNtaxprice(dd[2].div(dd[0], BsPuTool
                      .getPriceDigit(null)));
                  if (VOs[i].getNinnum() != null) {
                    // double d = VOs[i].getNinnum().doubleValue() *
                    // VOs[i].getNtaxprice().doubleValue();
                    // VOs[i].setNtotalmoney(new UFDouble(d));
                    VOs[i].setNtotalmoney(VOs[i].getNinnum().multiply(
                        VOs[i].getNtaxprice(), BsPuTool.getCCurrDecimal(null)));
                  }
                  VOs[i]
                      .setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
                }
              }
            }
            else {
              if (sPricePolicy.equals("无税价格优先")) {
                VOs[i].setNprice(new UFDouble(0));
                VOs[i].setNmoney(new UFDouble(0));
                VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
              }
              else {
                VOs[i].setNtaxprice(new UFDouble(0));
                VOs[i].setNtotalmoney(new UFDouble(0));
                VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
              }
            }

          }
        }
      }
      catch (SQLException e) {
        throw new BusinessException(e.getMessage());
      }
      finally {
        try {
          if (stmt != null)
            stmt.close();
        }
        catch (Exception e) {
        }
        try {
          if (con != null)
            con.close();
        }
        catch (Exception e) {
        }
      }

      int k = 0;
      for (int i = 0; i < VOs.length; i++) {
        if (sPara.equals("是") && nPlanPrice != null && nPlanPrice.length > 0
            && nPriceMethod[k] != null && nPriceMethod[k].doubleValue() == 5) {
          VOs[i].setNprice(PuPubVO.getUFDouble_NullAsZero(nPlanPrice[k]).add(
              new UFDouble(0.0), BsPuTool.getPriceDigit(null)));
          UFDouble nNum = VOs[i].getNinnum();
          if (nNum != null) {
            // double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
            // VOs[i].setNmoney(new UFDouble(d));
            VOs[i].setNmoney(nNum.multiply(VOs[i].getNprice(), BsPuTool
                .getCCurrDecimal(null)));
            VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
          }
        }
        k++;
      }

      return VOs;
    }

    // 存货唯一性
    Vector vTemp = new Vector();
    for (int i = 0; i < VOs.length; i++) {
      if (!vTemp.contains(VOs[i].getCbaseid()))
        vTemp.addElement(VOs[i].getCbaseid());
    }
    String sBaseID[] = new String[vTemp.size()];
    vTemp.copyInto(sBaseID);
    // 临时表
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTempTbl.insertTempTable(sBaseID,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU35,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || strSetId.trim().equals("()")) {
        strSetId = " ('ErrorPk') ";
      }
    }
    catch (Exception e) {
      throw new BusinessException(e.getMessage());
    }
    //
    String sql = null;
    if (sEstPriceSource.trim().equals("计划价")) {
      sql = "select 1 from bd_produce where 1<0 ";

    }
    else if (sEstPriceSource.trim().equals("最新进价")) {
      sql = "select A.pk_corp, cbaseid, nmoney, nordernum, ntaxpricemny, dorderdate, B.ts from po_order A, po_order_b B ";
      sql += "where A.dr = 0 and B.dr = 0 and A.corderid = B.corderid and iisactive <> 3 and A.pk_corp = '"
          + unitCode + "' and cbaseid in ";
      sql += strSetId + " ";
      sql += "order by dorderdate desc, B.ts desc";
    }

    if (sql == null)
      return VOs;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();

      if (sEstPriceSource.trim().equals("计划价")) {
        int k = 0;
        for (int i = 0; i < VOs.length; i++) {
          VOs[i].setNprice(new UFDouble(0));
          VOs[i].setNmoney(new UFDouble(0));
          if (nPlanPrice != null && nPlanPrice.length > 0) {
            VOs[i].setNprice(PuPubVO.getUFDouble_NullAsZero(nPlanPrice[k]).add(
                new UFDouble(0.0), BsPuTool.getPriceDigit(null)));
            UFDouble nNum = VOs[i].getNinnum();
            if (nNum != null) {
              // double d = nNum.doubleValue() *
              // VOs[i].getNprice().doubleValue();
              // VOs[i].setNmoney(new UFDouble(d));
              VOs[i].setNmoney(nNum.multiply(VOs[i].getNprice(), BsPuTool
                  .getCCurrDecimal(null)));
            }
          }
          k++;
          VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
        }

      }
      else if (sEstPriceSource.trim().equals("最新进价")) {
        // 最新进价
        Hashtable t = new Hashtable();
        while (rs.next()) {
          String s = rs.getString(1);
          String ss = rs.getString(2);
          UFDouble nMoney = null;
          UFDouble nNum = null;
          UFDouble nSumMny = null;
          Object oTemp = rs.getObject(3);
          if (oTemp != null && oTemp.toString().trim().length() > 0)
            nMoney = new UFDouble(oTemp.toString());
          oTemp = rs.getObject(4);
          if (oTemp != null && oTemp.toString().trim().length() > 0)
            nNum = new UFDouble(oTemp.toString());
          oTemp = rs.getObject(5);
          if (oTemp != null && oTemp.toString().trim().length() > 0)
            nSumMny = new UFDouble(oTemp.toString());

          if (s != null && s.trim().length() > 0 && ss != null
              && ss.trim().length() > 0 && t.get(s + ss) == null) {
            t.put(s + ss, new UFDouble[] {
                nNum, nMoney, nSumMny
            });
          }
        }
        if (rs != null)
          rs.close();

        int k = 0;
        for (int i = 0; i < VOs.length; i++) {
          if (sPricePolicy.equals("无税价格优先")) {
            VOs[i].setNprice(new UFDouble(0));
            VOs[i].setNmoney(new UFDouble(0));
            Object oTemp = t.get(VOs[i].getPk_purcorp() + VOs[i].getCbaseid());
            if (oTemp != null) {
              UFDouble data[] = (UFDouble[]) oTemp;
              UFDouble nMoney = data[1];
              UFDouble nNum = data[0];
              if (nMoney != null && nNum != null
                  && Math.abs(nNum.doubleValue()) > 0) {
                // double d = nMoney.doubleValue() / nNum.doubleValue();
                // VOs[i].setNprice(new UFDouble(d));
                VOs[i]
                    .setNprice(nMoney.div(nNum, BsPuTool.getPriceDigit(null)));
                nNum = VOs[i].getNinnum();
                if (nNum != null) {
                  // d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
                  // VOs[i].setNmoney(new UFDouble(d));
                  VOs[i].setNmoney(nNum.multiply(VOs[i].getNprice(), BsPuTool
                      .getCCurrDecimal(null)));
                }
              }
            }
            VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
          }
          else {
            VOs[i].setNtaxprice(new UFDouble(0));
            VOs[i].setNtotalmoney(new UFDouble(0));
            Object oTemp = t.get(VOs[i].getPk_purcorp() + VOs[i].getCbaseid());
            if (oTemp != null) {
              UFDouble data[] = (UFDouble[]) oTemp;
              UFDouble nSumMny = data[2];
              UFDouble nNum = data[0];
              if (nSumMny != null && nNum != null
                  && Math.abs(nNum.doubleValue()) > 0) {
                // double d = nSumMny.doubleValue() / nNum.doubleValue();
                // VOs[i].setNtaxprice(new UFDouble(d));
                VOs[i].setNtaxprice(nSumMny.div(nNum, BsPuTool
                    .getPriceDigit(null)));
                nNum = VOs[i].getNinnum();
                if (nNum != null) {
                  // d = nNum.doubleValue() *
                  // VOs[i].getNtaxprice().doubleValue();
                  // VOs[i].setNtotalmoney(new UFDouble(d));
                  VOs[i].setNtotalmoney(nNum.multiply(VOs[i].getNtaxprice(),
                      BsPuTool.getCCurrDecimal(null)));
                }
              }
            }
            VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
          }

          if (sPara.equals("是") && nPlanPrice != null && nPlanPrice.length > 0
              && nPriceMethod[k] != null && nPriceMethod[k].doubleValue() == 5) {
            VOs[i].setNprice(PuPubVO.getUFDouble_NullAsZero(nPlanPrice[k]).add(
                new UFDouble(0.0), BsPuTool.getPriceDigit(null)));
            UFDouble nNum = VOs[i].getNinnum();
            if (nNum != null && nPlanPrice[k] != null) {
              // double d = nNum.doubleValue() *
              // VOs[i].getNprice().doubleValue();
              // VOs[i].setNmoney(new UFDouble(d));
              VOs[i].setNmoney(nNum.multiply(VOs[i].getNprice(), BsPuTool
                  .getCCurrDecimal(null)));
            }
            VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
          }
          k++;
        }
      }
    }
    catch (SQLException e) {
      throw new BusinessException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    return VOs;
  }

  /*
   * 更新入库单(采购订单)的累计开票数量 <p>since v502,支持检查数量容差增加二参数： <p>1)、bDiscardFlag 作废不检查
   * 2)、bUserConfirmed 用户是否确认
   */
  public void updateSignNum(InvoiceItemVO VOs[], boolean bDiscardFlag,
      boolean bUserConfirmed) throws BusinessException {
    String sql = "update ic_general_bb3 set nsignnum = isnull(nsignnum,0) + ? where dr = 0 and cgeneralbid = ?";
    String strSqlOrd = "update po_order_b set naccuminvoicenum = isnull(naccuminvoicenum,0) + ? where dr = 0 and corder_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();

      // 更新入库单
      stmt = prepareStatement(con, sql);

      for (int i = 0; i < VOs.length; i++) {
        if (VOs[i].getNinvoicenum() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setDouble(1, VOs[i].getNinvoicenum().doubleValue());
        }
        stmt.setString(2, VOs[i].getCupsourcebillrowid());
        executeUpdate(stmt);
      }
      executeBatch(stmt);

      // 如果入库单来源于采购订单，再更新采购订单
      stmt = prepareStatement(con, strSqlOrd);
      ArrayList<String> listOrderBid = new ArrayList<String>();
      for (int i = 0; i < VOs.length; i++) {
        if (VOs[i].getCsourcebilltype() == null
            || !ScmConst.PO_Order.equals(VOs[i].getCsourcebilltype().trim())) {
          continue;
        }
        listOrderBid.add(VOs[i].getCsourcebillrowid());
        if (VOs[i].getNinvoicenum() == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setDouble(1, VOs[i].getNinvoicenum().doubleValue());
        }
        stmt.setString(2, VOs[i].getCsourcebillrowid());
        executeUpdate(stmt);
      }
      executeBatch(stmt);

      // 如果是虚拟发票的作废操作，则不必检查
      if (bDiscardFlag) {
        return;
      }
      // since v502, 如果更新了订单表体行，则要检查一下订单行发票数量与订单数量的容差控制
      if (listOrderBid.size() > 0) {
        ISysInitQry srvSysInit = (ISysInitQry) NCLocator.getInstance().lookup(
            ISysInitQry.class.getName());
        String strCtrlMode = srvSysInit.getParaString(BsPuTool
            .getLoginCorp(VOs[0].getPk_corp()), "PO02");
        if ("不控制".equals(strCtrlMode)/*-=notranslate=-*/
            || ("提示".equals(strCtrlMode) && bUserConfirmed)) {/*-=notranslate=-*/
          return;
        }
        // 组织查询语句
        UFDouble ufdCtrlRate = PuPubVO.getUFDouble_NullAsZero(srvSysInit
            .getParaString(BsPuTool.getLoginCorp(VOs[0].getPk_corp()), "PO03"));
        ufdCtrlRate = ufdCtrlRate.div(100.00);
        String strCheckSql = "select corder_bid from po_order_b where corder_bid in ";
        String strTempTableSet = new TempTableUtil().getSubSql(listOrderBid);
        strCheckSql += strTempTableSet + " ";
        strCheckSql += "and coalesce(naccuminvoicenum,0) > nordernum * (1+"
            + ufdCtrlRate + ") and dr = 0 ";
        // 查询
        stmt = prepareStatement(con, strCheckSql);
        ArrayList<String> listErrorOrderBid = new ArrayList<String>();
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
          listErrorOrderBid.add(rs.getString(1));
        }
        // 组织报错信息：下列发票行回写订单后，累计发票数量超出订单数量容差范围。发票行号列表为：{0}
        String strErrRowNo = "";
        if (listErrorOrderBid.size() > 0) {
          for (int i = 0; i < VOs.length; i++) {
            if (VOs[i].getCsourcebilltype() == null
                || !ScmConst.PO_Order
                    .equals(VOs[i].getCsourcebilltype().trim())
                || !listErrorOrderBid.contains(VOs[i].getCsourcebilltype()
                    .trim())) {
              continue;
            }
            strErrRowNo += VOs[i].getCrowno() + ",";
          }
          if (strErrRowNo.length() > 0) {
            strErrRowNo = strErrRowNo.substring(0, strErrRowNo.length() - 1);
          }
        }
        if (strErrRowNo.length() > 0) {
          // 不保存
          if ("不保存".equals(strCtrlMode)) {/*-=notranslate=-*/
            throw new BusinessException(NCLangResOnserver.getInstance()
                .getStrByID("40040503", "UPP40040503-000101", null,
                    new String[] {
                      strErrRowNo
                    }));

          }
          // 提示
          throw new RwtPiToPoException(NCLangResOnserver.getInstance()
              .getStrByID("40040503", "UPP40040503-000101", null, new String[] {
                strErrRowNo
              }));
        }
      }
    }
    catch (SQLException e) {
      SCMEnv.out(e);
      throw new BusinessException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null)
          stmt.close();
      }
      catch (Exception e) {
      }
      try {
        if (con != null)
          con.close();
      }
      catch (Exception e) {
      }
    }
  }

  /*
   * 作废结算单时,对销售结算的结算单,需要更新订单累计开票数量
   */
  public void updateAccumInvoiceNumForOrder(IinvoiceVO invoiceVO[])
      throws SQLException {
    Hashtable t = new Hashtable();
    for (int i = 0; i < invoiceVO.length; i++) {
      if (invoiceVO[i].getCorder_bid() != null) {
        if (!t.containsKey(invoiceVO[i].getCorder_bid()))
          t.put(invoiceVO[i].getCorder_bid(), invoiceVO[i].getNinvoicenum());
        else {
          UFDouble d = (UFDouble) t.get(invoiceVO[i].getCorder_bid());
          d.add(invoiceVO[i].getNinvoicenum());
          t.put(invoiceVO[i].getCorder_bid(), d);
        }
      }
    }
    if (t.size() == 0)
      return;

    String sql = "update po_order_b set naccuminvoicenum = isnull(naccuminvoicenum,0) + ? where dr = 0 and corder_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);

      Enumeration keys = t.keys();

      while (keys.hasMoreElements()) {
        String id = (String) keys.nextElement();
        UFDouble d = (UFDouble) t.get(id);
        if (d == null) {
          stmt.setNull(1, Types.INTEGER);
        }
        else {
          stmt.setDouble(1, -1 * d.doubleValue());
        }
        stmt.setString(2, id);
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null)
          stmt.close();
      }
      catch (Exception e) {
      }
      try {
        if (con != null)
          con.close();
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 南京雨润专用，支持精度处理
   * 
   * @param sCondition
   * @param nPriceDigit
   * @param nMoneyDigit
   * @return
   * @throws SQLException
   */
  public StockVO[] queryStockDetail(String sCondition, int nPriceDigit,
      int nMoneyDigit) throws SQLException {

    String sql = "";
    sql = "select cproviderid, vbillcode, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, B.cinvbasid, ninnum, naccountnum1, naccountmny, npprice, npmoney, cdptid, cbizid,A.pk_corp, csourcebillhid, csourcebillbid, vsourcebillcode, cbiztype, csourcetype, cbilltypecode, bzgflag, ";
    sql += "cbizid, cprojectid, cprojectphaseid, vfree1, vfree2, vfree3, vfree4, vfree5, cbilltypecode, cgeneralbb3, A.ts, B.ts, C.ts, cfirstbillhid, cfirstbillbid, cfirsttype, vbatchcode, bzgyfflag, naccumwashnum ";
    sql += "from ic_general_h A,ic_general_b B,ic_general_bb3 C ";
    sql += "where A.dr = 0 and B.dr=0 and A.cgeneralhid=B.cgeneralhid and A.cgeneralhid=C.cgeneralhid and B.cgeneralbid=C.cgeneralbid and (fbillflag = 3 or fbillflag = 4) ";
    sql += sCondition;

    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        StockVO stock = new StockVO();
        // cproviderid :
        String cproviderid = rs.getString(1);
        stock.setCprovidermangid(cproviderid == null ? "" : cproviderid.trim());
        // vbillcode :
        String vbillcode = rs.getString(2);
        stock.setVbillcode(vbillcode == null ? null : vbillcode.trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(3);
        stock.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
        // cgeneralbid :
        String cgeneralbid = rs.getString(4);
        stock.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        stock.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        stock.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninnum :
        Object ninnum = rs.getObject(7);
        stock.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(
            ninnum.toString()));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(8);
        stock.setNaccumsettlenum(naccumsettnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettnum.toString()));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(9);
        stock.setNaccumsettlemny(naccumsettmny == null ? new UFDouble(0.0)
            : new UFDouble(naccumsettmny.toString(), nMoneyDigit));
        // nprice :
        Object nprice = rs.getObject(10);
        stock.setNprice(nprice == null ? new UFDouble(0.0) : new UFDouble(
            nprice.toString(), nPriceDigit));
        // nmny :
        Object nmny = rs.getObject(11);
        stock.setNmoney(nmny == null ? new UFDouble(0.0) : new UFDouble(nmny
            .toString(), nMoneyDigit));
        // cdeptid :
        String cdeptid = rs.getString(12);
        stock.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(13);
        stock.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // cunitid :
        String cunitid = rs.getString(14);
        stock.setPk_corp(cunitid == null ? null : cunitid.trim());
        // csourcebillhid :
        String csourcebillhid = rs.getString(15);
        stock.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid
            .trim());
        // csourcebillbid :
        String csourcebillbid = rs.getString(16);
        stock.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid
            .trim());
        // vsourcebillcode :
        String vsourcebillcode = rs.getString(17);
        stock.setVsourcebillcode(vsourcebillcode == null ? null
            : vsourcebillcode.trim());
        // cbiztype :
        String cbiztype = rs.getString(18);
        stock.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // csourcetype :
        String csourcetype = rs.getString(19);
        stock.setCsourcebilltype(csourcetype == null ? null : csourcetype
            .trim());

        // cbilltypecode :
        String cbilltypecode = rs.getString(20);
        stock.setCbilltype(cbilltypecode == null ? null : cbilltypecode.trim());
        // bzgflag :
        String bzgflag = rs.getString(21);
        stock.setBzgflag(bzgflag == null ? new UFBoolean(false)
            : new UFBoolean(bzgflag.trim()));

        // cbizid :
        String cbizid = rs.getString(22);
        stock.setCbizid(cbizid == null ? null : cbizid.trim());
        // cprojectid :
        String cprojectid = rs.getString(23);
        stock.setCprojectid(cprojectid == null ? null : cprojectid.trim());
        // cprojectphaseid :
        String cprojectphaseid = rs.getString(24);
        stock.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        // vfree1 :
        String vfree1 = rs.getString(25);
        stock.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(26);
        stock.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(27);
        stock.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(28);
        stock.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(29);
        stock.setVfree5(vfree5 == null ? null : vfree5.trim());
        // cbilltype :
        String cbilltype = rs.getString(30);
        stock.setCbilltype(cbilltype == null ? null : cbilltype.trim());
        // cgeneralbb3 :
        String cgeneralbb3 = rs.getString(31);
        stock.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3.trim());
        // ts1 :
        String ts1 = rs.getString(32);
        stock.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(33);
        stock.setTs2(ts2 == null ? null : ts2.trim());
        // ts3 :
        String ts3 = rs.getString(34);
        stock.setTs3(ts3 == null ? null : ts3.trim());
        // cfirstbillhid :
        String cfirstbillhid = rs.getString(35);
        stock.setCfirstbillhid(cfirstbillhid == null ? null : cfirstbillhid
            .trim());
        // cfirstbillbid :
        String cfirstbillbid = rs.getString(36);
        stock.setCfirstbillbid(cfirstbillbid == null ? null : cfirstbillbid
            .trim());
        // cfirsttype :
        String cfirsttype = rs.getString(37);
        stock.setCfirsttype(cfirsttype == null ? null : cfirsttype.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(38);
        stock.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // bzgyfflag :
        String bzgyfflag = rs.getString(39);
        stock.setBzgyfflag(bzgyfflag == null ? new UFBoolean(false)
            : new UFBoolean(bzgyfflag.trim()));
        // naccumwashnum :
        Object naccumwashnum = rs.getObject(40);
        stock.setNaccumwashnum(naccumwashnum == null ? new UFDouble(0.0)
            : new UFDouble(naccumwashnum.toString()));

        // 入库单的入库数量不为0,才能参与结算或暂估
        if (stock.getNinnum().doubleValue() != 0.0) {
          // 委外入库单没有暂估,不能参与结算
          if (cbilltypecode != null && cbilltypecode.trim().equals("47")) {
            if (bzgflag != null
                && (bzgflag.trim().equals("Y") || bzgflag.trim().equals("y")))
              v.addElement(stock);
          }
          else {
            v.addElement(stock);
          }
        }
      }

      if (rs != null) {
        rs.close();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }
    return stocks;
  }

  /**
   * 
   * 方法功能描述：更新入库单采购费用结算累计结算次数
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param stockRowList
   * @param flag
   * @throws SQLException
   * <p>
   * @author zhanghongfang
   * @time 2008-8-14 上午10:11:14
   */
  
  public void updateFeeSettletimes(ArrayList<String> stockRowList, boolean flag)
      throws SQLException {

    if (stockRowList == null || stockRowList.size() == 0)
      return;

    String sql = "";
    if (flag) {
      sql = "update ic_general_b set nfeesettletimes = isnull(nfeesettletimes,0)+1  where cgeneralbid = ? ";
    }
    else {
      sql = "update ic_general_b set nfeesettletimes = nfeesettletimes-1  where cgeneralbid = ? ";
    }

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = stockRowList.size();
      for (int i = 0; i < iLen; i++) {
        if (stockRowList.get(i) == null)
          continue;
        stmt.setString(1, stockRowList.get(i).trim());
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 
   * 方法功能描述：更新费用结算单体 运费是否第一次结算 标志位
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param idList
   * @param flag
   * @throws SQLException
   * <p>
   * @author zhanghongfang
   * @time 2008-8-14 上午10:11:29
   */
  
  public void updateYfFirstSettle(ArrayList<String> idList, boolean flag)
      throws SQLException {

    String sql = "";
    if (flag) {
      sql = "update po_settlebill_b set byffirstsettle = 'Y'  where csettlebill_bid = ? ";
    }
    else {
      sql = "update po_settlebill_b set byffirstsettle = 'N'  where csettlebill_bid = ? ";
    }

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = idList.size();
      for (int i = 0; i < iLen; i++) {

        stmt.setString(1, idList.get(i).trim());
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 方法功能描述：查询满足费用结算条件的其他入库单进行费用结算
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param unitCode
   * @param sCondition
   * @return
   * @throws BusinessException
   *           <p>
   * @author zhanghongfang
   * @time 2008-7-31 上午09:08:52
   */
  public StockVO[] queryEndOtherStock(String unitCode, String sCondition)
      throws BusinessException {

    StringBuffer sqlBuff = new StringBuffer();
    sqlBuff
        .append(" select distinct cproviderid, A.vbillcode, A.cgeneralhid, B.cgeneralbid,B.cinventoryid,pk_invbasdoc, ninnum,cdptid, cbizid,A.pk_corp, A.ts,B.ts, vbatchcode, B.vfree1, "
            + "B.vfree2,B.vfree3,B.vfree4, B.vfree5,B.csourcebillhid, B.csourcebillbid, B.csourcetype, B.cfirstbillhid, B.cfirstbillbid, B.cfirsttype,B.vnotebody"
            + ", B.hsl,B.pk_invoicecorp,B.bzgflag, nfeesettletimes, A.cbilltypecode ,B.nmny ");
    sqlBuff
    .append(" from ic_general_h A, bd_invmandoc D,bd_stordoc S,  ic_general_b B inner join ia_bill_b on B.cgeneralbid = ia_bill_b.csourcebillitemid and ia_bill_b.dr = 0 ");

    sqlBuff
        .append(" where A.cwarehouseid = S.pk_stordoc and A.dr = 0 and B.dr = 0 and A.cgeneralhid = B.cgeneralhid   and D.pk_invmandoc = B.cinventoryid");

    sqlBuff.append(" and B.pk_corp = '" + unitCode + "' and (A.fbillflag=3 or A.fbillflag=4)  ");

    sqlBuff.append(sCondition);

    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ArrayList listId = new ArrayList();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sqlBuff.toString());
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        StockVO stock = new StockVO();
        // cproviderid :
        String cproviderid = rs.getString(1);
        stock.setCprovidermangid(cproviderid == null ? null : cproviderid
            .trim());
        // vbillcode :
        String vbillcode = rs.getString(2);
        stock.setVbillcode(vbillcode == null ? null : vbillcode.trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(3);
        stock.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
        // cgeneralbid :
        String cgeneralbid = rs.getString(4);
        stock.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        stock.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        stock.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninnum :
        Object ninnum = rs.getObject(7);
        stock.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(
            ninnum.toString()));

        String cdeptid = rs.getString(8);
        stock.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(9);
        stock.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // pk_corp :收货公司
        String pk_corp = rs.getString(10);
        stock.setPk_stockcorp(pk_corp == null ? null : pk_corp.trim());
        // cgeneralbb3 :
        // String cgeneralbb3 = rs.getString(13);
        // stock.setCgeneralbb3(cgeneralbb3 == null ? null :
        // cgeneralbb3.trim());
        // ts1 :
        String ts1 = rs.getString(11);
        stock.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(12);
        stock.setTs2(ts2 == null ? null : ts2.trim());
        // ts3 :
        // String ts3 = rs.getString(16);
        // stock.setTs3(ts3 == null ? null : ts3.trim());
        // // vbatchcode :
        String vbatchcode = rs.getString(13);
        stock.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(14);
        stock.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(15);
        stock.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(16);
        stock.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(17);
        stock.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(18);
        stock.setVfree5(vfree5 == null ? null : vfree5.trim());
        // 上层信息
        int index = 19;
        String strTmp = rs.getString(index++);
        stock.setCsourcebillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebilltype(strTmp);
        // 源头信息
        strTmp = rs.getString(index++);
        stock.setCfirstbillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirstbillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirsttype(strTmp);
        // 表体行备注
        strTmp = rs.getString(index++);
        stock.setVmemobody(strTmp);
        // hsl :
        Object hsl = rs.getObject(index++);
        stock.setHsl(PuPubVO.getUFDouble_NullAsZero(hsl));
        // pk_corp :收票公司
        pk_corp = rs.getString(index++);
        stock.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        // zhf add v55
        // 暂估标志
        Object ozgflag = rs.getObject(index++);
        UFBoolean bzgflag = PuPubVO.getUFBoolean_NullAs(ozgflag, new UFBoolean(false));
        stock.setBzgflag(bzgflag);
        // 入库累计采购费用结算次数
        Object feesettletimes = rs.getObject(index++);
        stock.setNfeesettletimes(PuPubVO.getInteger_NullAs(feesettletimes, new Integer(0)));
        // 库存单据类型编码
        String cbilltypecode = rs.getString(index++);
        stock.setVstockbilltype(cbilltypecode);
        // 入库金额
        Object nmny = rs.getObject(index++);
        stock.setNmoney(PuPubVO.getUFDouble_NullAsZero(nmny));
        // 暂估 结算 信息置0
        stock.setNestimoney(new UFDouble(0.0));
        stock.setNestinum(new UFDouble(0.0));
        stock.setNestiprice(new UFDouble(0.0));
        stock.setNaccumsettlemny(new UFDouble(0.0));
        stock.setNaccumsettlenum(new UFDouble(0.0));
        stock.setNprice(new UFDouble(0.0));// 结算平均单价

        // end
        v.addElement(stock);
      }

      if (rs != null)
        rs.close();

    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }
    return stocks;
  }

  /**
   * 方法功能描述：查询满足费用结算条件的调拨入库单进行费用结算
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param unitCode
   * @param sCondition
   * @return
   * @throws BusinessException
   *           <p>
   * @author zhanghongfang
   * @time 2008-7-31 上午09:09:45
   */

  public StockVO[] queryEndTransStock(String unitCode, String sCondition)
      throws BusinessException {

    StringBuffer sqlBuff = new StringBuffer();
    sqlBuff
        .append("select cproviderid,vbillcode,A.cgeneralhid, B.cgeneralbid, B.cinventoryid, pk_invbasdoc, ninnum, nsettlenum1 as naccountnum1,"
            + " nsettlemny1  as naccountmny,  cdptid, cbizid, A.pk_corp, cgeneralbb3, A.ts, B.ts, C.ts, vbatchcode,  vfree1, vfree2, vfree3,  vfree4,"
            + " vfree5, B.csourcebillhid, B.csourcebillbid,  B.csourcetype, B.cfirstbillhid, B.cfirstbillbid,  B.cfirsttype,  B.vnotebody,  B.hsl, "
            + " B.pk_invoicecorp, B.btoinzgflag bzgflag, C.nzgprice1 as estiprice, C.nzgmny1 as estimoney, nfeesettletimes, cbilltypecode,B.nmny");

    //调拨入库单,暂估和结算信息都要写入ic_general_bb3表,所以不用查to_settlelist_b表,
    //如果查它,只能查出结算过的,会漏掉只进行过暂估过的
    sqlBuff
    .append(" from ic_general_h   A,ic_general_bb3 C,bd_invmandoc   D,bd_stordoc     S,ic_general_b   B ");
    
//    sqlBuff
//        .append(" from ic_general_h   A,ic_general_bb3 C,bd_invmandoc   D,bd_stordoc     S,ic_general_b   B   inner join to_settlelist_b "
//            + " on B.cgeneralbid=to_settlelist_b.cothersrcbid and to_settlelist_b.csettlelistid in"
//            + " (select csettlelistid from to_settlelist where bfiflag = 'Y' and dr=0)");

    sqlBuff
        .append(" where A.cwarehouseid = S.pk_stordoc and A.dr = 0 and B.dr = 0 and  A.cgeneralhid = B.cgeneralhid and A.cgeneralhid = C.cgeneralhid "
            + " and B.cgeneralbid = C.cgeneralbid and D.pk_invmandoc = B.cinventoryid");

    sqlBuff
        .append(" and B.pk_corp = '" + unitCode + "' and (abs(C.nsettlenum1) > 0 or coalesce(B.btoinzgflag, 'N'  ) = 'Y' )   and (B.cfirsttype='5C' or B.cfirsttype='5D' or B.cfirsttype='')");

    sqlBuff.append(sCondition);

    StockVO stocks[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    // ArrayList listId = new ArrayList();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sqlBuff.toString());
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        StockVO stock = new StockVO();
        // cproviderid :
        String cproviderid = rs.getString(1);
        stock.setCprovidermangid(cproviderid == null ? null : cproviderid
            .trim());
        // vbillcode :
        String vbillcode = rs.getString(2);
        stock.setVbillcode(vbillcode == null ? null : vbillcode.trim());
        // cgeneralhid :
        String cgeneralhid = rs.getString(3);
        stock.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
        // cgeneralbid :
        String cgeneralbid = rs.getString(4);
        stock.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
        // cmangid :
        String cmangid = rs.getString(5);
        stock.setCmangid(cmangid == null ? null : cmangid.trim());
        // cbaseid :
        String cbaseid = rs.getString(6);
        stock.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        // ninnum :
        Object ninnum = rs.getObject(7);
        stock.setNinnum(PuPubVO.getUFDouble_NullAsZero(ninnum));
        // naccumsettnum :
        Object naccumsettnum = rs.getObject(8);
        stock.setNaccumsettlenum(PuPubVO.getUFDouble_NullAsZero(naccumsettnum));
        // naccumsettmny :
        Object naccumsettmny = rs.getObject(9);
        stock.setNaccumsettlemny(PuPubVO.getUFDouble_NullAsZero(naccumsettmny));
        // cdeptid :
        String cdeptid = rs.getString(10);
        stock.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // coperatorid :
        String coperatorid = rs.getString(11);
        stock.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
        // pk_corp :收货公司
        String pk_corp = rs.getString(12);
        stock.setPk_stockcorp(pk_corp == null ? null : pk_corp.trim());
        // cgeneralbb3 :
        String cgeneralbb3 = rs.getString(13);
        stock.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3.trim());
        // ts1 :
        String ts1 = rs.getString(14);
        stock.setTs1(ts1 == null ? null : ts1.trim());
        // ts2 :
        String ts2 = rs.getString(15);
        stock.setTs2(ts2 == null ? null : ts2.trim());
        // ts3 :
        String ts3 = rs.getString(16);
        stock.setTs3(ts3 == null ? null : ts3.trim());
        // vbatchcode :
        String vbatchcode = rs.getString(17);
        stock.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
        // vfree1 :
        String vfree1 = rs.getString(18);
        stock.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(19);
        stock.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(20);
        stock.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(21);
        stock.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(22);
        stock.setVfree5(vfree5 == null ? null : vfree5.trim());
        // 上层信息
        int index = 23;
        String strTmp = rs.getString(index++);
        stock.setCsourcebillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCsourcebilltype(strTmp);
        // 源头信息
        strTmp = rs.getString(index++);
        stock.setCfirstbillhid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirstbillbid(strTmp);
        strTmp = rs.getString(index++);
        stock.setCfirsttype(strTmp);
        // 表体行备注
        strTmp = rs.getString(index++);
        stock.setVmemobody(strTmp);
        // hsl :
        Object hsl = rs.getObject(index++);
        stock.setHsl(PuPubVO.getUFDouble_NullAsZero(hsl));
        // pk_corp :收票公司
        pk_corp = rs.getString(index++);
        stock.setPk_corp(PuPubVO.getString_TrimZeroLenAsNull(pk_corp));
        //
        // zhf add v55
        Object ozgflag = rs.getObject(index++);
        UFBoolean bzgflag = ozgflag == null ? new UFBoolean(false)
            : new UFBoolean(ozgflag.toString());
        stock.setBzgflag(bzgflag);

        // Object ufnum = rs.getObject(index++);
        // stock.setNestinum(ufnum == null ? new UFDouble(0.0) : new
        // UFDouble(ufnum.toString()));

        Object ufprice = rs.getObject(index++);
        stock.setNestiprice(PuPubVO.getUFDouble_NullAsZero(ufprice));

        Object ufmoney = rs.getObject(index++);
        stock.setNestimoney(PuPubVO.getUFDouble_NullAsZero(ufmoney));

        Object feesettletimes = rs.getObject(index++);
        stock.setNfeesettletimes(feesettletimes == null ? new Integer(0)
            : new Integer(feesettletimes.toString()));

        String cbilltypecode = rs.getString(index++);
        stock.setVstockbilltype(cbilltypecode);
        
        // 入库金额
        Object nmny = rs.getObject(index++);
        stock.setNmoney(PuPubVO.getUFDouble_NullAsZero(nmny));
        
        // zhf add v55 暂估数量==入库数量
        if (stock.getBzgflag().booleanValue()) {
          stock.setNestinum(stock.getNinnum());
        }
        else
          stock.setNestinum(new UFDouble(0.0));
        // end

        // end
        v.addElement(stock);
        //
        // listId.add(stock.getCgeneralbid());
      }
      if (rs != null)
        rs.close();

    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    // 查询组织间和组织内满足费用结算调拨入库单 同采购其他入库单查询条件相同直接调用其功能函数
    sCondition += " and (B.cfirsttype='5E' or B.cfirsttype='5I' or B.cfirsttype='')";
    StockVO[] stockVos = queryEndOtherStock(unitCode, sCondition);

    if (stockVos != null) {
      for (StockVO vo : stockVos) {
        v.add(vo);
      }
    }

    stocks = new StockVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(stocks);
    }
    return stocks;
  }

  /**
   * 方法功能描述：生成费用结算明细子表
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param feeDetVos
   * @param strLoginUnit
   * @return
   * @throws java.sql.SQLException
   *           <p>
   * @author zhanghongfang
   * @time 2008-7-31 上午09:10:31
   */
  public String[] insertFeeDetail(FeeDetailVO[] feeDetVos, String strLoginUnit)
      throws java.sql.SQLException {

    String sql = "insert into po_settle_feedetail(cfeedetailid,csettlebill_bid,csettlebillid,vadjustbilltype,cadjustbillid,cadjustbillbid) values(?, ?, ?, ?, ?, ?)";

    String[] key = new String[feeDetVos.length];
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);

      for (int i = 0; i < key.length; i++) {
        key[i] = getOID(strLoginUnit);
        stmt.setString(1, key[i]);
        if (feeDetVos[i].getCsettlebill_bid() == null) {
          stmt.setNull(2, Types.CHAR);
        }
        else {
          stmt.setString(2, feeDetVos[i].getCsettlebill_bid());
        }

        if (feeDetVos[i].getCsettlebillid() == null) {
          stmt.setNull(3, Types.CHAR);
        }
        else {
          stmt.setString(3, feeDetVos[i].getCsettlebillid());
        }
        if (feeDetVos[i].getVadjustbilltype() == null) {
          stmt.setNull(4, Types.CHAR);
        }
        else {
          stmt.setString(4, feeDetVos[i].getVadjustbilltype());
        }
        if (feeDetVos[i].getCadjustbillid() == null) {
          stmt.setNull(5, Types.CHAR);
        }
        else {
          stmt.setString(5, feeDetVos[i].getCadjustbillid());
        }
        if (feeDetVos[i].getCadjustbillbid() == null) {
          stmt.setNull(6, Types.CHAR);
        }
        else {
          stmt.setString(6, feeDetVos[i].getCadjustbillbid());
        }
        //			
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    return key;
  }

  /*
   * 查询返回哈希表：{stockrow + 费用存货管理ID = 已经做过暂估费用冲销的行} @para listStockRowId 入库单行ID
   * @para listFeeMangId 费用存货管理ID
   * 
   * @since v55
   */
  public HashMap<String, String> queryFeiYongFirstHash(
      ArrayList<String> listStockRowId, ArrayList<String> listFeeMangId)
      throws BusinessException {
    //
    HashMap<String, String> mapStockRowIdMangId = new HashMap<String, String>();
    // 按入库单行匹配数据库中结算单行，找出此次参与分摊的入库单行中已经做过第一次费用结算的
    TempTableUtil tmpTool = new TempTableUtil();
    //
    StringBuffer sbSql = new StringBuffer("select b.cstockrow, tmp.cmangid ");
    sbSql.append("from po_settlebill_b b,");
    // 费用存货ID+对应的结算单ID
    sbSql
        .append("(select distinct cmangid,csettlebillid from po_settlebill_b where (cstockrow is null or cstockrow ='') ");
    sbSql.append("and cmangid in " + tmpTool.getSubSql(listFeeMangId)
        + ") tmp ");
    // 将费用行与非费用行做笛卡尔乘积
    sbSql.append("where b.csettlebillid = tmp.csettlebillid ");
    sbSql.append("and b.cstockrow in " + tmpTool.getSubSql(listStockRowId)
        + " ");
    //
    sbSql.append("and b.byffirstsettle = 'Y' and b.dr = 0 ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable t = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      //
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        mapStockRowIdMangId.put(rs.getString(1) + rs.getString(2), "");
      }

    }
    catch (Exception e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    return mapStockRowIdMangId;
  }

  /**
   * 方法功能描述：返回入库单行参与费用结算次数（可用于反暂时控制）
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param stockrowList
   * @return
   * @throws BusinessException
   *           <p>
   * @author zhanghongfang
   * @time 2008-7-31 上午09:11:06
   */
  public HashMap getFeeSettleTimes(ArrayList<String> stockrowList)
      throws BusinessException {
    HashMap feeSettleMap = new HashMap();
    if (stockrowList != null && stockrowList.size() > 0) {
      try {
        feeSettleMap = new PubDMO().queryArrayValues("ic_general_b",
            "cgeneralbid", new String[] {"nfeesettletimes"}, stockrowList.toArray(new String[stockrowList.size()]), " dr=0");
      }
      catch (Exception e) {
        SCMEnv.out(e);
        PubDMO.throwBusinessException(e);
      }
    }
    return feeSettleMap;
  }
  
  /**
   * 
   * 方法功能描述：查询入库单暂估应付标志。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param vos
   * @return Map<String,Object[]> (cgeneralbid,Object[0]=bzgyfflag)
   * @throws BusinessException
   * <p>
   * @author zhaoyha
   * @time 2009-8-5 下午01:34:27
   */
  public Map<String,Object[]> queryStockZGYF(GeneralBillVO[] vos) throws BusinessException {
    Map<String,Object[]> zgyfInfo = null;
    if (vos != null && vos.length > 0) {
      List<String> ids=new ArrayList<String>();
      for (GeneralBillVO vo : vos) {
        if(null!=vo.getItemVOs() && vo.getItemVOs().length>0)
          ids.addAll(Arrays.asList(vo.getBodyIds()));
      }
      try {
        zgyfInfo = new PubDMO().queryArrayValues("ic_general_b",
            "cgeneralbid", new String[] {"bzgyfflag"}, ids.toArray(new String[ids.size()]), " dr=0");
      }
      catch (Exception e) {
        SCMEnv.out(e);
        PubDMO.throwBusinessException(e);
      }
    }
    return zgyfInfo;
  }
}